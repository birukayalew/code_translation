   Compiling rust v0.0.0 (/mnt/c/Users/sebir/Documents/summer/Research/c2saferrust/coreutils/src/split/rust)
   Compiling libc v0.2.158
warning: unused label
   --> src/xstrtoimax.rs:433:5
    |
433 |     'c_2247: {
    |     ^^^^^^^
    |
    = note: `#[warn(unused_labels)]` on by default

warning: unused label
   --> src/xstrtoumax.rs:482:5
    |
482 |     'c_2256: {
    |     ^^^^^^^

warning: redundant else block
  --> src/c_strcasecmp.rs:42:12
   |
42 |       } else {
   |  ____________^
43 | |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
44 | |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
45 | |     };
   | |_____^
   |
   = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/c_strcasecmp.rs:39:12
   |
39 |         <= 2147483647 as libc::c_int
   |            ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/closeout.rs:122:16
    |
122 |           } else {
    |  ________________^
123 | |             if 0 != 0 {
124 | |                 error(
125 | |                     0 as libc::c_int,
...   |
160 | |             };
161 | |         }
    | |_________^
    |
    = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
122 ~         } else if 0 != 0 {
123 +             error(
124 +                 0 as libc::c_int,
125 +                 *__errno_location(),
126 +                 b"%s\0" as *const u8 as *const libc::c_char,
127 +                 write_error,
128 +             );
129 +             if 0 as libc::c_int != 0 as libc::c_int {
130 +                 unreachable!();
131 +             } else {};
132 +         } else {
133 +             ({
134 +                 let __errstatus: libc::c_int = 0 as libc::c_int;
135 +                 error(
136 +                     __errstatus,
137 +                     *__errno_location(),
138 +                     b"%s\0" as *const u8 as *const libc::c_char,
139 +                     write_error,
140 +                 );
141 +                 if __errstatus != 0 as libc::c_int {
142 +                     unreachable!();
143 +                 } else {};
144 +                 
145 +             });
146 +             ({
147 +                 let __errstatus: libc::c_int = 0 as libc::c_int;
148 +                 error(
149 +                     __errstatus,
150 +                     *__errno_location(),
151 +                     b"%s\0" as *const u8 as *const libc::c_char,
152 +                     write_error,
153 +                 );
154 +                 if __errstatus != 0 as libc::c_int {
155 +                     unreachable!();
156 +                 } else {};
157 +                 
158 +             });
159 +         }
    |

warning: long literal lacking separators
  --> src/dup_safer_flag.rs:12:19
   |
12 |         if flag & 0o2000000 as libc::c_int != 0 {
   |                   ^^^^^^^^^ help: consider: `0o2_000_000`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:40:39
   |
40 |                     current_block_7 = 4046302689674688614;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `4_046_302_689_674_688_614`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:43:39
   |
43 |                     current_block_7 = 4046302689674688614;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `4_046_302_689_674_688_614`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:46:39
   |
46 |                     current_block_7 = 6453289516101043606;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `6_453_289_516_101_043_606`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:49:39
   |
49 |                     current_block_7 = 13722137258147953758;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_722_137_258_147_953_758`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:52:39
   |
52 |                     current_block_7 = 12766345184754617216;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_766_345_184_754_617_216`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:55:39
   |
55 |                     current_block_7 = 6940526744265269810;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `6_940_526_744_265_269_810`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:58:39
   |
58 |                     current_block_7 = 7022052692272556539;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_022_052_692_272_556_539`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:61:39
   |
61 |                     current_block_7 = 8871774344836507656;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `8_871_774_344_836_507_656`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:64:39
   |
64 |                     current_block_7 = 8871774344836507656;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `8_871_774_344_836_507_656`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:67:39
   |
67 |                     current_block_7 = 5351856672558463576;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `5_351_856_672_558_463_576`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:70:39
   |
70 |                     current_block_7 = 9332010126091029806;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_332_010_126_091_029_806`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:73:39
   |
73 |                     current_block_7 = 17966572639739034653;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_966_572_639_739_034_653`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:76:39
   |
76 |                     current_block_7 = 15280576717888187136;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_280_576_717_888_187_136`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:79:39
   |
79 |                     current_block_7 = 12013198723313890981;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_013_198_723_313_890_981`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:82:39
   |
82 |                     current_block_7 = 12013198723313890981;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_013_198_723_313_890_981`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:85:39
   |
85 |                     current_block_7 = 14034191772621753005;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_034_191_772_621_753_005`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:90:39
   |
90 |                     current_block_7 = 7175849428784450219;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_175_849_428_784_450_219`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:94:17
   |
94 |                 4046302689674688614 => {
   |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_046_302_689_674_688_614`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:95:39
   |
95 |                     current_block_7 = 6453289516101043606;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `6_453_289_516_101_043_606`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:97:17
   |
97 |                 8871774344836507656 => {
   |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `8_871_774_344_836_507_656`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:98:39
   |
98 |                     current_block_7 = 5351856672558463576;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `5_351_856_672_558_463_576`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:100:17
    |
100 |                 12013198723313890981 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_013_198_723_313_890_981`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:101:39
    |
101 |                     current_block_7 = 14034191772621753005;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_034_191_772_621_753_005`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:106:17
    |
106 |                 6453289516101043606 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `6_453_289_516_101_043_606`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:107:39
    |
107 |                     current_block_7 = 13722137258147953758;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_722_137_258_147_953_758`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:109:17
    |
109 |                 5351856672558463576 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `5_351_856_672_558_463_576`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:110:39
    |
110 |                     current_block_7 = 9332010126091029806;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_332_010_126_091_029_806`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:115:17
    |
115 |                 13722137258147953758 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_722_137_258_147_953_758`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:116:39
    |
116 |                     current_block_7 = 12766345184754617216;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_766_345_184_754_617_216`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:118:17
    |
118 |                 9332010126091029806 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `9_332_010_126_091_029_806`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:119:39
    |
119 |                     current_block_7 = 17966572639739034653;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_966_572_639_739_034_653`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:124:17
    |
124 |                 12766345184754617216 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_766_345_184_754_617_216`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:125:39
    |
125 |                     current_block_7 = 6940526744265269810;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `6_940_526_744_265_269_810`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:127:17
    |
127 |                 17966572639739034653 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_966_572_639_739_034_653`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:128:39
    |
128 |                     current_block_7 = 15280576717888187136;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_280_576_717_888_187_136`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:133:17
    |
133 |                 6940526744265269810 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `6_940_526_744_265_269_810`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:134:39
    |
134 |                     current_block_7 = 7022052692272556539;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_022_052_692_272_556_539`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:136:17
    |
136 |                 15280576717888187136 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_280_576_717_888_187_136`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:137:39
    |
137 |                     current_block_7 = 14034191772621753005;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_034_191_772_621_753_005`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:142:17
    |
142 |                 7022052692272556539 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `7_022_052_692_272_556_539`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:145:17
    |
145 |                 14034191772621753005 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_034_191_772_621_753_005`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/fd_reopen.rs:20:12
   |
20 |       } else {
   |  ____________^
21 | |         let mut fd2: libc::c_int = dup2(fd, desired_fd);
22 | |         let mut saved_errno: libc::c_int = *__errno_location();
23 | |         close(fd);
24 | |         *__errno_location() = saved_errno;
25 | |         return fd2;
26 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/full_write.rs:23:16
   |
23 |           } else {
   |  ________________^
24 | |             total = (total as libc::c_ulong).wrapping_add(n_rw) as size_t as size_t;
25 | |             ptr = ptr.offset(n_rw as isize);
26 | |             count = (count as libc::c_ulong).wrapping_sub(n_rw) as size_t as size_t;
27 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/ialloc.rs:36:12
   |
36 |       } else {
   |  ____________^
37 | |         return _gl_alloc_nomem()
38 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/ialloc.rs:24:30
   |
24 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:25:34
   |
25 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                                  ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:44:9
   |
44 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:50:9
   |
50 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/ialloc.rs:68:12
   |
68 |       } else {
   |  ____________^
69 | |         return _gl_alloc_nomem()
70 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/ialloc.rs:65:30
   |
65 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:76:37
   |
76 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/localcharset.rs:8:36
  |
8 | pub const _NL_NUM: C2RustUnnamed = 786449;
  |                                    ^^^^^^ help: consider: `786_449`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/localcharset.rs:9:54
  |
9 | pub const _NL_NUM_LC_IDENTIFICATION: C2RustUnnamed = 786448;
  |                                                      ^^^^^^ help: consider: `786_448`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:10:55
   |
10 | pub const _NL_IDENTIFICATION_CODESET: C2RustUnnamed = 786447;
   |                                                       ^^^^^^ help: consider: `786_447`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:11:56
   |
11 | pub const _NL_IDENTIFICATION_CATEGORY: C2RustUnnamed = 786446;
   |                                                        ^^^^^^ help: consider: `786_446`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:12:52
   |
12 | pub const _NL_IDENTIFICATION_DATE: C2RustUnnamed = 786445;
   |                                                    ^^^^^^ help: consider: `786_445`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:13:56
   |
13 | pub const _NL_IDENTIFICATION_REVISION: C2RustUnnamed = 786444;
   |                                                        ^^^^^^ help: consider: `786_444`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:14:60
   |
14 | pub const _NL_IDENTIFICATION_ABBREVIATION: C2RustUnnamed = 786443;
   |                                                            ^^^^^^ help: consider: `786_443`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:15:59
   |
15 | pub const _NL_IDENTIFICATION_APPLICATION: C2RustUnnamed = 786442;
   |                                                           ^^^^^^ help: consider: `786_442`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:16:56
   |
16 | pub const _NL_IDENTIFICATION_AUDIENCE: C2RustUnnamed = 786441;
   |                                                        ^^^^^^ help: consider: `786_441`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:17:57
   |
17 | pub const _NL_IDENTIFICATION_TERRITORY: C2RustUnnamed = 786440;
   |                                                         ^^^^^^ help: consider: `786_440`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:18:56
   |
18 | pub const _NL_IDENTIFICATION_LANGUAGE: C2RustUnnamed = 786439;
   |                                                        ^^^^^^ help: consider: `786_439`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:19:51
   |
19 | pub const _NL_IDENTIFICATION_FAX: C2RustUnnamed = 786438;
   |                                                   ^^^^^^ help: consider: `786_438`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:20:51
   |
20 | pub const _NL_IDENTIFICATION_TEL: C2RustUnnamed = 786437;
   |                                                   ^^^^^^ help: consider: `786_437`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:21:53
   |
21 | pub const _NL_IDENTIFICATION_EMAIL: C2RustUnnamed = 786436;
   |                                                     ^^^^^^ help: consider: `786_436`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:22:55
   |
22 | pub const _NL_IDENTIFICATION_CONTACT: C2RustUnnamed = 786435;
   |                                                       ^^^^^^ help: consider: `786_435`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:23:55
   |
23 | pub const _NL_IDENTIFICATION_ADDRESS: C2RustUnnamed = 786434;
   |                                                       ^^^^^^ help: consider: `786_434`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:24:54
   |
24 | pub const _NL_IDENTIFICATION_SOURCE: C2RustUnnamed = 786433;
   |                                                      ^^^^^^ help: consider: `786_433`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:25:53
   |
25 | pub const _NL_IDENTIFICATION_TITLE: C2RustUnnamed = 786432;
   |                                                     ^^^^^^ help: consider: `786_432`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:26:51
   |
26 | pub const _NL_NUM_LC_MEASUREMENT: C2RustUnnamed = 720898;
   |                                                   ^^^^^^ help: consider: `720_898`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:27:52
   |
27 | pub const _NL_MEASUREMENT_CODESET: C2RustUnnamed = 720897;
   |                                                    ^^^^^^ help: consider: `720_897`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:28:56
   |
28 | pub const _NL_MEASUREMENT_MEASUREMENT: C2RustUnnamed = 720896;
   |                                                        ^^^^^^ help: consider: `720_896`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:29:49
   |
29 | pub const _NL_NUM_LC_TELEPHONE: C2RustUnnamed = 655365;
   |                                                 ^^^^^^ help: consider: `655_365`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:30:50
   |
30 | pub const _NL_TELEPHONE_CODESET: C2RustUnnamed = 655364;
   |                                                  ^^^^^^ help: consider: `655_364`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:31:53
   |
31 | pub const _NL_TELEPHONE_INT_PREFIX: C2RustUnnamed = 655363;
   |                                                     ^^^^^^ help: consider: `655_363`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:32:53
   |
32 | pub const _NL_TELEPHONE_INT_SELECT: C2RustUnnamed = 655362;
   |                                                     ^^^^^^ help: consider: `655_362`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:33:54
   |
33 | pub const _NL_TELEPHONE_TEL_DOM_FMT: C2RustUnnamed = 655361;
   |                                                      ^^^^^^ help: consider: `655_361`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:34:54
   |
34 | pub const _NL_TELEPHONE_TEL_INT_FMT: C2RustUnnamed = 655360;
   |                                                      ^^^^^^ help: consider: `655_360`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:35:47
   |
35 | pub const _NL_NUM_LC_ADDRESS: C2RustUnnamed = 589837;
   |                                               ^^^^^^ help: consider: `589_837`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:36:48
   |
36 | pub const _NL_ADDRESS_CODESET: C2RustUnnamed = 589836;
   |                                                ^^^^^^ help: consider: `589_836`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:37:49
   |
37 | pub const _NL_ADDRESS_LANG_LIB: C2RustUnnamed = 589835;
   |                                                 ^^^^^^ help: consider: `589_835`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:38:50
   |
38 | pub const _NL_ADDRESS_LANG_TERM: C2RustUnnamed = 589834;
   |                                                  ^^^^^^ help: consider: `589_834`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:39:48
   |
39 | pub const _NL_ADDRESS_LANG_AB: C2RustUnnamed = 589833;
   |                                                ^^^^^^ help: consider: `589_833`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:40:50
   |
40 | pub const _NL_ADDRESS_LANG_NAME: C2RustUnnamed = 589832;
   |                                                  ^^^^^^ help: consider: `589_832`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:41:53
   |
41 | pub const _NL_ADDRESS_COUNTRY_ISBN: C2RustUnnamed = 589831;
   |                                                     ^^^^^^ help: consider: `589_831`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:42:52
   |
42 | pub const _NL_ADDRESS_COUNTRY_NUM: C2RustUnnamed = 589830;
   |                                                    ^^^^^^ help: consider: `589_830`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:43:52
   |
43 | pub const _NL_ADDRESS_COUNTRY_CAR: C2RustUnnamed = 589829;
   |                                                    ^^^^^^ help: consider: `589_829`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:44:52
   |
44 | pub const _NL_ADDRESS_COUNTRY_AB3: C2RustUnnamed = 589828;
   |                                                    ^^^^^^ help: consider: `589_828`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:45:52
   |
45 | pub const _NL_ADDRESS_COUNTRY_AB2: C2RustUnnamed = 589827;
   |                                                    ^^^^^^ help: consider: `589_827`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:46:53
   |
46 | pub const _NL_ADDRESS_COUNTRY_POST: C2RustUnnamed = 589826;
   |                                                     ^^^^^^ help: consider: `589_826`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:47:53
   |
47 | pub const _NL_ADDRESS_COUNTRY_NAME: C2RustUnnamed = 589825;
   |                                                     ^^^^^^ help: consider: `589_825`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:48:51
   |
48 | pub const _NL_ADDRESS_POSTAL_FMT: C2RustUnnamed = 589824;
   |                                                   ^^^^^^ help: consider: `589_824`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:49:44
   |
49 | pub const _NL_NUM_LC_NAME: C2RustUnnamed = 524295;
   |                                            ^^^^^^ help: consider: `524_295`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:50:45
   |
50 | pub const _NL_NAME_CODESET: C2RustUnnamed = 524294;
   |                                             ^^^^^^ help: consider: `524_294`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:51:45
   |
51 | pub const _NL_NAME_NAME_MS: C2RustUnnamed = 524293;
   |                                             ^^^^^^ help: consider: `524_293`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:52:47
   |
52 | pub const _NL_NAME_NAME_MISS: C2RustUnnamed = 524292;
   |                                               ^^^^^^ help: consider: `524_292`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:53:46
   |
53 | pub const _NL_NAME_NAME_MRS: C2RustUnnamed = 524291;
   |                                              ^^^^^^ help: consider: `524_291`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:54:45
   |
54 | pub const _NL_NAME_NAME_MR: C2RustUnnamed = 524290;
   |                                             ^^^^^^ help: consider: `524_290`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:55:46
   |
55 | pub const _NL_NAME_NAME_GEN: C2RustUnnamed = 524289;
   |                                              ^^^^^^ help: consider: `524_289`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:56:46
   |
56 | pub const _NL_NAME_NAME_FMT: C2RustUnnamed = 524288;
   |                                              ^^^^^^ help: consider: `524_288`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:57:45
   |
57 | pub const _NL_NUM_LC_PAPER: C2RustUnnamed = 458755;
   |                                             ^^^^^^ help: consider: `458_755`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:58:46
   |
58 | pub const _NL_PAPER_CODESET: C2RustUnnamed = 458754;
   |                                              ^^^^^^ help: consider: `458_754`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:59:44
   |
59 | pub const _NL_PAPER_WIDTH: C2RustUnnamed = 458753;
   |                                            ^^^^^^ help: consider: `458_753`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:60:45
   |
60 | pub const _NL_PAPER_HEIGHT: C2RustUnnamed = 458752;
   |                                             ^^^^^^ help: consider: `458_752`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:61:48
   |
61 | pub const _NL_NUM_LC_MESSAGES: C2RustUnnamed = 327685;
   |                                                ^^^^^^ help: consider: `327_685`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:62:49
   |
62 | pub const _NL_MESSAGES_CODESET: C2RustUnnamed = 327684;
   |                                                 ^^^^^^ help: consider: `327_684`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:63:36
   |
63 | pub const __NOSTR: C2RustUnnamed = 327683;
   |                                    ^^^^^^ help: consider: `327_683`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:64:37
   |
64 | pub const __YESSTR: C2RustUnnamed = 327682;
   |                                     ^^^^^^ help: consider: `327_682`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:65:37
   |
65 | pub const __NOEXPR: C2RustUnnamed = 327681;
   |                                     ^^^^^^ help: consider: `327_681`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:66:38
   |
66 | pub const __YESEXPR: C2RustUnnamed = 327680;
   |                                      ^^^^^^ help: consider: `327_680`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:76:48
   |
76 | pub const _NL_NUM_LC_MONETARY: C2RustUnnamed = 262190;
   |                                                ^^^^^^ help: consider: `262_190`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:77:49
   |
77 | pub const _NL_MONETARY_CODESET: C2RustUnnamed = 262189;
   |                                                 ^^^^^^ help: consider: `262_189`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:78:58
   |
78 | pub const _NL_MONETARY_THOUSANDS_SEP_WC: C2RustUnnamed = 262188;
   |                                                          ^^^^^^ help: consider: `262_188`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:79:58
   |
79 | pub const _NL_MONETARY_DECIMAL_POINT_WC: C2RustUnnamed = 262187;
   |                                                          ^^^^^^ help: consider: `262_187`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:80:57
   |
80 | pub const _NL_MONETARY_CONVERSION_RATE: C2RustUnnamed = 262186;
   |                                                         ^^^^^^ help: consider: `262_186`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:81:54
   |
81 | pub const _NL_MONETARY_DUO_VALID_TO: C2RustUnnamed = 262185;
   |                                                      ^^^^^^ help: consider: `262_185`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:82:56
   |
82 | pub const _NL_MONETARY_DUO_VALID_FROM: C2RustUnnamed = 262184;
   |                                                        ^^^^^^ help: consider: `262_184`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:83:54
   |
83 | pub const _NL_MONETARY_UNO_VALID_TO: C2RustUnnamed = 262183;
   |                                                      ^^^^^^ help: consider: `262_183`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:84:56
   |
84 | pub const _NL_MONETARY_UNO_VALID_FROM: C2RustUnnamed = 262182;
   |                                                        ^^^^^^ help: consider: `262_182`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:85:61
   |
85 | pub const _NL_MONETARY_DUO_INT_N_SIGN_POSN: C2RustUnnamed = 262181;
   |                                                             ^^^^^^ help: consider: `262_181`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:86:61
   |
86 | pub const _NL_MONETARY_DUO_INT_P_SIGN_POSN: C2RustUnnamed = 262180;
   |                                                             ^^^^^^ help: consider: `262_180`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:87:57
   |
87 | pub const _NL_MONETARY_DUO_N_SIGN_POSN: C2RustUnnamed = 262179;
   |                                                         ^^^^^^ help: consider: `262_179`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:88:57
   |
88 | pub const _NL_MONETARY_DUO_P_SIGN_POSN: C2RustUnnamed = 262178;
   |                                                         ^^^^^^ help: consider: `262_178`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:89:64
   |
89 | pub const _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE: C2RustUnnamed = 262177;
   |                                                                ^^^^^^ help: consider: `262_177`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:90:63
   |
90 | pub const _NL_MONETARY_DUO_INT_N_CS_PRECEDES: C2RustUnnamed = 262176;
   |                                                               ^^^^^^ help: consider: `262_176`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:91:64
   |
91 | pub const _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE: C2RustUnnamed = 262175;
   |                                                                ^^^^^^ help: consider: `262_175`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:92:63
   |
92 | pub const _NL_MONETARY_DUO_INT_P_CS_PRECEDES: C2RustUnnamed = 262174;
   |                                                               ^^^^^^ help: consider: `262_174`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:93:60
   |
93 | pub const _NL_MONETARY_DUO_N_SEP_BY_SPACE: C2RustUnnamed = 262173;
   |                                                            ^^^^^^ help: consider: `262_173`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:94:59
   |
94 | pub const _NL_MONETARY_DUO_N_CS_PRECEDES: C2RustUnnamed = 262172;
   |                                                           ^^^^^^ help: consider: `262_172`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:95:60
   |
95 | pub const _NL_MONETARY_DUO_P_SEP_BY_SPACE: C2RustUnnamed = 262171;
   |                                                            ^^^^^^ help: consider: `262_171`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:96:59
   |
96 | pub const _NL_MONETARY_DUO_P_CS_PRECEDES: C2RustUnnamed = 262170;
   |                                                           ^^^^^^ help: consider: `262_170`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:97:57
   |
97 | pub const _NL_MONETARY_DUO_FRAC_DIGITS: C2RustUnnamed = 262169;
   |                                                         ^^^^^^ help: consider: `262_169`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:98:61
   |
98 | pub const _NL_MONETARY_DUO_INT_FRAC_DIGITS: C2RustUnnamed = 262168;
   |                                                             ^^^^^^ help: consider: `262_168`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:99:61
   |
99 | pub const _NL_MONETARY_DUO_CURRENCY_SYMBOL: C2RustUnnamed = 262167;
   |                                                             ^^^^^^ help: consider: `262_167`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:100:61
    |
100 | pub const _NL_MONETARY_DUO_INT_CURR_SYMBOL: C2RustUnnamed = 262166;
    |                                                             ^^^^^^ help: consider: `262_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:101:46
    |
101 | pub const __INT_N_SIGN_POSN: C2RustUnnamed = 262165;
    |                                              ^^^^^^ help: consider: `262_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:102:46
    |
102 | pub const __INT_P_SIGN_POSN: C2RustUnnamed = 262164;
    |                                              ^^^^^^ help: consider: `262_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:103:49
    |
103 | pub const __INT_N_SEP_BY_SPACE: C2RustUnnamed = 262163;
    |                                                 ^^^^^^ help: consider: `262_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:104:48
    |
104 | pub const __INT_N_CS_PRECEDES: C2RustUnnamed = 262162;
    |                                                ^^^^^^ help: consider: `262_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:105:49
    |
105 | pub const __INT_P_SEP_BY_SPACE: C2RustUnnamed = 262161;
    |                                                 ^^^^^^ help: consider: `262_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:106:48
    |
106 | pub const __INT_P_CS_PRECEDES: C2RustUnnamed = 262160;
    |                                                ^^^^^^ help: consider: `262_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:107:50
    |
107 | pub const _NL_MONETARY_CRNCYSTR: C2RustUnnamed = 262159;
    |                                                  ^^^^^^ help: consider: `262_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:108:42
    |
108 | pub const __N_SIGN_POSN: C2RustUnnamed = 262158;
    |                                          ^^^^^^ help: consider: `262_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:109:42
    |
109 | pub const __P_SIGN_POSN: C2RustUnnamed = 262157;
    |                                          ^^^^^^ help: consider: `262_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:110:45
    |
110 | pub const __N_SEP_BY_SPACE: C2RustUnnamed = 262156;
    |                                             ^^^^^^ help: consider: `262_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:111:44
    |
111 | pub const __N_CS_PRECEDES: C2RustUnnamed = 262155;
    |                                            ^^^^^^ help: consider: `262_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:112:45
    |
112 | pub const __P_SEP_BY_SPACE: C2RustUnnamed = 262154;
    |                                             ^^^^^^ help: consider: `262_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:113:44
    |
113 | pub const __P_CS_PRECEDES: C2RustUnnamed = 262153;
    |                                            ^^^^^^ help: consider: `262_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:114:42
    |
114 | pub const __FRAC_DIGITS: C2RustUnnamed = 262152;
    |                                          ^^^^^^ help: consider: `262_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:115:46
    |
115 | pub const __INT_FRAC_DIGITS: C2RustUnnamed = 262151;
    |                                              ^^^^^^ help: consider: `262_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:116:44
    |
116 | pub const __NEGATIVE_SIGN: C2RustUnnamed = 262150;
    |                                            ^^^^^^ help: consider: `262_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:117:44
    |
117 | pub const __POSITIVE_SIGN: C2RustUnnamed = 262149;
    |                                            ^^^^^^ help: consider: `262_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:118:43
    |
118 | pub const __MON_GROUPING: C2RustUnnamed = 262148;
    |                                           ^^^^^^ help: consider: `262_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:119:48
    |
119 | pub const __MON_THOUSANDS_SEP: C2RustUnnamed = 262147;
    |                                                ^^^^^^ help: consider: `262_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:120:48
    |
120 | pub const __MON_DECIMAL_POINT: C2RustUnnamed = 262146;
    |                                                ^^^^^^ help: consider: `262_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:121:46
    |
121 | pub const __CURRENCY_SYMBOL: C2RustUnnamed = 262145;
    |                                              ^^^^^^ help: consider: `262_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:122:46
    |
122 | pub const __INT_CURR_SYMBOL: C2RustUnnamed = 262144;
    |                                              ^^^^^^ help: consider: `262_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:210:47
    |
210 | pub const _NL_NUM_LC_COLLATE: C2RustUnnamed = 196627;
    |                                               ^^^^^^ help: consider: `196_627`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:211:48
    |
211 | pub const _NL_COLLATE_CODESET: C2RustUnnamed = 196626;
    |                                                ^^^^^^ help: consider: `196_626`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:212:50
    |
212 | pub const _NL_COLLATE_COLLSEQWC: C2RustUnnamed = 196625;
    |                                                  ^^^^^^ help: consider: `196_625`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:213:50
    |
213 | pub const _NL_COLLATE_COLLSEQMB: C2RustUnnamed = 196624;
    |                                                  ^^^^^^ help: consider: `196_624`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:214:53
    |
214 | pub const _NL_COLLATE_SYMB_EXTRAMB: C2RustUnnamed = 196623;
    |                                                     ^^^^^^ help: consider: `196_623`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:215:53
    |
215 | pub const _NL_COLLATE_SYMB_TABLEMB: C2RustUnnamed = 196622;
    |                                                     ^^^^^^ help: consider: `196_622`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:216:57
    |
216 | pub const _NL_COLLATE_SYMB_HASH_SIZEMB: C2RustUnnamed = 196621;
    |                                                         ^^^^^^ help: consider: `196_621`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:217:51
    |
217 | pub const _NL_COLLATE_INDIRECTWC: C2RustUnnamed = 196620;
    |                                                   ^^^^^^ help: consider: `196_620`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:218:48
    |
218 | pub const _NL_COLLATE_EXTRAWC: C2RustUnnamed = 196619;
    |                                                ^^^^^^ help: consider: `196_619`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:219:49
    |
219 | pub const _NL_COLLATE_WEIGHTWC: C2RustUnnamed = 196618;
    |                                                 ^^^^^^ help: consider: `196_618`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:220:48
    |
220 | pub const _NL_COLLATE_TABLEWC: C2RustUnnamed = 196617;
    |                                                ^^^^^^ help: consider: `196_617`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:221:45
    |
221 | pub const _NL_COLLATE_GAP3: C2RustUnnamed = 196616;
    |                                             ^^^^^^ help: consider: `196_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:222:45
    |
222 | pub const _NL_COLLATE_GAP2: C2RustUnnamed = 196615;
    |                                             ^^^^^^ help: consider: `196_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:223:45
    |
223 | pub const _NL_COLLATE_GAP1: C2RustUnnamed = 196614;
    |                                             ^^^^^^ help: consider: `196_614`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:224:51
    |
224 | pub const _NL_COLLATE_INDIRECTMB: C2RustUnnamed = 196613;
    |                                                   ^^^^^^ help: consider: `196_613`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:225:48
    |
225 | pub const _NL_COLLATE_EXTRAMB: C2RustUnnamed = 196612;
    |                                                ^^^^^^ help: consider: `196_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:226:49
    |
226 | pub const _NL_COLLATE_WEIGHTMB: C2RustUnnamed = 196611;
    |                                                 ^^^^^^ help: consider: `196_611`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:227:48
    |
227 | pub const _NL_COLLATE_TABLEMB: C2RustUnnamed = 196610;
    |                                                ^^^^^^ help: consider: `196_610`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:228:49
    |
228 | pub const _NL_COLLATE_RULESETS: C2RustUnnamed = 196609;
    |                                                 ^^^^^^ help: consider: `196_609`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:229:47
    |
229 | pub const _NL_COLLATE_NRULES: C2RustUnnamed = 196608;
    |                                               ^^^^^^ help: consider: `196_608`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:230:44
    |
230 | pub const _NL_NUM_LC_TIME: C2RustUnnamed = 131231;
    |                                            ^^^^^^ help: consider: `131_231`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:231:45
    |
231 | pub const _NL_WABALTMON_12: C2RustUnnamed = 131230;
    |                                             ^^^^^^ help: consider: `131_230`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:232:45
    |
232 | pub const _NL_WABALTMON_11: C2RustUnnamed = 131229;
    |                                             ^^^^^^ help: consider: `131_229`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:233:45
    |
233 | pub const _NL_WABALTMON_10: C2RustUnnamed = 131228;
    |                                             ^^^^^^ help: consider: `131_228`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:234:44
    |
234 | pub const _NL_WABALTMON_9: C2RustUnnamed = 131227;
    |                                            ^^^^^^ help: consider: `131_227`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:235:44
    |
235 | pub const _NL_WABALTMON_8: C2RustUnnamed = 131226;
    |                                            ^^^^^^ help: consider: `131_226`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:236:44
    |
236 | pub const _NL_WABALTMON_7: C2RustUnnamed = 131225;
    |                                            ^^^^^^ help: consider: `131_225`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:237:44
    |
237 | pub const _NL_WABALTMON_6: C2RustUnnamed = 131224;
    |                                            ^^^^^^ help: consider: `131_224`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:238:44
    |
238 | pub const _NL_WABALTMON_5: C2RustUnnamed = 131223;
    |                                            ^^^^^^ help: consider: `131_223`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:239:44
    |
239 | pub const _NL_WABALTMON_4: C2RustUnnamed = 131222;
    |                                            ^^^^^^ help: consider: `131_222`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:240:44
    |
240 | pub const _NL_WABALTMON_3: C2RustUnnamed = 131221;
    |                                            ^^^^^^ help: consider: `131_221`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:241:44
    |
241 | pub const _NL_WABALTMON_2: C2RustUnnamed = 131220;
    |                                            ^^^^^^ help: consider: `131_220`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:242:44
    |
242 | pub const _NL_WABALTMON_1: C2RustUnnamed = 131219;
    |                                            ^^^^^^ help: consider: `131_219`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:243:44
    |
243 | pub const _NL_ABALTMON_12: C2RustUnnamed = 131218;
    |                                            ^^^^^^ help: consider: `131_218`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:244:44
    |
244 | pub const _NL_ABALTMON_11: C2RustUnnamed = 131217;
    |                                            ^^^^^^ help: consider: `131_217`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:245:44
    |
245 | pub const _NL_ABALTMON_10: C2RustUnnamed = 131216;
    |                                            ^^^^^^ help: consider: `131_216`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:246:43
    |
246 | pub const _NL_ABALTMON_9: C2RustUnnamed = 131215;
    |                                           ^^^^^^ help: consider: `131_215`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:247:43
    |
247 | pub const _NL_ABALTMON_8: C2RustUnnamed = 131214;
    |                                           ^^^^^^ help: consider: `131_214`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:248:43
    |
248 | pub const _NL_ABALTMON_7: C2RustUnnamed = 131213;
    |                                           ^^^^^^ help: consider: `131_213`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:249:43
    |
249 | pub const _NL_ABALTMON_6: C2RustUnnamed = 131212;
    |                                           ^^^^^^ help: consider: `131_212`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:250:43
    |
250 | pub const _NL_ABALTMON_5: C2RustUnnamed = 131211;
    |                                           ^^^^^^ help: consider: `131_211`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:251:43
    |
251 | pub const _NL_ABALTMON_4: C2RustUnnamed = 131210;
    |                                           ^^^^^^ help: consider: `131_210`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:252:43
    |
252 | pub const _NL_ABALTMON_3: C2RustUnnamed = 131209;
    |                                           ^^^^^^ help: consider: `131_209`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:253:43
    |
253 | pub const _NL_ABALTMON_2: C2RustUnnamed = 131208;
    |                                           ^^^^^^ help: consider: `131_208`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:254:43
    |
254 | pub const _NL_ABALTMON_1: C2RustUnnamed = 131207;
    |                                           ^^^^^^ help: consider: `131_207`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:255:43
    |
255 | pub const _NL_WALTMON_12: C2RustUnnamed = 131206;
    |                                           ^^^^^^ help: consider: `131_206`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:256:43
    |
256 | pub const _NL_WALTMON_11: C2RustUnnamed = 131205;
    |                                           ^^^^^^ help: consider: `131_205`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:257:43
    |
257 | pub const _NL_WALTMON_10: C2RustUnnamed = 131204;
    |                                           ^^^^^^ help: consider: `131_204`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:258:42
    |
258 | pub const _NL_WALTMON_9: C2RustUnnamed = 131203;
    |                                          ^^^^^^ help: consider: `131_203`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:259:42
    |
259 | pub const _NL_WALTMON_8: C2RustUnnamed = 131202;
    |                                          ^^^^^^ help: consider: `131_202`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:260:42
    |
260 | pub const _NL_WALTMON_7: C2RustUnnamed = 131201;
    |                                          ^^^^^^ help: consider: `131_201`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:261:42
    |
261 | pub const _NL_WALTMON_6: C2RustUnnamed = 131200;
    |                                          ^^^^^^ help: consider: `131_200`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:262:42
    |
262 | pub const _NL_WALTMON_5: C2RustUnnamed = 131199;
    |                                          ^^^^^^ help: consider: `131_199`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:263:42
    |
263 | pub const _NL_WALTMON_4: C2RustUnnamed = 131198;
    |                                          ^^^^^^ help: consider: `131_198`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:264:42
    |
264 | pub const _NL_WALTMON_3: C2RustUnnamed = 131197;
    |                                          ^^^^^^ help: consider: `131_197`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:265:42
    |
265 | pub const _NL_WALTMON_2: C2RustUnnamed = 131196;
    |                                          ^^^^^^ help: consider: `131_196`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:266:42
    |
266 | pub const _NL_WALTMON_1: C2RustUnnamed = 131195;
    |                                          ^^^^^^ help: consider: `131_195`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:267:40
    |
267 | pub const __ALTMON_12: C2RustUnnamed = 131194;
    |                                        ^^^^^^ help: consider: `131_194`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:268:40
    |
268 | pub const __ALTMON_11: C2RustUnnamed = 131193;
    |                                        ^^^^^^ help: consider: `131_193`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:269:40
    |
269 | pub const __ALTMON_10: C2RustUnnamed = 131192;
    |                                        ^^^^^^ help: consider: `131_192`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:270:39
    |
270 | pub const __ALTMON_9: C2RustUnnamed = 131191;
    |                                       ^^^^^^ help: consider: `131_191`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:271:39
    |
271 | pub const __ALTMON_8: C2RustUnnamed = 131190;
    |                                       ^^^^^^ help: consider: `131_190`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:272:39
    |
272 | pub const __ALTMON_7: C2RustUnnamed = 131189;
    |                                       ^^^^^^ help: consider: `131_189`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:273:39
    |
273 | pub const __ALTMON_6: C2RustUnnamed = 131188;
    |                                       ^^^^^^ help: consider: `131_188`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:274:39
    |
274 | pub const __ALTMON_5: C2RustUnnamed = 131187;
    |                                       ^^^^^^ help: consider: `131_187`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:275:39
    |
275 | pub const __ALTMON_4: C2RustUnnamed = 131186;
    |                                       ^^^^^^ help: consider: `131_186`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:276:39
    |
276 | pub const __ALTMON_3: C2RustUnnamed = 131185;
    |                                       ^^^^^^ help: consider: `131_185`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:277:39
    |
277 | pub const __ALTMON_2: C2RustUnnamed = 131184;
    |                                       ^^^^^^ help: consider: `131_184`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:278:39
    |
278 | pub const __ALTMON_1: C2RustUnnamed = 131183;
    |                                       ^^^^^^ help: consider: `131_183`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:279:45
    |
279 | pub const _NL_TIME_CODESET: C2RustUnnamed = 131182;
    |                                             ^^^^^^ help: consider: `131_182`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:280:43
    |
280 | pub const _NL_W_DATE_FMT: C2RustUnnamed = 131181;
    |                                           ^^^^^^ help: consider: `131_181`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:281:38
    |
281 | pub const _DATE_FMT: C2RustUnnamed = 131180;
    |                                      ^^^^^^ help: consider: `131_180`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:282:46
    |
282 | pub const _NL_TIME_TIMEZONE: C2RustUnnamed = 131179;
    |                                              ^^^^^^ help: consider: `131_179`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:283:51
    |
283 | pub const _NL_TIME_CAL_DIRECTION: C2RustUnnamed = 131178;
    |                                                   ^^^^^^ help: consider: `131_178`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:284:51
    |
284 | pub const _NL_TIME_FIRST_WORKDAY: C2RustUnnamed = 131177;
    |                                                   ^^^^^^ help: consider: `131_177`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:285:51
    |
285 | pub const _NL_TIME_FIRST_WEEKDAY: C2RustUnnamed = 131176;
    |                                                   ^^^^^^ help: consider: `131_176`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:286:50
    |
286 | pub const _NL_TIME_WEEK_1STWEEK: C2RustUnnamed = 131175;
    |                                                  ^^^^^^ help: consider: `131_175`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:287:49
    |
287 | pub const _NL_TIME_WEEK_1STDAY: C2RustUnnamed = 131174;
    |                                                 ^^^^^^ help: consider: `131_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:288:48
    |
288 | pub const _NL_TIME_WEEK_NDAYS: C2RustUnnamed = 131173;
    |                                                ^^^^^^ help: consider: `131_173`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:289:43
    |
289 | pub const _NL_WERA_T_FMT: C2RustUnnamed = 131172;
    |                                           ^^^^^^ help: consider: `131_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:290:45
    |
290 | pub const _NL_WERA_D_T_FMT: C2RustUnnamed = 131171;
    |                                             ^^^^^^ help: consider: `131_171`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:291:44
    |
291 | pub const _NL_WALT_DIGITS: C2RustUnnamed = 131170;
    |                                            ^^^^^^ help: consider: `131_170`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:292:43
    |
292 | pub const _NL_WERA_D_FMT: C2RustUnnamed = 131169;
    |                                           ^^^^^^ help: consider: `131_169`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:293:42
    |
293 | pub const _NL_WERA_YEAR: C2RustUnnamed = 131168;
    |                                          ^^^^^^ help: consider: `131_168`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:294:44
    |
294 | pub const _NL_WT_FMT_AMPM: C2RustUnnamed = 131167;
    |                                            ^^^^^^ help: consider: `131_167`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:295:39
    |
295 | pub const _NL_WT_FMT: C2RustUnnamed = 131166;
    |                                       ^^^^^^ help: consider: `131_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:296:39
    |
296 | pub const _NL_WD_FMT: C2RustUnnamed = 131165;
    |                                       ^^^^^^ help: consider: `131_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:297:41
    |
297 | pub const _NL_WD_T_FMT: C2RustUnnamed = 131164;
    |                                         ^^^^^^ help: consider: `131_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:298:40
    |
298 | pub const _NL_WPM_STR: C2RustUnnamed = 131163;
    |                                        ^^^^^^ help: consider: `131_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:299:40
    |
299 | pub const _NL_WAM_STR: C2RustUnnamed = 131162;
    |                                        ^^^^^^ help: consider: `131_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:300:40
    |
300 | pub const _NL_WMON_12: C2RustUnnamed = 131161;
    |                                        ^^^^^^ help: consider: `131_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:301:40
    |
301 | pub const _NL_WMON_11: C2RustUnnamed = 131160;
    |                                        ^^^^^^ help: consider: `131_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:302:40
    |
302 | pub const _NL_WMON_10: C2RustUnnamed = 131159;
    |                                        ^^^^^^ help: consider: `131_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:303:39
    |
303 | pub const _NL_WMON_9: C2RustUnnamed = 131158;
    |                                       ^^^^^^ help: consider: `131_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:304:39
    |
304 | pub const _NL_WMON_8: C2RustUnnamed = 131157;
    |                                       ^^^^^^ help: consider: `131_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:305:39
    |
305 | pub const _NL_WMON_7: C2RustUnnamed = 131156;
    |                                       ^^^^^^ help: consider: `131_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:306:39
    |
306 | pub const _NL_WMON_6: C2RustUnnamed = 131155;
    |                                       ^^^^^^ help: consider: `131_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:307:39
    |
307 | pub const _NL_WMON_5: C2RustUnnamed = 131154;
    |                                       ^^^^^^ help: consider: `131_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:308:39
    |
308 | pub const _NL_WMON_4: C2RustUnnamed = 131153;
    |                                       ^^^^^^ help: consider: `131_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:309:39
    |
309 | pub const _NL_WMON_3: C2RustUnnamed = 131152;
    |                                       ^^^^^^ help: consider: `131_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:310:39
    |
310 | pub const _NL_WMON_2: C2RustUnnamed = 131151;
    |                                       ^^^^^^ help: consider: `131_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:311:39
    |
311 | pub const _NL_WMON_1: C2RustUnnamed = 131150;
    |                                       ^^^^^^ help: consider: `131_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:312:42
    |
312 | pub const _NL_WABMON_12: C2RustUnnamed = 131149;
    |                                          ^^^^^^ help: consider: `131_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:313:42
    |
313 | pub const _NL_WABMON_11: C2RustUnnamed = 131148;
    |                                          ^^^^^^ help: consider: `131_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:314:42
    |
314 | pub const _NL_WABMON_10: C2RustUnnamed = 131147;
    |                                          ^^^^^^ help: consider: `131_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:315:41
    |
315 | pub const _NL_WABMON_9: C2RustUnnamed = 131146;
    |                                         ^^^^^^ help: consider: `131_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:316:41
    |
316 | pub const _NL_WABMON_8: C2RustUnnamed = 131145;
    |                                         ^^^^^^ help: consider: `131_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:317:41
    |
317 | pub const _NL_WABMON_7: C2RustUnnamed = 131144;
    |                                         ^^^^^^ help: consider: `131_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:318:41
    |
318 | pub const _NL_WABMON_6: C2RustUnnamed = 131143;
    |                                         ^^^^^^ help: consider: `131_143`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:319:41
    |
319 | pub const _NL_WABMON_5: C2RustUnnamed = 131142;
    |                                         ^^^^^^ help: consider: `131_142`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:320:41
    |
320 | pub const _NL_WABMON_4: C2RustUnnamed = 131141;
    |                                         ^^^^^^ help: consider: `131_141`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:321:41
    |
321 | pub const _NL_WABMON_3: C2RustUnnamed = 131140;
    |                                         ^^^^^^ help: consider: `131_140`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:322:41
    |
322 | pub const _NL_WABMON_2: C2RustUnnamed = 131139;
    |                                         ^^^^^^ help: consider: `131_139`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:323:41
    |
323 | pub const _NL_WABMON_1: C2RustUnnamed = 131138;
    |                                         ^^^^^^ help: consider: `131_138`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:324:39
    |
324 | pub const _NL_WDAY_7: C2RustUnnamed = 131137;
    |                                       ^^^^^^ help: consider: `131_137`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:325:39
    |
325 | pub const _NL_WDAY_6: C2RustUnnamed = 131136;
    |                                       ^^^^^^ help: consider: `131_136`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:326:39
    |
326 | pub const _NL_WDAY_5: C2RustUnnamed = 131135;
    |                                       ^^^^^^ help: consider: `131_135`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:327:39
    |
327 | pub const _NL_WDAY_4: C2RustUnnamed = 131134;
    |                                       ^^^^^^ help: consider: `131_134`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:328:39
    |
328 | pub const _NL_WDAY_3: C2RustUnnamed = 131133;
    |                                       ^^^^^^ help: consider: `131_133`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:329:39
    |
329 | pub const _NL_WDAY_2: C2RustUnnamed = 131132;
    |                                       ^^^^^^ help: consider: `131_132`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:330:39
    |
330 | pub const _NL_WDAY_1: C2RustUnnamed = 131131;
    |                                       ^^^^^^ help: consider: `131_131`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:331:41
    |
331 | pub const _NL_WABDAY_7: C2RustUnnamed = 131130;
    |                                         ^^^^^^ help: consider: `131_130`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:332:41
    |
332 | pub const _NL_WABDAY_6: C2RustUnnamed = 131129;
    |                                         ^^^^^^ help: consider: `131_129`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:333:41
    |
333 | pub const _NL_WABDAY_5: C2RustUnnamed = 131128;
    |                                         ^^^^^^ help: consider: `131_128`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:334:41
    |
334 | pub const _NL_WABDAY_4: C2RustUnnamed = 131127;
    |                                         ^^^^^^ help: consider: `131_127`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:335:41
    |
335 | pub const _NL_WABDAY_3: C2RustUnnamed = 131126;
    |                                         ^^^^^^ help: consider: `131_126`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:336:41
    |
336 | pub const _NL_WABDAY_2: C2RustUnnamed = 131125;
    |                                         ^^^^^^ help: consider: `131_125`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:337:41
    |
337 | pub const _NL_WABDAY_1: C2RustUnnamed = 131124;
    |                                         ^^^^^^ help: consider: `131_124`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:338:49
    |
338 | pub const _NL_TIME_ERA_ENTRIES: C2RustUnnamed = 131123;
    |                                                 ^^^^^^ help: consider: `131_123`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:339:53
    |
339 | pub const _NL_TIME_ERA_NUM_ENTRIES: C2RustUnnamed = 131122;
    |                                                     ^^^^^^ help: consider: `131_122`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:340:38
    |
340 | pub const ERA_T_FMT: C2RustUnnamed = 131121;
    |                                      ^^^^^^ help: consider: `131_121`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:341:40
    |
341 | pub const ERA_D_T_FMT: C2RustUnnamed = 131120;
    |                                        ^^^^^^ help: consider: `131_120`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:342:39
    |
342 | pub const ALT_DIGITS: C2RustUnnamed = 131119;
    |                                       ^^^^^^ help: consider: `131_119`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:343:38
    |
343 | pub const ERA_D_FMT: C2RustUnnamed = 131118;
    |                                      ^^^^^^ help: consider: `131_118`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:344:39
    |
344 | pub const __ERA_YEAR: C2RustUnnamed = 131117;
    |                                       ^^^^^^ help: consider: `131_117`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:345:32
    |
345 | pub const ERA: C2RustUnnamed = 131116;
    |                                ^^^^^^ help: consider: `131_116`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:346:39
    |
346 | pub const T_FMT_AMPM: C2RustUnnamed = 131115;
    |                                       ^^^^^^ help: consider: `131_115`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:347:34
    |
347 | pub const T_FMT: C2RustUnnamed = 131114;
    |                                  ^^^^^^ help: consider: `131_114`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:348:34
    |
348 | pub const D_FMT: C2RustUnnamed = 131113;
    |                                  ^^^^^^ help: consider: `131_113`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:349:36
    |
349 | pub const D_T_FMT: C2RustUnnamed = 131112;
    |                                    ^^^^^^ help: consider: `131_112`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:350:35
    |
350 | pub const PM_STR: C2RustUnnamed = 131111;
    |                                   ^^^^^^ help: consider: `131_111`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:351:35
    |
351 | pub const AM_STR: C2RustUnnamed = 131110;
    |                                   ^^^^^^ help: consider: `131_110`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:352:35
    |
352 | pub const MON_12: C2RustUnnamed = 131109;
    |                                   ^^^^^^ help: consider: `131_109`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:353:35
    |
353 | pub const MON_11: C2RustUnnamed = 131108;
    |                                   ^^^^^^ help: consider: `131_108`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:354:35
    |
354 | pub const MON_10: C2RustUnnamed = 131107;
    |                                   ^^^^^^ help: consider: `131_107`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:355:34
    |
355 | pub const MON_9: C2RustUnnamed = 131106;
    |                                  ^^^^^^ help: consider: `131_106`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:356:34
    |
356 | pub const MON_8: C2RustUnnamed = 131105;
    |                                  ^^^^^^ help: consider: `131_105`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:357:34
    |
357 | pub const MON_7: C2RustUnnamed = 131104;
    |                                  ^^^^^^ help: consider: `131_104`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:358:34
    |
358 | pub const MON_6: C2RustUnnamed = 131103;
    |                                  ^^^^^^ help: consider: `131_103`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:359:34
    |
359 | pub const MON_5: C2RustUnnamed = 131102;
    |                                  ^^^^^^ help: consider: `131_102`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:360:34
    |
360 | pub const MON_4: C2RustUnnamed = 131101;
    |                                  ^^^^^^ help: consider: `131_101`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:361:34
    |
361 | pub const MON_3: C2RustUnnamed = 131100;
    |                                  ^^^^^^ help: consider: `131_100`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:362:34
    |
362 | pub const MON_2: C2RustUnnamed = 131099;
    |                                  ^^^^^^ help: consider: `131_099`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:363:34
    |
363 | pub const MON_1: C2RustUnnamed = 131098;
    |                                  ^^^^^^ help: consider: `131_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:364:37
    |
364 | pub const ABMON_12: C2RustUnnamed = 131097;
    |                                     ^^^^^^ help: consider: `131_097`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:365:37
    |
365 | pub const ABMON_11: C2RustUnnamed = 131096;
    |                                     ^^^^^^ help: consider: `131_096`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:366:37
    |
366 | pub const ABMON_10: C2RustUnnamed = 131095;
    |                                     ^^^^^^ help: consider: `131_095`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:367:36
    |
367 | pub const ABMON_9: C2RustUnnamed = 131094;
    |                                    ^^^^^^ help: consider: `131_094`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:368:36
    |
368 | pub const ABMON_8: C2RustUnnamed = 131093;
    |                                    ^^^^^^ help: consider: `131_093`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:369:36
    |
369 | pub const ABMON_7: C2RustUnnamed = 131092;
    |                                    ^^^^^^ help: consider: `131_092`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:370:36
    |
370 | pub const ABMON_6: C2RustUnnamed = 131091;
    |                                    ^^^^^^ help: consider: `131_091`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:371:36
    |
371 | pub const ABMON_5: C2RustUnnamed = 131090;
    |                                    ^^^^^^ help: consider: `131_090`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:372:36
    |
372 | pub const ABMON_4: C2RustUnnamed = 131089;
    |                                    ^^^^^^ help: consider: `131_089`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:373:36
    |
373 | pub const ABMON_3: C2RustUnnamed = 131088;
    |                                    ^^^^^^ help: consider: `131_088`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:374:36
    |
374 | pub const ABMON_2: C2RustUnnamed = 131087;
    |                                    ^^^^^^ help: consider: `131_087`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:375:36
    |
375 | pub const ABMON_1: C2RustUnnamed = 131086;
    |                                    ^^^^^^ help: consider: `131_086`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:376:34
    |
376 | pub const DAY_7: C2RustUnnamed = 131085;
    |                                  ^^^^^^ help: consider: `131_085`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:377:34
    |
377 | pub const DAY_6: C2RustUnnamed = 131084;
    |                                  ^^^^^^ help: consider: `131_084`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:378:34
    |
378 | pub const DAY_5: C2RustUnnamed = 131083;
    |                                  ^^^^^^ help: consider: `131_083`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:379:34
    |
379 | pub const DAY_4: C2RustUnnamed = 131082;
    |                                  ^^^^^^ help: consider: `131_082`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:380:34
    |
380 | pub const DAY_3: C2RustUnnamed = 131081;
    |                                  ^^^^^^ help: consider: `131_081`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:381:34
    |
381 | pub const DAY_2: C2RustUnnamed = 131080;
    |                                  ^^^^^^ help: consider: `131_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:382:34
    |
382 | pub const DAY_1: C2RustUnnamed = 131079;
    |                                  ^^^^^^ help: consider: `131_079`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:383:36
    |
383 | pub const ABDAY_7: C2RustUnnamed = 131078;
    |                                    ^^^^^^ help: consider: `131_078`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:384:36
    |
384 | pub const ABDAY_6: C2RustUnnamed = 131077;
    |                                    ^^^^^^ help: consider: `131_077`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:385:36
    |
385 | pub const ABDAY_5: C2RustUnnamed = 131076;
    |                                    ^^^^^^ help: consider: `131_076`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:386:36
    |
386 | pub const ABDAY_4: C2RustUnnamed = 131075;
    |                                    ^^^^^^ help: consider: `131_075`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:387:36
    |
387 | pub const ABDAY_3: C2RustUnnamed = 131074;
    |                                    ^^^^^^ help: consider: `131_074`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:388:36
    |
388 | pub const ABDAY_2: C2RustUnnamed = 131073;
    |                                    ^^^^^^ help: consider: `131_073`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:389:36
    |
389 | pub const ABDAY_1: C2RustUnnamed = 131072;
    |                                    ^^^^^^ help: consider: `131_072`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:185:9
    |
185 |     mut o: *mut quoting_options,
    |         ^
186 |     mut c: libc::c_char,
    |         ^
187 |     mut i: libc::c_int,
    |         ^
...
190 |     let mut p: *mut libc::c_uint = ((*(if !o.is_null() {
    |             ^
...
209 |     let mut r: libc::c_int = (*p >> shift & 1 as libc::c_int as libc::c_uint)
    |             ^
    |
    = note: `-W clippy::many-single-char-names` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:309:13
    |
309 |     let mut i: size_t = 0;
    |             ^
...
440 |             let mut c: libc::c_uchar = 0;
    |                     ^
...
794 |                     let mut m: size_t = 0;
    |                             ^
...
813 |                         let mut w: char32_t = 0;
    |                                 ^
...
838 |                                     let mut j: size_t = 0;
    |                                             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: long literal lacking separators
   --> src/quotearg.rs:328:36
    |
328 |                 current_block_48 = 1283995450065962895;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:331:36
    |
331 |                 current_block_48 = 1283995450065962895;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:336:36
    |
336 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:366:36
    |
366 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:370:36
    |
370 |                 current_block_48 = 2694013637280298776;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:373:36
    |
373 |                 current_block_48 = 2694013637280298776;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:376:36
    |
376 |                 current_block_48 = 2266290538919981374;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:379:36
    |
379 |                 current_block_48 = 14141891332124833771;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:383:36
    |
383 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:390:13
    |
390 |             1283995450065962895 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:401:36
    |
401 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:403:13
    |
403 |             2694013637280298776 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:405:36
    |
405 |                 current_block_48 = 2266290538919981374;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:410:13
    |
410 |             2266290538919981374 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:414:36
    |
414 |                 current_block_48 = 14141891332124833771;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:419:13
    |
419 |             14141891332124833771 => {
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:434:29
    |
434 |         while if argsize == 18446744073709551615 as libc::c_ulong {
    |                             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:450:39
    |
450 |                     <= (if argsize == 18446744073709551615 as libc::c_ulong
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:465:37
    |
465 |                     current_block = 7928555609993211441;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:475:45
    |
475 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:531:41
    |
531 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:533:41
    |
533 |                         current_block = 13619784596304402172;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_619_784_596_304_402_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:535:41
    |
535 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:541:45
    |
541 | ...                   current_block = 17954593875197965021;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:543:33
    |
543 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:545:57
    |
545 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:565:69
    |
565 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:601:45
    |
601 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:604:45
    |
604 | ...                   current_block = 14514781131754033399;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_514_781_131_754_033_399`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:606:33
    |
606 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:608:57
    |
608 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:628:69
    |
628 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:664:45
    |
664 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:667:45
    |
667 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:673:37
    |
673 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:677:37
    |
677 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:681:37
    |
681 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:685:37
    |
685 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:689:37
    |
689 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:693:37
    |
693 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:697:37
    |
697 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:705:45
    |
705 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:708:41
    |
708 |                         current_block = 4476262310586904498;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:713:41
    |
713 |                         current_block = 4476262310586904498;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:715:41
    |
715 |                         current_block = 9215498979640025612;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:719:38
    |
719 |                     if if argsize == 18446744073709551615 as libc::c_ulong {
    |                                      ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:726:41
    |
726 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:728:41
    |
728 |                         current_block = 16442922512115311366;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:732:37
    |
732 |                     current_block = 16442922512115311366;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:735:37
    |
735 |                     current_block = 4634307283396172174;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:738:37
    |
738 |                     current_block = 7549413860336125482;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:741:37
    |
741 |                     current_block = 13059411171234995867;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:744:37
    |
744 |                     current_block = 16620298045565028098;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:747:37
    |
747 |                     current_block = 15155215915847730705;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:756:45
    |
756 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:779:41
    |
779 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:781:41
    |
781 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:791:37
    |
791 |                     current_block = 253337042034819032;
    |                                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:810:39
    |
810 |                         if argsize == 18446744073709551615 as libc::c_ulong {
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:846:65
    |
846 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:871:53
    |
871 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:956:41
    |
956 |                         current_block = 4476262310586904498;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:958:41
    |
958 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:963:17
    |
963 |                 16442922512115311366 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:965:41
    |
965 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:967:41
    |
967 |                         current_block = 4634307283396172174;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:970:17
    |
970 |                 9215498979640025612 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:975:41
    |
975 |                         current_block = 7928555609993211441;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:978:37
    |
978 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:983:17
    |
983 |                 1190876092451756080 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:986:41
    |
986 |                         current_block = 3173013908131212616;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:988:41
    |
988 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:991:17
    |
991 |                 4634307283396172174 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:993:37
    |
993 |                     current_block = 7549413860336125482;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:998:17
    |
998 |                 7549413860336125482 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:999:37
    |
999 |                     current_block = 13059411171234995867;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1004:17
     |
1004 |                 13059411171234995867 => {
     |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1005:37
     |
1005 |                     current_block = 16620298045565028098;
     |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1010:17
     |
1010 |                 16620298045565028098 => {
     |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1011:37
     |
1011 |                     current_block = 15155215915847730705;
     |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1016:17
     |
1016 |                 15155215915847730705 => {
     |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1021:41
     |
1021 |                         current_block = 7928555609993211441;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1024:37
     |
1024 |                     current_block = 253337042034819032;
     |                                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1029:17
     |
1029 |                 253337042034819032 => {
     |                 ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1050:41
     |
1050 |                         current_block = 4476262310586904498;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1052:41
     |
1052 |                         current_block = 3173013908131212616;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1058:17
     |
1058 |                 3173013908131212616 => {
     |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1060:41
     |
1060 |                         current_block = 7928555609993211441;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1090:37
     |
1090 |                     current_block = 4476262310586904498;
     |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1095:17
     |
1095 |                 4476262310586904498 => {
     |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1128:29
     |
1128 |             current_block = 7928555609993211441;
     |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1135:29
     |
1135 |             current_block = 6412618891452676311;
     |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/quotearg.rs:1150:16
     |
1150 |           } else {
     |  ________________^
1151 | |             if !(buffersize == 0 && orig_buffersize != 0) {
1152 | |                 current_block = 6412618891452676311;
1153 | |                 break;
...    |
1156 | |             len = 0 as libc::c_int as size_t;
1157 | |         }
     | |_________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/quotearg.rs:1152:33
     |
1152 |                 current_block = 6412618891452676311;
     |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1160:9
     |
1160 |         7928555609993211441 => {
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/quotearg.rs:1362:13
     |
1362 |     let mut qsize: size_t = quotearg_buffer_restyled(
     |             ^^^^^
     |
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
    --> src/quotearg.rs:1359:13
     |
1359 |     let mut size: size_t = (*sv.offset(n as isize)).size;
     |             ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
    --> src/quotearg.rs:1326:44
     |
1326 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                            ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1327:11
     |
1327 |         < 9223372036854775807 as libc::c_long
     |           ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1329:9
     |
1329 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1331:9
     |
1331 |         9223372036854775807 as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1405:9
     |
1405 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1435:39
     |
1435 |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
     |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1484:35
     |
1484 |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
     |                                   ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1517:9
     |
1517 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1533:9
     |
1533 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1602:32
     |
1602 |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
     |                                ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/safe_write.rs:9:44
  |
9 | pub const SYS_BUFSIZE_MAX: C2RustUnnamed = 2146435072;
  |                                            ^^^^^^^^^^ help: consider: `2_146_435_072`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/safe_write.rs:21:16
   |
21 |           } else {
   |  ________________^
22 | |             if *__errno_location() == 4 as libc::c_int {
23 | |                 continue;
24 | |             }
...  |
31 | |             }
32 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:34:12
   |
34 |       } else {
   |  ____________^
35 | |         let mut length: size_t = strlen(result);
36 | |         if length < bufsize {
37 | |             memcpy(
...  |
56 | |         }
57 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:43:16
   |
43 |           } else {
   |  ________________^
44 | |             if bufsize > 0 as libc::c_int as libc::c_ulong {
45 | |                 memcpy(
46 | |                     buf as *mut libc::c_void,
...  |
55 | |             return 34 as libc::c_int;
56 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
   --> src/temp_stream.rs:345:12
    |
345 |       } else {
    |  ____________^
346 | |         clearerr_unlocked(tmp_fp);
347 | |         if rpl_fseeko(tmp_fp, 0 as libc::c_int as off_t, 0 as libc::c_int)
348 | |             < 0 as libc::c_int
...   |
399 | |         }
400 | |     }
    | |_____^
    |
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/tmpdir.rs:73:26
   |
73 |         && buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
   |                          ^^^^^^^^ help: consider: `0o170_000`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
  --> src/tmpdir.rs:86:13
   |
86 |     let mut plen: size_t = 0;
   |             ^^^^
   |
note: existing binding defined here
  --> src/tmpdir.rs:85:13
   |
85 |     let mut dlen: size_t = 0;
   |             ^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
  --> src/xdectoimax.rs:43:24
   |
43 |             if tnum > (2147483647 as libc::c_int / 2 as libc::c_int) as libc::c_long {
   |                        ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xdectoimax.rs:46:23
   |
46 |                 < ((-(2147483647 as libc::c_int) - 1 as libc::c_int) / 2 as libc::c_int)
   |                       ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xdectoumax.rs:54:24
   |
54 |             if tnum > (2147483647 as libc::c_int / 2 as libc::c_int) as libc::c_ulong {
   |                        ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/xmalloc.rs:35:12
   |
35 |       } else {
   |  ____________^
36 | |         return _gl_alloc_nomem()
37 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/xmalloc.rs:32:30
   |
32 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:41:9
   |
41 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:47:9
   |
47 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/xmalloc.rs:73:12
   |
73 |       } else {
   |  ____________^
74 | |         return _gl_alloc_nomem()
75 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/xmalloc.rs:61:30
   |
61 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:62:34
   |
62 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                                  ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:85:37
   |
85 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:560:18
    |
560 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                  ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:206:10
    |
206 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |          ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:560:27
    |
560 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                           ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:206:18
    |
206 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |                  ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
   --> src/xmalloc.rs:209:13
    |
209 |         n = 9223372036854775807 as libc::c_long;
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:411:16
    |
411 |           } else {
    |  ________________^
412 | |             if s == 0 as libc::c_int as libc::c_long {
413 | |                 0 as libc::c_int
414 | |             } else {
...   |
525 | |             }
526 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
411 ~         } else if s == 0 as libc::c_int as libc::c_long {
412 +             0 as libc::c_int
413 +         } else {
414 +             if n < 0 as libc::c_int as libc::c_long {
415 +                 if (if (if ((if 1 as libc::c_int != 0 {
416 +                     0 as libc::c_int as libc::c_long
417 +                 } else {
418 +                     (if 1 as libc::c_int != 0 {
419 +                         0 as libc::c_int as libc::c_long
420 +                     } else {
421 +                         n
422 +                     }) + 0 as libc::c_int as idx_t
423 +                 }) - 1 as libc::c_int as libc::c_long)
424 +                     < 0 as libc::c_int as libc::c_long
425 +                 {
426 +                     !(((((if 1 as libc::c_int != 0 {
427 +                         0 as libc::c_int as libc::c_long
428 +                     } else {
429 +                         (if 1 as libc::c_int != 0 {
430 +                             0 as libc::c_int as libc::c_long
431 +                         } else {
432 +                             n
433 +                         }) + 0 as libc::c_int as idx_t
434 +                     }) + 1 as libc::c_int as libc::c_long)
435 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
436 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
437 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
438 +                         - 1 as libc::c_int as libc::c_long)
439 +                         * 2 as libc::c_int as libc::c_long
440 +                         + 1 as libc::c_int as libc::c_long)
441 +                 } else {
442 +                     (if 1 as libc::c_int != 0 {
443 +                         0 as libc::c_int as libc::c_long
444 +                     } else {
445 +                         (if 1 as libc::c_int != 0 {
446 +                             0 as libc::c_int as libc::c_long
447 +                         } else {
448 +                             n
449 +                         }) + 0 as libc::c_int as idx_t
450 +                     }) + 0 as libc::c_int as libc::c_long
451 +                 }) < 0 as libc::c_int as libc::c_long
452 +                 {
453 +                     (((if 1 as libc::c_int != 0 {
454 +                         0 as libc::c_int as libc::c_long
455 +                     } else {
456 +                         n
457 +                     }) + 0 as libc::c_int as idx_t)
458 +                         < -(if ((if 1 as libc::c_int != 0 {
459 +                             0 as libc::c_int as libc::c_long
460 +                         } else {
461 +                             (if 1 as libc::c_int != 0 {
462 +                                 0 as libc::c_int as libc::c_long
463 +                             } else {
464 +                                 n
465 +                             }) + 0 as libc::c_int as idx_t
466 +                         }) - 1 as libc::c_int as libc::c_long)
467 +                             < 0 as libc::c_int as libc::c_long
468 +                         {
469 +                             ((((if 1 as libc::c_int != 0 {
470 +                                 0 as libc::c_int as libc::c_long
471 +                             } else {
472 +                                 (if 1 as libc::c_int != 0 {
473 +                                     0 as libc::c_int as libc::c_long
474 +                                 } else {
475 +                                     n
476 +                                 }) + 0 as libc::c_int as idx_t
477 +                             }) + 1 as libc::c_int as libc::c_long)
478 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
479 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
480 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
481 +                                 - 1 as libc::c_int as libc::c_long)
482 +                                 * 2 as libc::c_int as libc::c_long
483 +                                 + 1 as libc::c_int as libc::c_long
484 +                         } else {
485 +                             (if 1 as libc::c_int != 0 {
486 +                                 0 as libc::c_int as libc::c_long
487 +                             } else {
488 +                                 (if 1 as libc::c_int != 0 {
489 +                                     0 as libc::c_int as libc::c_long
490 +                                 } else {
491 +                                     n
492 +                                 }) + 0 as libc::c_int as idx_t
493 +                             }) - 1 as libc::c_int as libc::c_long
494 +                         })) as libc::c_int
495 +                 } else {
496 +                     ((0 as libc::c_int as libc::c_long)
497 +                         < (if 1 as libc::c_int != 0 {
498 +                             0 as libc::c_int as libc::c_long
499 +                         } else {
500 +                             n
501 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
502 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
503 +                 {
504 +                     if ((if 1 as libc::c_int != 0 {
505 +                         0 as libc::c_int as libc::c_long
506 +                     } else {
507 +                         s
508 +                     }) - 1 as libc::c_int as libc::c_long)
509 +                         < 0 as libc::c_int as libc::c_long
510 +                     {
511 +                         ((0 as libc::c_int as libc::c_long)
512 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
513 +                     } else {
514 +                         ((-(1 as libc::c_int) as libc::c_long
515 +                             - 0 as libc::c_int as idx_t)
516 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
517 +                     }
518 +                 } else {
519 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
520 +                 }
521 +             } else {
522 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
523 +             }
524 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:303:20
    |
303 |               } else {
    |  ____________________^
304 | |                 if (if (if ((if 1 as libc::c_int != 0 {
305 | |                     0 as libc::c_int as libc::c_long
306 | |                 } else {
...   |
409 | |                 }
410 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
303 ~             } else if (if (if ((if 1 as libc::c_int != 0 {
304 +                 0 as libc::c_int as libc::c_long
305 +             } else {
306 +                 (if 1 as libc::c_int != 0 {
307 +                     0 as libc::c_int as libc::c_long
308 +                 } else {
309 +                     s
310 +                 }) + 0 as libc::c_int as idx_t
311 +             }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
312 +             {
313 +                 !(((((if 1 as libc::c_int != 0 {
314 +                     0 as libc::c_int as libc::c_long
315 +                 } else {
316 +                     (if 1 as libc::c_int != 0 {
317 +                         0 as libc::c_int as libc::c_long
318 +                     } else {
319 +                         s
320 +                     }) + 0 as libc::c_int as idx_t
321 +                 }) + 1 as libc::c_int as libc::c_long)
322 +                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
323 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
324 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
325 +                     - 1 as libc::c_int as libc::c_long)
326 +                     * 2 as libc::c_int as libc::c_long
327 +                     + 1 as libc::c_int as libc::c_long)
328 +             } else {
329 +                 (if 1 as libc::c_int != 0 {
330 +                     0 as libc::c_int as libc::c_long
331 +                 } else {
332 +                     (if 1 as libc::c_int != 0 {
333 +                         0 as libc::c_int as libc::c_long
334 +                     } else {
335 +                         s
336 +                     }) + 0 as libc::c_int as idx_t
337 +                 }) + 0 as libc::c_int as libc::c_long
338 +             }) < 0 as libc::c_int as libc::c_long
339 +             {
340 +                 (((if 1 as libc::c_int != 0 {
341 +                     0 as libc::c_int as libc::c_long
342 +                 } else {
343 +                     s
344 +                 }) + 0 as libc::c_int as idx_t)
345 +                     < -(if ((if 1 as libc::c_int != 0 {
346 +                         0 as libc::c_int as libc::c_long
347 +                     } else {
348 +                         (if 1 as libc::c_int != 0 {
349 +                             0 as libc::c_int as libc::c_long
350 +                         } else {
351 +                             s
352 +                         }) + 0 as libc::c_int as idx_t
353 +                     }) - 1 as libc::c_int as libc::c_long)
354 +                         < 0 as libc::c_int as libc::c_long
355 +                     {
356 +                         ((((if 1 as libc::c_int != 0 {
357 +                             0 as libc::c_int as libc::c_long
358 +                         } else {
359 +                             (if 1 as libc::c_int != 0 {
360 +                                 0 as libc::c_int as libc::c_long
361 +                             } else {
362 +                                 s
363 +                             }) + 0 as libc::c_int as idx_t
364 +                         }) + 1 as libc::c_int as libc::c_long)
365 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
366 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
367 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
368 +                             - 1 as libc::c_int as libc::c_long)
369 +                             * 2 as libc::c_int as libc::c_long
370 +                             + 1 as libc::c_int as libc::c_long
371 +                     } else {
372 +                         (if 1 as libc::c_int != 0 {
373 +                             0 as libc::c_int as libc::c_long
374 +                         } else {
375 +                             (if 1 as libc::c_int != 0 {
376 +                                 0 as libc::c_int as libc::c_long
377 +                             } else {
378 +                                 s
379 +                             }) + 0 as libc::c_int as idx_t
380 +                         }) - 1 as libc::c_int as libc::c_long
381 +                     })) as libc::c_int
382 +             } else {
383 +                 ((0 as libc::c_int as libc::c_long)
384 +                     < (if 1 as libc::c_int != 0 {
385 +                         0 as libc::c_int as libc::c_long
386 +                     } else {
387 +                         s
388 +                     }) + 0 as libc::c_int as idx_t) as libc::c_int
389 +             }) != 0 && s == -(1 as libc::c_int) as libc::c_long
390 +             {
391 +                 if ((if 1 as libc::c_int != 0 {
392 +                     0 as libc::c_int as libc::c_long
393 +                 } else {
394 +                     n
395 +                 }) - 1 as libc::c_int as libc::c_long)
396 +                     < 0 as libc::c_int as libc::c_long
397 +                 {
398 +                     ((0 as libc::c_int as libc::c_long)
399 +                         < n + 0 as libc::c_int as idx_t) as libc::c_int
400 +                 } else {
401 +                     ((0 as libc::c_int as libc::c_long) < n
402 +                         && (-(1 as libc::c_int) as libc::c_long
403 +                             - 0 as libc::c_int as idx_t)
404 +                             < n - 1 as libc::c_int as libc::c_long) as libc::c_int
405 +                 }
406 +             } else {
407 +                 (0 as libc::c_int as idx_t / s < n) as libc::c_int
408 +             }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:291:25
    |
291 | /                         (if 1 as libc::c_int != 0 {
292 | |                             0 as libc::c_int as libc::c_long
293 | |                         } else {
294 | |                             s
...   |
297 | |                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
298 | |                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |________________________________________________________________________________^
    |
    = note: `-W clippy::precedence` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
291 ~                         ((if 1 as libc::c_int != 0 {
292 +                             0 as libc::c_int as libc::c_long
293 +                         } else {
294 +                             s
295 +                         }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
296 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
297 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:414:20
    |
414 |               } else {
    |  ____________________^
415 | |                 if n < 0 as libc::c_int as libc::c_long {
416 | |                     if (if (if ((if 1 as libc::c_int != 0 {
417 | |                         0 as libc::c_int as libc::c_long
...   |
524 | |                 }
525 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
414 ~             } else if n < 0 as libc::c_int as libc::c_long {
415 +                 if (if (if ((if 1 as libc::c_int != 0 {
416 +                     0 as libc::c_int as libc::c_long
417 +                 } else {
418 +                     (if 1 as libc::c_int != 0 {
419 +                         0 as libc::c_int as libc::c_long
420 +                     } else {
421 +                         n
422 +                     }) + 0 as libc::c_int as idx_t
423 +                 }) - 1 as libc::c_int as libc::c_long)
424 +                     < 0 as libc::c_int as libc::c_long
425 +                 {
426 +                     !(((((if 1 as libc::c_int != 0 {
427 +                         0 as libc::c_int as libc::c_long
428 +                     } else {
429 +                         (if 1 as libc::c_int != 0 {
430 +                             0 as libc::c_int as libc::c_long
431 +                         } else {
432 +                             n
433 +                         }) + 0 as libc::c_int as idx_t
434 +                     }) + 1 as libc::c_int as libc::c_long)
435 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
436 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
437 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
438 +                         - 1 as libc::c_int as libc::c_long)
439 +                         * 2 as libc::c_int as libc::c_long
440 +                         + 1 as libc::c_int as libc::c_long)
441 +                 } else {
442 +                     (if 1 as libc::c_int != 0 {
443 +                         0 as libc::c_int as libc::c_long
444 +                     } else {
445 +                         (if 1 as libc::c_int != 0 {
446 +                             0 as libc::c_int as libc::c_long
447 +                         } else {
448 +                             n
449 +                         }) + 0 as libc::c_int as idx_t
450 +                     }) + 0 as libc::c_int as libc::c_long
451 +                 }) < 0 as libc::c_int as libc::c_long
452 +                 {
453 +                     (((if 1 as libc::c_int != 0 {
454 +                         0 as libc::c_int as libc::c_long
455 +                     } else {
456 +                         n
457 +                     }) + 0 as libc::c_int as idx_t)
458 +                         < -(if ((if 1 as libc::c_int != 0 {
459 +                             0 as libc::c_int as libc::c_long
460 +                         } else {
461 +                             (if 1 as libc::c_int != 0 {
462 +                                 0 as libc::c_int as libc::c_long
463 +                             } else {
464 +                                 n
465 +                             }) + 0 as libc::c_int as idx_t
466 +                         }) - 1 as libc::c_int as libc::c_long)
467 +                             < 0 as libc::c_int as libc::c_long
468 +                         {
469 +                             ((((if 1 as libc::c_int != 0 {
470 +                                 0 as libc::c_int as libc::c_long
471 +                             } else {
472 +                                 (if 1 as libc::c_int != 0 {
473 +                                     0 as libc::c_int as libc::c_long
474 +                                 } else {
475 +                                     n
476 +                                 }) + 0 as libc::c_int as idx_t
477 +                             }) + 1 as libc::c_int as libc::c_long)
478 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
479 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
480 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
481 +                                 - 1 as libc::c_int as libc::c_long)
482 +                                 * 2 as libc::c_int as libc::c_long
483 +                                 + 1 as libc::c_int as libc::c_long
484 +                         } else {
485 +                             (if 1 as libc::c_int != 0 {
486 +                                 0 as libc::c_int as libc::c_long
487 +                             } else {
488 +                                 (if 1 as libc::c_int != 0 {
489 +                                     0 as libc::c_int as libc::c_long
490 +                                 } else {
491 +                                     n
492 +                                 }) + 0 as libc::c_int as idx_t
493 +                             }) - 1 as libc::c_int as libc::c_long
494 +                         })) as libc::c_int
495 +                 } else {
496 +                     ((0 as libc::c_int as libc::c_long)
497 +                         < (if 1 as libc::c_int != 0 {
498 +                             0 as libc::c_int as libc::c_long
499 +                         } else {
500 +                             n
501 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
502 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
503 +                 {
504 +                     if ((if 1 as libc::c_int != 0 {
505 +                         0 as libc::c_int as libc::c_long
506 +                     } else {
507 +                         s
508 +                     }) - 1 as libc::c_int as libc::c_long)
509 +                         < 0 as libc::c_int as libc::c_long
510 +                     {
511 +                         ((0 as libc::c_int as libc::c_long)
512 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
513 +                     } else {
514 +                         ((-(1 as libc::c_int) as libc::c_long
515 +                             - 0 as libc::c_int as idx_t)
516 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
517 +                     }
518 +                 } else {
519 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
520 +                 }
521 +             } else {
522 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
523 +             }
    |

warning: long literal lacking separators
   --> src/xmalloc.rs:537:13
    |
537 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:538:15
    |
538 |             < 18446744073709551615 as libc::c_ulong
    |               ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:540:13
    |
540 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:542:13
    |
542 |             18446744073709551615 as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:770:28
    |
770 |                       } else {
    |  ____________________________^
771 | |                         if s == 0 as libc::c_int as libc::c_long {
772 | |                             0 as libc::c_int
773 | |                         } else {
...   |
884 | |                         }
885 | |                     }) != 0
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
770 ~                     } else if s == 0 as libc::c_int as libc::c_long {
771 +                         0 as libc::c_int
772 +                     } else {
773 +                         if n < 0 as libc::c_int as libc::c_long {
774 +                             if (if (if ((if 1 as libc::c_int != 0 {
775 +                                 0 as libc::c_int as libc::c_long
776 +                             } else {
777 +                                 (if 1 as libc::c_int != 0 {
778 +                                     0 as libc::c_int as libc::c_long
779 +                                 } else {
780 +                                     n
781 +                                 }) + 0 as libc::c_int as idx_t
782 +                             }) - 1 as libc::c_int as libc::c_long)
783 +                                 < 0 as libc::c_int as libc::c_long
784 +                             {
785 +                                 !(((((if 1 as libc::c_int != 0 {
786 +                                     0 as libc::c_int as libc::c_long
787 +                                 } else {
788 +                                     (if 1 as libc::c_int != 0 {
789 +                                         0 as libc::c_int as libc::c_long
790 +                                     } else {
791 +                                         n
792 +                                     }) + 0 as libc::c_int as idx_t
793 +                                 }) + 1 as libc::c_int as libc::c_long)
794 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
795 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
796 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
797 +                                     - 1 as libc::c_int as libc::c_long)
798 +                                     * 2 as libc::c_int as libc::c_long
799 +                                     + 1 as libc::c_int as libc::c_long)
800 +                             } else {
801 +                                 (if 1 as libc::c_int != 0 {
802 +                                     0 as libc::c_int as libc::c_long
803 +                                 } else {
804 +                                     (if 1 as libc::c_int != 0 {
805 +                                         0 as libc::c_int as libc::c_long
806 +                                     } else {
807 +                                         n
808 +                                     }) + 0 as libc::c_int as idx_t
809 +                                 }) + 0 as libc::c_int as libc::c_long
810 +                             }) < 0 as libc::c_int as libc::c_long
811 +                             {
812 +                                 (((if 1 as libc::c_int != 0 {
813 +                                     0 as libc::c_int as libc::c_long
814 +                                 } else {
815 +                                     n
816 +                                 }) + 0 as libc::c_int as idx_t)
817 +                                     < -(if ((if 1 as libc::c_int != 0 {
818 +                                         0 as libc::c_int as libc::c_long
819 +                                     } else {
820 +                                         (if 1 as libc::c_int != 0 {
821 +                                             0 as libc::c_int as libc::c_long
822 +                                         } else {
823 +                                             n
824 +                                         }) + 0 as libc::c_int as idx_t
825 +                                     }) - 1 as libc::c_int as libc::c_long)
826 +                                         < 0 as libc::c_int as libc::c_long
827 +                                     {
828 +                                         ((((if 1 as libc::c_int != 0 {
829 +                                             0 as libc::c_int as libc::c_long
830 +                                         } else {
831 +                                             (if 1 as libc::c_int != 0 {
832 +                                                 0 as libc::c_int as libc::c_long
833 +                                             } else {
834 +                                                 n
835 +                                             }) + 0 as libc::c_int as idx_t
836 +                                         }) + 1 as libc::c_int as libc::c_long)
837 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
838 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
839 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
840 +                                             - 1 as libc::c_int as libc::c_long)
841 +                                             * 2 as libc::c_int as libc::c_long
842 +                                             + 1 as libc::c_int as libc::c_long
843 +                                     } else {
844 +                                         (if 1 as libc::c_int != 0 {
845 +                                             0 as libc::c_int as libc::c_long
846 +                                         } else {
847 +                                             (if 1 as libc::c_int != 0 {
848 +                                                 0 as libc::c_int as libc::c_long
849 +                                             } else {
850 +                                                 n
851 +                                             }) + 0 as libc::c_int as idx_t
852 +                                         }) - 1 as libc::c_int as libc::c_long
853 +                                     })) as libc::c_int
854 +                             } else {
855 +                                 ((0 as libc::c_int as libc::c_long)
856 +                                     < (if 1 as libc::c_int != 0 {
857 +                                         0 as libc::c_int as libc::c_long
858 +                                     } else {
859 +                                         n
860 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
861 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
862 +                             {
863 +                                 if ((if 1 as libc::c_int != 0 {
864 +                                     0 as libc::c_int as libc::c_long
865 +                                 } else {
866 +                                     s
867 +                                 }) - 1 as libc::c_int as libc::c_long)
868 +                                     < 0 as libc::c_int as libc::c_long
869 +                                 {
870 +                                     ((0 as libc::c_int as libc::c_long)
871 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
872 +                                 } else {
873 +                                     ((-(1 as libc::c_int) as libc::c_long
874 +                                         - 0 as libc::c_int as idx_t)
875 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
876 +                                 }
877 +                             } else {
878 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
879 +                             }
880 +                         } else {
881 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
882 +                         }
883 ~                     }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:661:32
    |
661 |                           } else {
    |  ________________________________^
662 | |                             if (if (if ((if 1 as libc::c_int != 0 {
663 | |                                 0 as libc::c_int as libc::c_long
664 | |                             } else {
...   |
768 | |                             }
769 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
661 ~                         } else if (if (if ((if 1 as libc::c_int != 0 {
662 +                             0 as libc::c_int as libc::c_long
663 +                         } else {
664 +                             (if 1 as libc::c_int != 0 {
665 +                                 0 as libc::c_int as libc::c_long
666 +                             } else {
667 +                                 s
668 +                             }) + 0 as libc::c_int as idx_t
669 +                         }) - 1 as libc::c_int as libc::c_long)
670 +                             < 0 as libc::c_int as libc::c_long
671 +                         {
672 +                             !(((((if 1 as libc::c_int != 0 {
673 +                                 0 as libc::c_int as libc::c_long
674 +                             } else {
675 +                                 (if 1 as libc::c_int != 0 {
676 +                                     0 as libc::c_int as libc::c_long
677 +                                 } else {
678 +                                     s
679 +                                 }) + 0 as libc::c_int as idx_t
680 +                             }) + 1 as libc::c_int as libc::c_long)
681 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
682 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
683 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
684 +                                 - 1 as libc::c_int as libc::c_long)
685 +                                 * 2 as libc::c_int as libc::c_long
686 +                                 + 1 as libc::c_int as libc::c_long)
687 +                         } else {
688 +                             (if 1 as libc::c_int != 0 {
689 +                                 0 as libc::c_int as libc::c_long
690 +                             } else {
691 +                                 (if 1 as libc::c_int != 0 {
692 +                                     0 as libc::c_int as libc::c_long
693 +                                 } else {
694 +                                     s
695 +                                 }) + 0 as libc::c_int as idx_t
696 +                             }) + 0 as libc::c_int as libc::c_long
697 +                         }) < 0 as libc::c_int as libc::c_long
698 +                         {
699 +                             (((if 1 as libc::c_int != 0 {
700 +                                 0 as libc::c_int as libc::c_long
701 +                             } else {
702 +                                 s
703 +                             }) + 0 as libc::c_int as idx_t)
704 +                                 < -(if ((if 1 as libc::c_int != 0 {
705 +                                     0 as libc::c_int as libc::c_long
706 +                                 } else {
707 +                                     (if 1 as libc::c_int != 0 {
708 +                                         0 as libc::c_int as libc::c_long
709 +                                     } else {
710 +                                         s
711 +                                     }) + 0 as libc::c_int as idx_t
712 +                                 }) - 1 as libc::c_int as libc::c_long)
713 +                                     < 0 as libc::c_int as libc::c_long
714 +                                 {
715 +                                     ((((if 1 as libc::c_int != 0 {
716 +                                         0 as libc::c_int as libc::c_long
717 +                                     } else {
718 +                                         (if 1 as libc::c_int != 0 {
719 +                                             0 as libc::c_int as libc::c_long
720 +                                         } else {
721 +                                             s
722 +                                         }) + 0 as libc::c_int as idx_t
723 +                                     }) + 1 as libc::c_int as libc::c_long)
724 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
725 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
726 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
727 +                                         - 1 as libc::c_int as libc::c_long)
728 +                                         * 2 as libc::c_int as libc::c_long
729 +                                         + 1 as libc::c_int as libc::c_long
730 +                                 } else {
731 +                                     (if 1 as libc::c_int != 0 {
732 +                                         0 as libc::c_int as libc::c_long
733 +                                     } else {
734 +                                         (if 1 as libc::c_int != 0 {
735 +                                             0 as libc::c_int as libc::c_long
736 +                                         } else {
737 +                                             s
738 +                                         }) + 0 as libc::c_int as idx_t
739 +                                     }) - 1 as libc::c_int as libc::c_long
740 +                                 })) as libc::c_int
741 +                         } else {
742 +                             ((0 as libc::c_int as libc::c_long)
743 +                                 < (if 1 as libc::c_int != 0 {
744 +                                     0 as libc::c_int as libc::c_long
745 +                                 } else {
746 +                                     s
747 +                                 }) + 0 as libc::c_int as idx_t) as libc::c_int
748 +                         }) != 0 && s == -(1 as libc::c_int) as libc::c_long
749 +                         {
750 +                             if ((if 1 as libc::c_int != 0 {
751 +                                 0 as libc::c_int as libc::c_long
752 +                             } else {
753 +                                 n
754 +                             }) - 1 as libc::c_int as libc::c_long)
755 +                                 < 0 as libc::c_int as libc::c_long
756 +                             {
757 +                                 ((0 as libc::c_int as libc::c_long)
758 +                                     < n + 0 as libc::c_int as idx_t) as libc::c_int
759 +                             } else {
760 +                                 ((0 as libc::c_int as libc::c_long) < n
761 +                                     && (-(1 as libc::c_int) as libc::c_long
762 +                                         - 0 as libc::c_int as idx_t)
763 +                                         < n - 1 as libc::c_int as libc::c_long) as libc::c_int
764 +                             }
765 +                         } else {
766 +                             (0 as libc::c_int as idx_t / s < n) as libc::c_int
767 +                         }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:648:37
    |
648 | / ...                   (if 1 as libc::c_int != 0 {
649 | | ...                       0 as libc::c_int as libc::c_long
650 | | ...                   } else {
651 | | ...                       s
...   |
654 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
655 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
648 ~                                     ((if 1 as libc::c_int != 0 {
649 +                                         0 as libc::c_int as libc::c_long
650 +                                     } else {
651 +                                         s
652 +                                     }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
653 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
654 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:773:32
    |
773 |                           } else {
    |  ________________________________^
774 | |                             if n < 0 as libc::c_int as libc::c_long {
775 | |                                 if (if (if ((if 1 as libc::c_int != 0 {
776 | |                                     0 as libc::c_int as libc::c_long
...   |
883 | |                             }
884 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
773 ~                         } else if n < 0 as libc::c_int as libc::c_long {
774 +                             if (if (if ((if 1 as libc::c_int != 0 {
775 +                                 0 as libc::c_int as libc::c_long
776 +                             } else {
777 +                                 (if 1 as libc::c_int != 0 {
778 +                                     0 as libc::c_int as libc::c_long
779 +                                 } else {
780 +                                     n
781 +                                 }) + 0 as libc::c_int as idx_t
782 +                             }) - 1 as libc::c_int as libc::c_long)
783 +                                 < 0 as libc::c_int as libc::c_long
784 +                             {
785 +                                 !(((((if 1 as libc::c_int != 0 {
786 +                                     0 as libc::c_int as libc::c_long
787 +                                 } else {
788 +                                     (if 1 as libc::c_int != 0 {
789 +                                         0 as libc::c_int as libc::c_long
790 +                                     } else {
791 +                                         n
792 +                                     }) + 0 as libc::c_int as idx_t
793 +                                 }) + 1 as libc::c_int as libc::c_long)
794 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
795 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
796 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
797 +                                     - 1 as libc::c_int as libc::c_long)
798 +                                     * 2 as libc::c_int as libc::c_long
799 +                                     + 1 as libc::c_int as libc::c_long)
800 +                             } else {
801 +                                 (if 1 as libc::c_int != 0 {
802 +                                     0 as libc::c_int as libc::c_long
803 +                                 } else {
804 +                                     (if 1 as libc::c_int != 0 {
805 +                                         0 as libc::c_int as libc::c_long
806 +                                     } else {
807 +                                         n
808 +                                     }) + 0 as libc::c_int as idx_t
809 +                                 }) + 0 as libc::c_int as libc::c_long
810 +                             }) < 0 as libc::c_int as libc::c_long
811 +                             {
812 +                                 (((if 1 as libc::c_int != 0 {
813 +                                     0 as libc::c_int as libc::c_long
814 +                                 } else {
815 +                                     n
816 +                                 }) + 0 as libc::c_int as idx_t)
817 +                                     < -(if ((if 1 as libc::c_int != 0 {
818 +                                         0 as libc::c_int as libc::c_long
819 +                                     } else {
820 +                                         (if 1 as libc::c_int != 0 {
821 +                                             0 as libc::c_int as libc::c_long
822 +                                         } else {
823 +                                             n
824 +                                         }) + 0 as libc::c_int as idx_t
825 +                                     }) - 1 as libc::c_int as libc::c_long)
826 +                                         < 0 as libc::c_int as libc::c_long
827 +                                     {
828 +                                         ((((if 1 as libc::c_int != 0 {
829 +                                             0 as libc::c_int as libc::c_long
830 +                                         } else {
831 +                                             (if 1 as libc::c_int != 0 {
832 +                                                 0 as libc::c_int as libc::c_long
833 +                                             } else {
834 +                                                 n
835 +                                             }) + 0 as libc::c_int as idx_t
836 +                                         }) + 1 as libc::c_int as libc::c_long)
837 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
838 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
839 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
840 +                                             - 1 as libc::c_int as libc::c_long)
841 +                                             * 2 as libc::c_int as libc::c_long
842 +                                             + 1 as libc::c_int as libc::c_long
843 +                                     } else {
844 +                                         (if 1 as libc::c_int != 0 {
845 +                                             0 as libc::c_int as libc::c_long
846 +                                         } else {
847 +                                             (if 1 as libc::c_int != 0 {
848 +                                                 0 as libc::c_int as libc::c_long
849 +                                             } else {
850 +                                                 n
851 +                                             }) + 0 as libc::c_int as idx_t
852 +                                         }) - 1 as libc::c_int as libc::c_long
853 +                                     })) as libc::c_int
854 +                             } else {
855 +                                 ((0 as libc::c_int as libc::c_long)
856 +                                     < (if 1 as libc::c_int != 0 {
857 +                                         0 as libc::c_int as libc::c_long
858 +                                     } else {
859 +                                         n
860 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
861 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
862 +                             {
863 +                                 if ((if 1 as libc::c_int != 0 {
864 +                                     0 as libc::c_int as libc::c_long
865 +                                 } else {
866 +                                     s
867 +                                 }) - 1 as libc::c_int as libc::c_long)
868 +                                     < 0 as libc::c_int as libc::c_long
869 +                                 {
870 +                                     ((0 as libc::c_int as libc::c_long)
871 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
872 +                                 } else {
873 +                                     ((-(1 as libc::c_int) as libc::c_long
874 +                                         - 0 as libc::c_int as idx_t)
875 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
876 +                                 }
877 +                             } else {
878 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
879 +                             }
880 +                         } else {
881 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
882 +                         }
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:232:16
    |
232 |           } else {
    |  ________________^
233 | |             if scale_factor == 0 as libc::c_int {
234 | |                 0 as libc::c_int
235 | |             } else {
...   |
349 | |             }
350 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
232 ~         } else if scale_factor == 0 as libc::c_int {
233 +             0 as libc::c_int
234 +         } else {
235 +             if *x < 0 as libc::c_int as libc::c_long {
236 +                 if (if (if ((if 1 as libc::c_int != 0 {
237 +                     0 as libc::c_int as libc::c_long
238 +                 } else {
239 +                     (if 1 as libc::c_int != 0 {
240 +                         0 as libc::c_int as libc::c_long
241 +                     } else {
242 +                         *x
243 +                     }) + 0 as libc::c_int as intmax_t
244 +                 }) - 1 as libc::c_int as libc::c_long)
245 +                     < 0 as libc::c_int as libc::c_long
246 +                 {
247 +                     !(((((if 1 as libc::c_int != 0 {
248 +                         0 as libc::c_int as libc::c_long
249 +                     } else {
250 +                         (if 1 as libc::c_int != 0 {
251 +                             0 as libc::c_int as libc::c_long
252 +                         } else {
253 +                             *x
254 +                         }) + 0 as libc::c_int as intmax_t
255 +                     }) + 1 as libc::c_int as libc::c_long)
256 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
257 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
258 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
259 +                         - 1 as libc::c_int as libc::c_long)
260 +                         * 2 as libc::c_int as libc::c_long
261 +                         + 1 as libc::c_int as libc::c_long)
262 +                 } else {
263 +                     (if 1 as libc::c_int != 0 {
264 +                         0 as libc::c_int as libc::c_long
265 +                     } else {
266 +                         (if 1 as libc::c_int != 0 {
267 +                             0 as libc::c_int as libc::c_long
268 +                         } else {
269 +                             *x
270 +                         }) + 0 as libc::c_int as intmax_t
271 +                     }) + 0 as libc::c_int as libc::c_long
272 +                 }) < 0 as libc::c_int as libc::c_long
273 +                 {
274 +                     (((if 1 as libc::c_int != 0 {
275 +                         0 as libc::c_int as libc::c_long
276 +                     } else {
277 +                         *x
278 +                     }) + 0 as libc::c_int as intmax_t)
279 +                         < -(if ((if 1 as libc::c_int != 0 {
280 +                             0 as libc::c_int as libc::c_long
281 +                         } else {
282 +                             (if 1 as libc::c_int != 0 {
283 +                                 0 as libc::c_int as libc::c_long
284 +                             } else {
285 +                                 *x
286 +                             }) + 0 as libc::c_int as intmax_t
287 +                         }) - 1 as libc::c_int as libc::c_long)
288 +                             < 0 as libc::c_int as libc::c_long
289 +                         {
290 +                             ((((if 1 as libc::c_int != 0 {
291 +                                 0 as libc::c_int as libc::c_long
292 +                             } else {
293 +                                 (if 1 as libc::c_int != 0 {
294 +                                     0 as libc::c_int as libc::c_long
295 +                                 } else {
296 +                                     *x
297 +                                 }) + 0 as libc::c_int as intmax_t
298 +                             }) + 1 as libc::c_int as libc::c_long)
299 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
300 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
301 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
302 +                                 - 1 as libc::c_int as libc::c_long)
303 +                                 * 2 as libc::c_int as libc::c_long
304 +                                 + 1 as libc::c_int as libc::c_long
305 +                         } else {
306 +                             (if 1 as libc::c_int != 0 {
307 +                                 0 as libc::c_int as libc::c_long
308 +                             } else {
309 +                                 (if 1 as libc::c_int != 0 {
310 +                                     0 as libc::c_int as libc::c_long
311 +                                 } else {
312 +                                     *x
313 +                                 }) + 0 as libc::c_int as intmax_t
314 +                             }) - 1 as libc::c_int as libc::c_long
315 +                         })) as libc::c_int
316 +                 } else {
317 +                     ((0 as libc::c_int as libc::c_long)
318 +                         < (if 1 as libc::c_int != 0 {
319 +                             0 as libc::c_int as libc::c_long
320 +                         } else {
321 +                             *x
322 +                         }) + 0 as libc::c_int as intmax_t) as libc::c_int
323 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
324 +                 {
325 +                     if ((if 1 as libc::c_int != 0 {
326 +                         0 as libc::c_int
327 +                     } else {
328 +                         scale_factor
329 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
330 +                     {
331 +                         ((0 as libc::c_int as libc::c_long)
332 +                             < scale_factor as libc::c_long
333 +                                 + 0 as libc::c_int as intmax_t) as libc::c_int
334 +                     } else {
335 +                         ((-(1 as libc::c_int) as libc::c_long
336 +                             - 0 as libc::c_int as intmax_t)
337 +                             < (scale_factor - 1 as libc::c_int) as libc::c_long)
338 +                             as libc::c_int
339 +                     }
340 +                 } else {
341 +                     (0 as libc::c_int as intmax_t / *x
342 +                         < scale_factor as libc::c_long) as libc::c_int
343 +                 }
344 +             } else {
345 +                 ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
346 +                     < *x) as libc::c_int
347 +             }
348 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:126:20
    |
126 |               } else {
    |  ____________________^
127 | |                 if (if (if ((if 1 as libc::c_int != 0 {
128 | |                     0 as libc::c_int as libc::c_long
129 | |                 } else {
...   |
230 | |                 }
231 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
126 ~             } else if (if (if ((if 1 as libc::c_int != 0 {
127 +                 0 as libc::c_int as libc::c_long
128 +             } else {
129 +                 (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
130 +                     as libc::c_long + 0 as libc::c_int as intmax_t
131 +             }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
132 +             {
133 +                 !(((((if 1 as libc::c_int != 0 {
134 +                     0 as libc::c_int as libc::c_long
135 +                 } else {
136 +                     (if 1 as libc::c_int != 0 {
137 +                         0 as libc::c_int
138 +                     } else {
139 +                         scale_factor
140 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t
141 +                 }) + 1 as libc::c_int as libc::c_long)
142 +                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
143 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
144 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
145 +                     - 1 as libc::c_int as libc::c_long)
146 +                     * 2 as libc::c_int as libc::c_long
147 +                     + 1 as libc::c_int as libc::c_long)
148 +             } else {
149 +                 (if 1 as libc::c_int != 0 {
150 +                     0 as libc::c_int as libc::c_long
151 +                 } else {
152 +                     (if 1 as libc::c_int != 0 {
153 +                         0 as libc::c_int
154 +                     } else {
155 +                         scale_factor
156 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t
157 +                 }) + 0 as libc::c_int as libc::c_long
158 +             }) < 0 as libc::c_int as libc::c_long
159 +             {
160 +                 (((if 1 as libc::c_int != 0 {
161 +                     0 as libc::c_int
162 +                 } else {
163 +                     scale_factor
164 +                 }) as libc::c_long + 0 as libc::c_int as intmax_t)
165 +                     < -(if ((if 1 as libc::c_int != 0 {
166 +                         0 as libc::c_int as libc::c_long
167 +                     } else {
168 +                         (if 1 as libc::c_int != 0 {
169 +                             0 as libc::c_int
170 +                         } else {
171 +                             scale_factor
172 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t
173 +                     }) - 1 as libc::c_int as libc::c_long)
174 +                         < 0 as libc::c_int as libc::c_long
175 +                     {
176 +                         ((((if 1 as libc::c_int != 0 {
177 +                             0 as libc::c_int as libc::c_long
178 +                         } else {
179 +                             (if 1 as libc::c_int != 0 {
180 +                                 0 as libc::c_int
181 +                             } else {
182 +                                 scale_factor
183 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
184 +                         }) + 1 as libc::c_int as libc::c_long)
185 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
186 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
187 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
188 +                             - 1 as libc::c_int as libc::c_long)
189 +                             * 2 as libc::c_int as libc::c_long
190 +                             + 1 as libc::c_int as libc::c_long
191 +                     } else {
192 +                         (if 1 as libc::c_int != 0 {
193 +                             0 as libc::c_int as libc::c_long
194 +                         } else {
195 +                             (if 1 as libc::c_int != 0 {
196 +                                 0 as libc::c_int
197 +                             } else {
198 +                                 scale_factor
199 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
200 +                         }) - 1 as libc::c_int as libc::c_long
201 +                     })) as libc::c_int
202 +             } else {
203 +                 ((0 as libc::c_int as libc::c_long)
204 +                     < (if 1 as libc::c_int != 0 {
205 +                         0 as libc::c_int
206 +                     } else {
207 +                         scale_factor
208 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
209 +             }) != 0 && scale_factor == -(1 as libc::c_int)
210 +             {
211 +                 if ((if 1 as libc::c_int != 0 {
212 +                     0 as libc::c_int as libc::c_long
213 +                 } else {
214 +                     *x
215 +                 }) - 1 as libc::c_int as libc::c_long)
216 +                     < 0 as libc::c_int as libc::c_long
217 +                 {
218 +                     ((0 as libc::c_int as libc::c_long)
219 +                         < *x + 0 as libc::c_int as intmax_t) as libc::c_int
220 +                 } else {
221 +                     ((0 as libc::c_int as libc::c_long) < *x
222 +                         && (-(1 as libc::c_int) as libc::c_long
223 +                             - 0 as libc::c_int as intmax_t)
224 +                             < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
225 +                 }
226 +             } else {
227 +                 ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
228 +                     as libc::c_int
229 +             }
    |

warning: operator precedence can trip the unwary
   --> src/xstrtoimax.rs:114:25
    |
114 | /                         (if 1 as libc::c_int != 0 {
115 | |                             0 as libc::c_int
116 | |                         } else {
117 | |                             scale_factor
...   |
120 | |                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
121 | |                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
114 ~                         ((if 1 as libc::c_int != 0 {
115 +                             0 as libc::c_int
116 +                         } else {
117 +                             scale_factor
118 +                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t) >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
119 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
120 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:235:20
    |
235 |               } else {
    |  ____________________^
236 | |                 if *x < 0 as libc::c_int as libc::c_long {
237 | |                     if (if (if ((if 1 as libc::c_int != 0 {
238 | |                         0 as libc::c_int as libc::c_long
...   |
348 | |                 }
349 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
235 ~             } else if *x < 0 as libc::c_int as libc::c_long {
236 +                 if (if (if ((if 1 as libc::c_int != 0 {
237 +                     0 as libc::c_int as libc::c_long
238 +                 } else {
239 +                     (if 1 as libc::c_int != 0 {
240 +                         0 as libc::c_int as libc::c_long
241 +                     } else {
242 +                         *x
243 +                     }) + 0 as libc::c_int as intmax_t
244 +                 }) - 1 as libc::c_int as libc::c_long)
245 +                     < 0 as libc::c_int as libc::c_long
246 +                 {
247 +                     !(((((if 1 as libc::c_int != 0 {
248 +                         0 as libc::c_int as libc::c_long
249 +                     } else {
250 +                         (if 1 as libc::c_int != 0 {
251 +                             0 as libc::c_int as libc::c_long
252 +                         } else {
253 +                             *x
254 +                         }) + 0 as libc::c_int as intmax_t
255 +                     }) + 1 as libc::c_int as libc::c_long)
256 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
257 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
258 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
259 +                         - 1 as libc::c_int as libc::c_long)
260 +                         * 2 as libc::c_int as libc::c_long
261 +                         + 1 as libc::c_int as libc::c_long)
262 +                 } else {
263 +                     (if 1 as libc::c_int != 0 {
264 +                         0 as libc::c_int as libc::c_long
265 +                     } else {
266 +                         (if 1 as libc::c_int != 0 {
267 +                             0 as libc::c_int as libc::c_long
268 +                         } else {
269 +                             *x
270 +                         }) + 0 as libc::c_int as intmax_t
271 +                     }) + 0 as libc::c_int as libc::c_long
272 +                 }) < 0 as libc::c_int as libc::c_long
273 +                 {
274 +                     (((if 1 as libc::c_int != 0 {
275 +                         0 as libc::c_int as libc::c_long
276 +                     } else {
277 +                         *x
278 +                     }) + 0 as libc::c_int as intmax_t)
279 +                         < -(if ((if 1 as libc::c_int != 0 {
280 +                             0 as libc::c_int as libc::c_long
281 +                         } else {
282 +                             (if 1 as libc::c_int != 0 {
283 +                                 0 as libc::c_int as libc::c_long
284 +                             } else {
285 +                                 *x
286 +                             }) + 0 as libc::c_int as intmax_t
287 +                         }) - 1 as libc::c_int as libc::c_long)
288 +                             < 0 as libc::c_int as libc::c_long
289 +                         {
290 +                             ((((if 1 as libc::c_int != 0 {
291 +                                 0 as libc::c_int as libc::c_long
292 +                             } else {
293 +                                 (if 1 as libc::c_int != 0 {
294 +                                     0 as libc::c_int as libc::c_long
295 +                                 } else {
296 +                                     *x
297 +                                 }) + 0 as libc::c_int as intmax_t
298 +                             }) + 1 as libc::c_int as libc::c_long)
299 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
300 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
301 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
302 +                                 - 1 as libc::c_int as libc::c_long)
303 +                                 * 2 as libc::c_int as libc::c_long
304 +                                 + 1 as libc::c_int as libc::c_long
305 +                         } else {
306 +                             (if 1 as libc::c_int != 0 {
307 +                                 0 as libc::c_int as libc::c_long
308 +                             } else {
309 +                                 (if 1 as libc::c_int != 0 {
310 +                                     0 as libc::c_int as libc::c_long
311 +                                 } else {
312 +                                     *x
313 +                                 }) + 0 as libc::c_int as intmax_t
314 +                             }) - 1 as libc::c_int as libc::c_long
315 +                         })) as libc::c_int
316 +                 } else {
317 +                     ((0 as libc::c_int as libc::c_long)
318 +                         < (if 1 as libc::c_int != 0 {
319 +                             0 as libc::c_int as libc::c_long
320 +                         } else {
321 +                             *x
322 +                         }) + 0 as libc::c_int as intmax_t) as libc::c_int
323 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
324 +                 {
325 +                     if ((if 1 as libc::c_int != 0 {
326 +                         0 as libc::c_int
327 +                     } else {
328 +                         scale_factor
329 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
330 +                     {
331 +                         ((0 as libc::c_int as libc::c_long)
332 +                             < scale_factor as libc::c_long
333 +                                 + 0 as libc::c_int as intmax_t) as libc::c_int
334 +                     } else {
335 +                         ((-(1 as libc::c_int) as libc::c_long
336 +                             - 0 as libc::c_int as intmax_t)
337 +                             < (scale_factor - 1 as libc::c_int) as libc::c_long)
338 +                             as libc::c_int
339 +                     }
340 +                 } else {
341 +                     (0 as libc::c_int as intmax_t / *x
342 +                         < scale_factor as libc::c_long) as libc::c_int
343 +                 }
344 +             } else {
345 +                 ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
346 +                     < *x) as libc::c_int
347 +             }
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoumax.rs:263:16
    |
263 |           } else {
    |  ________________^
264 | |             if scale_factor == 0 as libc::c_int {
265 | |                 0 as libc::c_int
266 | |             } else {
...   |
396 | |             }
397 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
263 ~         } else if scale_factor == 0 as libc::c_int {
264 +             0 as libc::c_int
265 +         } else {
266 +             if *x < 0 as libc::c_int as libc::c_ulong {
267 +                 if (if (if (if 1 as libc::c_int != 0 {
268 +                     0 as libc::c_int as libc::c_ulong
269 +                 } else {
270 +                     (if 1 as libc::c_int != 0 {
271 +                         0 as libc::c_int as libc::c_ulong
272 +                     } else {
273 +                         *x
274 +                     })
275 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
276 +                 })
277 +                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
278 +                     < 0 as libc::c_int as libc::c_ulong
279 +                 {
280 +                     !((if 1 as libc::c_int != 0 {
281 +                         0 as libc::c_int as libc::c_ulong
282 +                     } else {
283 +                         (if 1 as libc::c_int != 0 {
284 +                             0 as libc::c_int as libc::c_ulong
285 +                         } else {
286 +                             *x
287 +                         })
288 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
289 +                     })
290 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
291 +                         << (::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
292 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
293 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
294 +                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
295 +                         .wrapping_mul(2 as libc::c_int as libc::c_ulong)
296 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
297 +                 } else {
298 +                     (if 1 as libc::c_int != 0 {
299 +                         0 as libc::c_int as libc::c_ulong
300 +                     } else {
301 +                         (if 1 as libc::c_int != 0 {
302 +                             0 as libc::c_int as libc::c_ulong
303 +                         } else {
304 +                             *x
305 +                         })
306 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
307 +                     })
308 +                         .wrapping_add(0 as libc::c_int as libc::c_ulong)
309 +                 }) < 0 as libc::c_int as libc::c_ulong
310 +                 {
311 +                     ((if 1 as libc::c_int != 0 {
312 +                         0 as libc::c_int as libc::c_ulong
313 +                     } else {
314 +                         *x
315 +                     })
316 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
317 +                         < (if (if 1 as libc::c_int != 0 {
318 +                             0 as libc::c_int as libc::c_ulong
319 +                         } else {
320 +                             (if 1 as libc::c_int != 0 {
321 +                                 0 as libc::c_int as libc::c_ulong
322 +                             } else {
323 +                                 *x
324 +                             })
325 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)
326 +                         })
327 +                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
328 +                             < 0 as libc::c_int as libc::c_ulong
329 +                         {
330 +                             ((if 1 as libc::c_int != 0 {
331 +                                 0 as libc::c_int as libc::c_ulong
332 +                             } else {
333 +                                 (if 1 as libc::c_int != 0 {
334 +                                     0 as libc::c_int as libc::c_ulong
335 +                                 } else {
336 +                                     *x
337 +                                 })
338 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
339 +                             })
340 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
341 +                                 << (::core::mem::size_of::<libc::c_ulong>()
342 +                                     as libc::c_ulong)
343 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
344 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
345 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
346 +                                 .wrapping_mul(2 as libc::c_int as libc::c_ulong)
347 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
348 +                         } else {
349 +                             (if 1 as libc::c_int != 0 {
350 +                                 0 as libc::c_int as libc::c_ulong
351 +                             } else {
352 +                                 (if 1 as libc::c_int != 0 {
353 +                                     0 as libc::c_int as libc::c_ulong
354 +                                 } else {
355 +                                     *x
356 +                                 })
357 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
358 +                             })
359 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
360 +                         })
361 +                             .wrapping_neg()) as libc::c_int
362 +                 } else {
363 +                     ((0 as libc::c_int as libc::c_ulong)
364 +                         < (if 1 as libc::c_int != 0 {
365 +                             0 as libc::c_int as libc::c_ulong
366 +                         } else {
367 +                             *x
368 +                         })
369 +                             .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
370 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_ulong
371 +                 {
372 +                     if ((if 1 as libc::c_int != 0 {
373 +                         0 as libc::c_int
374 +                     } else {
375 +                         scale_factor
376 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
377 +                     {
378 +                         ((0 as libc::c_int as libc::c_ulong)
379 +                             < (scale_factor as libc::c_ulong)
380 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
381 +                     } else {
382 +                         ((-(1 as libc::c_int) as libc::c_ulong)
383 +                             .wrapping_sub(0 as libc::c_int as uintmax_t)
384 +                             < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
385 +                             as libc::c_int
386 +                     }
387 +                 } else {
388 +                     ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
389 +                         < scale_factor as libc::c_ulong) as libc::c_int
390 +                 }
391 +             } else {
392 +                 ((-(1 as libc::c_int) as uintmax_t)
393 +                     .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
394 +             }
395 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoumax.rs:134:20
    |
134 |               } else {
    |  ____________________^
135 | |                 if (if (if (if 1 as libc::c_int != 0 {
136 | |                     0 as libc::c_int as libc::c_ulong
137 | |                 } else {
...   |
261 | |                 }
262 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
134 ~             } else if (if (if (if 1 as libc::c_int != 0 {
135 +                 0 as libc::c_int as libc::c_ulong
136 +             } else {
137 +                 ((if 1 as libc::c_int != 0 {
138 +                     0 as libc::c_int
139 +                 } else {
140 +                     scale_factor
141 +                 }) as libc::c_ulong)
142 +                     .wrapping_add(0 as libc::c_int as uintmax_t)
143 +             })
144 +                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
145 +                 < 0 as libc::c_int as libc::c_ulong
146 +             {
147 +                 !((if 1 as libc::c_int != 0 {
148 +                     0 as libc::c_int as libc::c_ulong
149 +                 } else {
150 +                     ((if 1 as libc::c_int != 0 {
151 +                         0 as libc::c_int
152 +                     } else {
153 +                         scale_factor
154 +                     }) as libc::c_ulong)
155 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
156 +                 })
157 +                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
158 +                     << (::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
159 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
160 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
161 +                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
162 +                     .wrapping_mul(2 as libc::c_int as libc::c_ulong)
163 +                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
164 +             } else {
165 +                 (if 1 as libc::c_int != 0 {
166 +                     0 as libc::c_int as libc::c_ulong
167 +                 } else {
168 +                     ((if 1 as libc::c_int != 0 {
169 +                         0 as libc::c_int
170 +                     } else {
171 +                         scale_factor
172 +                     }) as libc::c_ulong)
173 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
174 +                 })
175 +                     .wrapping_add(0 as libc::c_int as libc::c_ulong)
176 +             }) < 0 as libc::c_int as libc::c_ulong
177 +             {
178 +                 (((if 1 as libc::c_int != 0 {
179 +                     0 as libc::c_int
180 +                 } else {
181 +                     scale_factor
182 +                 }) as libc::c_ulong)
183 +                     .wrapping_add(0 as libc::c_int as uintmax_t)
184 +                     < (if (if 1 as libc::c_int != 0 {
185 +                         0 as libc::c_int as libc::c_ulong
186 +                     } else {
187 +                         ((if 1 as libc::c_int != 0 {
188 +                             0 as libc::c_int
189 +                         } else {
190 +                             scale_factor
191 +                         }) as libc::c_ulong)
192 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
193 +                     })
194 +                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
195 +                         < 0 as libc::c_int as libc::c_ulong
196 +                     {
197 +                         ((if 1 as libc::c_int != 0 {
198 +                             0 as libc::c_int as libc::c_ulong
199 +                         } else {
200 +                             ((if 1 as libc::c_int != 0 {
201 +                                 0 as libc::c_int
202 +                             } else {
203 +                                 scale_factor
204 +                             }) as libc::c_ulong)
205 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)
206 +                         })
207 +                             .wrapping_add(1 as libc::c_int as libc::c_ulong)
208 +                             << (::core::mem::size_of::<libc::c_ulong>()
209 +                                 as libc::c_ulong)
210 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
211 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
212 +                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
213 +                             .wrapping_mul(2 as libc::c_int as libc::c_ulong)
214 +                             .wrapping_add(1 as libc::c_int as libc::c_ulong)
215 +                     } else {
216 +                         (if 1 as libc::c_int != 0 {
217 +                             0 as libc::c_int as libc::c_ulong
218 +                         } else {
219 +                             ((if 1 as libc::c_int != 0 {
220 +                                 0 as libc::c_int
221 +                             } else {
222 +                                 scale_factor
223 +                             }) as libc::c_ulong)
224 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)
225 +                         })
226 +                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
227 +                     })
228 +                         .wrapping_neg()) as libc::c_int
229 +             } else {
230 +                 ((0 as libc::c_int as libc::c_ulong)
231 +                     < ((if 1 as libc::c_int != 0 {
232 +                         0 as libc::c_int
233 +                     } else {
234 +                         scale_factor
235 +                     }) as libc::c_ulong)
236 +                         .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
237 +             }) != 0 && scale_factor == -(1 as libc::c_int)
238 +             {
239 +                 if (if 1 as libc::c_int != 0 {
240 +                     0 as libc::c_int as libc::c_ulong
241 +                 } else {
242 +                     *x
243 +                 })
244 +                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
245 +                     < 0 as libc::c_int as libc::c_ulong
246 +                 {
247 +                     ((0 as libc::c_int as libc::c_ulong)
248 +                         < (*x).wrapping_add(0 as libc::c_int as uintmax_t))
249 +                         as libc::c_int
250 +                 } else {
251 +                     ((0 as libc::c_int as libc::c_ulong) < *x
252 +                         && (-(1 as libc::c_int) as libc::c_ulong)
253 +                             .wrapping_sub(0 as libc::c_int as uintmax_t)
254 +                             < (*x).wrapping_sub(1 as libc::c_int as libc::c_ulong))
255 +                         as libc::c_int
256 +                 }
257 +             } else {
258 +                 ((0 as libc::c_int as uintmax_t)
259 +                     .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
260 +             }
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoumax.rs:266:20
    |
266 |               } else {
    |  ____________________^
267 | |                 if *x < 0 as libc::c_int as libc::c_ulong {
268 | |                     if (if (if (if 1 as libc::c_int != 0 {
269 | |                         0 as libc::c_int as libc::c_ulong
...   |
395 | |                 }
396 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
266 ~             } else if *x < 0 as libc::c_int as libc::c_ulong {
267 +                 if (if (if (if 1 as libc::c_int != 0 {
268 +                     0 as libc::c_int as libc::c_ulong
269 +                 } else {
270 +                     (if 1 as libc::c_int != 0 {
271 +                         0 as libc::c_int as libc::c_ulong
272 +                     } else {
273 +                         *x
274 +                     })
275 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
276 +                 })
277 +                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
278 +                     < 0 as libc::c_int as libc::c_ulong
279 +                 {
280 +                     !((if 1 as libc::c_int != 0 {
281 +                         0 as libc::c_int as libc::c_ulong
282 +                     } else {
283 +                         (if 1 as libc::c_int != 0 {
284 +                             0 as libc::c_int as libc::c_ulong
285 +                         } else {
286 +                             *x
287 +                         })
288 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
289 +                     })
290 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
291 +                         << (::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
292 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
293 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
294 +                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
295 +                         .wrapping_mul(2 as libc::c_int as libc::c_ulong)
296 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
297 +                 } else {
298 +                     (if 1 as libc::c_int != 0 {
299 +                         0 as libc::c_int as libc::c_ulong
300 +                     } else {
301 +                         (if 1 as libc::c_int != 0 {
302 +                             0 as libc::c_int as libc::c_ulong
303 +                         } else {
304 +                             *x
305 +                         })
306 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
307 +                     })
308 +                         .wrapping_add(0 as libc::c_int as libc::c_ulong)
309 +                 }) < 0 as libc::c_int as libc::c_ulong
310 +                 {
311 +                     ((if 1 as libc::c_int != 0 {
312 +                         0 as libc::c_int as libc::c_ulong
313 +                     } else {
314 +                         *x
315 +                     })
316 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
317 +                         < (if (if 1 as libc::c_int != 0 {
318 +                             0 as libc::c_int as libc::c_ulong
319 +                         } else {
320 +                             (if 1 as libc::c_int != 0 {
321 +                                 0 as libc::c_int as libc::c_ulong
322 +                             } else {
323 +                                 *x
324 +                             })
325 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)
326 +                         })
327 +                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
328 +                             < 0 as libc::c_int as libc::c_ulong
329 +                         {
330 +                             ((if 1 as libc::c_int != 0 {
331 +                                 0 as libc::c_int as libc::c_ulong
332 +                             } else {
333 +                                 (if 1 as libc::c_int != 0 {
334 +                                     0 as libc::c_int as libc::c_ulong
335 +                                 } else {
336 +                                     *x
337 +                                 })
338 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
339 +                             })
340 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
341 +                                 << (::core::mem::size_of::<libc::c_ulong>()
342 +                                     as libc::c_ulong)
343 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
344 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
345 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
346 +                                 .wrapping_mul(2 as libc::c_int as libc::c_ulong)
347 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
348 +                         } else {
349 +                             (if 1 as libc::c_int != 0 {
350 +                                 0 as libc::c_int as libc::c_ulong
351 +                             } else {
352 +                                 (if 1 as libc::c_int != 0 {
353 +                                     0 as libc::c_int as libc::c_ulong
354 +                                 } else {
355 +                                     *x
356 +                                 })
357 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
358 +                             })
359 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
360 +                         })
361 +                             .wrapping_neg()) as libc::c_int
362 +                 } else {
363 +                     ((0 as libc::c_int as libc::c_ulong)
364 +                         < (if 1 as libc::c_int != 0 {
365 +                             0 as libc::c_int as libc::c_ulong
366 +                         } else {
367 +                             *x
368 +                         })
369 +                             .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
370 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_ulong
371 +                 {
372 +                     if ((if 1 as libc::c_int != 0 {
373 +                         0 as libc::c_int
374 +                     } else {
375 +                         scale_factor
376 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
377 +                     {
378 +                         ((0 as libc::c_int as libc::c_ulong)
379 +                             < (scale_factor as libc::c_ulong)
380 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
381 +                     } else {
382 +                         ((-(1 as libc::c_int) as libc::c_ulong)
383 +                             .wrapping_sub(0 as libc::c_int as uintmax_t)
384 +                             < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
385 +                             as libc::c_int
386 +                     }
387 +                 } else {
388 +                     ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
389 +                         < scale_factor as libc::c_ulong) as libc::c_int
390 +                 }
391 +             } else {
392 +                 ((-(1 as libc::c_int) as uintmax_t)
393 +                     .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
394 +             }
    |

warning: unsafe function's docs miss `# Safety` section
  --> src/alignalloc.rs:12:1
   |
12 | / pub unsafe extern "C" fn alignalloc(
13 | |     mut alignment: idx_t,
14 | |     mut size: idx_t,
15 | | ) -> *mut libc::c_void {
...  |
22 | |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
23 | | }
   | |_^
   |
   = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/alignalloc.rs:22:5
   |
22 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong)`
   |
   = note: `-W clippy::needless-return` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:16:8
   |
16 |     if (-(1 as libc::c_int) as size_t) < alignment as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:16:42
   |
16 |     if (-(1 as libc::c_int) as size_t) < alignment as libc::c_ulong {
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
  --> src/alignalloc.rs:17:21
   |
17 |         alignment = -(1 as libc::c_int) as size_t as idx_t;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:17:21
   |
17 |         alignment = -(1 as libc::c_int) as size_t as idx_t;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:19:8
   |
19 |     if (-(1 as libc::c_int) as size_t) < size as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:19:42
   |
19 |     if (-(1 as libc::c_int) as size_t) < size as libc::c_ulong {
   |                                          ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
  --> src/alignalloc.rs:20:16
   |
20 |         size = -(1 as libc::c_int) as size_t as idx_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:20:16
   |
20 |         size = -(1 as libc::c_int) as size_t as idx_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:22:26
   |
22 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:22:54
   |
22 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |                                                      ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/alignalloc.rs:27:1
   |
27 | / pub unsafe extern "C" fn alignfree(mut ptr: *mut libc::c_void) {
28 | |     free(ptr);
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
  --> src/basename_lgpl.rs:7:1
   |
7  | / pub unsafe extern "C" fn last_component(
8  | |     mut name: *const libc::c_char,
9  | | ) -> *mut libc::c_char {
10 | |     let mut base: *const libc::c_char = name.offset(0 as libc::c_int as isize);
...  |
28 | |     return base as *mut libc::c_char;
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/basename_lgpl.rs:7:1
   |
7  | / pub unsafe extern "C" fn last_component(
8  | |     mut name: *const libc::c_char,
9  | | ) -> *mut libc::c_char {
10 | |     let mut base: *const libc::c_char = name.offset(0 as libc::c_int as isize);
...  |
28 | |     return base as *mut libc::c_char;
29 | | }
   | |_^
   |
   = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/basename_lgpl.rs:28:5
   |
28 |     return base as *mut libc::c_char;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `base as *mut libc::c_char`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
  --> src/basename_lgpl.rs:11:38
   |
11 |     let mut p: *const libc::c_char = 0 as *const libc::c_char;
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:13:11
   |
13 |     while *base as libc::c_int == '/' as i32 {
   |           ^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*base)`
   |
   = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
  --> src/basename_lgpl.rs:15:9
   |
15 |         base;
   |         ^^^^^
   |
   = note: `-W clippy::no-effect` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:19:12
   |
19 |         if *p as libc::c_int == '/' as i32 {
   |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
  --> src/basename_lgpl.rs:26:9
   |
26 |         p;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/basename_lgpl.rs:31:1
   |
31 | / pub unsafe extern "C" fn base_len(mut name: *const libc::c_char) -> size_t {
32 | |     let mut len: size_t = 0;
33 | |     let mut prefix_len: size_t = 0 as libc::c_int as size_t;
34 | |     len = strlen(name);
...  |
54 | |     return len;
55 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/basename_lgpl.rs:54:5
   |
54 |     return len;
   |     ^^^^^^^^^^^ help: remove `return`: `len`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:33:34
   |
33 |     let mut prefix_len: size_t = 0 as libc::c_int as size_t;
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:35:11
   |
35 |     while (1 as libc::c_int as libc::c_ulong) < len
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:36:12
   |
36 |           && *name.offset(len.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
   |  ____________^
37 | |             as libc::c_int == '/' as i32
   | |__________________________^ help: try: `i32::from(*name.offset(len.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/basename_lgpl.rs:36:25
   |
36 |         && *name.offset(len.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/basename_lgpl.rs:36:25
   |
36 |         && *name.offset(len.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:36:42
   |
36 |         && *name.offset(len.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: statement with no effect
  --> src/basename_lgpl.rs:40:9
   |
40 |         len;
   |         ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:42:40
   |
42 |     if 0 as libc::c_int != 0 && len == 1 as libc::c_int as libc::c_ulong
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:43:12
   |
43 |         && *name.offset(0 as libc::c_int as isize) as libc::c_int == '/' as i32
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*name.offset(0 as libc::c_int as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:44:12
   |
44 |         && *name.offset(1 as libc::c_int as isize) as libc::c_int == '/' as i32
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*name.offset(1 as libc::c_int as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:47:16
   |
47 |         return 2 as libc::c_int as size_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:50:12
   |
50 |         && *name.offset(prefix_len as isize) as libc::c_int == '/' as i32
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*name.offset(prefix_len as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/basename_lgpl.rs:50:25
   |
50 |         && *name.offset(prefix_len as isize) as libc::c_int == '/' as i32
   |                         ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/basename_lgpl.rs:50:25
   |
50 |         && *name.offset(prefix_len as isize) as libc::c_int == '/' as i32
   |                         ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:52:40
   |
52 |         return prefix_len.wrapping_add(1 as libc::c_int as libc::c_ulong);
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/binary_io.rs:5:1
   |
5  | / pub unsafe extern "C" fn set_binary_mode(
6  | |     mut fd: libc::c_int,
7  | |     mut mode: libc::c_int,
8  | | ) -> libc::c_int {
9  | |     return __gl_setmode(fd, mode);
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/binary_io.rs:9:5
  |
9 |     return __gl_setmode(fd, mode);
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_setmode(fd, mode)`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/binary_io.rs:14:1
   |
14 | / pub unsafe extern "C" fn __gl_setmode(
15 | |     mut _fd: libc::c_int,
16 | |     mut _mode: libc::c_int,
17 | | ) -> libc::c_int {
18 | |     return 0 as libc::c_int;
19 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/binary_io.rs:14:1
   |
14 | / pub unsafe extern "C" fn __gl_setmode(
15 | |     mut _fd: libc::c_int,
16 | |     mut _mode: libc::c_int,
17 | | ) -> libc::c_int {
18 | |     return 0 as libc::c_int;
19 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/binary_io.rs:18:5
   |
18 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:5:1
   |
5  | / pub unsafe extern "C" fn c_isalnum(mut c: libc::c_int) -> bool {
6  | |     match c {
7  | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
8  | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
13 | |     };
14 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:5:1
   |
5  | / pub unsafe extern "C" fn c_isalnum(mut c: libc::c_int) -> bool {
6  | |     match c {
7  | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
8  | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
13 | |     };
14 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:11:22
   |
11 |         | 89 | 90 => return 1 as libc::c_int != 0,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:12:14
   |
12 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:18:1
   |
18 | / pub unsafe extern "C" fn c_isalpha(mut c: libc::c_int) -> bool {
19 | |     match c {
20 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
21 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 65 | 66
...  |
25 | |     };
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:18:1
   |
18 | / pub unsafe extern "C" fn c_isalpha(mut c: libc::c_int) -> bool {
19 | |     match c {
20 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
21 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 65 | 66
...  |
25 | |     };
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:23:52
   |
23 |         | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:24:14
   |
24 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:30:1
   |
30 | / pub unsafe extern "C" fn c_isascii(mut c: libc::c_int) -> bool {
31 | |     match c {
32 | |         32 | 7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16
33 | |         | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127
...  |
42 | |     };
43 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:30:1
   |
30 | / pub unsafe extern "C" fn c_isascii(mut c: libc::c_int) -> bool {
31 | |     match c {
32 | |         32 | 7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16
33 | |         | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127
...  |
42 | |     };
43 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:40:37
   |
40 |         | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:41:14
   |
41 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:47:1
   |
47 | / pub unsafe extern "C" fn c_isblank(mut c: libc::c_int) -> bool {
48 | |     return c == ' ' as i32 || c == '\t' as i32;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:47:1
   |
47 | / pub unsafe extern "C" fn c_isblank(mut c: libc::c_int) -> bool {
48 | |     return c == ' ' as i32 || c == '\t' as i32;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:48:5
   |
48 |     return c == ' ' as i32 || c == '\t' as i32;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c == ' ' as i32 || c == '\t' as i32`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:53:1
   |
53 | / pub unsafe extern "C" fn c_iscntrl(mut c: libc::c_int) -> bool {
54 | |     match c {
55 | |         7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16 | 17
56 | |         | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127 => {
...  |
60 | |     };
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:53:1
   |
53 | / pub unsafe extern "C" fn c_iscntrl(mut c: libc::c_int) -> bool {
54 | |     match c {
55 | |         7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16 | 17
56 | |         | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127 => {
...  |
60 | |     };
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:57:13
   |
57 |             return 1 as libc::c_int != 0;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:59:14
   |
59 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:65:1
   |
65 | / pub unsafe extern "C" fn c_isdigit(mut c: libc::c_int) -> bool {
66 | |     match c {
67 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => return 1 as libc::c_int != 0,
68 | |         _ => return 0 as libc::c_int != 0,
69 | |     };
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:65:1
   |
65 | / pub unsafe extern "C" fn c_isdigit(mut c: libc::c_int) -> bool {
66 | |     match c {
67 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => return 1 as libc::c_int != 0,
68 | |         _ => return 0 as libc::c_int != 0,
69 | |     };
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:67:60
   |
67 |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => return 1 as libc::c_int != 0,
   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:68:14
   |
68 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:74:1
   |
74 | / pub unsafe extern "C" fn c_isgraph(mut c: libc::c_int) -> bool {
75 | |     match c {
76 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
77 | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
84 | |     };
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:74:1
   |
74 | / pub unsafe extern "C" fn c_isgraph(mut c: libc::c_int) -> bool {
75 | |     match c {
76 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
77 | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
84 | |     };
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:82:27
   |
82 |         | 88 | 89 | 90 => return 1 as libc::c_int != 0,
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:83:14
   |
83 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:89:1
   |
89 | / pub unsafe extern "C" fn c_islower(mut c: libc::c_int) -> bool {
90 | |     match c {
91 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
92 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...  |
96 | |     };
97 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:89:1
   |
89 | / pub unsafe extern "C" fn c_islower(mut c: libc::c_int) -> bool {
90 | |     match c {
91 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
92 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...  |
96 | |     };
97 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:93:13
   |
93 |             return 1 as libc::c_int != 0;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:95:14
   |
95 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:101:1
    |
101 | / pub unsafe extern "C" fn c_isprint(mut c: libc::c_int) -> bool {
102 | |     match c {
103 | |         32 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
104 | |         | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
...   |
111 | |     };
112 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:101:1
    |
101 | / pub unsafe extern "C" fn c_isprint(mut c: libc::c_int) -> bool {
102 | |     match c {
103 | |         32 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
104 | |         | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
...   |
111 | |     };
112 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:109:37
    |
109 |         | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:110:14
    |
110 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:116:1
    |
116 | / pub unsafe extern "C" fn c_ispunct(mut c: libc::c_int) -> bool {
117 | |     match c {
118 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
119 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
...   |
122 | |     };
123 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:116:1
    |
116 | / pub unsafe extern "C" fn c_ispunct(mut c: libc::c_int) -> bool {
117 | |     match c {
118 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
119 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
...   |
122 | |     };
123 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:120:18
    |
120 |         | 126 => return 1 as libc::c_int != 0,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:121:14
    |
121 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:127:1
    |
127 | / pub unsafe extern "C" fn c_isspace(mut c: libc::c_int) -> bool {
128 | |     match c {
129 | |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
130 | |         _ => return 0 as libc::c_int != 0,
131 | |     };
132 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:127:1
    |
127 | / pub unsafe extern "C" fn c_isspace(mut c: libc::c_int) -> bool {
128 | |     match c {
129 | |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
130 | |         _ => return 0 as libc::c_int != 0,
131 | |     };
132 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:129:39
    |
129 |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:130:14
    |
130 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:136:1
    |
136 | / pub unsafe extern "C" fn c_isupper(mut c: libc::c_int) -> bool {
137 | |     match c {
138 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
139 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
140 | |         _ => return 0 as libc::c_int != 0,
141 | |     };
142 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:136:1
    |
136 | / pub unsafe extern "C" fn c_isupper(mut c: libc::c_int) -> bool {
137 | |     match c {
138 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
139 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
140 | |         _ => return 0 as libc::c_int != 0,
141 | |     };
142 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:139:62
    |
139 |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:140:14
    |
140 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:146:1
    |
146 | / pub unsafe extern "C" fn c_isxdigit(mut c: libc::c_int) -> bool {
147 | |     match c {
148 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
149 | |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
150 | |         _ => return 0 as libc::c_int != 0,
151 | |     };
152 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:146:1
    |
146 | / pub unsafe extern "C" fn c_isxdigit(mut c: libc::c_int) -> bool {
147 | |     match c {
148 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
149 | |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
150 | |         _ => return 0 as libc::c_int != 0,
151 | |     };
152 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:149:42
    |
149 |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:150:14
    |
150 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:156:1
    |
156 | / pub unsafe extern "C" fn c_tolower(mut c: libc::c_int) -> libc::c_int {
157 | |     match c {
158 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
159 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => {
...   |
163 | |     };
164 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:156:1
    |
156 | / pub unsafe extern "C" fn c_tolower(mut c: libc::c_int) -> libc::c_int {
157 | |     match c {
158 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
159 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => {
...   |
163 | |     };
164 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:160:13
    |
160 |             return c - 'A' as i32 + 'a' as i32;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c - 'A' as i32 + 'a' as i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:162:14
    |
162 |         _ => return c,
    |              ^^^^^^^^ help: remove `return`: `c`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:168:1
    |
168 | / pub unsafe extern "C" fn c_toupper(mut c: libc::c_int) -> libc::c_int {
169 | |     match c {
170 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
171 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...   |
175 | |     };
176 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:168:1
    |
168 | / pub unsafe extern "C" fn c_toupper(mut c: libc::c_int) -> libc::c_int {
169 | |     match c {
170 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
171 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...   |
175 | |     };
176 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:172:13
    |
172 |             return c - 'a' as i32 + 'A' as i32;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c - 'a' as i32 + 'A' as i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:174:14
    |
174 |         _ => return c,
    |              ^^^^^^^^ help: remove `return`: `c`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
  --> src/c_strcasecmp.rs:3:1
   |
3  | / unsafe extern "C" fn c_tolower(mut c: libc::c_int) -> libc::c_int {
4  | |     match c {
5  | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
6  | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => {
...  |
10 | |     };
11 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
 --> src/c_strcasecmp.rs:7:13
  |
7 |             return c - 'A' as i32 + 'a' as i32;
  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c - 'A' as i32 + 'a' as i32`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
 --> src/c_strcasecmp.rs:9:14
  |
9 |         _ => return c,
  |              ^^^^^^^^ help: remove `return`: `c`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_strcasecmp.rs:13:1
   |
13 | / pub unsafe extern "C" fn c_strcasecmp(
14 | |     mut s1: *const libc::c_char,
15 | |     mut s2: *const libc::c_char,
16 | | ) -> libc::c_int {
...  |
45 | |     };
46 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/c_strcasecmp.rs:34:12
   |
34 |         if !(c1 as libc::c_int == c2 as libc::c_int) {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `c1 as libc::c_int != c2 as libc::c_int`
   |
   = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/c_strcasecmp.rs:41:9
   |
41 |         return c1 as libc::c_int - c2 as libc::c_int
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c1 as libc::c_int - c2 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_strcasecmp.rs:43:9
   |
43 | /         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
44 | |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   | |______________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
43 ~         (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
44 +             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/c_strcasecmp.rs:17:40
   |
17 |     let mut p1: *const libc::c_uchar = s1 as *const libc::c_uchar;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `s1.cast::<u8>()`
   |
   = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/c_strcasecmp.rs:18:40
   |
18 |     let mut p2: *const libc::c_uchar = s2 as *const libc::c_uchar;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `s2.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u8` may truncate the value
  --> src/c_strcasecmp.rs:25:14
   |
25 |         c1 = c_tolower(*p1 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
  --> src/c_strcasecmp.rs:25:14
   |
25 |         c1 = c_tolower(*p1 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:25:24
   |
25 |         c1 = c_tolower(*p1 as libc::c_int) as libc::c_uchar;
   |                        ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u8` may truncate the value
  --> src/c_strcasecmp.rs:26:14
   |
26 |         c2 = c_tolower(*p2 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
  --> src/c_strcasecmp.rs:26:14
   |
26 |         c2 = c_tolower(*p2 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:26:24
   |
26 |         c2 = c_tolower(*p2 as libc::c_int) as libc::c_uchar;
   |                        ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:27:12
   |
27 |         if c1 as libc::c_int == '\0' as i32 {
   |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
  --> src/c_strcasecmp.rs:31:9
   |
31 |         p1;
   |         ^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/c_strcasecmp.rs:33:9
   |
33 |         p2;
   |         ^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:34:14
   |
34 |         if !(c1 as libc::c_int == c2 as libc::c_int) {
   |              ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:34:35
   |
34 |         if !(c1 as libc::c_int == c2 as libc::c_int) {
   |                                   ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:41:16
   |
41 |         return c1 as libc::c_int - c2 as libc::c_int
   |                ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:41:36
   |
41 |         return c1 as libc::c_int - c2 as libc::c_int
   |                                    ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/c_strcasecmp.rs:43:16
   |
43 |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1 as libc::c_int > c2 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:43:17
   |
43 |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
   |                 ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:43:37
   |
43 |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
   |                                     ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/c_strcasecmp.rs:44:15
   |
44 |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((c1 as libc::c_int) < c2 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:44:16
   |
44 |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |                ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:44:38
   |
44 |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |                                      ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/close_stream.rs:30:22
   |
30 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = note: `-W clippy::use-self` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/close_stream.rs:41:29
   |
41 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/close_stream.rs:50:1
   |
50 | / pub unsafe extern "C" fn close_stream(mut stream: *mut FILE) -> libc::c_int {
51 | |     let some_pending: bool = __fpending(stream) != 0 as libc::c_int as libc::c_ulong;
52 | |     let prev_fail: bool = ferror_unlocked(stream) != 0 as libc::c_int;
53 | |     let fclose_fail: bool = rpl_fclose(stream) != 0 as libc::c_int;
...  |
64 | |     return 0 as libc::c_int;
65 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/close_stream.rs:64:5
   |
64 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/close_stream.rs:51:52
   |
51 |     let some_pending: bool = __fpending(stream) != 0 as libc::c_int as libc::c_ulong;
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/close_stream.rs:54:8
   |
54 |     if prev_fail as libc::c_int != 0
   |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(prev_fail)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/close_stream.rs:55:12
   |
55 |         || fclose_fail as libc::c_int != 0
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fclose_fail)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/close_stream.rs:56:17
   |
56 |             && (some_pending as libc::c_int != 0
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(some_pending)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/closeout.rs:38:22
   |
38 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/closeout.rs:49:29
   |
49 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/closeout.rs:63:1
   |
63 | / pub unsafe extern "C" fn close_stdout_set_file_name(mut file: *const libc::c_char) {
64 | |     file_name = file;
65 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
  --> src/closeout.rs:68:1
   |
68 | / pub unsafe extern "C" fn close_stdout_set_ignore_EPIPE(mut ignore: bool) {
69 | |     ignore_EPIPE = ignore;
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/closeout.rs:72:1
    |
72  | / pub unsafe extern "C" fn close_stdout() {
73  | |     if close_stream(stdout) != 0 as libc::c_int
74  | |         && !(ignore_EPIPE as libc::c_int != 0
75  | |             && *__errno_location() == 32 as libc::c_int)
...   |
166 | |     }
167 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/closeout.rs:74:14
   |
74 |         && !(ignore_EPIPE as libc::c_int != 0
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ignore_EPIPE)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:78:13
   |
78 |             b"write error\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
   --> src/closeout.rs:80:9
    |
80  | /         if !file_name.is_null() {
81  | |             if 0 != 0 {
82  | |                 error(
83  | |                     0 as libc::c_int,
...   |
160 | |             };
161 | |         }
    | |_________^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/closeout.rs:81:13
    |
81  | /             if 0 != 0 {
82  | |                 error(
83  | |                     0 as libc::c_int,
84  | |                     *__errno_location(),
...   |
120 | |                 });
121 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/closeout.rs:81:16
   |
81 |             if 0 != 0 {
   |                ^^^^^^
   |
   = note: `-W clippy::eq-op` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:85:21
   |
85 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/closeout.rs:89:17
   |
89 | /                 if 0 as libc::c_int != 0 as libc::c_int {
90 | |                     unreachable!();
91 | |                 } else {};
   | |_________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/closeout.rs:89:20
   |
89 |                 if 0 as libc::c_int != 0 as libc::c_int {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
  --> src/closeout.rs:94:21
   |
94 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:98:25
   |
98 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:102:21
    |
102 | /                     if __errstatus != 0 as libc::c_int {
103 | |                         unreachable!();
104 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:108:21
    |
108 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:112:25
    |
112 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:116:21
    |
116 | /                     if __errstatus != 0 as libc::c_int {
117 | |                         unreachable!();
118 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/closeout.rs:123:13
    |
123 | /             if 0 != 0 {
124 | |                 error(
125 | |                     0 as libc::c_int,
126 | |                     *__errno_location(),
...   |
159 | |                 });
160 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:123:16
    |
123 |             if 0 != 0 {
    |                ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:127:21
    |
127 |                     b"%s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:130:17
    |
130 | /                 if 0 as libc::c_int != 0 as libc::c_int {
131 | |                     unreachable!();
132 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:130:20
    |
130 |                 if 0 as libc::c_int != 0 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:135:21
    |
135 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:139:25
    |
139 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:142:21
    |
142 | /                     if __errstatus != 0 as libc::c_int {
143 | |                         unreachable!();
144 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:148:21
    |
148 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:152:25
    |
152 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:155:21
    |
155 | /                     if __errstatus != 0 as libc::c_int {
156 | |                         unreachable!();
157 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
   --> src/closeout.rs:164:8
    |
164 |     if SANITIZE_ADDRESS as libc::c_int == 0 && close_stream(stderr) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
 --> src/dup_safer.rs:6:1
  |
6 | / pub unsafe extern "C" fn dup_safer(mut fd: libc::c_int) -> libc::c_int {
7 | |     return rpl_fcntl(fd, 0 as libc::c_int, 2 as libc::c_int + 1 as libc::c_int);
8 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/dup_safer.rs:7:5
  |
7 |     return rpl_fcntl(fd, 0 as libc::c_int, 2 as libc::c_int + 1 as libc::c_int);
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `rpl_fcntl(fd, 0 as libc::c_int, 2 as libc::c_int + 1 as libc::c_int)`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/dup_safer_flag.rs:6:1
   |
6  | / pub unsafe extern "C" fn dup_safer_flag(
7  | |     mut fd: libc::c_int,
8  | |     mut flag: libc::c_int,
9  | | ) -> libc::c_int {
...  |
18 | |     );
19 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/dup_safer_flag.rs:10:5
   |
10 | /     return rpl_fcntl(
11 | |         fd,
12 | |         if flag & 0o2000000 as libc::c_int != 0 {
13 | |             1030 as libc::c_int
...  |
17 | |         2 as libc::c_int + 1 as libc::c_int,
18 | |     );
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
10 ~     rpl_fcntl(
11 +         fd,
12 +         if flag & 0o2000000 as libc::c_int != 0 {
13 +             1030 as libc::c_int
14 +         } else {
15 +             0 as libc::c_int
16 +         },
17 +         2 as libc::c_int + 1 as libc::c_int,
18 +     )
   |

warning: unnecessary `!=` operation
  --> src/dup_safer_flag.rs:12:9
   |
12 | /         if flag & 0o2000000 as libc::c_int != 0 {
13 | |             1030 as libc::c_int
14 | |         } else {
15 | |             0 as libc::c_int
16 | |         },
   | |_________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary structure name repetition
  --> src/fadvise.rs:33:22
   |
33 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fadvise.rs:44:29
   |
44 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fadvise.rs:61:1
   |
61 | / pub unsafe extern "C" fn fdadvise(
62 | |     mut fd: libc::c_int,
63 | |     mut offset: off_t,
64 | |     mut len: off_t,
...  |
67 | |     posix_fadvise(fd, offset, len, advice as libc::c_int);
68 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `u32` to `i32` may wrap around the value
  --> src/fadvise.rs:67:36
   |
67 |     posix_fadvise(fd, offset, len, advice as libc::c_int);
   |                                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
  --> src/fadvise.rs:70:1
   |
70 | / pub unsafe extern "C" fn fadvise(mut fp: *mut FILE, mut advice: fadvice_t) {
71 | |     if !fp.is_null() {
72 | |         fdadvise(
73 | |             fileno(fp),
...  |
78 | |     }
79 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fadvise.rs:74:13
   |
74 |             0 as libc::c_int as off_t,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fadvise.rs:75:13
   |
75 |             0 as libc::c_int as off_t,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/fclose.rs:32:22
   |
32 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fclose.rs:43:29
   |
43 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fclose.rs:52:1
   |
52 | / pub unsafe extern "C" fn rpl_fclose(mut fp: *mut FILE) -> libc::c_int {
53 | |     let mut saved_errno: libc::c_int = 0 as libc::c_int;
54 | |     let mut fd: libc::c_int = 0;
55 | |     let mut result: libc::c_int = 0 as libc::c_int;
...  |
71 | |     return result;
72 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fclose.rs:52:1
   |
52 | / pub unsafe extern "C" fn rpl_fclose(mut fp: *mut FILE) -> libc::c_int {
53 | |     let mut saved_errno: libc::c_int = 0 as libc::c_int;
54 | |     let mut fd: libc::c_int = 0;
55 | |     let mut result: libc::c_int = 0 as libc::c_int;
...  |
71 | |     return result;
72 | | }
   | |_^
   |
   = note: `-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this boolean expression can be simplified
  --> src/fclose.rs:60:9
   |
60 |     if (!(__freading(fp) != 0 as libc::c_int)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `__freading(fp) == 0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/fclose.rs:71:5
   |
71 |     return result;
   |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fclose.rs:61:30
   |
61 |         || lseek(fileno(fp), 0 as libc::c_int as __off_t, 1 as libc::c_int)
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fclose.rs:62:16
   |
62 |             != -(1 as libc::c_int) as libc::c_long) && rpl_fflush(fp) != 0
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/fcntl.rs:19:1
    |
19  | / pub unsafe extern "C" fn rpl_fcntl(
20  | |     mut fd: libc::c_int,
21  | |     mut action: libc::c_int,
22  | |     mut args: ...
...   |
153 | |     return result;
154 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
   --> src/fcntl.rs:19:1
    |
19  | / pub unsafe extern "C" fn rpl_fcntl(
20  | |     mut fd: libc::c_int,
21  | |     mut action: libc::c_int,
22  | |     mut args: ...
...   |
153 | |     return result;
154 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this function has too many lines (130/100)
   --> src/fcntl.rs:19:1
    |
19  | / pub unsafe extern "C" fn rpl_fcntl(
20  | |     mut fd: libc::c_int,
21  | |     mut action: libc::c_int,
22  | |     mut args: ...
...   |
153 | |     return result;
154 | | }
    | |_^
    |
    = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/fcntl.rs:153:5
    |
153 |     return result;
    |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this match arm has an identical body to another arm
  --> src/fcntl.rs:42:17
   |
42 |                   3 => {
   |                   ^ help: try merging the arm patterns: `3 | 1`
   |  _________________|
   | |
43 | |                     current_block_7 = 4046302689674688614;
44 | |                 }
   | |_________________^
   |
   = note: `-W clippy::match-same-arms` implied by `-W clippy::pedantic`
   = help: or try changing either arm body
note: other arm here
  --> src/fcntl.rs:39:17
   |
39 | /                 1 => {
40 | |                     current_block_7 = 4046302689674688614;
41 | |                 }
   | |_________________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: this match arm has an identical body to another arm
  --> src/fcntl.rs:60:17
   |
60 |                   1033 => {
   |                   ^---
   |                   |
   |  _________________help: try merging the arm patterns: `1033 | 0`
   | |
61 | |                     current_block_7 = 8871774344836507656;
62 | |                 }
   | |_________________^
   |
   = help: or try changing either arm body
note: other arm here
  --> src/fcntl.rs:63:17
   |
63 | /                 0 => {
64 | |                     current_block_7 = 8871774344836507656;
65 | |                 }
   | |_________________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: this match arm has an identical body to another arm
  --> src/fcntl.rs:78:17
   |
78 |                   8 => {
   |                   ^ help: try merging the arm patterns: `8 | 1031`
   |  _________________|
   | |
79 | |                     current_block_7 = 12013198723313890981;
80 | |                 }
   | |_________________^
   |
   = help: or try changing either arm body
note: other arm here
  --> src/fcntl.rs:81:17
   |
81 | /                 1031 => {
82 | |                     current_block_7 = 12013198723313890981;
83 | |                 }
   | |_________________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: unneeded `return` statement
   --> src/fcntl.rs:161:5
    |
161 |     return result;
    |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/fcntl.rs:194:5
    |
194 |     return result;
    |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary `!=` operation
   --> src/fcntl.rs:197:26
    |
197 |       have_dupfd_cloexec = if 0 as libc::c_int != 0 {
    |  __________________________^
198 | |         -(1 as libc::c_int)
199 | |     } else {
200 | |         0 as libc::c_int
201 | |     };
    | |_____^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
  --> src/fd_reopen.rs:11:1
   |
11 | / pub unsafe extern "C" fn fd_reopen(
12 | |     mut desired_fd: libc::c_int,
13 | |     mut file: *const libc::c_char,
14 | |     mut flags: libc::c_int,
...  |
26 | |     };
27 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/fd_reopen.rs:19:9
   |
19 |         return fd
   |         ^^^^^^^^^ help: remove `return`: `fd`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/fd_reopen.rs:25:9
   |
25 |         return fd2;
   |         ^^^^^^^^^^^ help: remove `return`: `fd2`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/fd_safer.rs:8:1
   |
8  | / pub unsafe extern "C" fn fd_safer(mut fd: libc::c_int) -> libc::c_int {
9  | |     if 0 as libc::c_int <= fd && fd <= 2 as libc::c_int {
10 | |         let mut f: libc::c_int = dup_safer(fd);
11 | |         let mut e: libc::c_int = *__errno_location();
...  |
16 | |     return fd;
17 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/fd_safer.rs:16:5
   |
16 |     return fd;
   |     ^^^^^^^^^^ help: remove `return`: `fd`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/fd_safer_flag.rs:8:1
   |
8  | / pub unsafe extern "C" fn fd_safer_flag(
9  | |     mut fd: libc::c_int,
10 | |     mut flag: libc::c_int,
11 | | ) -> libc::c_int {
...  |
19 | |     return fd;
20 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/fd_safer_flag.rs:19:5
   |
19 |     return fd;
   |     ^^^^^^^^^^ help: remove `return`: `fd`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/fflush.rs:29:22
   |
29 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fflush.rs:40:29
   |
40 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fflush.rs:50:8
   |
50 |     if (*fp)._flags & 0x100 as libc::c_int != 0 {
   |        ^^^^^^^^^^^^
   |
   = note: `-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fflush.rs:51:24
   |
51 |         rpl_fseeko(fp, 0 as libc::c_int as off_t, 1 as libc::c_int);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
  --> src/fflush.rs:55:1
   |
55 | / pub unsafe extern "C" fn rpl_fflush(mut stream: *mut FILE) -> libc::c_int {
56 | |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
57 | |         return fflush(stream);
58 | |     }
59 | |     clear_ungetc_buffer_preserving_position(stream);
60 | |     return fflush(stream);
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fflush.rs:55:1
   |
55 | / pub unsafe extern "C" fn rpl_fflush(mut stream: *mut FILE) -> libc::c_int {
56 | |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
57 | |         return fflush(stream);
58 | |     }
59 | |     clear_ungetc_buffer_preserving_position(stream);
60 | |     return fflush(stream);
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this boolean expression can be simplified
  --> src/fflush.rs:56:28
   |
56 |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `__freading(stream) == 0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/fflush.rs:60:5
   |
60 |     return fflush(stream);
   |     ^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fflush(stream)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/fpurge.rs:27:22
   |
27 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fpurge.rs:38:29
   |
38 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fpurge.rs:47:1
   |
47 | / pub unsafe extern "C" fn fpurge(mut fp: *mut FILE) -> libc::c_int {
48 | |     __fpurge(fp);
49 | |     return 0 as libc::c_int;
50 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/fpurge.rs:49:5
   |
49 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/fseeko.rs:29:22
   |
29 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fseeko.rs:40:29
   |
40 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fseeko.rs:50:1
   |
50 | / pub unsafe extern "C" fn rpl_fseeko(
51 | |     mut fp: *mut FILE,
52 | |     mut offset: off_t,
53 | |     mut whence: libc::c_int,
...  |
66 | |     return fseeko(fp, offset, whence);
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fseeko.rs:50:1
   |
50 | / pub unsafe extern "C" fn rpl_fseeko(
51 | |     mut fp: *mut FILE,
52 | |     mut offset: off_t,
53 | |     mut whence: libc::c_int,
...  |
66 | |     return fseeko(fp, offset, whence);
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/fseeko.rs:66:5
   |
66 |     return fseeko(fp, offset, whence);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fseeko(fp, offset, whence)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: used binding `_IO_read_end` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:55:8
   |
55 |     if (*fp)._IO_read_end == (*fp)._IO_read_ptr
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_read_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:55:30
   |
55 |     if (*fp)._IO_read_end == (*fp)._IO_read_ptr
   |                              ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:12
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |            ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:35
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |                                   ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_save_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:59
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |                                                           ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fseeko.rs:59:19
   |
59 |         if pos == -(1 as libc::c_int) as libc::c_long {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:62:9
   |
62 |         (*fp)._flags &= !(0x10 as libc::c_int);
   |         ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_offset` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:63:9
   |
63 |         (*fp)._offset = pos;
   |         ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: unsafe function's docs miss `# Safety` section
  --> src/full_write.rs:8:1
   |
8  | / pub unsafe extern "C" fn full_write(
9  | |     mut fd: libc::c_int,
10 | |     mut buf: *const libc::c_void,
11 | |     mut count: size_t,
...  |
29 | |     return total;
30 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/full_write.rs:29:5
   |
29 |     return total;
   |     ^^^^^^^^^^^^^ help: remove `return`: `total`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:13:29
   |
13 |     let mut total: size_t = 0 as libc::c_int as size_t;
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/full_write.rs:14:40
   |
14 |     let mut ptr: *const libc::c_char = buf as *const libc::c_char;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:15:19
   |
15 |     while count > 0 as libc::c_int as libc::c_ulong {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/full_write.rs:16:47
   |
16 |         let mut n_rw: size_t = safe_write(fd, ptr as *const libc::c_void, count);
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:17:20
   |
17 |         if n_rw == -(1 as libc::c_int) as size_t {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:20:20
   |
20 |         if n_rw == 0 as libc::c_int as libc::c_ulong {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/full_write.rs:25:30
   |
25 |             ptr = ptr.offset(n_rw as isize);
   |                              ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/full_write.rs:25:30
   |
25 |             ptr = ptr.offset(n_rw as isize);
   |                              ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
  --> src/hard_locale.rs:12:1
   |
12 | / pub unsafe extern "C" fn hard_locale(mut category: libc::c_int) -> bool {
13 | |     let mut locale: [libc::c_char; 257] = [0; 257];
14 | |     if setlocale_null_r(
15 | |         category,
...  |
29 | |     return 0 as libc::c_int != 0;
30 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/hard_locale.rs:29:5
   |
29 |     return 0 as libc::c_int != 0;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
  --> src/hard_locale.rs:22:38
   |
22 |     if !(strcmp(locale.as_mut_ptr(), b"C\0" as *const u8 as *const libc::c_char)
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"C\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/hard_locale.rs:24:40
   |
24 |         || strcmp(locale.as_mut_ptr(), b"POSIX\0" as *const u8 as *const libc::c_char)
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"POSIX\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:19:1
   |
19 | / pub unsafe extern "C" fn ireallocarray(
20 | |     mut p: *mut libc::c_void,
21 | |     mut n: idx_t,
22 | |     mut s: idx_t,
...  |
38 | |     };
39 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:35:9
   |
35 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/ialloc.rs:37:9
   |
37 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:24:8
   |
24 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:25:12
   |
25 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |            ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:27:30
   |
27 |         let mut nx: size_t = n as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:28:30
   |
28 |         let mut sx: size_t = s as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:29:17
   |
29 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:29:58
   |
29 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/ialloc.rs:31:18
   |
31 |             sx = 1 as libc::c_int as size_t;
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:43:1
   |
43 | / pub unsafe extern "C" fn icalloc(mut n: idx_t, mut s: idx_t) -> *mut libc::c_void {
44 | |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
45 | |         if s != 0 as libc::c_int as libc::c_long {
46 | |             return _gl_alloc_nomem();
...  |
56 | |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
57 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:56:5
   |
56 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `calloc(n as libc::c_ulong, s as libc::c_ulong)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:44:50
   |
44 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:45:17
   |
45 |         if s != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:48:13
   |
48 |         n = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:50:50
   |
50 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:51:17
   |
51 |         if n != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:54:13
   |
54 |         s = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:56:19
   |
56 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                   ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:56:39
   |
56 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                                       ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:61:1
   |
61 | / pub unsafe extern "C" fn irealloc(
62 | |     mut p: *mut libc::c_void,
63 | |     mut s: idx_t,
64 | | ) -> *mut libc::c_void {
...  |
70 | |     };
71 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:67:9
   |
67 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/ialloc.rs:69:9
   |
69 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:65:8
   |
65 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:66:24
   |
66 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:66:29
   |
66 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((s == 0) as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/ialloc.rs:66:29
   |
66 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(s == 0)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:75:1
   |
75 | / pub unsafe extern "C" fn imalloc(mut s: idx_t) -> *mut libc::c_void {
76 | |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
77 | |         malloc(s as libc::c_ulong)
78 | |     } else {
79 | |         _gl_alloc_nomem()
80 | |     };
81 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:76:5
   |
76 | /     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
77 | |         malloc(s as libc::c_ulong)
78 | |     } else {
79 | |         _gl_alloc_nomem()
80 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
76 ~     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
77 +         malloc(s as libc::c_ulong)
78 +     } else {
79 +         _gl_alloc_nomem()
80 +     }
   |

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:76:15
   |
76 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |               ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:77:16
   |
77 |         malloc(s as libc::c_ulong)
   |                ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:86:1
   |
86 | / pub unsafe extern "C" fn _gl_alloc_nomem() -> *mut libc::c_void {
87 | |     *__errno_location() = 12 as libc::c_int;
88 | |     return 0 as *mut libc::c_void;
89 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:88:5
   |
88 |     return 0 as *mut libc::c_void;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_void`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/ialloc.rs:88:12
   |
88 |     return 0 as *mut libc::c_void;
   |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/localcharset.rs:391:1
    |
391 | / pub unsafe extern "C" fn locale_charset() -> *const libc::c_char {
392 | |     let mut codeset: *const libc::c_char = 0 as *const libc::c_char;
393 | |     codeset = nl_langinfo(CODESET as libc::c_int);
394 | |     if codeset.is_null() {
...   |
400 | |     return codeset;
401 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/localcharset.rs:400:5
    |
400 |     return codeset;
    |     ^^^^^^^^^^^^^^^ help: remove `return`: `codeset`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
   --> src/localcharset.rs:392:44
    |
392 |     let mut codeset: *const libc::c_char = 0 as *const libc::c_char;
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/localcharset.rs:393:27
    |
393 |     codeset = nl_langinfo(CODESET as libc::c_int);
    |                           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/localcharset.rs:395:19
    |
395 |         codeset = b"\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/localcharset.rs:397:8
    |
397 |     if *codeset.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*codeset.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/localcharset.rs:398:19
    |
398 |         codeset = b"ASCII\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"ASCII\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:38:9
   |
38 |         ps as *mut libc::c_void,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/mbrtoc32.rs:48:1
   |
48 | / pub unsafe extern "C" fn rpl_mbrtoc32(
49 | |     mut pwc: *mut char32_t,
50 | |     mut s: *const libc::c_char,
51 | |     mut n: size_t,
...  |
77 | |     return ret;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/mbrtoc32.rs:48:1
   |
48 | / pub unsafe extern "C" fn rpl_mbrtoc32(
49 | |     mut pwc: *mut char32_t,
50 | |     mut s: *const libc::c_char,
51 | |     mut n: size_t,
...  |
77 | |     return ret;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/mbrtoc32.rs:77:5
   |
77 |     return ret;
   |     ^^^^^^^^^^^ help: remove `return`: `ret`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/mbrtoc32.rs:55:15
   |
55 |         pwc = 0 as *mut char32_t;
   |               ^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<char32_t>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:56:13
   |
56 |         s = b"\0" as *const u8 as *const libc::c_char;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:57:13
   |
57 |         n = 1 as libc::c_int as size_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:63:14
   |
63 |     if ret < -(3 as libc::c_int) as size_t && mbsinit(ps) == 0 {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:66:15
   |
66 |     if ret == -(3 as libc::c_int) as size_t {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:69:8
   |
69 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:69:53
   |
69 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u32` may become silently lossy if you later change the type
  --> src/mbrtoc32.rs:73:20
   |
73 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::from(*s as libc::c_uchar)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
  --> src/mbrtoc32.rs:73:20
   |
73 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:75:16
   |
75 |         return 1 as libc::c_int as size_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/mbszero.rs:25:1
   |
25 | / pub unsafe extern "C" fn mbszero(mut ps: *mut mbstate_t) {
26 | |     memset(
27 | |         ps as *mut libc::c_void,
28 | |         0 as libc::c_int,
29 | |         ::core::mem::size_of::<mbstate_t>() as libc::c_ulong,
30 | |     );
31 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbszero.rs:27:9
   |
27 |         ps as *mut libc::c_void,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/mkstemp_safer.rs:9:1
   |
9  | / pub unsafe extern "C" fn mkstemp_safer(mut templ: *mut libc::c_char) -> libc::c_int {
10 | |     return fd_safer(mkstemp(templ));
11 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/mkstemp_safer.rs:10:5
   |
10 |     return fd_safer(mkstemp(templ));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fd_safer(mkstemp(templ))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/mkstemp_safer.rs:13:1
   |
13 | / pub unsafe extern "C" fn mkostemp_safer(
14 | |     mut templ: *mut libc::c_char,
15 | |     mut flags: libc::c_int,
16 | | ) -> libc::c_int {
17 | |     return fd_safer_flag(mkostemp(templ, flags), flags);
18 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/mkstemp_safer.rs:17:5
   |
17 |     return fd_safer_flag(mkostemp(templ, flags), flags);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fd_safer_flag(mkostemp(templ, flags), flags)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/open_safer.rs:20:1
   |
20 | / pub unsafe extern "C" fn open_safer(
21 | |     mut file: *const libc::c_char,
22 | |     mut flags: libc::c_int,
23 | |     mut args: ...
...  |
31 | |     return fd_safer(open(file, flags, mode));
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/open_safer.rs:31:5
   |
31 |     return fd_safer(open(file, flags, mode));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fd_safer(open(file, flags, mode))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if _ { .. } else { .. }` is an expression
  --> src/open_safer.rs:25:5
   |
25 | /     let mut mode: mode_t = 0 as libc::c_int as mode_t;
26 | |     if flags & 0o100 as libc::c_int != 0 {
27 | |         let mut ap: ::core::ffi::VaListImpl;
28 | |         ap = args.clone();
29 | |         mode = ap.arg::<mode_t>();
30 | |     }
   | |_____^ help: it is more idiomatic to write: `let <mut> mode = if flags & 0o100 as libc::c_int != 0 { ..; ap.arg::<mode_t>() } else { 0 as libc::c_int as mode_t };`
   |
   = note: `-W clippy::useless-let-if-seq` implied by `-W clippy::nursery`
   = note: you might not need `mut` at all
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/open_safer.rs:25:28
   |
25 |     let mut mode: mode_t = 0 as libc::c_int as mode_t;
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary structure name repetition
  --> src/progname.rs:35:22
   |
35 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/progname.rs:46:29
   |
46 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/progname.rs:59:1
   |
59 | / pub unsafe extern "C" fn set_program_name(mut argv0: *const libc::c_char) {
60 | |     let mut slash: *const libc::c_char = 0 as *const libc::c_char;
61 | |     let mut base: *const libc::c_char = 0 as *const libc::c_char;
62 | |     if argv0.is_null() {
...  |
95 | |     program_invocation_name = argv0 as *mut libc::c_char;
96 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `0 as *const _` detected
  --> src/progname.rs:60:42
   |
60 |     let mut slash: *const libc::c_char = 0 as *const libc::c_char;
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
  --> src/progname.rs:61:41
   |
61 |     let mut base: *const libc::c_char = 0 as *const libc::c_char;
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:64:13
   |
64 | /             b"A NULL argv[0] was passed through an exec system call.\n\0" as *const u8
65 | |                 as *const libc::c_char,
   | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"A NULL argv[0] was passed through an exec system call.\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
  --> src/progname.rs:71:12
   |
71 |       base = if !slash.is_null() {
   |  ____________^
72 | |         slash.offset(1 as libc::c_int as isize)
73 | |     } else {
74 | |         argv0
75 | |     };
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/progname.rs:76:51
   |
76 |     if base.offset_from(argv0) as libc::c_long >= 7 as libc::c_int as libc::c_long
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(7 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:79:13
   |
79 |             b"/.libs/\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/.libs/\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/progname.rs:80:13
   |
80 |             7 as libc::c_int as libc::c_ulong,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:86:13
   |
86 |             b"lt-\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"lt-\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/progname.rs:87:13
   |
87 |             3 as libc::c_int as libc::c_ulong,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/propername_lite.rs:8:1
   |
8  | / pub unsafe extern "C" fn proper_name_lite(
9  | |     mut name_ascii: *const libc::c_char,
10 | |     mut name_utf8: *const libc::c_char,
11 | | ) -> *const libc::c_char {
...  |
23 | |     };
24 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/propername_lite.rs:13:5
   |
13 | /     return if translation != name_ascii {
14 | |         translation
15 | |     } else if c_strcasecmp(
16 | |         locale_charset(),
...  |
22 | |         name_ascii
23 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
13 ~     if translation != name_ascii {
14 +         translation
15 +     } else if c_strcasecmp(
16 +         locale_charset(),
17 +         b"UTF-8\0" as *const u8 as *const libc::c_char,
18 +     ) == 0 as libc::c_int
19 +     {
20 +         name_utf8
21 +     } else {
22 +         name_ascii
23 +     }
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/propername_lite.rs:17:9
   |
17 |         b"UTF-8\0" as *const u8 as *const libc::c_char,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"UTF-8\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
   --> src/quotearg.rs:105:5
    |
105 |     return iswprint(wc);
    |     ^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `iswprint(wc)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:110:9
    |
110 |         ps as *mut libc::c_void,
    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:117:5
    |
117 |     b"literal\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"literal\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:118:5
    |
118 |     b"shell\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:119:5
    |
119 |     b"shell-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:120:5
    |
120 |     b"shell-escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:121:5
    |
121 |     b"shell-escape-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:122:5
    |
122 |     b"c\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:123:5
    |
123 |     b"c-maybe\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c-maybe\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:124:5
    |
124 |     b"escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:125:5
    |
125 |     b"locale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"locale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:126:5
    |
126 |     b"clocale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"clocale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:150:1
    |
150 | / pub unsafe extern "C" fn clone_quoting_options(
151 | |     mut o: *mut quoting_options,
152 | | ) -> *mut quoting_options {
153 | |     let mut e: libc::c_int = *__errno_location();
...   |
163 | |     return p;
164 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:163:5
    |
163 |     return p;
    |     ^^^^^^^^^ help: remove `return`: `p`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:154:39
    |
154 |       let mut p: *mut quoting_options = xmemdup(
    |  _______________________________________^
155 | |         (if !o.is_null() {
156 | |             o
157 | |         } else {
...   |
160 | |         ::core::mem::size_of::<quoting_options>() as libc::c_ulong,
161 | |     ) as *mut quoting_options;
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
154 ~     let mut p: *mut quoting_options = xmemdup(
155 +         (if !o.is_null() {
156 +             o
157 +         } else {
158 +             &mut default_quoting_options as *mut quoting_options
159 +         }) as *const libc::c_void,
160 +         ::core::mem::size_of::<quoting_options>() as libc::c_ulong,
161 ~     ).cast::<src::quotearg::quoting_options>();
    |

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:155:9
    |
155 | /         (if !o.is_null() {
156 | |             o
157 | |         } else {
158 | |             &mut default_quoting_options as *mut quoting_options
159 | |         }) as *const libc::c_void,
    | |__________^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
   --> src/quotearg.rs:158:13
    |
158 |             &mut default_quoting_options as *mut quoting_options
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
    |
    = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:166:1
    |
166 | / pub unsafe extern "C" fn get_quoting_style(
167 | |     mut o: *const quoting_options,
168 | | ) -> quoting_style {
169 | |     return (*if !o.is_null() {
...   |
174 | |         .style;
175 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:169:5
    |
169 | /     return (*if !o.is_null() {
170 | |         o
171 | |     } else {
172 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
173 | |     })
174 | |         .style;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
169 ~     (*if !o.is_null() {
170 +         o
171 +     } else {
172 +         &mut default_quoting_options as *mut quoting_options as *const quoting_options
173 +     })
174 +         .style
    |

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:169:14
    |
169 |       return (*if !o.is_null() {
    |  ______________^
170 | |         o
171 | |     } else {
172 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
173 | |     })
    | |_____^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
   --> src/quotearg.rs:172:9
    |
172 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:177:1
    |
177 | / pub unsafe extern "C" fn set_quoting_style(
178 | |     mut o: *mut quoting_options,
179 | |     mut s: quoting_style,
180 | | ) {
181 | |     (*if !o.is_null() { o } else { &mut default_quoting_options }).style = s;
182 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:181:7
    |
181 |     (*if !o.is_null() { o } else { &mut default_quoting_options }).style = s;
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:184:1
    |
184 | / pub unsafe extern "C" fn set_char_quoting(
185 | |     mut o: *mut quoting_options,
186 | |     mut c: libc::c_char,
187 | |     mut i: libc::c_int,
...   |
212 | |     return r;
213 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:212:5
    |
212 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:189:33
    |
189 |     let mut uc: libc::c_uchar = c as libc::c_uchar;
    |                                 ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:190:39
    |
190 |       let mut p: *mut libc::c_uint = ((*(if !o.is_null() {
    |  _______________________________________^
191 | |         o
192 | |     } else {
193 | |         &mut default_quoting_options as *mut quoting_options
194 | |     }))
    | |______^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
   --> src/quotearg.rs:193:9
    |
193 |         &mut default_quoting_options as *mut quoting_options
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:198:13
    |
198 | /             (uc as libc::c_ulong)
199 | |                 .wrapping_div(
200 | |                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
201 | |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
202 | |                 ) as isize,
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:198:13
    |
198 | /             (uc as libc::c_ulong)
199 | |                 .wrapping_div(
200 | |                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
201 | |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
202 | |                 ) as isize,
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `u64` may become silently lossy if you later change the type
   --> src/quotearg.rs:198:13
    |
198 |             (uc as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(uc)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:201:39
    |
201 |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i32` may truncate the value
   --> src/quotearg.rs:204:34
    |
204 |       let mut shift: libc::c_int = (uc as libc::c_ulong)
    |  __________________________________^
205 | |         .wrapping_rem(
206 | |             (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
207 | |                 .wrapping_mul(8 as libc::c_int as libc::c_ulong),
208 | |         ) as libc::c_int;
    | |________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `u64` may become silently lossy if you later change the type
   --> src/quotearg.rs:204:34
    |
204 |     let mut shift: libc::c_int = (uc as libc::c_ulong)
    |                                  ^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(uc)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:207:31
    |
207 |                 .wrapping_mul(8 as libc::c_int as libc::c_ulong),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:209:30
    |
209 |       let mut r: libc::c_int = (*p >> shift & 1 as libc::c_int as libc::c_uint)
    |  ______________________________^
210 | |         as libc::c_int;
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:209:45
    |
209 |     let mut r: libc::c_int = (*p >> shift & 1 as libc::c_int as libc::c_uint)
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:211:11
    |
211 |     *p ^= ((i & 1 as libc::c_int ^ r) << shift) as libc::c_uint;
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:215:1
    |
215 | / pub unsafe extern "C" fn set_quoting_flags(
216 | |     mut o: *mut quoting_options,
217 | |     mut i: libc::c_int,
218 | | ) -> libc::c_int {
...   |
225 | |     return r;
226 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:225:5
    |
225 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:228:1
    |
228 | / pub unsafe extern "C" fn set_custom_quoting(
229 | |     mut o: *mut quoting_options,
230 | |     mut left_quote: *const libc::c_char,
231 | |     mut right_quote: *const libc::c_char,
...   |
241 | |     (*o).right_quote = right_quote;
242 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:260:5
    |
260 |     return o;
    |     ^^^^^^^^^ help: remove `return`: `o`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
   --> src/quotearg.rs:254:9
    |
247 | /         let mut init = quoting_options {
248 | |             style: literal_quoting_style,
249 | |             flags: 0 as libc::c_int,
250 | |             quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
251 | |             left_quote: 0 as *const libc::c_char,
252 | |             right_quote: 0 as *const libc::c_char,
253 | |         };
    | |__________- unnecessary `let` binding
254 |           init
    |           ^^^^
    |
    = note: `-W clippy::let-and-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
247 ~         
248 ~         quoting_options {
249 +             style: literal_quoting_style,
250 +             flags: 0 as libc::c_int,
251 +             quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
252 +             left_quote: 0 as *const libc::c_char,
253 +             right_quote: 0 as *const libc::c_char,
254 +         }
    |

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:250:31
    |
250 |             quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *const _` detected
   --> src/quotearg.rs:251:25
    |
251 |             left_quote: 0 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/quotearg.rs:252:26
    |
252 |             right_quote: 0 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:256:33
    |
256 |     if style as libc::c_uint == custom_quoting_style as libc::c_int as libc::c_uint {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:256:33
    |
256 |     if style as libc::c_uint == custom_quoting_style as libc::c_int as libc::c_uint {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unneeded `return` statement
   --> src/quotearg.rs:290:5
    |
290 | /     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
291 | |         b"\"\0" as *const u8 as *const libc::c_char
292 | |     } else {
293 | |         b"'\0" as *const u8 as *const libc::c_char
294 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
290 ~     if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
291 +         b"\"\0" as *const u8 as *const libc::c_char
292 +     } else {
293 +         b"'\0" as *const u8 as *const libc::c_char
294 +     }
    |

warning: `0 as *const _` detected
   --> src/quotearg.rs:267:48
    |
267 |     let mut locale_code: *const libc::c_char = 0 as *const libc::c_char;
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:272:34
    |
272 |     if c_strcasecmp(locale_code, b"UTF-8\0" as *const u8 as *const libc::c_char)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"UTF-8\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:275:19
    |
275 |         return if *msgid.offset(0 as libc::c_int as isize) as libc::c_int == '`' as i32 {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*msgid.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:276:13
    |
276 |             b"\xE2\x80\x98\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xE2\x80\x98\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:278:13
    |
278 |             b"\xE2\x80\x99\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xE2\x80\x99\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:281:34
    |
281 |     if c_strcasecmp(locale_code, b"GB18030\0" as *const u8 as *const libc::c_char)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GB18030\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:284:19
    |
284 |         return if *msgid.offset(0 as libc::c_int as isize) as libc::c_int == '`' as i32 {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*msgid.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:285:13
    |
285 |             b"\xA1\x07e\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xA1\x07e\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:287:13
    |
287 |             b"\xA1\xAF\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xA1\xAF\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:290:36
    |
290 |     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:290:36
    |
290 |     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:291:9
    |
291 |         b"\"\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:293:9
    |
293 |         b"'\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
   --> src/quotearg.rs:820:28
    |
820 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `bytes != 0 as libc::c_int as libc::c_ulong`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (122/25)
   --> src/quotearg.rs:296:22
    |
296 | unsafe extern "C" fn quotearg_buffer_restyled(
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (890/100)
    --> src/quotearg.rs:296:1
     |
296  | / unsafe extern "C" fn quotearg_buffer_restyled(
297  | |     mut buffer: *mut libc::c_char,
298  | |     mut buffersize: size_t,
299  | |     mut arg: *const libc::c_char,
...    |
1196 | |     };
1197 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/quotearg.rs:1167:13
     |
1167 | /             return quotearg_buffer_restyled(
1168 | |                 buffer,
1169 | |                 buffersize,
1170 | |                 arg,
...    |
1176 | |                 right_quote,
1177 | |             );
     | |______________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1167 ~             quotearg_buffer_restyled(
1168 +                 buffer,
1169 +                 buffersize,
1170 +                 arg,
1171 +                 argsize,
1172 +                 quoting_style,
1173 +                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1174 +                 0 as *const libc::c_uint,
1175 +                 left_quote,
1176 +                 right_quote,
1177 +             )
     |

warning: unneeded `return` statement
    --> src/quotearg.rs:1194:13
     |
1194 |             return len;
     |             ^^^^^^^^^^^ help: remove `return`: `len`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:310:27
    |
310 |     let mut len: size_t = 0 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:311:39
    |
311 |     let mut orig_buffersize: size_t = 0 as libc::c_int as size_t;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *const _` detected
   --> src/quotearg.rs:312:49
    |
312 |     let mut quote_string: *const libc::c_char = 0 as *const libc::c_char;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:313:40
    |
313 |     let mut quote_string_len: size_t = 0 as libc::c_int as size_t;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:316:12
    |
316 |         == 1 as libc::c_int as libc::c_ulong;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:317:48
    |
317 |     let mut elide_outer_quotes: bool = flags & QA_ELIDE_OUTER_QUOTES as libc::c_int
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:340:24
    |
340 |                     != custom_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:340:24
    |
340 |                     != custom_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:343:25
    |
343 |                         b"`\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"`\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:347:25
    |
347 |                         b"'\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:355:44
    |
355 | ...                   *buffer.offset(len as isize) = *quote_string;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:355:44
    |
355 | ...                   *buffer.offset(len as isize) = *quote_string;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:358:25
    |
358 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/quotearg.rs:360:25
    |
360 |                         quote_string;
    |                         ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:393:56
    |
393 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:393:40
    |
393 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:393:40
    |
393 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:396:21
    |
396 |                     len;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:399:32
    |
399 |                 quote_string = b"\"\0" as *const u8 as *const libc::c_char;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:400:36
    |
400 |                 quote_string_len = 1 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:409:9
    |
409 | /         match current_block_48 {
410 | |             2266290538919981374 => {
411 | |                 if !elide_outer_quotes {
412 | |                     backslash_escapes = 1 as libc::c_int != 0;
...   |
416 | |             _ => {}
417 | |         }
    | |_________^
    |
    = note: `-W clippy::single-match` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
409 ~         if current_block_48 == 2266290538919981374 {
410 +             if !elide_outer_quotes {
411 +                 backslash_escapes = 1 as libc::c_int != 0;
412 +             }
413 +             current_block_48 = 14141891332124833771;
414 +         }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:418:9
    |
418 | /         match current_block_48 {
419 | |             14141891332124833771 => {
420 | |                 quoting_style = shell_always_quoting_style;
421 | |                 if !elide_outer_quotes {
...   |
431 | |             _ => {}
432 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
418 ~         if current_block_48 == 14141891332124833771 {
419 +             quoting_style = shell_always_quoting_style;
420 +             if !elide_outer_quotes {
421 +                 if len < buffersize {
422 +                     *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
423 +                 }
424 +                 len = len.wrapping_add(1);
425 +                 len;
426 +             }
427 +             quote_string = b"'\0" as *const u8 as *const libc::c_char;
428 +             quote_string_len = 1 as libc::c_int as size_t;
429 +         }
    |

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:423:56
    |
423 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:423:40
    |
423 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:423:40
    |
423 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:426:21
    |
426 |                     len;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:428:32
    |
428 |                 quote_string = b"'\0" as *const u8 as *const libc::c_char;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:429:36
    |
429 |                 quote_string_len = 1 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:433:13
    |
433 |         i = 0 as libc::c_int as size_t;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:435:13
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i as isize) as libc::c_int == '\0' as i32)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:435:14
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:435:26
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:435:26
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:437:13
    |
437 |             (i == argsize) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(i == argsize)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:445:16
    |
445 |             if backslash_escapes as libc::c_int != 0
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:447:24
    |
447 |                     != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:447:24
    |
447 |                     != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:456:21
    |
456 | /                         argsize
457 | |                     })
    | |_____________________^
    |
    = note: `-W clippy::branches-sharing-code` implied by `-W clippy::nursery`
    = note: the end suggestion probably needs some adjustments to use the expression result correctly
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
456 ~                     }
457 ~                     argsize)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:451:28
    |
451 |                         && (1 as libc::c_int as libc::c_ulong) < quote_string_len
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:459:21
    |
459 |                     arg.offset(i as isize) as *const libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.offset(i as isize).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:459:32
    |
459 |                     arg.offset(i as isize) as *const libc::c_void,
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:459:32
    |
459 |                     arg.offset(i as isize) as *const libc::c_void,
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:460:21
    |
460 |                     quote_string as *const libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `quote_string.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:470:17
    |
470 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:470:29
    |
470 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:470:29
    |
470 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:471:19
    |
471 |             match c as libc::c_int {
    |                   ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:480:32
    |
480 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:480:32
    |
480 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:484:64
    |
484 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:484:48
    |
484 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:484:48
    |
484 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:487:29
    |
487 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:489:64
    |
489 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:489:48
    |
489 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:489:48
    |
489 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:492:29
    |
492 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:494:64
    |
494 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:494:48
    |
494 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:494:48
    |
494 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:497:29
    |
497 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:501:60
    |
501 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:501:44
    |
501 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:501:44
    |
501 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:504:25
    |
504 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:506:32
    |
506 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:506:32
    |
506 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:507:47
    |
507 | ...                   && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:510:36
    |
510 |   ...                   <= *arg
    |  __________________________^
511 | | ...                       .offset(
512 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
513 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
510 ~                                 <= i32::from(*arg
511 +                                     .offset(
512 +                                         i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
513 +                                     ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:512:41
    |
512 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:512:41
    |
512 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:512:56
    |
512 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:514:32
    |
514 |   ...                   && *arg
    |  __________________________^
515 | | ...                       .offset(
516 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
517 | | ...                       ) as libc::c_int <= '9' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
514 ~                             && i32::from(*arg
515 +                                 .offset(
516 +                                     i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
517 ~                                 )) <= '9' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:516:37
    |
516 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:516:37
    |
516 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:516:52
    |
516 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:520:64
    |
520 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:520:48
    |
520 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:520:48
    |
520 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:523:29
    |
523 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:525:64
    |
525 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:525:48
    |
525 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:525:48
    |
525 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:528:29
    |
528 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:530:29
    |
530 |                         c = '0' as i32 as libc::c_uchar;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:530:29
    |
530 |                         c = '0' as i32 as libc::c_uchar;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:532:39
    |
532 |                     } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:550:48
    |
550 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:551:59
    |
551 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:553:44
    |
553 |   ...                   && *arg
    |  __________________________^
554 | | ...                       .offset(
555 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
556 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
553 ~                                         && i32::from(*arg
554 +                                             .offset(
555 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
556 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:555:49
    |
555 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:555:49
    |
555 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:555:64
    |
555 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:558:47
    |
558 |   ...                   match *arg
    |  _____________________________^
559 | | ...                       .offset(
560 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
561 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
558 ~                                         match i32::from(*arg
559 +                                             .offset(
560 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
561 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:560:49
    |
560 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:560:49
    |
560 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:560:64
    |
560 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:568:53
    |
568 |   ...                   c = *arg
    |  ___________________________^
569 | | ...                       .offset(
570 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
571 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:570:57
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:570:57
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:570:72
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:573:67
    |
573 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:576:84
    |
576 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:576:68
    |
576 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:576:68
    |
576 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:579:49
    |
579 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:581:84
    |
581 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:581:68
    |
581 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:581:68
    |
581 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:584:49
    |
584 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:586:84
    |
586 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:586:68
    |
586 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:586:68
    |
586 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:589:49
    |
589 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:591:84
    |
591 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:591:68
    |
591 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:591:68
    |
591 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:594:49
    |
594 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:613:48
    |
613 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:614:59
    |
614 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:616:44
    |
616 |   ...                   && *arg
    |  __________________________^
617 | | ...                       .offset(
618 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
619 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
616 ~                                         && i32::from(*arg
617 +                                             .offset(
618 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
619 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:618:49
    |
618 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:618:49
    |
618 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:618:64
    |
618 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:621:47
    |
621 |   ...                   match *arg
    |  _____________________________^
622 | | ...                       .offset(
623 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
624 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
621 ~                                         match i32::from(*arg
622 +                                             .offset(
623 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
624 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:623:49
    |
623 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:623:49
    |
623 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:623:64
    |
623 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:631:53
    |
631 |   ...                   c = *arg
    |  ___________________________^
632 | | ...                       .offset(
633 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
634 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:633:57
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:633:57
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:633:72
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:636:67
    |
636 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:639:84
    |
639 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:639:68
    |
639 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:639:68
    |
639 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:642:49
    |
642 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:644:84
    |
644 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:644:68
    |
644 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:644:68
    |
644 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:647:49
    |
647 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:649:84
    |
649 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:649:68
    |
649 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:649:68
    |
649 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:652:49
    |
652 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:654:84
    |
654 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:654:68
    |
654 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:654:68
    |
654 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:657:49
    |
657 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:672:27
    |
672 |                     esc = 'a' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:672:27
    |
672 |                     esc = 'a' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:676:27
    |
676 |                     esc = 'b' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:676:27
    |
676 |                     esc = 'b' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:680:27
    |
680 |                     esc = 'f' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:680:27
    |
680 |                     esc = 'f' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:684:27
    |
684 |                     esc = 'n' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:684:27
    |
684 |                     esc = 'n' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:688:27
    |
688 |                     esc = 'r' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:688:27
    |
688 |                     esc = 'r' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:692:27
    |
692 |                     esc = 't' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:692:27
    |
692 |                     esc = 't' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:696:27
    |
696 |                     esc = 'v' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:696:27
    |
696 |                     esc = 'v' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:702:28
    |
702 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:702:28
    |
702 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:709:31
    |
709 |                     } else if backslash_escapes as libc::c_int != 0
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:710:28
    |
710 |                         && elide_outer_quotes as libc::c_int != 0
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:720:25
    |
720 | /                         (*arg.offset(1 as libc::c_int as isize) as libc::c_int
721 | |                             == '\0' as i32) as libc::c_int
    | |__________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
720 ~                         i32::from(*arg.offset(1 as libc::c_int as isize) as libc::c_int
721 +                             == '\0' as i32)
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:720:26
    |
720 |                         (*arg.offset(1 as libc::c_int as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(1 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:723:25
    |
723 |                         (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(argsize == 1 as libc::c_int as libc::c_ulong)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:723:37
    |
723 |                         (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:781:21
    |
781 | /                         current_block = 253337042034819032;
782 | |                     }
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
781 ~                     }
782 +                     current_block = 253337042034819032;
    |

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:753:28
    |
753 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:753:28
    |
753 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:761:42
    |
761 | ...                   buffersize = 0 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:764:60
    |
764 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:764:44
    |
764 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:764:44
    |
764 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:767:25
    |
767 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:769:60
    |
769 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:769:44
    |
769 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:769:44
    |
769 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:772:25
    |
772 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:774:60
    |
774 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:774:44
    |
774 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:774:44
    |
774 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:777:25
    |
777 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `if _ { .. } else { .. }` is an expression
   --> src/quotearg.rs:795:21
    |
795 | /                     let mut printable: bool = false;
796 | |                     if unibyte_locale {
797 | |                         m = 1 as libc::c_int as size_t;
798 | |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
...   |
861 | |                         }
862 | |                     }
    | |_____________________^
    |
    = note: you might not need `mut` at all
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
help: it is more idiomatic to write
    |
795 ~                     let <mut> printable = if unibyte_locale { ..; *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
796 +                             as libc::c_int
797 +                             & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
798 +                             != 0 as libc::c_int } else { ..; false };
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:797:29
    |
797 |                         m = 1 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:798:37
    |
798 |                           printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |  _____________________________________^
799 | |                             as libc::c_int
    | |__________________________________________^ help: try: `i32::from(*(*__ctype_b_loc()).offset(c as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:798:64
    |
798 |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |                                                                ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISprint as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:808:29
    |
808 |                         m = 0 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:816:42
    |
816 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:816:42
    |
816 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:820:39
    |
820 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:821:41
    |
821 | ...                   if bytes == -(1 as libc::c_int) as size_t {
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:823:48
    |
823 | ...                   } else if bytes == -(2 as libc::c_int) as size_t {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:826:40
    |
826 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i.wrapping_add(m) as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:826:52
    |
826 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:826:52
    |
826 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:830:37
    |
830 | ...                   m;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:834:40
    |
834 | ...                   && elide_outer_quotes as libc::c_int != 0
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:836:44
    |
836 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:836:44
    |
836 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:839:41
    |
839 | ...                   j = 1 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:841:47
    |
841 |   ...                   match *arg
    |  _____________________________^
842 | | ...                       .offset(i.wrapping_add(m).wrapping_add(j) as isize)
843 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
841 ~                                         match i32::from(*arg
842 +                                             .offset(i.wrapping_add(m).wrapping_add(j) as isize))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:842:53
    |
842 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:842:53
    |
842 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:852:41
    |
852 | ...                   j;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:864:24
    |
864 |                     if (1 as libc::c_int as libc::c_ulong) < m
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:865:28
    |
865 |                         || backslash_escapes as libc::c_int != 0 && !printable
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:869:32
    |
869 | ...                   if backslash_escapes as libc::c_int != 0 && !printable {
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:876:40
    |
876 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:876:40
    |
876 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:880:72
    |
880 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:880:56
    |
880 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:880:56
    |
880 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:883:37
    |
883 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:885:72
    |
885 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:885:56
    |
885 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:885:56
    |
885 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:888:37
    |
888 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:890:72
    |
890 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:890:56
    |
890 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:890:56
    |
890 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:893:37
    |
893 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:897:68
    |
897 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:897:52
    |
897 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:897:52
    |
897 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:900:33
    |
900 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:905:45
    |
905 |   ...                   ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
    |  ___________________________^
906 | | ...                   as libc::c_char;
    | |_____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:905:60
    |
905 | ...                   ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
    |                                          ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:904:45
    |
904 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:904:45
    |
904 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:909:33
    |
909 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:914:45
    |
914 |   ...                   ) = ('0' as i32
    |  ___________________________^
915 | | ...                   + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
916 | | ...                   as libc::c_char;
    | |_____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:915:44
    |
915 | ...                   + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
    |                          ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:913:45
    |
913 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:913:45
    |
913 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:919:33
    |
919 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:920:37
    |
920 |   ...                   c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
    |  ___________________________^
921 | | ...                       as libc::c_uchar;
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:920:37
    |
920 |   ...                   c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
    |  ___________________________^
921 | | ...                       as libc::c_uchar;
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:920:52
    |
920 | ...                   c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
    |                                          ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:924:68
    |
924 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:924:52
    |
924 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:924:52
    |
924 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:927:33
    |
927 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:930:55
    |
930 | ...                   if ilim <= i.wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:934:32
    |
934 | ...                   if pending_shell_escape_end as libc::c_int != 0 && !escaping
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(pending_shell_escape_end)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:937:68
    |
937 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:937:52
    |
937 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:937:52
    |
937 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:940:33
    |
940 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:942:68
    |
942 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:942:52
    |
942 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:942:52
    |
942 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:945:33
    |
945 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:949:64
    |
949 | ...                   *buffer.offset(len as isize) = c as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:949:48
    |
949 | ...                   *buffer.offset(len as isize) = c as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:949:48
    |
949 | ...                   *buffer.offset(len as isize) = c as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:952:29
    |
952 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:954:33
    |
954 | ...                   c = *arg.offset(i as isize) as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:954:45
    |
954 | ...                   c = *arg.offset(i as isize) as libc::c_uchar;
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:954:45
    |
954 | ...                   c = *arg.offset(i as isize) as libc::c_uchar;
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/quotearg.rs:964:21
    |
964 | /                     if i != 0 as libc::c_int as libc::c_ulong {
965 | |                         current_block = 253337042034819032;
966 | |                     } else {
967 | |                         current_block = 4634307283396172174;
968 | |                     }
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:964:29
    |
964 |                     if i != 0 as libc::c_int as libc::c_ulong {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:972:28
    |
972 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:972:28
    |
972 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:973:28
    |
973 |                         && elide_outer_quotes as libc::c_int != 0
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:997:13
     |
997  | /             match current_block {
998  | |                 7549413860336125482 => {
999  | |                     current_block = 13059411171234995867;
1000 | |                 }
1001 | |                 _ => {}
1002 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
997  ~             if current_block == 7549413860336125482 {
998  +                 current_block = 13059411171234995867;
999  +             }
     |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1003:13
     |
1003 | /             match current_block {
1004 | |                 13059411171234995867 => {
1005 | |                     current_block = 16620298045565028098;
1006 | |                 }
1007 | |                 _ => {}
1008 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1003 ~             if current_block == 13059411171234995867 {
1004 +                 current_block = 16620298045565028098;
1005 +             }
     |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1009:13
     |
1009 | /             match current_block {
1010 | |                 16620298045565028098 => {
1011 | |                     current_block = 15155215915847730705;
1012 | |                 }
1013 | |                 _ => {}
1014 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1009 ~             if current_block == 16620298045565028098 {
1010 +                 current_block = 15155215915847730705;
1011 +             }
     |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1015:13
     |
1015 | /             match current_block {
1016 | |                 15155215915847730705 => {
1017 | |                     if quoting_style as libc::c_uint
1018 | |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1026 | |                 _ => {}
1027 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1015 ~             if current_block == 15155215915847730705 {
1016 +                 if quoting_style as libc::c_uint
1017 +                     == shell_always_quoting_style as libc::c_int as libc::c_uint
1018 +                     && elide_outer_quotes as libc::c_int != 0
1019 +                 {
1020 +                     current_block = 7928555609993211441;
1021 +                     break 's_25;
1022 +                 }
1023 +                 current_block = 253337042034819032;
1024 +             }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1018:28
     |
1018 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1018:28
     |
1018 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1019:28
     |
1019 |                         && elide_outer_quotes as libc::c_int != 0
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1028:13
     |
1028 | /             match current_block {
1029 | |                 253337042034819032 => {
1030 | |                     if !((backslash_escapes as libc::c_int != 0
1031 | |                         && quoting_style as libc::c_uint
...    |
1055 | |                 _ => {}
1056 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1028 ~             if current_block == 253337042034819032 {
1029 +                 if !((backslash_escapes as libc::c_int != 0
1030 +                     && quoting_style as libc::c_uint
1031 +                         != shell_always_quoting_style as libc::c_int as libc::c_uint
1032 +                     || elide_outer_quotes as libc::c_int != 0)
1033 +                     && !quote_these_too.is_null()
1034 +                     && *quote_these_too
1035 +                         .offset(
1036 +                             (c as libc::c_ulong)
1037 +                                 .wrapping_div(
1038 +                                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1039 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1040 +                                 ) as isize,
1041 +                         )
1042 +                         >> (c as libc::c_ulong)
1043 +                             .wrapping_rem(
1044 +                                 (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1045 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1046 +                             ) & 1 as libc::c_int as libc::c_uint != 0)
1047 +                     && !is_right_quote
1048 +                 {
1049 +                     current_block = 4476262310586904498;
1050 +                 } else {
1051 +                     current_block = 3173013908131212616;
1052 +                 }
1053 +             }
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1030:27
     |
1030 |                     if !((backslash_escapes as libc::c_int != 0
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1032:32
     |
1032 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1032:32
     |
1032 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1033:28
     |
1033 |                         || elide_outer_quotes as libc::c_int != 0)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1037:33
     |
1037 | / ...                   (c as libc::c_ulong)
1038 | | ...                       .wrapping_div(
1039 | | ...                           (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1040 | | ...                               .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1041 | | ...                       ) as isize,
     | |____________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1037:33
     |
1037 | / ...                   (c as libc::c_ulong)
1038 | | ...                       .wrapping_div(
1039 | | ...                           (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1040 | | ...                               .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1041 | | ...                       ) as isize,
     | |____________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `u64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1037:33
     |
1037 | ...                   (c as libc::c_ulong)
     |                       ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(c)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1040:59
     |
1040 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong),
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1043:32
     |
1043 | ...                   >> (c as libc::c_ulong)
     |                          ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(c)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1046:55
     |
1046 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong),
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1047:37
     |
1047 | ...                   ) & 1 as libc::c_int as libc::c_uint != 0)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1057:13
     |
1057 | /             match current_block {
1058 | |                 3173013908131212616 => {
1059 | |                     if elide_outer_quotes {
1060 | |                         current_block = 7928555609993211441;
...    |
1092 | |                 _ => {}
1093 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1057 ~             if current_block == 3173013908131212616 {
1058 +                 if elide_outer_quotes {
1059 +                     current_block = 7928555609993211441;
1060 +                     break 's_25;
1061 +                 }
1062 +                 escaping = 1 as libc::c_int != 0;
1063 +                 if quoting_style as libc::c_uint
1064 +                     == shell_always_quoting_style as libc::c_int as libc::c_uint
1065 +                     && !pending_shell_escape_end
1066 +                 {
1067 +                     if len < buffersize {
1068 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1069 +                     }
1070 +                     len = len.wrapping_add(1);
1071 +                     len;
1072 +                     if len < buffersize {
1073 +                         *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
1074 +                     }
1075 +                     len = len.wrapping_add(1);
1076 +                     len;
1077 +                     if len < buffersize {
1078 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1079 +                     }
1080 +                     len = len.wrapping_add(1);
1081 +                     len;
1082 +                     pending_shell_escape_end = 1 as libc::c_int != 0;
1083 +                 }
1084 +                 if len < buffersize {
1085 +                     *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
1086 +                 }
1087 +                 len = len.wrapping_add(1);
1088 +                 len;
1089 +                 current_block = 4476262310586904498;
1090 +             }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1065:28
     |
1065 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1065:28
     |
1065 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1069:60
     |
1069 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1069:44
     |
1069 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1069:44
     |
1069 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1072:25
     |
1072 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1074:60
     |
1074 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1074:44
     |
1074 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1074:44
     |
1074 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1077:25
     |
1077 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1079:60
     |
1079 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1079:44
     |
1079 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1079:44
     |
1079 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1082:25
     |
1082 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1086:56
     |
1086 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1086:40
     |
1086 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1086:40
     |
1086 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1089:21
     |
1089 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1094:13
     |
1094 | /             match current_block {
1095 | |                 4476262310586904498 => {
1096 | |                     if pending_shell_escape_end as libc::c_int != 0 && !escaping {
1097 | |                         if len < buffersize {
...    |
1118 | |                 _ => {}
1119 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1094 ~             if current_block == 4476262310586904498 {
1095 +                 if pending_shell_escape_end as libc::c_int != 0 && !escaping {
1096 +                     if len < buffersize {
1097 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1098 +                     }
1099 +                     len = len.wrapping_add(1);
1100 +                     len;
1101 +                     if len < buffersize {
1102 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1103 +                     }
1104 +                     len = len.wrapping_add(1);
1105 +                     len;
1106 +                     pending_shell_escape_end = 0 as libc::c_int != 0;
1107 +                 }
1108 +                 if len < buffersize {
1109 +                     *buffer.offset(len as isize) = c as libc::c_char;
1110 +                 }
1111 +                 len = len.wrapping_add(1);
1112 +                 len;
1113 +                 if !c_and_shell_quote_compat {
1114 +                     all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
1115 +                 }
1116 +             }
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1096:24
     |
1096 |                     if pending_shell_escape_end as libc::c_int != 0 && !escaping {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(pending_shell_escape_end)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1098:60
     |
1098 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1098:44
     |
1098 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1098:44
     |
1098 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1101:25
     |
1101 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1103:60
     |
1103 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1103:44
     |
1103 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1103:44
     |
1103 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1106:25
     |
1106 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i8` may wrap around the value
    --> src/quotearg.rs:1110:56
     |
1110 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1110:40
     |
1110 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1110:40
     |
1110 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1113:21
     |
1113 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1121:13
     |
1121 |             i;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1123:19
     |
1123 |         if len == 0 as libc::c_int as libc::c_ulong
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1125:20
     |
1125 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1125:20
     |
1125 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1126:16
     |
1126 |             && elide_outer_quotes as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1132:16
     |
1132 |             == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1132:16
     |
1132 |             == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1133:39
     |
1133 |             && !elide_outer_quotes && encountered_single_quote as libc::c_int != 0)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(encountered_single_quote)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1156:19
     |
1156 |             len = 0 as libc::c_int as size_t;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1159:5
     |
1159 | /     match current_block {
1160 | |         7928555609993211441 => {
1161 | |             if quoting_style as libc::c_uint
1162 | |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1195 | |         }
1196 | |     };
     | |_____^
     |
     = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
     |
1159 ~     if current_block == 7928555609993211441 {
1160 +         if quoting_style as libc::c_uint
1161 +             == shell_always_quoting_style as libc::c_int as libc::c_uint
1162 +             && backslash_escapes as libc::c_int != 0
1163 +         {
1164 +             quoting_style = shell_escape_always_quoting_style;
1165 +         }
1166 +         return quotearg_buffer_restyled(
1167 +             buffer,
1168 +             buffersize,
1169 +             arg,
1170 +             argsize,
1171 +             quoting_style,
1172 +             flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1173 +             0 as *const libc::c_uint,
1174 +             left_quote,
1175 +             right_quote,
1176 +         );
1177 +     } else {
1178 +         if !quote_string.is_null() && !elide_outer_quotes {
1179 +             while *quote_string != 0 {
1180 +                 if len < buffersize {
1181 +                     *buffer.offset(len as isize) = *quote_string;
1182 +                 }
1183 +                 len = len.wrapping_add(1);
1184 +                 len;
1185 +                 quote_string = quote_string.offset(1);
1186 +                 quote_string;
1187 +             }
1188 +         }
1189 +         if len < buffersize {
1190 +             *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
1191 +         }
1192 +         return len;
1193 ~     };
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1162:20
     |
1162 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1162:20
     |
1162 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1163:20
     |
1163 |                 && backslash_escapes as libc::c_int != 0
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1173:26
     |
1173 |                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *const _` detected
    --> src/quotearg.rs:1174:17
     |
1174 |                 0 as *const libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_uint>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1183:40
     |
1183 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1183:40
     |
1183 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1186:21
     |
1186 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1188:21
     |
1188 |                     quote_string;
     |                     ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1192:48
     |
1192 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1192:32
     |
1192 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1192:32
     |
1192 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1199:1
     |
1199 | / pub unsafe extern "C" fn quotearg_buffer(
1200 | |     mut buffer: *mut libc::c_char,
1201 | |     mut buffersize: size_t,
1202 | |     mut arg: *const libc::c_char,
...    |
1224 | |     return r;
1225 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1199:1
     |
1199 | / pub unsafe extern "C" fn quotearg_buffer(
1200 | |     mut buffer: *mut libc::c_char,
1201 | |     mut buffersize: size_t,
1202 | |     mut arg: *const libc::c_char,
...    |
1224 | |     return r;
1225 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1224:5
     |
1224 |     return r;
     |     ^^^^^^^^^ help: remove `return`: `r`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1206:41
     |
1206 |       let mut p: *const quoting_options = if !o.is_null() {
     |  _________________________________________^
1207 | |         o
1208 | |     } else {
1209 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
1210 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
    --> src/quotearg.rs:1209:9
     |
1209 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1227:1
     |
1227 | / pub unsafe extern "C" fn quotearg_alloc(
1228 | |     mut arg: *const libc::c_char,
1229 | |     mut argsize: size_t,
1230 | |     mut o: *const quoting_options,
1231 | | ) -> *mut libc::c_char {
1232 | |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
1233 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1227:1
     |
1227 | / pub unsafe extern "C" fn quotearg_alloc(
1228 | |     mut arg: *const libc::c_char,
1229 | |     mut argsize: size_t,
1230 | |     mut o: *const quoting_options,
1231 | | ) -> *mut libc::c_char {
1232 | |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
1233 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1232:5
     |
1232 |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1232:45
     |
1232 |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
     |                                             ^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<size_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1235:1
     |
1235 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1236 | |     mut arg: *const libc::c_char,
1237 | |     mut argsize: size_t,
1238 | |     mut size: *mut size_t,
...    |
1281 | |     return buf;
1282 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1235:1
     |
1235 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1236 | |     mut arg: *const libc::c_char,
1237 | |     mut argsize: size_t,
1238 | |     mut size: *mut size_t,
...    |
1281 | |     return buf;
1282 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1281:5
     |
1281 |     return buf;
     |     ^^^^^^^^^^^ help: remove `return`: `buf`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1241:41
     |
1241 |       let mut p: *const quoting_options = if !o.is_null() {
     |  _________________________________________^
1242 | |         o
1243 | |     } else {
1244 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
1245 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
    --> src/quotearg.rs:1244:9
     |
1244 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1248:11
     |
1248 |           | (if !size.is_null() {
     |  ___________^
1249 | |             0 as libc::c_int
1250 | |         } else {
1251 | |             QA_ELIDE_NULL_BYTES as libc::c_int
1252 | |         });
     | |__________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1251:13
     |
1251 |             QA_ELIDE_NULL_BYTES as libc::c_int
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1254:9
     |
1254 |         0 as *mut libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1255:9
     |
1255 |         0 as libc::c_int as size_t,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1264:23
     |
1264 |         .wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1279:38
     |
1279 |         *size = bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong);
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1291:9
     |
1287 | /         let mut init = slotvec {
1288 | |             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1289 | |             val: slot0.as_ptr() as *mut _,
1290 | |         };
     | |__________- unnecessary `let` binding
1291 |           init
     |           ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1287 ~         
1288 ~         slotvec {
1289 +             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1290 +             val: slot0.as_ptr() as *mut _,
1291 +         }
     |

warning: borrow as raw pointer
    --> src/quotearg.rs:1295:5
     |
1295 |     &slotvec0 as *const slotvec as *mut slotvec
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1298:1
     |
1298 | / pub unsafe extern "C" fn quotearg_free() {
1299 | |     let mut sv: *mut slotvec = slotvec;
1300 | |     let mut i: libc::c_int = 0;
1301 | |     i = 1 as libc::c_int;
...    |
1316 | |     nslots = 1 as libc::c_int;
1317 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1298:1
     |
1298 | / pub unsafe extern "C" fn quotearg_free() {
1299 | |     let mut sv: *mut slotvec = slotvec;
1300 | |     let mut i: libc::c_int = 0;
1301 | |     i = 1 as libc::c_int;
...    |
1316 | |     nslots = 1 as libc::c_int;
1317 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1303:14
     |
1303 |         free((*sv.offset(i as isize)).val as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*sv.offset(i as isize)).val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: statement with no effect
    --> src/quotearg.rs:1305:9
     |
1305 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1308:14
     |
1308 |         free((*sv.offset(0 as libc::c_int as isize)).val as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*sv.offset(0 as libc::c_int as isize)).val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: borrow as raw pointer
    --> src/quotearg.rs:1312:14
     |
1312 |     if sv != &mut slotvec0 as *mut slotvec {
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1313:14
     |
1313 |         free(sv as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sv.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
    --> src/quotearg.rs:1395:5
     |
1395 |     return val;
     |     ^^^^^^^^^^^ help: remove `return`: `val`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1326:39
     |
1326 |       let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |  _______________________________________^
1327 | |         < 9223372036854775807 as libc::c_long
1328 | |     {
1329 | |         2147483647 as libc::c_int as libc::c_long
1330 | |     } else {
1331 | |         9223372036854775807 as libc::c_long
1332 | |     }) as libc::c_int;
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1326:43
     |
1326 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1329:9
     |
1329 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/quotearg.rs:1337:44
     |
1337 |         let mut preallocated: bool = sv == &mut slotvec0 as *mut slotvec;
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1338:37
     |
1338 |         let mut new_nslots: idx_t = nslots as idx_t;
     |                                     ^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1339:14
     |
1339 |           sv = xpalloc(
     |  ______________^
1340 | |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1341 | |                 as *mut libc::c_void,
1342 | |             &mut new_nslots,
...    |
1345 | |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1346 | |         ) as *mut slotvec;
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
1339 ~         sv = xpalloc(
1340 +             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1341 +                 as *mut libc::c_void,
1342 +             &mut new_nslots,
1343 +             (n - nslots + 1 as libc::c_int) as idx_t,
1344 +             nslots_max as ptrdiff_t,
1345 +             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1346 ~         ).cast::<src::quotearg::slotvec>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1340:13
     |
1340 | /             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1341 | |                 as *mut libc::c_void,
     | |____________________________________^ help: try `pointer::cast`, a safer alternative: `(if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv }).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/quotearg.rs:1340:13
     |
1340 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1340:17
     |
1340 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(preallocated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1340:52
     |
1340 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                                                    ^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<slotvec>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1343:13
     |
1343 |             (n - nslots + 1 as libc::c_int) as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(n - nslots + 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1344:13
     |
1344 |             nslots_max as ptrdiff_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots_max)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
    --> src/quotearg.rs:1345:13
     |
1345 |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1352:13
     |
1352 |             sv.offset(nslots as isize) as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sv.offset(nslots as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1354:13
     |
1354 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1354:28
     |
1354 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1357:18
     |
1357 |         nslots = new_nslots as libc::c_int;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1361:53
     |
1361 |     let mut flags: libc::c_int = (*options).flags | QA_ELIDE_NULL_BYTES as libc::c_int;
     |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1374:35
     |
1374 |         size = qsize.wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1377:18
     |
1377 |             free(val as *mut libc::c_void);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/quotearg.rs:1380:13
     |
1380 |         let ref mut fresh0 = (*sv.offset(n as isize)).val;
     |         ----^^^^^^^^^^^^^^-------------------------------- help: try: `let fresh0 = &mut (*sv.offset(n as isize)).val;`
     |
     = note: `-W clippy::toplevel-ref-arg` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1398:1
     |
1398 | / pub unsafe extern "C" fn quotearg_n(
1399 | |     mut n: libc::c_int,
1400 | |     mut arg: *const libc::c_char,
1401 | | ) -> *mut libc::c_char {
...    |
1407 | |     );
1408 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1398:1
     |
1398 | / pub unsafe extern "C" fn quotearg_n(
1399 | |     mut n: libc::c_int,
1400 | |     mut arg: *const libc::c_char,
1401 | | ) -> *mut libc::c_char {
...    |
1407 | |     );
1408 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1402:5
     |
1402 | /     return quotearg_n_options(
1403 | |         n,
1404 | |         arg,
1405 | |         18446744073709551615 as libc::c_ulong,
1406 | |         &mut default_quoting_options,
1407 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1402 ~     quotearg_n_options(
1403 +         n,
1404 +         arg,
1405 +         18446744073709551615 as libc::c_ulong,
1406 +         &mut default_quoting_options,
1407 +     )
     |

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1406:9
     |
1406 |         &mut default_quoting_options,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: `-W clippy::unnecessary-mut-passed` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1410:1
     |
1410 | / pub unsafe extern "C" fn quotearg_n_mem(
1411 | |     mut n: libc::c_int,
1412 | |     mut arg: *const libc::c_char,
1413 | |     mut argsize: size_t,
1414 | | ) -> *mut libc::c_char {
1415 | |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
1416 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1410:1
     |
1410 | / pub unsafe extern "C" fn quotearg_n_mem(
1411 | |     mut n: libc::c_int,
1412 | |     mut arg: *const libc::c_char,
1413 | |     mut argsize: size_t,
1414 | | ) -> *mut libc::c_char {
1415 | |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
1416 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1415:5
     |
1415 |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut default_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1415:48
     |
1415 |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1418:1
     |
1418 | / pub unsafe extern "C" fn quotearg(mut arg: *const libc::c_char) -> *mut libc::c_char {
1419 | |     return quotearg_n(0 as libc::c_int, arg);
1420 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1419:5
     |
1419 |     return quotearg_n(0 as libc::c_int, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n(0 as libc::c_int, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1422:1
     |
1422 | / pub unsafe extern "C" fn quotearg_mem(
1423 | |     mut arg: *const libc::c_char,
1424 | |     mut argsize: size_t,
1425 | | ) -> *mut libc::c_char {
1426 | |     return quotearg_n_mem(0 as libc::c_int, arg, argsize);
1427 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1422:1
     |
1422 | / pub unsafe extern "C" fn quotearg_mem(
1423 | |     mut arg: *const libc::c_char,
1424 | |     mut argsize: size_t,
1425 | | ) -> *mut libc::c_char {
1426 | |     return quotearg_n_mem(0 as libc::c_int, arg, argsize);
1427 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1426:5
     |
1426 |     return quotearg_n_mem(0 as libc::c_int, arg, argsize);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_mem(0 as libc::c_int, arg, argsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1429:1
     |
1429 | / pub unsafe extern "C" fn quotearg_n_style(
1430 | |     mut n: libc::c_int,
1431 | |     mut s: quoting_style,
1432 | |     mut arg: *const libc::c_char,
...    |
1435 | |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
1436 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1429:1
     |
1429 | / pub unsafe extern "C" fn quotearg_n_style(
1430 | |     mut n: libc::c_int,
1431 | |     mut s: quoting_style,
1432 | |     mut arg: *const libc::c_char,
...    |
1435 | |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
1436 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1435:5
     |
1435 |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1438:1
     |
1438 | / pub unsafe extern "C" fn quotearg_n_style_mem(
1439 | |     mut n: libc::c_int,
1440 | |     mut s: quoting_style,
1441 | |     mut arg: *const libc::c_char,
...    |
1445 | |     return quotearg_n_options(n, arg, argsize, &o);
1446 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1438:1
     |
1438 | / pub unsafe extern "C" fn quotearg_n_style_mem(
1439 | |     mut n: libc::c_int,
1440 | |     mut s: quoting_style,
1441 | |     mut arg: *const libc::c_char,
...    |
1445 | |     return quotearg_n_options(n, arg, argsize, &o);
1446 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1445:5
     |
1445 |     return quotearg_n_options(n, arg, argsize, &o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1448:1
     |
1448 | / pub unsafe extern "C" fn quotearg_style(
1449 | |     mut s: quoting_style,
1450 | |     mut arg: *const libc::c_char,
1451 | | ) -> *mut libc::c_char {
1452 | |     return quotearg_n_style(0 as libc::c_int, s, arg);
1453 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1448:1
     |
1448 | / pub unsafe extern "C" fn quotearg_style(
1449 | |     mut s: quoting_style,
1450 | |     mut arg: *const libc::c_char,
1451 | | ) -> *mut libc::c_char {
1452 | |     return quotearg_n_style(0 as libc::c_int, s, arg);
1453 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1452:5
     |
1452 |     return quotearg_n_style(0 as libc::c_int, s, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_style(0 as libc::c_int, s, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1455:1
     |
1455 | / pub unsafe extern "C" fn quotearg_style_mem(
1456 | |     mut s: quoting_style,
1457 | |     mut arg: *const libc::c_char,
1458 | |     mut argsize: size_t,
1459 | | ) -> *mut libc::c_char {
1460 | |     return quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize);
1461 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1455:1
     |
1455 | / pub unsafe extern "C" fn quotearg_style_mem(
1456 | |     mut s: quoting_style,
1457 | |     mut arg: *const libc::c_char,
1458 | |     mut argsize: size_t,
1459 | | ) -> *mut libc::c_char {
1460 | |     return quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize);
1461 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1460:5
     |
1460 |     return quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1463:1
     |
1463 | / pub unsafe extern "C" fn quotearg_char_mem(
1464 | |     mut arg: *const libc::c_char,
1465 | |     mut argsize: size_t,
1466 | |     mut ch: libc::c_char,
...    |
1477 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1478 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1463:1
     |
1463 | / pub unsafe extern "C" fn quotearg_char_mem(
1464 | |     mut arg: *const libc::c_char,
1465 | |     mut argsize: size_t,
1466 | |     mut ch: libc::c_char,
...    |
1477 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1478 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1477:5
     |
1477 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
    --> src/quotearg.rs:1472:21
     |
1472 |         left_quote: 0 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
    --> src/quotearg.rs:1473:22
     |
1473 |         right_quote: 0 as *const libc::c_char,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1477:63
     |
1477 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |                                                               ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1480:1
     |
1480 | / pub unsafe extern "C" fn quotearg_char(
1481 | |     mut arg: *const libc::c_char,
1482 | |     mut ch: libc::c_char,
1483 | | ) -> *mut libc::c_char {
1484 | |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
1485 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1480:1
     |
1480 | / pub unsafe extern "C" fn quotearg_char(
1481 | |     mut arg: *const libc::c_char,
1482 | |     mut ch: libc::c_char,
1483 | | ) -> *mut libc::c_char {
1484 | |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
1485 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1484:5
     |
1484 |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1487:1
     |
1487 | / pub unsafe extern "C" fn quotearg_colon(
1488 | |     mut arg: *const libc::c_char,
1489 | | ) -> *mut libc::c_char {
1490 | |     return quotearg_char(arg, ':' as i32 as libc::c_char);
1491 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1487:1
     |
1487 | / pub unsafe extern "C" fn quotearg_colon(
1488 | |     mut arg: *const libc::c_char,
1489 | | ) -> *mut libc::c_char {
1490 | |     return quotearg_char(arg, ':' as i32 as libc::c_char);
1491 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1490:5
     |
1490 |     return quotearg_char(arg, ':' as i32 as libc::c_char);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_char(arg, ':' as i32 as libc::c_char)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1490:31
     |
1490 |     return quotearg_char(arg, ':' as i32 as libc::c_char);
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1493:1
     |
1493 | / pub unsafe extern "C" fn quotearg_colon_mem(
1494 | |     mut arg: *const libc::c_char,
1495 | |     mut argsize: size_t,
1496 | | ) -> *mut libc::c_char {
1497 | |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
1498 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1493:1
     |
1493 | / pub unsafe extern "C" fn quotearg_colon_mem(
1494 | |     mut arg: *const libc::c_char,
1495 | |     mut argsize: size_t,
1496 | | ) -> *mut libc::c_char {
1497 | |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
1498 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1497:5
     |
1497 |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1497:44
     |
1497 |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1500:1
     |
1500 | / pub unsafe extern "C" fn quotearg_n_style_colon(
1501 | |     mut n: libc::c_int,
1502 | |     mut s: quoting_style,
1503 | |     mut arg: *const libc::c_char,
...    |
1519 | |     );
1520 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1500:1
     |
1500 | / pub unsafe extern "C" fn quotearg_n_style_colon(
1501 | |     mut n: libc::c_int,
1502 | |     mut s: quoting_style,
1503 | |     mut arg: *const libc::c_char,
...    |
1519 | |     );
1520 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1514:5
     |
1514 | /     return quotearg_n_options(
1515 | |         n,
1516 | |         arg,
1517 | |         18446744073709551615 as libc::c_ulong,
1518 | |         &mut options,
1519 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1514 ~     quotearg_n_options(
1515 +         n,
1516 +         arg,
1517 +         18446744073709551615 as libc::c_ulong,
1518 +         &mut options,
1519 +     )
     |

warning: `0 as *const _` detected
    --> src/quotearg.rs:1509:21
     |
1509 |         left_quote: 0 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
    --> src/quotearg.rs:1510:22
     |
1510 |         right_quote: 0 as *const libc::c_char,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1513:36
     |
1513 |     set_char_quoting(&mut options, ':' as i32 as libc::c_char, 1 as libc::c_int);
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1518:9
     |
1518 |         &mut options,
     |         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1522:1
     |
1522 | / pub unsafe extern "C" fn quotearg_n_custom(
1523 | |     mut n: libc::c_int,
1524 | |     mut left_quote: *const libc::c_char,
1525 | |     mut right_quote: *const libc::c_char,
...    |
1534 | |     );
1535 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1522:1
     |
1522 | / pub unsafe extern "C" fn quotearg_n_custom(
1523 | |     mut n: libc::c_int,
1524 | |     mut left_quote: *const libc::c_char,
1525 | |     mut right_quote: *const libc::c_char,
...    |
1534 | |     );
1535 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1528:5
     |
1528 | /     return quotearg_n_custom_mem(
1529 | |         n,
1530 | |         left_quote,
1531 | |         right_quote,
1532 | |         arg,
1533 | |         18446744073709551615 as libc::c_ulong,
1534 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1528 ~     quotearg_n_custom_mem(
1529 +         n,
1530 +         left_quote,
1531 +         right_quote,
1532 +         arg,
1533 +         18446744073709551615 as libc::c_ulong,
1534 +     )
     |

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1537:1
     |
1537 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1538 | |     mut n: libc::c_int,
1539 | |     mut left_quote: *const libc::c_char,
1540 | |     mut right_quote: *const libc::c_char,
...    |
1546 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1547 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1537:1
     |
1537 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1538 | |     mut n: libc::c_int,
1539 | |     mut left_quote: *const libc::c_char,
1540 | |     mut right_quote: *const libc::c_char,
...    |
1546 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1547 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1546:5
     |
1546 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1546:48
     |
1546 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |                                                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1549:1
     |
1549 | / pub unsafe extern "C" fn quotearg_custom(
1550 | |     mut left_quote: *const libc::c_char,
1551 | |     mut right_quote: *const libc::c_char,
1552 | |     mut arg: *const libc::c_char,
1553 | | ) -> *mut libc::c_char {
1554 | |     return quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg);
1555 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1549:1
     |
1549 | / pub unsafe extern "C" fn quotearg_custom(
1550 | |     mut left_quote: *const libc::c_char,
1551 | |     mut right_quote: *const libc::c_char,
1552 | |     mut arg: *const libc::c_char,
1553 | | ) -> *mut libc::c_char {
1554 | |     return quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg);
1555 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1554:5
     |
1554 |     return quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1557:1
     |
1557 | / pub unsafe extern "C" fn quotearg_custom_mem(
1558 | |     mut left_quote: *const libc::c_char,
1559 | |     mut right_quote: *const libc::c_char,
1560 | |     mut arg: *const libc::c_char,
...    |
1569 | |     );
1570 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1557:1
     |
1557 | / pub unsafe extern "C" fn quotearg_custom_mem(
1558 | |     mut left_quote: *const libc::c_char,
1559 | |     mut right_quote: *const libc::c_char,
1560 | |     mut arg: *const libc::c_char,
...    |
1569 | |     );
1570 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1563:5
     |
1563 | /     return quotearg_n_custom_mem(
1564 | |         0 as libc::c_int,
1565 | |         left_quote,
1566 | |         right_quote,
1567 | |         arg,
1568 | |         argsize,
1569 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1563 ~     quotearg_n_custom_mem(
1564 +         0 as libc::c_int,
1565 +         left_quote,
1566 +         right_quote,
1567 +         arg,
1568 +         argsize,
1569 +     )
     |

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1580:5
     |
1573 | /     let mut init = quoting_options {
1574 | |         style: locale_quoting_style,
1575 | |         flags: 0 as libc::c_int,
1576 | |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1577 | |         left_quote: 0 as *const libc::c_char,
1578 | |         right_quote: 0 as *const libc::c_char,
1579 | |     };
     | |______- unnecessary `let` binding
1580 |       init
     |       ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1573 ~     
1574 ~     quoting_options {
1575 +         style: locale_quoting_style,
1576 +         flags: 0 as libc::c_int,
1577 +         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1578 +         left_quote: 0 as *const libc::c_char,
1579 +         right_quote: 0 as *const libc::c_char,
1580 +     }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1576:27
     |
1576 |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1583:1
     |
1583 | / pub unsafe extern "C" fn quote_n_mem(
1584 | |     mut n: libc::c_int,
1585 | |     mut arg: *const libc::c_char,
1586 | |     mut argsize: size_t,
1587 | | ) -> *const libc::c_char {
1588 | |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
1589 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1588:5
     |
1588 |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut quote_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1588:48
     |
1588 |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1591:1
     |
1591 | / pub unsafe extern "C" fn quote_mem(
1592 | |     mut arg: *const libc::c_char,
1593 | |     mut argsize: size_t,
1594 | | ) -> *const libc::c_char {
1595 | |     return quote_n_mem(0 as libc::c_int, arg, argsize);
1596 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1595:5
     |
1595 |     return quote_n_mem(0 as libc::c_int, arg, argsize);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n_mem(0 as libc::c_int, arg, argsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1598:1
     |
1598 | / pub unsafe extern "C" fn quote_n(
1599 | |     mut n: libc::c_int,
1600 | |     mut arg: *const libc::c_char,
1601 | | ) -> *const libc::c_char {
1602 | |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
1603 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1602:5
     |
1602 |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1605:1
     |
1605 | / pub unsafe extern "C" fn quote(mut arg: *const libc::c_char) -> *const libc::c_char {
1606 | |     return quote_n(0 as libc::c_int, arg);
1607 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1606:5
     |
1606 |     return quote_n(0 as libc::c_int, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n(0 as libc::c_int, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/safe_write.rs:12:1
   |
12 | / pub unsafe extern "C" fn safe_write(
13 | |     mut fd: libc::c_int,
14 | |     mut buf: *const libc::c_void,
15 | |     mut count: size_t,
...  |
33 | |     };
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/safe_write.rs:19:12
   |
19 |         if 0 as libc::c_int as libc::c_long <= result {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/safe_write.rs:20:20
   |
20 |             return result as size_t
   |                    ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/safe_write.rs:26:20
   |
26 |                 && (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong) < count
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/safe_write.rs:26:21
   |
26 |                 && (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong) < count
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/safe_write.rs:28:25
   |
28 |                 count = SYS_BUFSIZE_MAX as libc::c_int as size_t;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/safe_write.rs:28:25
   |
28 |                 count = SYS_BUFSIZE_MAX as libc::c_int as size_t;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/safe_write.rs:30:24
   |
30 |                 return result as size_t
   |                        ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/same_inode.rs:42:1
   |
42 | / pub unsafe extern "C" fn psame_inode(mut a: *const stat, mut b: *const stat) -> bool {
43 | |     return (*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0;
44 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/same_inode.rs:42:1
   |
42 | / pub unsafe extern "C" fn psame_inode(mut a: *const stat, mut b: *const stat) -> bool {
43 | |     return (*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0;
44 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/same_inode.rs:43:5
   |
43 |     return (*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null.rs:12:1
   |
12 | / pub unsafe extern "C" fn setlocale_null_r(
13 | |     mut category: libc::c_int,
14 | |     mut buf: *mut libc::c_char,
15 | |     mut bufsize: size_t,
16 | | ) -> libc::c_int {
17 | |     return setlocale_null_r_unlocked(category, buf, bufsize);
18 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/setlocale_null.rs:12:1
   |
12 | / pub unsafe extern "C" fn setlocale_null_r(
13 | |     mut category: libc::c_int,
14 | |     mut buf: *mut libc::c_char,
15 | |     mut bufsize: size_t,
16 | | ) -> libc::c_int {
17 | |     return setlocale_null_r_unlocked(category, buf, bufsize);
18 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/setlocale_null.rs:17:5
   |
17 |     return setlocale_null_r_unlocked(category, buf, bufsize);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `setlocale_null_r_unlocked(category, buf, bufsize)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null.rs:20:1
   |
20 | / pub unsafe extern "C" fn setlocale_null(
21 | |     mut category: libc::c_int,
22 | | ) -> *const libc::c_char {
23 | |     return setlocale_null_unlocked(category);
24 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null.rs:23:5
   |
23 |     return setlocale_null_unlocked(category);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `setlocale_null_unlocked(category)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null_unlocked.rs:16:1
   |
16 | / pub unsafe extern "C" fn setlocale_null_unlocked(
17 | |     mut category: libc::c_int,
18 | | ) -> *const libc::c_char {
19 | |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
20 | |     return result;
21 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:20:5
   |
20 |     return result;
   |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
  --> src/setlocale_null_unlocked.rs:19:63
   |
19 |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null_unlocked.rs:23:1
   |
23 | / pub unsafe extern "C" fn setlocale_null_r_unlocked(
24 | |     mut category: libc::c_int,
25 | |     mut buf: *mut libc::c_char,
26 | |     mut bufsize: size_t,
...  |
57 | |     };
58 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:33:9
   |
33 |         return 22 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `22 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:42:13
   |
42 |             return 0 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:55:13
   |
55 |             return 34 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `34 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:30:22
   |
30 |         if bufsize > 0 as libc::c_int as libc::c_ulong {
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/setlocale_null_unlocked.rs:31:54
   |
31 |             *buf.offset(0 as libc::c_int as isize) = '\0' as i32 as libc::c_char;
   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:38:17
   |
38 |                 buf as *mut libc::c_void,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:39:17
   |
39 |                 result as *const libc::c_void,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:40:37
   |
40 |                 length.wrapping_add(1 as libc::c_int as libc::c_ulong),
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:44:26
   |
44 |             if bufsize > 0 as libc::c_int as libc::c_ulong {
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:46:21
   |
46 |                     buf as *mut libc::c_void,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:47:21
   |
47 |                     result as *const libc::c_void,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:48:42
   |
48 |                     bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong),
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/setlocale_null_unlocked.rs:53:25
   |
53 |                     ) = '\0' as i32 as libc::c_char;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/setlocale_null_unlocked.rs:52:25
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/setlocale_null_unlocked.rs:52:25
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:52:46
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:35:13
   |
28 | /             let mut init = numname {
29 | |                 num: 1 as libc::c_int,
30 | |                 name: *::core::mem::transmute::<
31 | |                     &[u8; 8],
32 | |                     &[libc::c_char; 8],
33 | |                 >(b"HUP\0\0\0\0\0"),
34 | |             };
   | |______________- unnecessary `let` binding
35 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
28 ~             
29 ~             numname {
30 +                 num: 1 as libc::c_int,
31 +                 name: *::core::mem::transmute::<
32 +                     &[u8; 8],
33 +                     &[libc::c_char; 8],
34 +                 >(b"HUP\0\0\0\0\0"),
35 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:45:13
   |
38 | /             let mut init = numname {
39 | |                 num: 2 as libc::c_int,
40 | |                 name: *::core::mem::transmute::<
41 | |                     &[u8; 8],
42 | |                     &[libc::c_char; 8],
43 | |                 >(b"INT\0\0\0\0\0"),
44 | |             };
   | |______________- unnecessary `let` binding
45 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
38 ~             
39 ~             numname {
40 +                 num: 2 as libc::c_int,
41 +                 name: *::core::mem::transmute::<
42 +                     &[u8; 8],
43 +                     &[libc::c_char; 8],
44 +                 >(b"INT\0\0\0\0\0"),
45 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:55:13
   |
48 | /             let mut init = numname {
49 | |                 num: 3 as libc::c_int,
50 | |                 name: *::core::mem::transmute::<
51 | |                     &[u8; 8],
52 | |                     &[libc::c_char; 8],
53 | |                 >(b"QUIT\0\0\0\0"),
54 | |             };
   | |______________- unnecessary `let` binding
55 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
48 ~             
49 ~             numname {
50 +                 num: 3 as libc::c_int,
51 +                 name: *::core::mem::transmute::<
52 +                     &[u8; 8],
53 +                     &[libc::c_char; 8],
54 +                 >(b"QUIT\0\0\0\0"),
55 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:65:13
   |
58 | /             let mut init = numname {
59 | |                 num: 4 as libc::c_int,
60 | |                 name: *::core::mem::transmute::<
61 | |                     &[u8; 8],
62 | |                     &[libc::c_char; 8],
63 | |                 >(b"ILL\0\0\0\0\0"),
64 | |             };
   | |______________- unnecessary `let` binding
65 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
58 ~             
59 ~             numname {
60 +                 num: 4 as libc::c_int,
61 +                 name: *::core::mem::transmute::<
62 +                     &[u8; 8],
63 +                     &[libc::c_char; 8],
64 +                 >(b"ILL\0\0\0\0\0"),
65 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:75:13
   |
68 | /             let mut init = numname {
69 | |                 num: 5 as libc::c_int,
70 | |                 name: *::core::mem::transmute::<
71 | |                     &[u8; 8],
72 | |                     &[libc::c_char; 8],
73 | |                 >(b"TRAP\0\0\0\0"),
74 | |             };
   | |______________- unnecessary `let` binding
75 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
68 ~             
69 ~             numname {
70 +                 num: 5 as libc::c_int,
71 +                 name: *::core::mem::transmute::<
72 +                     &[u8; 8],
73 +                     &[libc::c_char; 8],
74 +                 >(b"TRAP\0\0\0\0"),
75 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:85:13
   |
78 | /             let mut init = numname {
79 | |                 num: 6 as libc::c_int,
80 | |                 name: *::core::mem::transmute::<
81 | |                     &[u8; 8],
82 | |                     &[libc::c_char; 8],
83 | |                 >(b"ABRT\0\0\0\0"),
84 | |             };
   | |______________- unnecessary `let` binding
85 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
78 ~             
79 ~             numname {
80 +                 num: 6 as libc::c_int,
81 +                 name: *::core::mem::transmute::<
82 +                     &[u8; 8],
83 +                     &[libc::c_char; 8],
84 +                 >(b"ABRT\0\0\0\0"),
85 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:95:13
   |
88 | /             let mut init = numname {
89 | |                 num: 8 as libc::c_int,
90 | |                 name: *::core::mem::transmute::<
91 | |                     &[u8; 8],
92 | |                     &[libc::c_char; 8],
93 | |                 >(b"FPE\0\0\0\0\0"),
94 | |             };
   | |______________- unnecessary `let` binding
95 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
88 ~             
89 ~             numname {
90 +                 num: 8 as libc::c_int,
91 +                 name: *::core::mem::transmute::<
92 +                     &[u8; 8],
93 +                     &[libc::c_char; 8],
94 +                 >(b"FPE\0\0\0\0\0"),
95 +             }
   |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:105:13
    |
98  | /             let mut init = numname {
99  | |                 num: 9 as libc::c_int,
100 | |                 name: *::core::mem::transmute::<
101 | |                     &[u8; 8],
102 | |                     &[libc::c_char; 8],
103 | |                 >(b"KILL\0\0\0\0"),
104 | |             };
    | |______________- unnecessary `let` binding
105 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
98  ~             
99  ~             numname {
100 +                 num: 9 as libc::c_int,
101 +                 name: *::core::mem::transmute::<
102 +                     &[u8; 8],
103 +                     &[libc::c_char; 8],
104 +                 >(b"KILL\0\0\0\0"),
105 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:115:13
    |
108 | /             let mut init = numname {
109 | |                 num: 11 as libc::c_int,
110 | |                 name: *::core::mem::transmute::<
111 | |                     &[u8; 8],
112 | |                     &[libc::c_char; 8],
113 | |                 >(b"SEGV\0\0\0\0"),
114 | |             };
    | |______________- unnecessary `let` binding
115 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
108 ~             
109 ~             numname {
110 +                 num: 11 as libc::c_int,
111 +                 name: *::core::mem::transmute::<
112 +                     &[u8; 8],
113 +                     &[libc::c_char; 8],
114 +                 >(b"SEGV\0\0\0\0"),
115 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:125:13
    |
118 | /             let mut init = numname {
119 | |                 num: 7 as libc::c_int,
120 | |                 name: *::core::mem::transmute::<
121 | |                     &[u8; 8],
122 | |                     &[libc::c_char; 8],
123 | |                 >(b"BUS\0\0\0\0\0"),
124 | |             };
    | |______________- unnecessary `let` binding
125 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
118 ~             
119 ~             numname {
120 +                 num: 7 as libc::c_int,
121 +                 name: *::core::mem::transmute::<
122 +                     &[u8; 8],
123 +                     &[libc::c_char; 8],
124 +                 >(b"BUS\0\0\0\0\0"),
125 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:135:13
    |
128 | /             let mut init = numname {
129 | |                 num: 13 as libc::c_int,
130 | |                 name: *::core::mem::transmute::<
131 | |                     &[u8; 8],
132 | |                     &[libc::c_char; 8],
133 | |                 >(b"PIPE\0\0\0\0"),
134 | |             };
    | |______________- unnecessary `let` binding
135 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
128 ~             
129 ~             numname {
130 +                 num: 13 as libc::c_int,
131 +                 name: *::core::mem::transmute::<
132 +                     &[u8; 8],
133 +                     &[libc::c_char; 8],
134 +                 >(b"PIPE\0\0\0\0"),
135 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:145:13
    |
138 | /             let mut init = numname {
139 | |                 num: 14 as libc::c_int,
140 | |                 name: *::core::mem::transmute::<
141 | |                     &[u8; 8],
142 | |                     &[libc::c_char; 8],
143 | |                 >(b"ALRM\0\0\0\0"),
144 | |             };
    | |______________- unnecessary `let` binding
145 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
138 ~             
139 ~             numname {
140 +                 num: 14 as libc::c_int,
141 +                 name: *::core::mem::transmute::<
142 +                     &[u8; 8],
143 +                     &[libc::c_char; 8],
144 +                 >(b"ALRM\0\0\0\0"),
145 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:155:13
    |
148 | /             let mut init = numname {
149 | |                 num: 15 as libc::c_int,
150 | |                 name: *::core::mem::transmute::<
151 | |                     &[u8; 8],
152 | |                     &[libc::c_char; 8],
153 | |                 >(b"TERM\0\0\0\0"),
154 | |             };
    | |______________- unnecessary `let` binding
155 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
148 ~             
149 ~             numname {
150 +                 num: 15 as libc::c_int,
151 +                 name: *::core::mem::transmute::<
152 +                     &[u8; 8],
153 +                     &[libc::c_char; 8],
154 +                 >(b"TERM\0\0\0\0"),
155 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:165:13
    |
158 | /             let mut init = numname {
159 | |                 num: 10 as libc::c_int,
160 | |                 name: *::core::mem::transmute::<
161 | |                     &[u8; 8],
162 | |                     &[libc::c_char; 8],
163 | |                 >(b"USR1\0\0\0\0"),
164 | |             };
    | |______________- unnecessary `let` binding
165 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
158 ~             
159 ~             numname {
160 +                 num: 10 as libc::c_int,
161 +                 name: *::core::mem::transmute::<
162 +                     &[u8; 8],
163 +                     &[libc::c_char; 8],
164 +                 >(b"USR1\0\0\0\0"),
165 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:175:13
    |
168 | /             let mut init = numname {
169 | |                 num: 12 as libc::c_int,
170 | |                 name: *::core::mem::transmute::<
171 | |                     &[u8; 8],
172 | |                     &[libc::c_char; 8],
173 | |                 >(b"USR2\0\0\0\0"),
174 | |             };
    | |______________- unnecessary `let` binding
175 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
168 ~             
169 ~             numname {
170 +                 num: 12 as libc::c_int,
171 +                 name: *::core::mem::transmute::<
172 +                     &[u8; 8],
173 +                     &[libc::c_char; 8],
174 +                 >(b"USR2\0\0\0\0"),
175 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:185:13
    |
178 | /             let mut init = numname {
179 | |                 num: 17 as libc::c_int,
180 | |                 name: *::core::mem::transmute::<
181 | |                     &[u8; 8],
182 | |                     &[libc::c_char; 8],
183 | |                 >(b"CHLD\0\0\0\0"),
184 | |             };
    | |______________- unnecessary `let` binding
185 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
178 ~             
179 ~             numname {
180 +                 num: 17 as libc::c_int,
181 +                 name: *::core::mem::transmute::<
182 +                     &[u8; 8],
183 +                     &[libc::c_char; 8],
184 +                 >(b"CHLD\0\0\0\0"),
185 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:195:13
    |
188 | /             let mut init = numname {
189 | |                 num: 23 as libc::c_int,
190 | |                 name: *::core::mem::transmute::<
191 | |                     &[u8; 8],
192 | |                     &[libc::c_char; 8],
193 | |                 >(b"URG\0\0\0\0\0"),
194 | |             };
    | |______________- unnecessary `let` binding
195 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
188 ~             
189 ~             numname {
190 +                 num: 23 as libc::c_int,
191 +                 name: *::core::mem::transmute::<
192 +                     &[u8; 8],
193 +                     &[libc::c_char; 8],
194 +                 >(b"URG\0\0\0\0\0"),
195 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:205:13
    |
198 | /             let mut init = numname {
199 | |                 num: 19 as libc::c_int,
200 | |                 name: *::core::mem::transmute::<
201 | |                     &[u8; 8],
202 | |                     &[libc::c_char; 8],
203 | |                 >(b"STOP\0\0\0\0"),
204 | |             };
    | |______________- unnecessary `let` binding
205 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
198 ~             
199 ~             numname {
200 +                 num: 19 as libc::c_int,
201 +                 name: *::core::mem::transmute::<
202 +                     &[u8; 8],
203 +                     &[libc::c_char; 8],
204 +                 >(b"STOP\0\0\0\0"),
205 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:215:13
    |
208 | /             let mut init = numname {
209 | |                 num: 20 as libc::c_int,
210 | |                 name: *::core::mem::transmute::<
211 | |                     &[u8; 8],
212 | |                     &[libc::c_char; 8],
213 | |                 >(b"TSTP\0\0\0\0"),
214 | |             };
    | |______________- unnecessary `let` binding
215 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
208 ~             
209 ~             numname {
210 +                 num: 20 as libc::c_int,
211 +                 name: *::core::mem::transmute::<
212 +                     &[u8; 8],
213 +                     &[libc::c_char; 8],
214 +                 >(b"TSTP\0\0\0\0"),
215 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:225:13
    |
218 | /             let mut init = numname {
219 | |                 num: 18 as libc::c_int,
220 | |                 name: *::core::mem::transmute::<
221 | |                     &[u8; 8],
222 | |                     &[libc::c_char; 8],
223 | |                 >(b"CONT\0\0\0\0"),
224 | |             };
    | |______________- unnecessary `let` binding
225 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
218 ~             
219 ~             numname {
220 +                 num: 18 as libc::c_int,
221 +                 name: *::core::mem::transmute::<
222 +                     &[u8; 8],
223 +                     &[libc::c_char; 8],
224 +                 >(b"CONT\0\0\0\0"),
225 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:235:13
    |
228 | /             let mut init = numname {
229 | |                 num: 21 as libc::c_int,
230 | |                 name: *::core::mem::transmute::<
231 | |                     &[u8; 8],
232 | |                     &[libc::c_char; 8],
233 | |                 >(b"TTIN\0\0\0\0"),
234 | |             };
    | |______________- unnecessary `let` binding
235 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
228 ~             
229 ~             numname {
230 +                 num: 21 as libc::c_int,
231 +                 name: *::core::mem::transmute::<
232 +                     &[u8; 8],
233 +                     &[libc::c_char; 8],
234 +                 >(b"TTIN\0\0\0\0"),
235 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:245:13
    |
238 | /             let mut init = numname {
239 | |                 num: 22 as libc::c_int,
240 | |                 name: *::core::mem::transmute::<
241 | |                     &[u8; 8],
242 | |                     &[libc::c_char; 8],
243 | |                 >(b"TTOU\0\0\0\0"),
244 | |             };
    | |______________- unnecessary `let` binding
245 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
238 ~             
239 ~             numname {
240 +                 num: 22 as libc::c_int,
241 +                 name: *::core::mem::transmute::<
242 +                     &[u8; 8],
243 +                     &[libc::c_char; 8],
244 +                 >(b"TTOU\0\0\0\0"),
245 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:255:13
    |
248 | /             let mut init = numname {
249 | |                 num: 31 as libc::c_int,
250 | |                 name: *::core::mem::transmute::<
251 | |                     &[u8; 8],
252 | |                     &[libc::c_char; 8],
253 | |                 >(b"SYS\0\0\0\0\0"),
254 | |             };
    | |______________- unnecessary `let` binding
255 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
248 ~             
249 ~             numname {
250 +                 num: 31 as libc::c_int,
251 +                 name: *::core::mem::transmute::<
252 +                     &[u8; 8],
253 +                     &[libc::c_char; 8],
254 +                 >(b"SYS\0\0\0\0\0"),
255 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:265:13
    |
258 | /             let mut init = numname {
259 | |                 num: 29 as libc::c_int,
260 | |                 name: *::core::mem::transmute::<
261 | |                     &[u8; 8],
262 | |                     &[libc::c_char; 8],
263 | |                 >(b"POLL\0\0\0\0"),
264 | |             };
    | |______________- unnecessary `let` binding
265 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
258 ~             
259 ~             numname {
260 +                 num: 29 as libc::c_int,
261 +                 name: *::core::mem::transmute::<
262 +                     &[u8; 8],
263 +                     &[libc::c_char; 8],
264 +                 >(b"POLL\0\0\0\0"),
265 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:275:13
    |
268 | /             let mut init = numname {
269 | |                 num: 26 as libc::c_int,
270 | |                 name: *::core::mem::transmute::<
271 | |                     &[u8; 8],
272 | |                     &[libc::c_char; 8],
273 | |                 >(b"VTALRM\0\0"),
274 | |             };
    | |______________- unnecessary `let` binding
275 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
268 ~             
269 ~             numname {
270 +                 num: 26 as libc::c_int,
271 +                 name: *::core::mem::transmute::<
272 +                     &[u8; 8],
273 +                     &[libc::c_char; 8],
274 +                 >(b"VTALRM\0\0"),
275 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:285:13
    |
278 | /             let mut init = numname {
279 | |                 num: 27 as libc::c_int,
280 | |                 name: *::core::mem::transmute::<
281 | |                     &[u8; 8],
282 | |                     &[libc::c_char; 8],
283 | |                 >(b"PROF\0\0\0\0"),
284 | |             };
    | |______________- unnecessary `let` binding
285 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
278 ~             
279 ~             numname {
280 +                 num: 27 as libc::c_int,
281 +                 name: *::core::mem::transmute::<
282 +                     &[u8; 8],
283 +                     &[libc::c_char; 8],
284 +                 >(b"PROF\0\0\0\0"),
285 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:295:13
    |
288 | /             let mut init = numname {
289 | |                 num: 24 as libc::c_int,
290 | |                 name: *::core::mem::transmute::<
291 | |                     &[u8; 8],
292 | |                     &[libc::c_char; 8],
293 | |                 >(b"XCPU\0\0\0\0"),
294 | |             };
    | |______________- unnecessary `let` binding
295 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
288 ~             
289 ~             numname {
290 +                 num: 24 as libc::c_int,
291 +                 name: *::core::mem::transmute::<
292 +                     &[u8; 8],
293 +                     &[libc::c_char; 8],
294 +                 >(b"XCPU\0\0\0\0"),
295 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:305:13
    |
298 | /             let mut init = numname {
299 | |                 num: 25 as libc::c_int,
300 | |                 name: *::core::mem::transmute::<
301 | |                     &[u8; 8],
302 | |                     &[libc::c_char; 8],
303 | |                 >(b"XFSZ\0\0\0\0"),
304 | |             };
    | |______________- unnecessary `let` binding
305 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
298 ~             
299 ~             numname {
300 +                 num: 25 as libc::c_int,
301 +                 name: *::core::mem::transmute::<
302 +                     &[u8; 8],
303 +                     &[libc::c_char; 8],
304 +                 >(b"XFSZ\0\0\0\0"),
305 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:315:13
    |
308 | /             let mut init = numname {
309 | |                 num: 6 as libc::c_int,
310 | |                 name: *::core::mem::transmute::<
311 | |                     &[u8; 8],
312 | |                     &[libc::c_char; 8],
313 | |                 >(b"IOT\0\0\0\0\0"),
314 | |             };
    | |______________- unnecessary `let` binding
315 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
308 ~             
309 ~             numname {
310 +                 num: 6 as libc::c_int,
311 +                 name: *::core::mem::transmute::<
312 +                     &[u8; 8],
313 +                     &[libc::c_char; 8],
314 +                 >(b"IOT\0\0\0\0\0"),
315 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:325:13
    |
318 | /             let mut init = numname {
319 | |                 num: 17 as libc::c_int,
320 | |                 name: *::core::mem::transmute::<
321 | |                     &[u8; 8],
322 | |                     &[libc::c_char; 8],
323 | |                 >(b"CLD\0\0\0\0\0"),
324 | |             };
    | |______________- unnecessary `let` binding
325 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
318 ~             
319 ~             numname {
320 +                 num: 17 as libc::c_int,
321 +                 name: *::core::mem::transmute::<
322 +                     &[u8; 8],
323 +                     &[libc::c_char; 8],
324 +                 >(b"CLD\0\0\0\0\0"),
325 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:335:13
    |
328 | /             let mut init = numname {
329 | |                 num: 30 as libc::c_int,
330 | |                 name: *::core::mem::transmute::<
331 | |                     &[u8; 8],
332 | |                     &[libc::c_char; 8],
333 | |                 >(b"PWR\0\0\0\0\0"),
334 | |             };
    | |______________- unnecessary `let` binding
335 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
328 ~             
329 ~             numname {
330 +                 num: 30 as libc::c_int,
331 +                 name: *::core::mem::transmute::<
332 +                     &[u8; 8],
333 +                     &[libc::c_char; 8],
334 +                 >(b"PWR\0\0\0\0\0"),
335 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:345:13
    |
338 | /             let mut init = numname {
339 | |                 num: 28 as libc::c_int,
340 | |                 name: *::core::mem::transmute::<
341 | |                     &[u8; 8],
342 | |                     &[libc::c_char; 8],
343 | |                 >(b"WINCH\0\0\0"),
344 | |             };
    | |______________- unnecessary `let` binding
345 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
338 ~             
339 ~             numname {
340 +                 num: 28 as libc::c_int,
341 +                 name: *::core::mem::transmute::<
342 +                     &[u8; 8],
343 +                     &[libc::c_char; 8],
344 +                 >(b"WINCH\0\0\0"),
345 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:355:13
    |
348 | /             let mut init = numname {
349 | |                 num: 29 as libc::c_int,
350 | |                 name: *::core::mem::transmute::<
351 | |                     &[u8; 8],
352 | |                     &[libc::c_char; 8],
353 | |                 >(b"IO\0\0\0\0\0\0"),
354 | |             };
    | |______________- unnecessary `let` binding
355 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
348 ~             
349 ~             numname {
350 +                 num: 29 as libc::c_int,
351 +                 name: *::core::mem::transmute::<
352 +                     &[u8; 8],
353 +                     &[libc::c_char; 8],
354 +                 >(b"IO\0\0\0\0\0\0"),
355 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:365:13
    |
358 | /             let mut init = numname {
359 | |                 num: 16 as libc::c_int,
360 | |                 name: *::core::mem::transmute::<
361 | |                     &[u8; 8],
362 | |                     &[libc::c_char; 8],
363 | |                 >(b"STKFLT\0\0"),
364 | |             };
    | |______________- unnecessary `let` binding
365 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
358 ~             
359 ~             numname {
360 +                 num: 16 as libc::c_int,
361 +                 name: *::core::mem::transmute::<
362 +                     &[u8; 8],
363 +                     &[libc::c_char; 8],
364 +                 >(b"STKFLT\0\0"),
365 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:375:13
    |
368 | /             let mut init = numname {
369 | |                 num: 0 as libc::c_int,
370 | |                 name: *::core::mem::transmute::<
371 | |                     &[u8; 8],
372 | |                     &[libc::c_char; 8],
373 | |                 >(b"EXIT\0\0\0\0"),
374 | |             };
    | |______________- unnecessary `let` binding
375 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
368 ~             
369 ~             numname {
370 +                 num: 0 as libc::c_int,
371 +                 name: *::core::mem::transmute::<
372 +                     &[u8; 8],
373 +                     &[libc::c_char; 8],
374 +                 >(b"EXIT\0\0\0\0"),
375 +             }
    |

warning: unneeded `return` statement
   --> src/sig2str.rs:446:5
    |
446 |     return -(1 as libc::c_int);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `-(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
   --> src/sig2str.rs:380:8
    |
380 |     if (*signame as libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint)
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/sig2str.rs:380:48
    |
380 |     if (*signame as libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint)
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/sig2str.rs:381:12
    |
381 |         <= 9 as libc::c_int as libc::c_uint
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *mut _` detected
   --> src/sig2str.rs:383:43
    |
383 |         let mut endp: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                           ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:387:20
    |
387 |                   <= (64 as libc::c_int + 1 as libc::c_int - 1 as libc::c_int)
    |  ____________________^
388 | |                     as libc::c_long
    | |___________________________________^ help: try: `i64::from(64 as libc::c_int + 1 as libc::c_int - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
   --> src/sig2str.rs:390:20
    |
390 |             return n as libc::c_int;
    |                    ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/sig2str.rs:394:13
    |
394 |         i = 0 as libc::c_int as libc::c_uint;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `u64` may become silently lossy if you later change the type
   --> src/sig2str.rs:395:15
    |
395 |         while (i as libc::c_ulong)
    |               ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(i)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/sig2str.rs:405:13
    |
405 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/sig2str.rs:407:45
    |
407 |         let mut endp_0: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/sig2str.rs:413:17
    |
413 |                 b"RTMIN\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"RTMIN\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/sig2str.rs:414:17
    |
414 |                 5 as libc::c_int as libc::c_ulong,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:422:32
    |
422 |             if *endp_0 == 0 && 0 as libc::c_int as libc::c_long <= n_0
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:423:27
    |
423 |                 && n_0 <= (rtmax - rtmin) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(rtmax - rtmin)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
   --> src/sig2str.rs:425:24
    |
425 |                 return (rtmin as libc::c_long + n_0) as libc::c_int;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:425:25
    |
425 |                 return (rtmin as libc::c_long + n_0) as libc::c_int;
    |                         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(rtmin)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/sig2str.rs:430:17
    |
430 |                 b"RTMAX\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"RTMAX\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/sig2str.rs:431:17
    |
431 |                 5 as libc::c_int as libc::c_ulong,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:439:32
    |
439 |             if *endp_0 == 0 && (rtmin - rtmax) as libc::c_long <= n_1
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(rtmin - rtmax)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:440:27
    |
440 |                 && n_1 <= 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
   --> src/sig2str.rs:442:24
    |
442 |                 return (rtmax as libc::c_long + n_1) as libc::c_int;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:442:25
    |
442 |                 return (rtmax as libc::c_long + n_1) as libc::c_int;
    |                         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(rtmax)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/sig2str.rs:449:1
    |
449 | / pub unsafe extern "C" fn str2sig(
450 | |     mut signame: *const libc::c_char,
451 | |     mut signum: *mut libc::c_int,
452 | | ) -> libc::c_int {
...   |
458 | |     };
459 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/sig2str.rs:454:5
    |
454 | /     return if *signum < 0 as libc::c_int {
455 | |         -(1 as libc::c_int)
456 | |     } else {
457 | |         0 as libc::c_int
458 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
454 ~     if *signum < 0 as libc::c_int {
455 +         -(1 as libc::c_int)
456 +     } else {
457 +         0 as libc::c_int
458 +     }
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/sig2str.rs:461:1
    |
461 | / pub unsafe extern "C" fn sig2str(
462 | |     mut signum: libc::c_int,
463 | |     mut signame: *mut libc::c_char,
464 | | ) -> libc::c_int {
...   |
500 | |     return 0 as libc::c_int;
501 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/sig2str.rs:500:5
    |
500 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/sig2str.rs:466:9
    |
466 |     i = 0 as libc::c_int as libc::c_uint;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `u64` may become silently lossy if you later change the type
   --> src/sig2str.rs:467:11
    |
467 |     while (i as libc::c_ulong)
    |           ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(i)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/sig2str.rs:476:9
    |
476 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/sig2str.rs:486:25
    |
486 |         strcpy(signame, b"RTMIN\0" as *const u8 as *const libc::c_char);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"RTMIN\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/sig2str.rs:489:25
    |
489 |         strcpy(signame, b"RTMAX\0" as *const u8 as *const libc::c_char);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"RTMAX\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/sig2str.rs:496:13
    |
496 |             b"%+d\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%+d\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:5:1
   |
5  | / pub unsafe extern "C" fn __gl_stdbit_clz(mut n: libc::c_uint) -> libc::c_int {
6  | |     return (if n != 0 {
7  | |         n.leading_zeros() as i32 as libc::c_ulong
8  | |     } else {
...  |
11 | |     }) as libc::c_int;
12 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:5:1
   |
5  | / pub unsafe extern "C" fn __gl_stdbit_clz(mut n: libc::c_uint) -> libc::c_int {
6  | |     return (if n != 0 {
7  | |         n.leading_zeros() as i32 as libc::c_ulong
8  | |     } else {
...  |
11 | |     }) as libc::c_int;
12 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:6:5
   |
6  | /     return (if n != 0 {
7  | |         n.leading_zeros() as i32 as libc::c_ulong
8  | |     } else {
9  | |         (8 as libc::c_int as libc::c_ulong)
10 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
11 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
6  ~     (if n != 0 {
7  +         n.leading_zeros() as i32 as libc::c_ulong
8  +     } else {
9  +         (8 as libc::c_int as libc::c_ulong)
10 +             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
11 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:6:12
   |
6  |       return (if n != 0 {
   |  ____________^
7  | |         n.leading_zeros() as i32 as libc::c_ulong
8  | |     } else {
9  | |         (8 as libc::c_int as libc::c_ulong)
10 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
11 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:6:12
   |
6  |       return (if n != 0 {
   |  ____________^
7  | |         n.leading_zeros() as i32 as libc::c_ulong
8  | |     } else {
9  | |         (8 as libc::c_int as libc::c_ulong)
10 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
11 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
 --> src/stdbit.rs:7:9
  |
7 |         n.leading_zeros() as i32 as libc::c_ulong
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
 --> src/stdbit.rs:7:9
  |
7 |         n.leading_zeros() as i32 as libc::c_ulong
  |         ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
 --> src/stdbit.rs:9:9
  |
9 |         (8 as libc::c_int as libc::c_ulong)
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:16:1
   |
16 | / pub unsafe extern "C" fn __gl_stdbit_clzl(mut n: libc::c_ulong) -> libc::c_int {
17 | |     return (if n != 0 {
18 | |         n.leading_zeros() as i32 as libc::c_ulong
19 | |     } else {
...  |
22 | |     }) as libc::c_int;
23 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:16:1
   |
16 | / pub unsafe extern "C" fn __gl_stdbit_clzl(mut n: libc::c_ulong) -> libc::c_int {
17 | |     return (if n != 0 {
18 | |         n.leading_zeros() as i32 as libc::c_ulong
19 | |     } else {
...  |
22 | |     }) as libc::c_int;
23 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:17:5
   |
17 | /     return (if n != 0 {
18 | |         n.leading_zeros() as i32 as libc::c_ulong
19 | |     } else {
20 | |         (8 as libc::c_int as libc::c_ulong)
21 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
22 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
17 ~     (if n != 0 {
18 +         n.leading_zeros() as i32 as libc::c_ulong
19 +     } else {
20 +         (8 as libc::c_int as libc::c_ulong)
21 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
22 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:17:12
   |
17 |       return (if n != 0 {
   |  ____________^
18 | |         n.leading_zeros() as i32 as libc::c_ulong
19 | |     } else {
20 | |         (8 as libc::c_int as libc::c_ulong)
21 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
22 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:17:12
   |
17 |       return (if n != 0 {
   |  ____________^
18 | |         n.leading_zeros() as i32 as libc::c_ulong
19 | |     } else {
20 | |         (8 as libc::c_int as libc::c_ulong)
21 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
22 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:18:9
   |
18 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:18:9
   |
18 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:20:9
   |
20 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:27:1
   |
27 | / pub unsafe extern "C" fn __gl_stdbit_clzll(mut n: libc::c_ulonglong) -> libc::c_int {
28 | |     return (if n != 0 {
29 | |         n.leading_zeros() as i32 as libc::c_ulong
30 | |     } else {
...  |
33 | |     }) as libc::c_int;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:27:1
   |
27 | / pub unsafe extern "C" fn __gl_stdbit_clzll(mut n: libc::c_ulonglong) -> libc::c_int {
28 | |     return (if n != 0 {
29 | |         n.leading_zeros() as i32 as libc::c_ulong
30 | |     } else {
...  |
33 | |     }) as libc::c_int;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:28:5
   |
28 | /     return (if n != 0 {
29 | |         n.leading_zeros() as i32 as libc::c_ulong
30 | |     } else {
31 | |         (8 as libc::c_int as libc::c_ulong)
32 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
33 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
28 ~     (if n != 0 {
29 +         n.leading_zeros() as i32 as libc::c_ulong
30 +     } else {
31 +         (8 as libc::c_int as libc::c_ulong)
32 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
33 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:28:12
   |
28 |       return (if n != 0 {
   |  ____________^
29 | |         n.leading_zeros() as i32 as libc::c_ulong
30 | |     } else {
31 | |         (8 as libc::c_int as libc::c_ulong)
32 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
33 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:28:12
   |
28 |       return (if n != 0 {
   |  ____________^
29 | |         n.leading_zeros() as i32 as libc::c_ulong
30 | |     } else {
31 | |         (8 as libc::c_int as libc::c_ulong)
32 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
33 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:29:9
   |
29 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:29:9
   |
29 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:31:9
   |
31 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:38:1
   |
38 | / pub unsafe extern "C" fn __gl_stdbit_ctz(mut n: libc::c_uint) -> libc::c_int {
39 | |     return (if n != 0 {
40 | |         n.trailing_zeros() as i32 as libc::c_ulong
41 | |     } else {
...  |
44 | |     }) as libc::c_int;
45 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:38:1
   |
38 | / pub unsafe extern "C" fn __gl_stdbit_ctz(mut n: libc::c_uint) -> libc::c_int {
39 | |     return (if n != 0 {
40 | |         n.trailing_zeros() as i32 as libc::c_ulong
41 | |     } else {
...  |
44 | |     }) as libc::c_int;
45 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:39:5
   |
39 | /     return (if n != 0 {
40 | |         n.trailing_zeros() as i32 as libc::c_ulong
41 | |     } else {
42 | |         (8 as libc::c_int as libc::c_ulong)
43 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
44 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
39 ~     (if n != 0 {
40 +         n.trailing_zeros() as i32 as libc::c_ulong
41 +     } else {
42 +         (8 as libc::c_int as libc::c_ulong)
43 +             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
44 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:39:12
   |
39 |       return (if n != 0 {
   |  ____________^
40 | |         n.trailing_zeros() as i32 as libc::c_ulong
41 | |     } else {
42 | |         (8 as libc::c_int as libc::c_ulong)
43 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
44 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:39:12
   |
39 |       return (if n != 0 {
   |  ____________^
40 | |         n.trailing_zeros() as i32 as libc::c_ulong
41 | |     } else {
42 | |         (8 as libc::c_int as libc::c_ulong)
43 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
44 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:40:9
   |
40 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:40:9
   |
40 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:42:9
   |
42 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:49:1
   |
49 | / pub unsafe extern "C" fn __gl_stdbit_ctzl(mut n: libc::c_ulong) -> libc::c_int {
50 | |     return (if n != 0 {
51 | |         n.trailing_zeros() as i32 as libc::c_ulong
52 | |     } else {
...  |
55 | |     }) as libc::c_int;
56 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:49:1
   |
49 | / pub unsafe extern "C" fn __gl_stdbit_ctzl(mut n: libc::c_ulong) -> libc::c_int {
50 | |     return (if n != 0 {
51 | |         n.trailing_zeros() as i32 as libc::c_ulong
52 | |     } else {
...  |
55 | |     }) as libc::c_int;
56 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:50:5
   |
50 | /     return (if n != 0 {
51 | |         n.trailing_zeros() as i32 as libc::c_ulong
52 | |     } else {
53 | |         (8 as libc::c_int as libc::c_ulong)
54 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
55 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
50 ~     (if n != 0 {
51 +         n.trailing_zeros() as i32 as libc::c_ulong
52 +     } else {
53 +         (8 as libc::c_int as libc::c_ulong)
54 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
55 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:50:12
   |
50 |       return (if n != 0 {
   |  ____________^
51 | |         n.trailing_zeros() as i32 as libc::c_ulong
52 | |     } else {
53 | |         (8 as libc::c_int as libc::c_ulong)
54 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
55 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:50:12
   |
50 |       return (if n != 0 {
   |  ____________^
51 | |         n.trailing_zeros() as i32 as libc::c_ulong
52 | |     } else {
53 | |         (8 as libc::c_int as libc::c_ulong)
54 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
55 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:51:9
   |
51 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:51:9
   |
51 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:53:9
   |
53 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:60:1
   |
60 | / pub unsafe extern "C" fn __gl_stdbit_ctzll(mut n: libc::c_ulonglong) -> libc::c_int {
61 | |     return (if n != 0 {
62 | |         n.trailing_zeros() as i32 as libc::c_ulong
63 | |     } else {
...  |
66 | |     }) as libc::c_int;
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:60:1
   |
60 | / pub unsafe extern "C" fn __gl_stdbit_ctzll(mut n: libc::c_ulonglong) -> libc::c_int {
61 | |     return (if n != 0 {
62 | |         n.trailing_zeros() as i32 as libc::c_ulong
63 | |     } else {
...  |
66 | |     }) as libc::c_int;
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:61:5
   |
61 | /     return (if n != 0 {
62 | |         n.trailing_zeros() as i32 as libc::c_ulong
63 | |     } else {
64 | |         (8 as libc::c_int as libc::c_ulong)
65 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
66 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
61 ~     (if n != 0 {
62 +         n.trailing_zeros() as i32 as libc::c_ulong
63 +     } else {
64 +         (8 as libc::c_int as libc::c_ulong)
65 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
66 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:61:12
   |
61 |       return (if n != 0 {
   |  ____________^
62 | |         n.trailing_zeros() as i32 as libc::c_ulong
63 | |     } else {
64 | |         (8 as libc::c_int as libc::c_ulong)
65 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
66 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:61:12
   |
61 |       return (if n != 0 {
   |  ____________^
62 | |         n.trailing_zeros() as i32 as libc::c_ulong
63 | |     } else {
64 | |         (8 as libc::c_int as libc::c_ulong)
65 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
66 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:62:9
   |
62 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:62:9
   |
62 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:64:9
   |
64 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:3:1
   |
3  | / unsafe extern "C" fn __gl_stdbit_clz(mut n: libc::c_uint) -> libc::c_int {
4  | |     return (if n != 0 {
5  | |         n.leading_zeros() as i32 as libc::c_ulong
6  | |     } else {
...  |
9  | |     }) as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
 --> src/stdc_leading_zeros.rs:4:5
  |
4 | /     return (if n != 0 {
5 | |         n.leading_zeros() as i32 as libc::c_ulong
6 | |     } else {
7 | |         (8 as libc::c_int as libc::c_ulong)
8 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
9 | |     }) as libc::c_int;
  | |______________________^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
  |
4 ~     (if n != 0 {
5 +         n.leading_zeros() as i32 as libc::c_ulong
6 +     } else {
7 +         (8 as libc::c_int as libc::c_ulong)
8 +             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
9 +     }) as libc::c_int
  |

warning: casting `u64` to `i32` may truncate the value
 --> src/stdc_leading_zeros.rs:4:12
  |
4 |       return (if n != 0 {
  |  ____________^
5 | |         n.leading_zeros() as i32 as libc::c_ulong
6 | |     } else {
7 | |         (8 as libc::c_int as libc::c_ulong)
8 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
9 | |     }) as libc::c_int;
  | |_____________________^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
 --> src/stdc_leading_zeros.rs:4:12
  |
4 |       return (if n != 0 {
  |  ____________^
5 | |         n.leading_zeros() as i32 as libc::c_ulong
6 | |     } else {
7 | |         (8 as libc::c_int as libc::c_ulong)
8 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
9 | |     }) as libc::c_int;
  | |______^
  |
  = help: change to `==` and swap the blocks of the `if`/`else`
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
 --> src/stdc_leading_zeros.rs:5:9
  |
5 |         n.leading_zeros() as i32 as libc::c_ulong
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
 --> src/stdc_leading_zeros.rs:5:9
  |
5 |         n.leading_zeros() as i32 as libc::c_ulong
  |         ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
 --> src/stdc_leading_zeros.rs:7:9
  |
7 |         (8 as libc::c_int as libc::c_ulong)
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:12:1
   |
12 | / unsafe extern "C" fn __gl_stdbit_clzl(mut n: libc::c_ulong) -> libc::c_int {
13 | |     return (if n != 0 {
14 | |         n.leading_zeros() as i32 as libc::c_ulong
15 | |     } else {
...  |
18 | |     }) as libc::c_int;
19 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:13:5
   |
13 | /     return (if n != 0 {
14 | |         n.leading_zeros() as i32 as libc::c_ulong
15 | |     } else {
16 | |         (8 as libc::c_int as libc::c_ulong)
17 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
18 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
13 ~     (if n != 0 {
14 +         n.leading_zeros() as i32 as libc::c_ulong
15 +     } else {
16 +         (8 as libc::c_int as libc::c_ulong)
17 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
18 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdc_leading_zeros.rs:13:12
   |
13 |       return (if n != 0 {
   |  ____________^
14 | |         n.leading_zeros() as i32 as libc::c_ulong
15 | |     } else {
16 | |         (8 as libc::c_int as libc::c_ulong)
17 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
18 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdc_leading_zeros.rs:13:12
   |
13 |       return (if n != 0 {
   |  ____________^
14 | |         n.leading_zeros() as i32 as libc::c_ulong
15 | |     } else {
16 | |         (8 as libc::c_int as libc::c_ulong)
17 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
18 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:14:9
   |
14 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdc_leading_zeros.rs:14:9
   |
14 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:16:9
   |
16 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:21:1
   |
21 | / unsafe extern "C" fn __gl_stdbit_clzll(mut n: libc::c_ulonglong) -> libc::c_int {
22 | |     return (if n != 0 {
23 | |         n.leading_zeros() as i32 as libc::c_ulong
24 | |     } else {
...  |
27 | |     }) as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:22:5
   |
22 | /     return (if n != 0 {
23 | |         n.leading_zeros() as i32 as libc::c_ulong
24 | |     } else {
25 | |         (8 as libc::c_int as libc::c_ulong)
26 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
27 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
22 ~     (if n != 0 {
23 +         n.leading_zeros() as i32 as libc::c_ulong
24 +     } else {
25 +         (8 as libc::c_int as libc::c_ulong)
26 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
27 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdc_leading_zeros.rs:22:12
   |
22 |       return (if n != 0 {
   |  ____________^
23 | |         n.leading_zeros() as i32 as libc::c_ulong
24 | |     } else {
25 | |         (8 as libc::c_int as libc::c_ulong)
26 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
27 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdc_leading_zeros.rs:22:12
   |
22 |       return (if n != 0 {
   |  ____________^
23 | |         n.leading_zeros() as i32 as libc::c_ulong
24 | |     } else {
25 | |         (8 as libc::c_int as libc::c_ulong)
26 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
27 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:23:9
   |
23 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdc_leading_zeros.rs:23:9
   |
23 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:25:9
   |
25 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdc_leading_zeros.rs:32:1
   |
32 | / pub unsafe extern "C" fn stdc_leading_zeros_ui(mut n: libc::c_uint) -> libc::c_uint {
33 | |     return __gl_stdbit_clz(n) as libc::c_uint;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:32:1
   |
32 | / pub unsafe extern "C" fn stdc_leading_zeros_ui(mut n: libc::c_uint) -> libc::c_uint {
33 | |     return __gl_stdbit_clz(n) as libc::c_uint;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:33:5
   |
33 |     return __gl_stdbit_clz(n) as libc::c_uint;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_stdbit_clz(n) as libc::c_uint`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:33:12
   |
33 |     return __gl_stdbit_clz(n) as libc::c_uint;
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdc_leading_zeros.rs:38:1
   |
38 | / pub unsafe extern "C" fn stdc_leading_zeros_uc(mut n: libc::c_uchar) -> libc::c_uint {
39 | |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
40 | |         .wrapping_sub(
41 | |             (8 as libc::c_int as libc::c_ulong)
...  |
48 | |         ) as libc::c_uint;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:38:1
   |
38 | / pub unsafe extern "C" fn stdc_leading_zeros_uc(mut n: libc::c_uchar) -> libc::c_uint {
39 | |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
40 | |         .wrapping_sub(
41 | |             (8 as libc::c_int as libc::c_ulong)
...  |
48 | |         ) as libc::c_uint;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:39:5
   |
39 | /     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
40 | |         .wrapping_sub(
41 | |             (8 as libc::c_int as libc::c_ulong)
42 | |                 .wrapping_mul(
...  |
47 | |                 ),
48 | |         ) as libc::c_uint;
   | |__________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
39 ~     (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
40 +         .wrapping_sub(
41 +             (8 as libc::c_int as libc::c_ulong)
42 +                 .wrapping_mul(
43 +                     (::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
44 +                         .wrapping_sub(
45 +                             ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
46 +                         ),
47 +                 ),
48 +         ) as libc::c_uint
   |

warning: casting `u64` to `u32` may truncate the value
  --> src/stdc_leading_zeros.rs:39:12
   |
39 |       return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |  ____________^
40 | |         .wrapping_sub(
41 | |             (8 as libc::c_int as libc::c_ulong)
42 | |                 .wrapping_mul(
...  |
47 | |                 ),
48 | |         ) as libc::c_uint;
   | |_________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `u64` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:39:12
   |
39 |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(stdc_leading_zeros_ui(n as libc::c_uint))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `u32` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:39:35
   |
39 |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |                                   ^^^^^^^^^^^^^^^^^ help: try: `u32::from(n)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:41:13
   |
41 |             (8 as libc::c_int as libc::c_ulong)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdc_leading_zeros.rs:53:1
   |
53 | / pub unsafe extern "C" fn stdc_leading_zeros_us(mut n: libc::c_ushort) -> libc::c_uint {
54 | |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
55 | |         .wrapping_sub(
56 | |             (8 as libc::c_int as libc::c_ulong)
...  |
63 | |         ) as libc::c_uint;
64 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:53:1
   |
53 | / pub unsafe extern "C" fn stdc_leading_zeros_us(mut n: libc::c_ushort) -> libc::c_uint {
54 | |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
55 | |         .wrapping_sub(
56 | |             (8 as libc::c_int as libc::c_ulong)
...  |
63 | |         ) as libc::c_uint;
64 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:54:5
   |
54 | /     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
55 | |         .wrapping_sub(
56 | |             (8 as libc::c_int as libc::c_ulong)
57 | |                 .wrapping_mul(
...  |
62 | |                 ),
63 | |         ) as libc::c_uint;
   | |__________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
54 ~     (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
55 +         .wrapping_sub(
56 +             (8 as libc::c_int as libc::c_ulong)
57 +                 .wrapping_mul(
58 +                     (::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
59 +                         .wrapping_sub(
60 +                             ::core::mem::size_of::<libc::c_ushort>() as libc::c_ulong,
61 +                         ),
62 +                 ),
63 +         ) as libc::c_uint
   |

warning: casting `u64` to `u32` may truncate the value
  --> src/stdc_leading_zeros.rs:54:12
   |
54 |       return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |  ____________^
55 | |         .wrapping_sub(
56 | |             (8 as libc::c_int as libc::c_ulong)
57 | |                 .wrapping_mul(
...  |
62 | |                 ),
63 | |         ) as libc::c_uint;
   | |_________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `u64` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:54:12
   |
54 |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(stdc_leading_zeros_ui(n as libc::c_uint))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `u32` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:54:35
   |
54 |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |                                   ^^^^^^^^^^^^^^^^^ help: try: `u32::from(n)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:56:13
   |
56 |             (8 as libc::c_int as libc::c_ulong)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdc_leading_zeros.rs:68:1
   |
68 | / pub unsafe extern "C" fn stdc_leading_zeros_ul(mut n: libc::c_ulong) -> libc::c_uint {
69 | |     return __gl_stdbit_clzl(n) as libc::c_uint;
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:68:1
   |
68 | / pub unsafe extern "C" fn stdc_leading_zeros_ul(mut n: libc::c_ulong) -> libc::c_uint {
69 | |     return __gl_stdbit_clzl(n) as libc::c_uint;
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:69:5
   |
69 |     return __gl_stdbit_clzl(n) as libc::c_uint;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_stdbit_clzl(n) as libc::c_uint`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:69:12
   |
69 |     return __gl_stdbit_clzl(n) as libc::c_uint;
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdc_leading_zeros.rs:74:1
   |
74 | / pub unsafe extern "C" fn stdc_leading_zeros_ull(
75 | |     mut n: libc::c_ulonglong,
76 | | ) -> libc::c_uint {
77 | |     return __gl_stdbit_clzll(n) as libc::c_uint;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:74:1
   |
74 | / pub unsafe extern "C" fn stdc_leading_zeros_ull(
75 | |     mut n: libc::c_ulonglong,
76 | | ) -> libc::c_uint {
77 | |     return __gl_stdbit_clzll(n) as libc::c_uint;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:77:5
   |
77 |     return __gl_stdbit_clzll(n) as libc::c_uint;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_stdbit_clzll(n) as libc::c_uint`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:77:12
   |
77 |     return __gl_stdbit_clzll(n) as libc::c_uint;
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary structure name repetition
  --> src/temp_stream.rs:52:22
   |
52 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/temp_stream.rs:63:29
   |
63 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
   --> src/temp_stream.rs:91:1
    |
91  | / pub unsafe extern "C" fn temp_stream(
92  | |     mut fp: *mut *mut FILE,
93  | |     mut file_name: *mut *mut libc::c_char,
94  | | ) -> bool {
...   |
405 | |     return 1 as libc::c_int != 0;
406 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: the function has a cognitive complexity of (31/25)
  --> src/temp_stream.rs:91:26
   |
91 | pub unsafe extern "C" fn temp_stream(
   |                          ^^^^^^^^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (301/100)
   --> src/temp_stream.rs:91:1
    |
91  | / pub unsafe extern "C" fn temp_stream(
92  | |     mut fp: *mut *mut FILE,
93  | |     mut file_name: *mut *mut libc::c_char,
94  | | ) -> bool {
...   |
405 | |     return 1 as libc::c_int != 0;
406 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/temp_stream.rs:405:5
    |
405 |     return 1 as libc::c_int != 0;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/temp_stream.rs:100:50
    |
100 |             let mut tempbuf: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/temp_stream.rs:101:43
    |
101 |             let mut tempbuf_len: size_t = 128 as libc::c_int as size_t;
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:103:27
    |
103 |                   tempbuf = realloc(tempbuf as *mut libc::c_void, tempbuf_len)
    |  ___________________________^
104 | |                     as *mut libc::c_char;
    | |________________________________________^ help: try `pointer::cast`, a safer alternative: `realloc(tempbuf as *mut libc::c_void, tempbuf_len).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:103:35
    |
103 |                 tempbuf = realloc(tempbuf as *mut libc::c_void, tempbuf_len)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `tempbuf.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:106:21
    |
106 | /                     if 0 != 0 {
107 | |                         error(
108 | |                             0 as libc::c_int,
109 | |                             *__errno_location(),
...   |
148 | |                         });
149 | |                     };
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:106:24
    |
106 |                     if 0 != 0 {
    |                        ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:111:33
    |
111 | / ...                   b"failed to make temporary file name\0" as *const u8
112 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to make temporary file name\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:115:25
    |
115 | /                         if 0 as libc::c_int != 0 as libc::c_int {
116 | |                             unreachable!();
117 | |                         } else {};
    | |_________________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:115:28
    |
115 |                         if 0 as libc::c_int != 0 as libc::c_int {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:120:29
    |
120 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:125:37
    |
125 | / ...                   b"failed to make temporary file name\0" as *const u8
126 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to make temporary file name\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:129:29
    |
129 | / ...                   if __errstatus != 0 as libc::c_int {
130 | | ...                       unreachable!();
131 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:135:29
    |
135 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:140:37
    |
140 | / ...                   b"failed to make temporary file name\0" as *const u8
141 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to make temporary file name\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:144:29
    |
144 | / ...                   if __errstatus != 0 as libc::c_int {
145 | | ...                       unreachable!();
146 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `0 as *const _` detected
   --> src/temp_stream.rs:155:21
    |
155 |                     0 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:156:21
    |
156 |                     b"cutmp\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"cutmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/temp_stream.rs:163:24
    |
163 |                     || ((4096 as libc::c_int / 2 as libc::c_int) as libc::c_ulong)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:166:21
    |
166 | /                     if 0 != 0 {
167 | |                         error(
168 | |                             0 as libc::c_int,
169 | |                             if *__errno_location() == 22 as libc::c_int {
...   |
220 | |                         });
221 | |                     };
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:166:24
    |
166 |                     if 0 != 0 {
    |                        ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:175:33
    |
175 | / ...                   b"failed to make temporary file name\0" as *const u8
176 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to make temporary file name\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:179:25
    |
179 | /                         if 0 as libc::c_int != 0 as libc::c_int {
180 | |                             unreachable!();
181 | |                         } else {};
    | |_________________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:179:28
    |
179 |                         if 0 as libc::c_int != 0 as libc::c_int {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:184:29
    |
184 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:193:37
    |
193 | / ...                   b"failed to make temporary file name\0" as *const u8
194 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to make temporary file name\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:197:29
    |
197 | / ...                   if __errstatus != 0 as libc::c_int {
198 | | ...                       unreachable!();
199 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:203:29
    |
203 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:212:37
    |
212 | / ...                   b"failed to make temporary file name\0" as *const u8
213 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to make temporary file name\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:216:29
    |
216 | / ...                   if __errstatus != 0 as libc::c_int {
217 | | ...                       unreachable!();
218 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/temp_stream.rs:225:35
    |
225 |                     .wrapping_mul(2 as libc::c_int as libc::c_ulong) as size_t as size_t;
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:230:17
    |
230 | /                 if 0 != 0 {
231 | |                     error(
232 | |                         0 as libc::c_int,
233 | |                         *__errno_location(),
...   |
275 | |                     });
276 | |                 };
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:230:20
    |
230 |                 if 0 != 0 {
    |                    ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:235:29
    |
235 | / ...                   b"failed to create temporary file %s\0" as *const u8
236 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to create temporary file %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:240:21
    |
240 | /                     if 0 as libc::c_int != 0 as libc::c_int {
241 | |                         unreachable!();
242 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:240:24
    |
240 |                     if 0 as libc::c_int != 0 as libc::c_int {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:245:25
    |
245 |                         let __errstatus: libc::c_int = 0 as libc::c_int;
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:250:33
    |
250 | / ...                   b"failed to create temporary file %s\0" as *const u8
251 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to create temporary file %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:255:25
    |
255 | /                         if __errstatus != 0 as libc::c_int {
256 | |                             unreachable!();
257 | |                         } else {};
    | |_________________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:261:25
    |
261 |                         let __errstatus: libc::c_int = 0 as libc::c_int;
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:266:33
    |
266 | / ...                   b"failed to create temporary file %s\0" as *const u8
267 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to create temporary file %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:271:25
    |
271 | /                         if __errstatus != 0 as libc::c_int {
272 | |                             unreachable!();
273 | |                         } else {};
    | |_________________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:280:21
    |
280 | /                     if 0 as libc::c_int != 0 {
281 | |                         b"w+b\0" as *const u8 as *const libc::c_char
282 | |                     } else {
283 | |                         b"w+\0" as *const u8 as *const libc::c_char
284 | |                     },
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:281:25
    |
281 |                         b"w+b\0" as *const u8 as *const libc::c_char
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"w+b\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:283:25
    |
283 |                         b"w+\0" as *const u8 as *const libc::c_char
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"w+\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:287:21
    |
287 | /                     if 0 != 0 {
288 | |                         error(
289 | |                             0 as libc::c_int,
290 | |                             *__errno_location(),
...   |
332 | |                         });
333 | |                     };
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:287:24
    |
287 |                     if 0 != 0 {
    |                        ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:292:33
    |
292 | / ...                   b"failed to open %s for writing\0" as *const u8
293 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to open %s for writing\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:297:25
    |
297 | /                         if 0 as libc::c_int != 0 as libc::c_int {
298 | |                             unreachable!();
299 | |                         } else {};
    | |_________________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:297:28
    |
297 |                         if 0 as libc::c_int != 0 as libc::c_int {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:302:29
    |
302 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:307:37
    |
307 | / ...                   b"failed to open %s for writing\0" as *const u8
308 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to open %s for writing\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:312:29
    |
312 | / ...                   if __errstatus != 0 as libc::c_int {
313 | | ...                       unreachable!();
314 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:318:29
    |
318 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:323:37
    |
323 | / ...                   b"failed to open %s for writing\0" as *const u8
324 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to open %s for writing\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:328:29
    |
328 | / ...                   if __errstatus != 0 as libc::c_int {
329 | | ...                       unreachable!();
330 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:341:18
    |
341 |             free(tempfile as *mut libc::c_void);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `tempfile.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
   --> src/temp_stream.rs:342:24
    |
342 |             tempfile = 0 as *mut libc::c_char;
    |                        ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/temp_stream.rs:347:31
    |
347 |         if rpl_fseeko(tmp_fp, 0 as libc::c_int as off_t, 0 as libc::c_int)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/temp_stream.rs:349:42
    |
349 |             || ftruncate(fileno(tmp_fp), 0 as libc::c_int as __off_t) < 0 as libc::c_int
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:351:13
    |
351 | /             if 0 != 0 {
352 | |                 error(
353 | |                     0 as libc::c_int,
354 | |                     *__errno_location(),
...   |
396 | |                 });
397 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:351:16
    |
351 |             if 0 != 0 {
    |                ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:356:25
    |
356 | /                         b"failed to rewind stream for %s\0" as *const u8
357 | |                             as *const libc::c_char,
    | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to rewind stream for %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:361:17
    |
361 | /                 if 0 as libc::c_int != 0 as libc::c_int {
362 | |                     unreachable!();
363 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:361:20
    |
361 |                 if 0 as libc::c_int != 0 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:366:21
    |
366 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:371:29
    |
371 | / ...                   b"failed to rewind stream for %s\0" as *const u8
372 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to rewind stream for %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:376:21
    |
376 | /                     if __errstatus != 0 as libc::c_int {
377 | |                         unreachable!();
378 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:382:21
    |
382 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:387:29
    |
387 | / ...                   b"failed to rewind stream for %s\0" as *const u8
388 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to rewind stream for %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:392:21
    |
392 | /                     if __errstatus != 0 as libc::c_int {
393 | |                         unreachable!();
394 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unneeded `return` statement
  --> src/tmpdir.rs:72:5
   |
72 | /     return stat(dir, &mut buf) == 0 as libc::c_int
73 | |         && buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
74 | |             == 0o40000 as libc::c_int as libc::c_uint;
   | |______________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
72 ~     stat(dir, &mut buf) == 0 as libc::c_int
73 +         && buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
74 +             == 0o40000 as libc::c_int as libc::c_uint
   |

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/tmpdir.rs:73:26
   |
73 |         && buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/tmpdir.rs:74:16
   |
74 |             == 0o40000 as libc::c_int as libc::c_uint;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/tmpdir.rs:77:1
    |
77  | / pub unsafe extern "C" fn path_search(
78  | |     mut tmpl: *mut libc::c_char,
79  | |     mut tmpl_len: size_t,
80  | |     mut dir: *const libc::c_char,
...   |
143 | |     return 0 as libc::c_int;
144 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/tmpdir.rs:101:19
    |
101 |         } else if !(!dir.is_null() && direxists(dir) as libc::c_int != 0) {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dir.is_null() || direxists(dir) as libc::c_int == 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/tmpdir.rs:123:12
    |
123 |           && !(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
    |  ____________^
124 | |             as libc::c_int == '/' as i32);
    | |_________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
    |
123 ~         && *dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
124 ~             as libc::c_int != '/' as i32;
    |

warning: unneeded `return` statement
   --> src/tmpdir.rs:143:5
    |
143 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
  --> src/tmpdir.rs:84:38
   |
84 |     let mut d: *const libc::c_char = 0 as *const libc::c_char;
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/tmpdir.rs:89:15
   |
89 |         pfx = b"file\0" as *const u8 as *const libc::c_char;
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"file\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/tmpdir.rs:90:16
   |
90 |         plen = 4 as libc::c_int as size_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/tmpdir.rs:93:19
   |
93 |         if plen > 5 as libc::c_int as libc::c_ulong {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/tmpdir.rs:94:20
   |
94 |             plen = 5 as libc::c_int as size_t;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/tmpdir.rs:98:27
   |
98 |         d = secure_getenv(b"TMPDIR\0" as *const u8 as *const libc::c_char);
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"TMPDIR\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/tmpdir.rs:99:28
   |
99 |         if !d.is_null() && direxists(d) as libc::c_int != 0 {
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(direxists(d))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/tmpdir.rs:101:39
    |
101 |         } else if !(!dir.is_null() && direxists(dir) as libc::c_int != 0) {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(direxists(dir))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *const _` detected
   --> src/tmpdir.rs:102:19
    |
102 |             dir = 0 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: this `if` has identical blocks
   --> src/tmpdir.rs:106:69
    |
106 |           if direxists(b"/tmp\0" as *const u8 as *const libc::c_char) {
    |  _____________________________________________________________________^
107 | |             dir = b"/tmp\0" as *const u8 as *const libc::c_char;
108 | |         } else if strcmp(
    | |_________^
    |
    = note: `-W clippy::if-same-then-else` implied by `-W clippy::all`
note: same as this
   --> src/tmpdir.rs:114:9
    |
114 | /         {
115 | |             dir = b"/tmp\0" as *const u8 as *const libc::c_char;
116 | |         } else {
    | |_________^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:106:22
    |
106 |         if direxists(b"/tmp\0" as *const u8 as *const libc::c_char) {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:107:19
    |
107 |             dir = b"/tmp\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:109:13
    |
109 |             b"/tmp\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:110:13
    |
110 |             b"/tmp\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/tmpdir.rs:112:16
    |
112 |             && direxists(b"/tmp\0" as *const u8 as *const libc::c_char) as libc::c_int
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(direxists(b"/tmp\0" as *const u8 as *const libc::c_char))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:112:26
    |
112 |             && direxists(b"/tmp\0" as *const u8 as *const libc::c_char) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:115:19
    |
115 |             dir = b"/tmp\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/tmpdir.rs:122:25
    |
122 |     add_slash = dlen != 0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/tmpdir.rs:123:14
    |
123 |           && !(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
    |  ______________^
124 | |             as libc::c_int == '/' as i32);
    | |__________________________^ help: try: `i32::from(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/tmpdir.rs:123:26
    |
123 |         && !(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/tmpdir.rs:123:26
    |
123 |         && !(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/tmpdir.rs:123:44
    |
123 |         && !(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `u64` is more cleanly stated with `u64::from(_)`
   --> src/tmpdir.rs:127:27
    |
127 |             .wrapping_add(add_slash as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(add_slash)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/tmpdir.rs:129:27
    |
129 |             .wrapping_add(6 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/tmpdir.rs:130:27
    |
130 |             .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:135:12
    |
135 |     memcpy(tmpl as *mut libc::c_void, dir as *const libc::c_void, dlen);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `tmpl.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:135:39
    |
135 |     memcpy(tmpl as *mut libc::c_void, dir as *const libc::c_void, dlen);
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `dir.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/tmpdir.rs:137:21
    |
137 |         tmpl.offset(dlen as isize),
    |                     ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/tmpdir.rs:137:21
    |
137 |         tmpl.offset(dlen as isize),
    |                     ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: borrow as raw pointer
   --> src/tmpdir.rs:138:9
    |
138 | /         &*(b"/%.*sXXXXXX\0" as *const u8 as *const libc::c_char)
139 | |             .offset(!add_slash as libc::c_int as isize) as *const libc::c_char,
    | |______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr
help: try
    |
138 ~         std::ptr::addr_of!(*(b"/%.*sXXXXXX\0" as *const u8 as *const libc::c_char)
139 ~             .offset(!add_slash as libc::c_int as isize)),
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:138:11
    |
138 |         &*(b"/%.*sXXXXXX\0" as *const u8 as *const libc::c_char)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/%.*sXXXXXX\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/tmpdir.rs:139:21
    |
139 |             .offset(!add_slash as libc::c_int as isize) as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(!add_slash)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i32` may truncate the value
   --> src/tmpdir.rs:140:9
    |
140 |         plen as libc::c_int,
    |         ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
 --> src/version.rs:3:47
  |
3 |   pub static mut Version: *const libc::c_char = b"9.5.42-bbc97\0" as *const u8
  |  _______________________________________________^
4 | |     as *const libc::c_char;
  | |__________________________^ help: try `pointer::cast`, a safer alternative: `(b"9.5.42-bbc97\0" as *const u8).cast::<i8>()`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary structure name repetition
  --> src/version_etc.rs:43:22
   |
43 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/version_etc.rs:54:29
   |
54 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:65:1
    |
65  | / pub unsafe extern "C" fn version_etc_arn(
66  | |     mut stream: *mut FILE,
67  | |     mut command_name: *const libc::c_char,
68  | |     mut package: *const libc::c_char,
...   |
246 | |     };
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:65:1
    |
65  | / pub unsafe extern "C" fn version_etc_arn(
66  | |     mut stream: *mut FILE,
67  | |     mut command_name: *const libc::c_char,
68  | |     mut package: *const libc::c_char,
...   |
246 | |     };
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this function has too many lines (174/100)
   --> src/version_etc.rs:65:1
    |
65  | / pub unsafe extern "C" fn version_etc_arn(
66  | |     mut stream: *mut FILE,
67  | |     mut command_name: *const libc::c_char,
68  | |     mut package: *const libc::c_char,
...   |
246 | |     };
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unnecessary boolean `not` operation
  --> src/version_etc.rs:73:5
   |
73 | /     if !command_name.is_null() {
74 | |         fprintf(
75 | |             stream,
76 | |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
...  |
87 | |         );
88 | |     }
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:76:13
   |
76 |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s (%s) %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:84:13
   |
84 |             b"%s %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:92:17
   |
92 |         gettext(b"(C)\0" as *const u8 as *const libc::c_char),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"(C)\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
  --> src/version_etc.rs:93:9
   |
93 |         COPYRIGHT_YEAR as libc::c_int,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:95:20
   |
95 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:99:13
    |
99  | /             b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere...
100 | |                 as *const u8 as *const libc::c_char,
    | |___________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:102:9
    |
102 |         b"https://gnu.org/licenses/gpl.html\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://gnu.org/licenses/gpl.html\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:104:20
    |
104 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:110:25
    |
110 |                 gettext(b"Written by %s.\n\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:118:21
    |
118 |                     b"Written by %s and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:128:21
    |
128 |                     b"Written by %s, %s, and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:139:21
    |
139 | /                     b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8
140 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:152:21
    |
152 | /                     b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8
153 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:166:21
    |
166 | /                     b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8
167 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:181:21
    |
181 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8
182 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:197:21
    |
197 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8
198 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:214:21
    |
214 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0"
215 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:232:21
    |
232 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0"
233 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:249:1
    |
249 | / pub unsafe extern "C" fn version_etc_ar(
250 | |     mut stream: *mut FILE,
251 | |     mut command_name: *const libc::c_char,
252 | |     mut package: *const libc::c_char,
...   |
262 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
263 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:249:1
    |
249 | / pub unsafe extern "C" fn version_etc_ar(
250 | |     mut stream: *mut FILE,
251 | |     mut command_name: *const libc::c_char,
252 | |     mut package: *const libc::c_char,
...   |
262 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
263 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:257:17
    |
257 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:258:29
    |
258 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/version_etc.rs:258:29
    |
258 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/version_etc.rs:260:9
    |
260 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:265:1
    |
265 | / pub unsafe extern "C" fn version_etc_va(
266 | |     mut stream: *mut FILE,
267 | |     mut command_name: *const libc::c_char,
268 | |     mut package: *const libc::c_char,
...   |
291 | |     );
292 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:265:1
    |
265 | / pub unsafe extern "C" fn version_etc_va(
266 | |     mut stream: *mut FILE,
267 | |     mut command_name: *const libc::c_char,
268 | |     mut package: *const libc::c_char,
...   |
291 | |     );
292 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `0 as *const _` detected
   --> src/version_etc.rs:273:51
    |
273 |     let mut authtab: [*const libc::c_char; 10] = [0 as *const libc::c_char; 10];
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:274:17
    |
274 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:275:23
    |
275 |     while n_authors < 10 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:277:21
    |
277 |             authtab[n_authors as usize] = authors.arg::<*const libc::c_char>();
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:278:23
    |
278 |             !(authtab[n_authors as usize]).is_null()
    |                       ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
   --> src/version_etc.rs:282:9
    |
282 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:294:1
    |
294 | / pub unsafe extern "C" fn version_etc(
295 | |     mut stream: *mut FILE,
296 | |     mut command_name: *const libc::c_char,
297 | |     mut package: *const libc::c_char,
...   |
303 | |     version_etc_va(stream, command_name, package, version, authors.as_va_list());
304 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:306:1
    |
306 | / pub unsafe extern "C" fn emit_bug_reporting_address() {
307 | |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stdout);
308 | |     printf(
309 | |         gettext(b"Report bugs to: %s\n\0" as *const u8 as *const libc::c_char),
...   |
323 | |     );
324 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:307:20
    |
307 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stdout);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:309:17
    |
309 |         gettext(b"Report bugs to: %s\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Report bugs to: %s\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:310:9
    |
310 |         b"bug-coreutils@gnu.org\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"bug-coreutils@gnu.org\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:313:17
    |
313 |         gettext(b"%s home page: <%s>\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s home page: <%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:314:9
    |
314 |         b"GNU coreutils\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:315:9
    |
315 |         b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/software/coreutils/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:319:13
    |
319 | /             b"General help using GNU software: <%s>\n\0" as *const u8
320 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"General help using GNU software: <%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:322:9
    |
322 |         b"https://www.gnu.org/gethelp/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/gethelp/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
  --> src/xalignalloc.rs:20:5
   |
20 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:14:8
   |
14 |     if (-(1 as libc::c_int) as size_t) < alignment as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:14:42
   |
14 |     if (-(1 as libc::c_int) as size_t) < alignment as libc::c_ulong {
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
  --> src/xalignalloc.rs:15:21
   |
15 |         alignment = -(1 as libc::c_int) as size_t as idx_t;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:15:21
   |
15 |         alignment = -(1 as libc::c_int) as size_t as idx_t;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:17:8
   |
17 |     if (-(1 as libc::c_int) as size_t) < size as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:17:42
   |
17 |     if (-(1 as libc::c_int) as size_t) < size as libc::c_ulong {
   |                                          ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
  --> src/xalignalloc.rs:18:16
   |
18 |         size = -(1 as libc::c_int) as size_t as idx_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:18:16
   |
18 |         size = -(1 as libc::c_int) as size_t as idx_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:20:26
   |
20 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:20:54
   |
20 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |                                                      ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/xalignalloc.rs:23:1
   |
23 | / pub unsafe extern "C" fn xalignalloc(
24 | |     mut alignment: idx_t,
25 | |     mut size: idx_t,
26 | | ) -> *mut libc::c_void {
...  |
31 | |     return p;
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/xalignalloc.rs:31:5
   |
31 |     return p;
   |     ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/xalloc_die.rs:14:1
   |
14 | / pub unsafe extern "C" fn xalloc_die() {
15 | |     if 0 != 0 {
16 | |         error(
17 | |             exit_failure,
...  |
53 | |     abort();
54 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:15:5
   |
15 | /     if 0 != 0 {
16 | |         error(
17 | |             exit_failure,
18 | |             0 as libc::c_int,
...  |
51 | |         });
52 | |     };
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/xalloc_die.rs:15:8
   |
15 |     if 0 != 0 {
   |        ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:19:13
   |
19 |             b"%s\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:20:21
   |
20 |             gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:22:9
   |
22 | /         if exit_failure != 0 as libc::c_int {
23 | |             unreachable!();
24 | |         } else {};
   | |_________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
  --> src/xalloc_die.rs:27:13
   |
27 |             let __errstatus: libc::c_int = exit_failure;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:31:17
   |
31 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:32:25
   |
32 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:34:13
   |
34 | /             if __errstatus != 0 as libc::c_int {
35 | |                 unreachable!();
36 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
  --> src/xalloc_die.rs:40:13
   |
40 |             let __errstatus: libc::c_int = exit_failure;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:44:17
   |
44 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:45:25
   |
45 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:47:13
   |
47 | /             if __errstatus != 0 as libc::c_int {
48 | |                 unreachable!();
49 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
 --> src/xbinary_io.rs:5:1
  |
5 | / pub unsafe extern "C" fn xset_binary_mode(mut fd: libc::c_int, mut mode: libc::c_int) {
6 | |     if set_binary_mode(fd, mode) < 0 as libc::c_int {
7 | |         xset_binary_mode_error();
8 | |     }
9 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
  --> src/xbinary_io.rs:13:1
   |
13 | pub unsafe extern "C" fn xset_binary_mode_error() {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/xbinary_io.rs:13:1
   |
13 | pub unsafe extern "C" fn xset_binary_mode_error() {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/xbinary_io.rs:19:5
   |
19 |     return __gl_setmode(fd, mode);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_setmode(fd, mode)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
  --> src/xbinary_io.rs:22:1
   |
22 | / unsafe extern "C" fn __gl_setmode(
23 | |     mut _fd: libc::c_int,
24 | |     mut _mode: libc::c_int,
25 | | ) -> libc::c_int {
26 | |     return 0 as libc::c_int;
27 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/xbinary_io.rs:26:5
   |
26 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xdectoimax.rs:28:1
    |
28  | / pub unsafe extern "C" fn xnumtoimax(
29  | |     mut n_str: *const libc::c_char,
30  | |     mut base: libc::c_int,
31  | |     mut min: intmax_t,
...   |
127 | |     return tnum;
128 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xdectoimax.rs:127:5
    |
127 |     return tnum;
    |     ^^^^^^^^^^^^ help: remove `return`: `tnum`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/xdectoimax.rs:39:31
   |
39 |     s_err = xstrtoimax(n_str, 0 as *mut *mut libc::c_char, base, &mut tnum, suffixes);
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoimax.rs:40:33
   |
40 |     if s_err as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoimax.rs:40:33
   |
40 |     if s_err as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: this `if` has identical blocks
  --> src/xdectoimax.rs:43:86
   |
43 |               if tnum > (2147483647 as libc::c_int / 2 as libc::c_int) as libc::c_long {
   |  ______________________________________________________________________________________^
44 | |                 *__errno_location() = 75 as libc::c_int;
45 | |             } else if tnum
   | |_____________^
   |
note: same as this
  --> src/xdectoimax.rs:48:13
   |
48 | /             {
49 | |                 *__errno_location() = 75 as libc::c_int;
50 | |             } else {
   | |_____________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xdectoimax.rs:43:23
   |
43 |             if tnum > (2147483647 as libc::c_int / 2 as libc::c_int) as libc::c_long {
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int / 2 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xdectoimax.rs:46:19
   |
46 |                   < ((-(2147483647 as libc::c_int) - 1 as libc::c_int) / 2 as libc::c_int)
   |  ___________________^
47 | |                     as libc::c_long
   | |___________________________________^ help: try: `i64::from((-(2147483647 as libc::c_int) - 1 as libc::c_int) / 2 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoimax.rs:54:40
   |
54 |     } else if s_err as libc::c_uint == LONGINT_OVERFLOW as libc::c_int as libc::c_uint {
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoimax.rs:54:40
   |
54 |     } else if s_err as libc::c_uint == LONGINT_OVERFLOW as libc::c_int as libc::c_uint {
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoimax.rs:57:12
   |
57 |         == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW as libc::c_int as libc::c_uint
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoimax.rs:57:12
   |
57 |         == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW as libc::c_int as libc::c_uint
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoimax.rs:61:33
   |
61 |     if s_err as libc::c_uint != LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoimax.rs:61:33
   |
61 |     if s_err as libc::c_uint != LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/xdectoimax.rs:62:9
    |
62  | /         if 0 != 0 {
63  | |             error(
64  | |                 if err_exit != 0 { err_exit } else { 1 as libc::c_int },
65  | |                 if *__errno_location() == 22 as libc::c_int {
...   |
123 | |             });
124 | |         };
    | |_________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/xdectoimax.rs:62:12
   |
62 |         if 0 != 0 {
   |            ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: unnecessary `!=` operation
  --> src/xdectoimax.rs:64:17
   |
64 |                 if err_exit != 0 { err_exit } else { 1 as libc::c_int },
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/xdectoimax.rs:70:17
   |
70 |                 b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xdectoimax.rs:74:13
   |
74 | /             if (if err_exit != 0 { err_exit } else { 1 as libc::c_int })
75 | |                 != 0 as libc::c_int
76 | |             {
77 | |                 unreachable!();
78 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xdectoimax.rs:74:16
   |
74 |             if (if err_exit != 0 { err_exit } else { 1 as libc::c_int })
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xdectoimax.rs:81:48
   |
81 |                   let __errstatus: libc::c_int = if err_exit != 0 {
   |  ________________________________________________^
82 | |                     err_exit
83 | |                 } else {
84 | |                     1 as libc::c_int
85 | |                 };
   | |_________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/xdectoimax.rs:93:21
   |
93 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xdectoimax.rs:97:17
   |
97 | /                 if __errstatus != 0 as libc::c_int {
98 | |                     unreachable!();
99 | |                 } else {};
   | |_________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xdectoimax.rs:103:48
    |
103 |                   let __errstatus: libc::c_int = if err_exit != 0 {
    |  ________________________________________________^
104 | |                     err_exit
105 | |                 } else {
106 | |                     1 as libc::c_int
107 | |                 };
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/xdectoimax.rs:115:21
    |
115 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/xdectoimax.rs:119:17
    |
119 | /                 if __errstatus != 0 as libc::c_int {
120 | |                     unreachable!();
121 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
   --> src/xdectoimax.rs:130:1
    |
130 | / pub unsafe extern "C" fn xdectoimax(
131 | |     mut n_str: *const libc::c_char,
132 | |     mut min: intmax_t,
133 | |     mut max: intmax_t,
...   |
138 | |     return xnumtoimax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit);
139 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xdectoimax.rs:138:5
    |
138 |     return xnumtoimax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xnumtoimax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/xdectoumax.rs:28:1
   |
28 | / pub unsafe extern "C" fn xdectoumax(
29 | |     mut n_str: *const libc::c_char,
30 | |     mut min: uintmax_t,
31 | |     mut max: uintmax_t,
...  |
36 | |     return xnumtoumax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit);
37 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/xdectoumax.rs:36:5
   |
36 |     return xnumtoumax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xnumtoumax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xdectoumax.rs:39:1
    |
39  | / pub unsafe extern "C" fn xnumtoumax(
40  | |     mut n_str: *const libc::c_char,
41  | |     mut base: libc::c_int,
42  | |     mut min: uintmax_t,
...   |
133 | |     return tnum;
134 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xdectoumax.rs:133:5
    |
133 |     return tnum;
    |     ^^^^^^^^^^^^ help: remove `return`: `tnum`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/xdectoumax.rs:50:31
   |
50 |     s_err = xstrtoumax(n_str, 0 as *mut *mut libc::c_char, base, &mut tnum, suffixes);
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoumax.rs:51:33
   |
51 |     if s_err as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoumax.rs:51:33
   |
51 |     if s_err as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xdectoumax.rs:54:23
   |
54 |             if tnum > (2147483647 as libc::c_int / 2 as libc::c_int) as libc::c_ulong {
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoumax.rs:60:40
   |
60 |     } else if s_err as libc::c_uint == LONGINT_OVERFLOW as libc::c_int as libc::c_uint {
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoumax.rs:60:40
   |
60 |     } else if s_err as libc::c_uint == LONGINT_OVERFLOW as libc::c_int as libc::c_uint {
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoumax.rs:63:12
   |
63 |         == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW as libc::c_int as libc::c_uint
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoumax.rs:63:12
   |
63 |         == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW as libc::c_int as libc::c_uint
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoumax.rs:67:33
   |
67 |     if s_err as libc::c_uint != LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoumax.rs:67:33
   |
67 |     if s_err as libc::c_uint != LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/xdectoumax.rs:68:9
    |
68  | /         if 0 != 0 {
69  | |             error(
70  | |                 if err_exit != 0 { err_exit } else { 1 as libc::c_int },
71  | |                 if *__errno_location() == 22 as libc::c_int {
...   |
129 | |             });
130 | |         };
    | |_________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/xdectoumax.rs:68:12
   |
68 |         if 0 != 0 {
   |            ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: unnecessary `!=` operation
  --> src/xdectoumax.rs:70:17
   |
70 |                 if err_exit != 0 { err_exit } else { 1 as libc::c_int },
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/xdectoumax.rs:76:17
   |
76 |                 b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xdectoumax.rs:80:13
   |
80 | /             if (if err_exit != 0 { err_exit } else { 1 as libc::c_int })
81 | |                 != 0 as libc::c_int
82 | |             {
83 | |                 unreachable!();
84 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xdectoumax.rs:80:16
   |
80 |             if (if err_exit != 0 { err_exit } else { 1 as libc::c_int })
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xdectoumax.rs:87:48
   |
87 |                   let __errstatus: libc::c_int = if err_exit != 0 {
   |  ________________________________________________^
88 | |                     err_exit
89 | |                 } else {
90 | |                     1 as libc::c_int
91 | |                 };
   | |_________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/xdectoumax.rs:99:21
   |
99 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/xdectoumax.rs:103:17
    |
103 | /                 if __errstatus != 0 as libc::c_int {
104 | |                     unreachable!();
105 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xdectoumax.rs:109:48
    |
109 |                   let __errstatus: libc::c_int = if err_exit != 0 {
    |  ________________________________________________^
110 | |                     err_exit
111 | |                 } else {
112 | |                     1 as libc::c_int
113 | |                 };
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/xdectoumax.rs:121:21
    |
121 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/xdectoumax.rs:125:17
    |
125 | /                 if __errstatus != 0 as libc::c_int {
126 | |                     unreachable!();
127 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unneeded `return` statement
  --> src/xmalloc.rs:34:9
   |
34 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/xmalloc.rs:36:9
   |
36 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:32:8
   |
32 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:33:24
   |
33 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:33:29
   |
33 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((s == 0) as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xmalloc.rs:33:29
   |
33 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(s == 0)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unneeded `return` statement
  --> src/xmalloc.rs:53:5
   |
53 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `calloc(n as libc::c_ulong, s as libc::c_ulong)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:41:50
   |
41 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:42:17
   |
42 |         if s != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:45:13
   |
45 |         n = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:47:50
   |
47 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:48:17
   |
48 |         if n != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:51:13
   |
51 |         s = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:53:19
   |
53 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                   ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:53:39
   |
53 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                                       ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
  --> src/xmalloc.rs:72:9
   |
72 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/xmalloc.rs:74:9
   |
74 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:61:8
   |
61 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:62:12
   |
62 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |            ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:64:30
   |
64 |         let mut nx: size_t = n as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:65:30
   |
65 |         let mut sx: size_t = s as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:66:17
   |
66 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:66:58
   |
66 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:68:18
   |
68 |             sx = 1 as libc::c_int as size_t;
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
  --> src/xmalloc.rs:81:5
   |
81 |     return 0 as *mut libc::c_void;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_void`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/xmalloc.rs:81:12
   |
81 |     return 0 as *mut libc::c_void;
   |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unneeded `return` statement
  --> src/xmalloc.rs:85:5
   |
85 | /     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
86 | |         malloc(s as libc::c_ulong)
87 | |     } else {
88 | |         _gl_alloc_nomem()
89 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
85 ~     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
86 +         malloc(s as libc::c_ulong)
87 +     } else {
88 +         _gl_alloc_nomem()
89 +     }
   |

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:85:15
   |
85 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |               ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:86:16
   |
86 |         malloc(s as libc::c_ulong)
   |                ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
  --> src/xmalloc.rs:95:5
   |
95 |     return p;
   |     ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:98:1
    |
98  | / pub unsafe extern "C" fn xmalloc(mut s: size_t) -> *mut libc::c_void {
99  | |     return check_nonnull(malloc(s));
100 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/xmalloc.rs:99:5
   |
99 |     return check_nonnull(malloc(s));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(malloc(s))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:102:1
    |
102 | / pub unsafe extern "C" fn ximalloc(mut s: idx_t) -> *mut libc::c_void {
103 | |     return check_nonnull(imalloc(s));
104 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:103:5
    |
103 |     return check_nonnull(imalloc(s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(imalloc(s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:106:1
    |
106 | / pub unsafe extern "C" fn xcharalloc(mut n: size_t) -> *mut libc::c_char {
107 | |     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 | |         == 1 as libc::c_int as libc::c_ulong
109 | |     {
...   |
113 | |     }) as *mut libc::c_char;
114 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:107:5
    |
107 | /     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 | |         == 1 as libc::c_int as libc::c_ulong
109 | |     {
110 | |         xmalloc(n)
111 | |     } else {
112 | |         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 | |     }) as *mut libc::c_char;
    | |____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
107 ~     (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 +         == 1 as libc::c_int as libc::c_ulong
109 +     {
110 +         xmalloc(n)
111 +     } else {
112 +         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 +     }) as *mut libc::c_char
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:107:12
    |
107 |       return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
    |  ____________^
108 | |         == 1 as libc::c_int as libc::c_ulong
109 | |     {
110 | |         xmalloc(n)
111 | |     } else {
112 | |         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 | |     }) as *mut libc::c_char;
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
107 ~     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 +         == 1 as libc::c_int as libc::c_ulong
109 +     {
110 +         xmalloc(n)
111 +     } else {
112 +         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 ~     }).cast::<i8>();
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:108:12
    |
108 |         == 1 as libc::c_int as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:116:1
    |
116 | / pub unsafe extern "C" fn xrealloc(
117 | |     mut p: *mut libc::c_void,
118 | |     mut s: size_t,
119 | | ) -> *mut libc::c_void {
...   |
124 | |     return r;
125 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:124:5
    |
124 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:127:1
    |
127 | / pub unsafe extern "C" fn xirealloc(
128 | |     mut p: *mut libc::c_void,
129 | |     mut s: idx_t,
130 | | ) -> *mut libc::c_void {
131 | |     return check_nonnull(irealloc(p, s));
132 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:131:5
    |
131 |     return check_nonnull(irealloc(p, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(irealloc(p, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:134:1
    |
134 | / pub unsafe extern "C" fn xreallocarray(
135 | |     mut p: *mut libc::c_void,
136 | |     mut n: size_t,
137 | |     mut s: size_t,
...   |
143 | |     return r;
144 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:143:5
    |
143 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:146:1
    |
146 | / pub unsafe extern "C" fn xireallocarray(
147 | |     mut p: *mut libc::c_void,
148 | |     mut n: idx_t,
149 | |     mut s: idx_t,
150 | | ) -> *mut libc::c_void {
151 | |     return check_nonnull(ireallocarray(p, n, s));
152 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:151:5
    |
151 |     return check_nonnull(ireallocarray(p, n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(ireallocarray(p, n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:154:1
    |
154 | / pub unsafe extern "C" fn xnmalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
155 | |     return xreallocarray(0 as *mut libc::c_void, n, s);
156 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:155:5
    |
155 |     return xreallocarray(0 as *mut libc::c_void, n, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xreallocarray(0 as *mut libc::c_void, n, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xmalloc.rs:155:26
    |
155 |     return xreallocarray(0 as *mut libc::c_void, n, s);
    |                          ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:158:1
    |
158 | / pub unsafe extern "C" fn xinmalloc(mut n: idx_t, mut s: idx_t) -> *mut libc::c_void {
159 | |     return xireallocarray(0 as *mut libc::c_void, n, s);
160 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:159:5
    |
159 |     return xireallocarray(0 as *mut libc::c_void, n, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xireallocarray(0 as *mut libc::c_void, n, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xmalloc.rs:159:27
    |
159 |     return xireallocarray(0 as *mut libc::c_void, n, s);
    |                           ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:162:1
    |
162 | / pub unsafe extern "C" fn x2realloc(
163 | |     mut p: *mut libc::c_void,
164 | |     mut ps: *mut size_t,
165 | | ) -> *mut libc::c_void {
166 | |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
167 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:166:5
    |
166 |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `x2nrealloc(p, ps, 1 as libc::c_int as size_t)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:166:30
    |
166 |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:169:1
    |
169 | / pub unsafe extern "C" fn x2nrealloc(
170 | |     mut p: *mut libc::c_void,
171 | |     mut pn: *mut size_t,
172 | |     mut s: size_t,
...   |
194 | |     return p;
195 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:194:5
    |
194 |     return p;
    |     ^^^^^^^^^ help: remove `return`: `p`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:177:17
    |
177 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:177:18
    |
177 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:179:31
    |
179 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:179:31
    |
179 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n == 0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:185:54
    |
185 |                 (n >> 1 as libc::c_int).wrapping_add(1 as libc::c_int as libc::c_ulong),
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
   --> src/xmalloc.rs:187:10
    |
187 |         *(&mut n as *mut size_t) = fresh0;
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:197:1
    |
197 | / pub unsafe extern "C" fn xpalloc(
198 | |     mut pa: *mut libc::c_void,
199 | |     mut pn: *mut idx_t,
200 | |     mut n_incr_min: idx_t,
...   |
901 | |     return pa;
902 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: the function has a cognitive complexity of (131/25)
   --> src/xmalloc.rs:197:26
    |
197 | pub unsafe extern "C" fn xpalloc(
    |                          ^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (698/100)
   --> src/xmalloc.rs:197:1
    |
197 | / pub unsafe extern "C" fn xpalloc(
198 | |     mut pa: *mut libc::c_void,
199 | |     mut pn: *mut idx_t,
200 | |     mut n_incr_min: idx_t,
...   |
901 | |     return pa;
902 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xmalloc.rs:901:5
    |
901 |     return pa;
    |     ^^^^^^^^^^ help: remove `return`: `pa`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: borrow as raw pointer
   --> src/xmalloc.rs:207:6
    |
207 |     *(&mut n as *mut idx_t) = fresh2;
    |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:211:8
    |
211 |     if 0 as libc::c_int as libc::c_long <= n_max && n_max < n {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
   --> src/xmalloc.rs:215:38
    |
215 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
216 | |         < -(1 as libc::c_int) as idx_t
217 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
218 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
549 | |         }) as libc::c_ulong
550 | |     }) as idx_t;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:215:38
    |
215 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
216 | |         < -(1 as libc::c_int) as idx_t
217 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
218 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
549 | |         }) as libc::c_ulong
550 | |     }) as idx_t;
    | |______^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:215:45
    |
215 |     let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:216:11
    |
216 |         < -(1 as libc::c_int) as idx_t
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:217:13
    |
217 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:217:41
    |
217 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:218:15
    |
218 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:218:51
    |
218 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:219:13
    |
219 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:219:41
    |
219 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:220:15
    |
220 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:220:51
    |
220 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:221:20
    |
221 |         && (if s < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:222:20
    |
222 |             if n < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:223:21
    |
223 |                   if ((if 1 as libc::c_int != 0 {
    |  _____________________^
224 | |                     0 as libc::c_int as libc::c_long
225 | |                 } else {
226 | |                     (if 1 as libc::c_int != 0 {
...   |
230 | |                     }) + s
231 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:224:21
    |
224 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:226:21
    |
226 | /                     (if 1 as libc::c_int != 0 {
227 | |                         0 as libc::c_int as libc::c_long
228 | |                     } else {
229 | |                         -(1 as libc::c_int) as idx_t
230 | |                     }) + s
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:227:25
    |
227 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:229:25
    |
229 |                         -(1 as libc::c_int) as idx_t
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:231:22
    |
231 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:231:58
    |
231 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:233:21
    |
233 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:233:26
    |
233 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:235:21
    |
235 | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
236 | |                         0 as libc::c_int as libc::c_long
237 | |                     } else {
238 | |                         s
...   |
300 | |                         -(1 as libc::c_int) as idx_t / -s
301 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |_________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
235 ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
236 +                         0 as libc::c_int as libc::c_long
237 +                     } else {
238 +                         s
239 +                     }) - 1 as libc::c_int as libc::c_long)
240 +                         < 0 as libc::c_int as libc::c_long
241 +                     {
242 +                         !(((((if 1 as libc::c_int != 0 {
243 +                             0 as libc::c_int as libc::c_long
244 +                         } else {
245 +                             s
246 +                         }) + 1 as libc::c_int as libc::c_long)
247 +                             << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
248 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
249 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
250 +                             - 1 as libc::c_int as libc::c_long)
251 +                             * 2 as libc::c_int as libc::c_long
252 +                             + 1 as libc::c_int as libc::c_long)
253 +                     } else {
254 +                         (if 1 as libc::c_int != 0 {
255 +                             0 as libc::c_int as libc::c_long
256 +                         } else {
257 +                             s
258 +                         }) + 0 as libc::c_int as libc::c_long
259 +                     }) < 0 as libc::c_int as libc::c_long
260 +                     {
261 +                         (s
262 +                             < -(if ((if 1 as libc::c_int != 0 {
263 +                                 0 as libc::c_int as libc::c_long
264 +                             } else {
265 +                                 s
266 +                             }) - 1 as libc::c_int as libc::c_long)
267 +                                 < 0 as libc::c_int as libc::c_long
268 +                             {
269 +                                 ((((if 1 as libc::c_int != 0 {
270 +                                     0 as libc::c_int as libc::c_long
271 +                                 } else {
272 +                                     s
273 +                                 }) + 1 as libc::c_int as libc::c_long)
274 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
275 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
276 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
277 +                                     - 1 as libc::c_int as libc::c_long)
278 +                                     * 2 as libc::c_int as libc::c_long
279 +                                     + 1 as libc::c_int as libc::c_long
280 +                             } else {
281 +                                 (if 1 as libc::c_int != 0 {
282 +                                     0 as libc::c_int as libc::c_long
283 +                                 } else {
284 +                                     s
285 +                                 }) - 1 as libc::c_int as libc::c_long
286 +                             })) as libc::c_int
287 +                     } else {
288 +                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
289 +                     }) != 0
290 +                     {
291 +                         (if 1 as libc::c_int != 0 {
292 +                             0 as libc::c_int as libc::c_long
293 +                         } else {
294 +                             s
295 +                         }) + -(1 as libc::c_int) as idx_t
296 +                             >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
297 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
298 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
299 +                     } else {
300 +                         -(1 as libc::c_int) as idx_t / -s
301 +                     }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:235:22
    |
235 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
236 | |                         0 as libc::c_int as libc::c_long
237 | |                     } else {
238 | |                         s
...   |
300 | |                         -(1 as libc::c_int) as idx_t / -s
301 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:235:35
    |
235 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
236 | |                         0 as libc::c_int as libc::c_long
237 | |                     } else {
238 | |                         s
239 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:236:25
    |
236 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:239:26
    |
239 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:240:27
    |
240 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:242:30
    |
242 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
243 | |                             0 as libc::c_int as libc::c_long
244 | |                         } else {
245 | |                             s
246 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:243:29
    |
243 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:246:30
    |
246 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:248:47
    |
248 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:249:47
    |
249 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:250:31
    |
250 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:251:31
    |
251 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:252:31
    |
252 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:254:25
    |
254 | /                         (if 1 as libc::c_int != 0 {
255 | |                             0 as libc::c_int as libc::c_long
256 | |                         } else {
257 | |                             s
258 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:255:29
    |
255 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:258:30
    |
258 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:259:26
    |
259 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:261:25
    |
261 | /                         (s
262 | |                             < -(if ((if 1 as libc::c_int != 0 {
263 | |                                 0 as libc::c_int as libc::c_long
264 | |                             } else {
...   |
285 | |                                 }) - 1 as libc::c_int as libc::c_long
286 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
261 ~                         i32::from(s
262 +                             < -(if ((if 1 as libc::c_int != 0 {
263 +                                 0 as libc::c_int as libc::c_long
264 +                             } else {
265 +                                 s
266 +                             }) - 1 as libc::c_int as libc::c_long)
267 +                                 < 0 as libc::c_int as libc::c_long
268 +                             {
269 +                                 ((((if 1 as libc::c_int != 0 {
270 +                                     0 as libc::c_int as libc::c_long
271 +                                 } else {
272 +                                     s
273 +                                 }) + 1 as libc::c_int as libc::c_long)
274 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
275 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
276 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
277 +                                     - 1 as libc::c_int as libc::c_long)
278 +                                     * 2 as libc::c_int as libc::c_long
279 +                                     + 1 as libc::c_int as libc::c_long
280 +                             } else {
281 +                                 (if 1 as libc::c_int != 0 {
282 +                                     0 as libc::c_int as libc::c_long
283 +                                 } else {
284 +                                     s
285 +                                 }) - 1 as libc::c_int as libc::c_long
286 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:262:37
    |
262 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
263 | | ...                       0 as libc::c_int as libc::c_long
264 | | ...                   } else {
265 | | ...                       s
266 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:263:33
    |
263 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:266:34
    |
266 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:267:35
    |
267 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:269:36
    |
269 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
270 | | ...                       0 as libc::c_int as libc::c_long
271 | | ...                   } else {
272 | | ...                       s
273 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:270:37
    |
270 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:273:38
    |
273 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:275:55
    |
275 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:276:55
    |
276 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:277:39
    |
277 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:278:39
    |
278 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:279:39
    |
279 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:281:33
    |
281 | / ...                   (if 1 as libc::c_int != 0 {
282 | | ...                       0 as libc::c_int as libc::c_long
283 | | ...                   } else {
284 | | ...                       s
285 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:282:37
    |
282 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:285:38
    |
285 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:288:25
    |
288 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:288:26
    |
288 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:291:25
    |
291 | /                         (if 1 as libc::c_int != 0 {
292 | |                             0 as libc::c_int as libc::c_long
293 | |                         } else {
294 | |                             s
295 | |                         }) + -(1 as libc::c_int) as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:292:29
    |
292 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:295:30
    |
295 |                         }) + -(1 as libc::c_int) as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:297:47
    |
297 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:298:47
    |
298 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:300:25
    |
300 |                         -(1 as libc::c_int) as idx_t / -s
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:301:27
    |
301 |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:304:29
    |
304 |                   if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
305 | |                     0 as libc::c_int as libc::c_long
306 | |                 } else {
307 | |                     (if 1 as libc::c_int != 0 {
...   |
311 | |                     }) + 0 as libc::c_int as idx_t
312 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:305:21
    |
305 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:307:21
    |
307 | /                     (if 1 as libc::c_int != 0 {
308 | |                         0 as libc::c_int as libc::c_long
309 | |                     } else {
310 | |                         s
311 | |                     }) + 0 as libc::c_int as idx_t
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:308:25
    |
308 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:311:26
    |
311 |                     }) + 0 as libc::c_int as idx_t
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:312:22
    |
312 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:312:58
    |
312 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:314:26
    |
314 |                       !(((((if 1 as libc::c_int != 0 {
    |  __________________________^
315 | |                         0 as libc::c_int as libc::c_long
316 | |                     } else {
317 | |                         (if 1 as libc::c_int != 0 {
...   |
321 | |                         }) + 0 as libc::c_int as idx_t
322 | |                     }) + 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:315:25
    |
315 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:317:25
    |
317 | /                         (if 1 as libc::c_int != 0 {
318 | |                             0 as libc::c_int as libc::c_long
319 | |                         } else {
320 | |                             s
321 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:318:29
    |
318 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:321:30
    |
321 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:322:26
    |
322 |                     }) + 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:324:43
    |
324 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:325:43
    |
325 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:326:27
    |
326 |                         - 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:327:27
    |
327 |                         * 2 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:328:27
    |
328 |                         + 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:330:21
    |
330 | /                     (if 1 as libc::c_int != 0 {
331 | |                         0 as libc::c_int as libc::c_long
332 | |                     } else {
333 | |                         (if 1 as libc::c_int != 0 {
...   |
337 | |                         }) + 0 as libc::c_int as idx_t
338 | |                     }) + 0 as libc::c_int as libc::c_long
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:331:25
    |
331 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:333:25
    |
333 | /                         (if 1 as libc::c_int != 0 {
334 | |                             0 as libc::c_int as libc::c_long
335 | |                         } else {
336 | |                             s
337 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:334:29
    |
334 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:337:30
    |
337 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:338:26
    |
338 |                     }) + 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:339:22
    |
339 |                 }) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:341:21
    |
341 | /                     (((if 1 as libc::c_int != 0 {
342 | |                         0 as libc::c_int as libc::c_long
343 | |                     } else {
344 | |                         s
...   |
381 | |                             }) - 1 as libc::c_int as libc::c_long
382 | |                         })) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
341 ~                     i32::from(((if 1 as libc::c_int != 0 {
342 +                         0 as libc::c_int as libc::c_long
343 +                     } else {
344 +                         s
345 +                     }) + 0 as libc::c_int as idx_t)
346 +                         < -(if ((if 1 as libc::c_int != 0 {
347 +                             0 as libc::c_int as libc::c_long
348 +                         } else {
349 +                             (if 1 as libc::c_int != 0 {
350 +                                 0 as libc::c_int as libc::c_long
351 +                             } else {
352 +                                 s
353 +                             }) + 0 as libc::c_int as idx_t
354 +                         }) - 1 as libc::c_int as libc::c_long)
355 +                             < 0 as libc::c_int as libc::c_long
356 +                         {
357 +                             ((((if 1 as libc::c_int != 0 {
358 +                                 0 as libc::c_int as libc::c_long
359 +                             } else {
360 +                                 (if 1 as libc::c_int != 0 {
361 +                                     0 as libc::c_int as libc::c_long
362 +                                 } else {
363 +                                     s
364 +                                 }) + 0 as libc::c_int as idx_t
365 +                             }) + 1 as libc::c_int as libc::c_long)
366 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
367 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
368 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
369 +                                 - 1 as libc::c_int as libc::c_long)
370 +                                 * 2 as libc::c_int as libc::c_long
371 +                                 + 1 as libc::c_int as libc::c_long
372 +                         } else {
373 +                             (if 1 as libc::c_int != 0 {
374 +                                 0 as libc::c_int as libc::c_long
375 +                             } else {
376 +                                 (if 1 as libc::c_int != 0 {
377 +                                     0 as libc::c_int as libc::c_long
378 +                                 } else {
379 +                                     s
380 +                                 }) + 0 as libc::c_int as idx_t
381 +                             }) - 1 as libc::c_int as libc::c_long
382 +                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:341:23
    |
341 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
342 | |                         0 as libc::c_int as libc::c_long
343 | |                     } else {
344 | |                         s
345 | |                     }) + 0 as libc::c_int as idx_t)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:342:25
    |
342 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:345:26
    |
345 |                     }) + 0 as libc::c_int as idx_t)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:346:33
    |
346 |                           < -(if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
347 | |                             0 as libc::c_int as libc::c_long
348 | |                         } else {
349 | |                             (if 1 as libc::c_int != 0 {
...   |
353 | |                             }) + 0 as libc::c_int as idx_t
354 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:347:29
    |
347 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:349:29
    |
349 | / ...                   (if 1 as libc::c_int != 0 {
350 | | ...                       0 as libc::c_int as libc::c_long
351 | | ...                   } else {
352 | | ...                       s
353 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:350:33
    |
350 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:353:34
    |
353 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:354:30
    |
354 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:355:31
    |
355 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:357:32
    |
357 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
358 | | ...                       0 as libc::c_int as libc::c_long
359 | | ...                   } else {
360 | | ...                       (if 1 as libc::c_int != 0 {
...   |
364 | | ...                       }) + 0 as libc::c_int as idx_t
365 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:358:33
    |
358 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:360:33
    |
360 | / ...                   (if 1 as libc::c_int != 0 {
361 | | ...                       0 as libc::c_int as libc::c_long
362 | | ...                   } else {
363 | | ...                       s
364 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:361:37
    |
361 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:364:38
    |
364 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:365:34
    |
365 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:367:51
    |
367 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:368:51
    |
368 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:369:35
    |
369 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:370:35
    |
370 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:371:35
    |
371 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:373:29
    |
373 | / ...                   (if 1 as libc::c_int != 0 {
374 | | ...                       0 as libc::c_int as libc::c_long
375 | | ...                   } else {
376 | | ...                       (if 1 as libc::c_int != 0 {
...   |
380 | | ...                       }) + 0 as libc::c_int as idx_t
381 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:374:33
    |
374 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:376:33
    |
376 | / ...                   (if 1 as libc::c_int != 0 {
377 | | ...                       0 as libc::c_int as libc::c_long
378 | | ...                   } else {
379 | | ...                       s
380 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:377:37
    |
377 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:380:38
    |
380 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:381:34
    |
381 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:384:21
    |
384 | /                     ((0 as libc::c_int as libc::c_long)
385 | |                         < (if 1 as libc::c_int != 0 {
386 | |                             0 as libc::c_int as libc::c_long
387 | |                         } else {
388 | |                             s
389 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |______________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
384 ~                     i32::from((0 as libc::c_int as libc::c_long)
385 +                         < (if 1 as libc::c_int != 0 {
386 +                             0 as libc::c_int as libc::c_long
387 +                         } else {
388 +                             s
389 +                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:384:22
    |
384 |                     ((0 as libc::c_int as libc::c_long)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:385:27
    |
385 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
386 | |                             0 as libc::c_int as libc::c_long
387 | |                         } else {
388 | |                             s
389 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:386:29
    |
386 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:389:30
    |
389 |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:390:33
    |
390 |                 }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:392:25
    |
392 |                       if ((if 1 as libc::c_int != 0 {
    |  _________________________^
393 | |                         0 as libc::c_int as libc::c_long
394 | |                     } else {
395 | |                         n
396 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:393:25
    |
393 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:396:26
    |
396 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:397:27
    |
397 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:399:25
    |
399 | /                         ((0 as libc::c_int as libc::c_long)
400 | |                             < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
399 ~                         i32::from((0 as libc::c_int as libc::c_long)
400 +                             < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:399:26
    |
399 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:400:35
    |
400 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:402:25
    |
402 | /                         ((0 as libc::c_int as libc::c_long) < n
403 | |                             && (-(1 as libc::c_int) as libc::c_long
404 | |                                 - 0 as libc::c_int as idx_t)
405 | |                                 < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |______________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
402 ~                         i32::from((0 as libc::c_int as libc::c_long) < n
403 +                             && (-(1 as libc::c_int) as libc::c_long
404 +                                 - 0 as libc::c_int as idx_t)
405 +                                 < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:402:26
    |
402 |                         ((0 as libc::c_int as libc::c_long) < n
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:403:33
    |
403 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:404:35
    |
404 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:405:39
    |
405 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:408:21
    |
408 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:408:22
    |
408 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:412:21
    |
412 |             if s == 0 as libc::c_int as libc::c_long {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:415:24
    |
415 |                 if n < 0 as libc::c_int as libc::c_long {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:416:33
    |
416 |                       if (if (if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
417 | |                         0 as libc::c_int as libc::c_long
418 | |                     } else {
419 | |                         (if 1 as libc::c_int != 0 {
...   |
423 | |                         }) + 0 as libc::c_int as idx_t
424 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:417:25
    |
417 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:419:25
    |
419 | /                         (if 1 as libc::c_int != 0 {
420 | |                             0 as libc::c_int as libc::c_long
421 | |                         } else {
422 | |                             n
423 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:420:29
    |
420 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:423:30
    |
423 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:424:26
    |
424 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:425:27
    |
425 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:427:30
    |
427 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
428 | |                             0 as libc::c_int as libc::c_long
429 | |                         } else {
430 | |                             (if 1 as libc::c_int != 0 {
...   |
434 | |                             }) + 0 as libc::c_int as idx_t
435 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:428:29
    |
428 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:430:29
    |
430 | / ...                   (if 1 as libc::c_int != 0 {
431 | | ...                       0 as libc::c_int as libc::c_long
432 | | ...                   } else {
433 | | ...                       n
434 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:431:33
    |
431 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:434:34
    |
434 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:435:30
    |
435 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:437:47
    |
437 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:438:47
    |
438 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:439:31
    |
439 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:440:31
    |
440 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:441:31
    |
441 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:443:25
    |
443 | /                         (if 1 as libc::c_int != 0 {
444 | |                             0 as libc::c_int as libc::c_long
445 | |                         } else {
446 | |                             (if 1 as libc::c_int != 0 {
...   |
450 | |                             }) + 0 as libc::c_int as idx_t
451 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:444:29
    |
444 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:446:29
    |
446 | / ...                   (if 1 as libc::c_int != 0 {
447 | | ...                       0 as libc::c_int as libc::c_long
448 | | ...                   } else {
449 | | ...                       n
450 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:447:33
    |
447 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:450:34
    |
450 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:451:30
    |
451 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:452:26
    |
452 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:454:25
    |
454 | /                         (((if 1 as libc::c_int != 0 {
455 | |                             0 as libc::c_int as libc::c_long
456 | |                         } else {
457 | |                             n
...   |
494 | |                                 }) - 1 as libc::c_int as libc::c_long
495 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
454 ~                         i32::from(((if 1 as libc::c_int != 0 {
455 +                             0 as libc::c_int as libc::c_long
456 +                         } else {
457 +                             n
458 +                         }) + 0 as libc::c_int as idx_t)
459 +                             < -(if ((if 1 as libc::c_int != 0 {
460 +                                 0 as libc::c_int as libc::c_long
461 +                             } else {
462 +                                 (if 1 as libc::c_int != 0 {
463 +                                     0 as libc::c_int as libc::c_long
464 +                                 } else {
465 +                                     n
466 +                                 }) + 0 as libc::c_int as idx_t
467 +                             }) - 1 as libc::c_int as libc::c_long)
468 +                                 < 0 as libc::c_int as libc::c_long
469 +                             {
470 +                                 ((((if 1 as libc::c_int != 0 {
471 +                                     0 as libc::c_int as libc::c_long
472 +                                 } else {
473 +                                     (if 1 as libc::c_int != 0 {
474 +                                         0 as libc::c_int as libc::c_long
475 +                                     } else {
476 +                                         n
477 +                                     }) + 0 as libc::c_int as idx_t
478 +                                 }) + 1 as libc::c_int as libc::c_long)
479 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
480 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
481 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
482 +                                     - 1 as libc::c_int as libc::c_long)
483 +                                     * 2 as libc::c_int as libc::c_long
484 +                                     + 1 as libc::c_int as libc::c_long
485 +                             } else {
486 +                                 (if 1 as libc::c_int != 0 {
487 +                                     0 as libc::c_int as libc::c_long
488 +                                 } else {
489 +                                     (if 1 as libc::c_int != 0 {
490 +                                         0 as libc::c_int as libc::c_long
491 +                                     } else {
492 +                                         n
493 +                                     }) + 0 as libc::c_int as idx_t
494 +                                 }) - 1 as libc::c_int as libc::c_long
495 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:454:27
    |
454 |                           (((if 1 as libc::c_int != 0 {
    |  ___________________________^
455 | |                             0 as libc::c_int as libc::c_long
456 | |                         } else {
457 | |                             n
458 | |                         }) + 0 as libc::c_int as idx_t)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:455:29
    |
455 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:458:30
    |
458 |                         }) + 0 as libc::c_int as idx_t)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:459:37
    |
459 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
460 | | ...                       0 as libc::c_int as libc::c_long
461 | | ...                   } else {
462 | | ...                       (if 1 as libc::c_int != 0 {
...   |
466 | | ...                       }) + 0 as libc::c_int as idx_t
467 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:460:33
    |
460 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:462:33
    |
462 | / ...                   (if 1 as libc::c_int != 0 {
463 | | ...                       0 as libc::c_int as libc::c_long
464 | | ...                   } else {
465 | | ...                       n
466 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:463:37
    |
463 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:466:38
    |
466 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:467:34
    |
467 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:468:35
    |
468 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:470:36
    |
470 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
471 | | ...                       0 as libc::c_int as libc::c_long
472 | | ...                   } else {
473 | | ...                       (if 1 as libc::c_int != 0 {
...   |
477 | | ...                       }) + 0 as libc::c_int as idx_t
478 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:471:37
    |
471 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:473:37
    |
473 | / ...                   (if 1 as libc::c_int != 0 {
474 | | ...                       0 as libc::c_int as libc::c_long
475 | | ...                   } else {
476 | | ...                       n
477 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:474:41
    |
474 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:477:42
    |
477 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:478:38
    |
478 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:480:55
    |
480 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:481:55
    |
481 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:482:39
    |
482 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:483:39
    |
483 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:484:39
    |
484 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:486:33
    |
486 | / ...                   (if 1 as libc::c_int != 0 {
487 | | ...                       0 as libc::c_int as libc::c_long
488 | | ...                   } else {
489 | | ...                       (if 1 as libc::c_int != 0 {
...   |
493 | | ...                       }) + 0 as libc::c_int as idx_t
494 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:487:37
    |
487 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:489:37
    |
489 | / ...                   (if 1 as libc::c_int != 0 {
490 | | ...                       0 as libc::c_int as libc::c_long
491 | | ...                   } else {
492 | | ...                       n
493 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:490:41
    |
490 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:493:42
    |
493 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:494:38
    |
494 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:497:25
    |
497 | /                         ((0 as libc::c_int as libc::c_long)
498 | |                             < (if 1 as libc::c_int != 0 {
499 | |                                 0 as libc::c_int as libc::c_long
500 | |                             } else {
501 | |                                 n
502 | |                             }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
497 ~                         i32::from((0 as libc::c_int as libc::c_long)
498 +                             < (if 1 as libc::c_int != 0 {
499 +                                 0 as libc::c_int as libc::c_long
500 +                             } else {
501 +                                 n
502 +                             }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:497:26
    |
497 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:498:31
    |
498 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
499 | | ...                       0 as libc::c_int as libc::c_long
500 | | ...                   } else {
501 | | ...                       n
502 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:499:33
    |
499 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:502:34
    |
502 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:503:37
    |
503 |                     }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:505:29
    |
505 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
506 | |                             0 as libc::c_int as libc::c_long
507 | |                         } else {
508 | |                             s
509 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:506:29
    |
506 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:509:30
    |
509 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:510:31
    |
510 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:512:29
    |
512 | / ...                   ((0 as libc::c_int as libc::c_long)
513 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
512 ~                             i32::from((0 as libc::c_int as libc::c_long)
513 +                                 < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:512:30
    |
512 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:513:39
    |
513 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:515:29
    |
515 | / ...                   ((-(1 as libc::c_int) as libc::c_long
516 | | ...                       - 0 as libc::c_int as idx_t)
517 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
515 ~                             i32::from((-(1 as libc::c_int) as libc::c_long
516 +                                 - 0 as libc::c_int as idx_t)
517 +                                 < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:515:31
    |
515 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:516:35
    |
516 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:517:39
    |
517 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:520:25
    |
520 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:520:26
    |
520 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:523:21
    |
523 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:523:22
    |
523 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:529:10
    |
529 |         *(&mut nbytes as *mut idx_t) = fresh8;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:533:10
    |
533 |         *(&mut nbytes as *mut idx_t) = fresh10;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:534:9
    |
534 |         fresh11 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh11)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:537:12
    |
537 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:540:13
    |
540 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:545:9
    |
545 | /         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
546 | |             DEFAULT_MXFAST_0 as libc::c_int
547 | |         } else {
548 | |             0 as libc::c_int
549 | |         }) as libc::c_ulong
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:545:22
    |
545 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(DEFAULT_MXFAST_0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:545:22
    |
545 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:546:13
    |
546 |             DEFAULT_MXFAST_0 as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:556:15
    |
556 |         *pn = 0 as libc::c_int as idx_t;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:561:14
    |
561 |             *(&mut n as *mut idx_t) = fresh12;
    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:562:13
    |
562 |             fresh13 as libc::c_int != 0
    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh13)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:563:20
    |
563 |                 || 0 as libc::c_int as libc::c_long <= n_max && n_max < n
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:564:24
    |
564 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:564:54
    |
564 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:565:25
    |
565 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
566 | |                         0 as libc::c_int as libc::c_long
567 | |                     } else {
568 | |                         n
569 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:566:25
    |
566 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:569:26
    |
569 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:570:27
    |
570 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:571:25
    |
571 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
572 | |                         0 as libc::c_int as libc::c_long
573 | |                     } else {
574 | |                         s
575 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:572:25
    |
572 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:575:26
    |
575 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:576:27
    |
576 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:577:32
    |
577 |                     && (if s < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:578:32
    |
578 |                         if n < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:579:33
    |
579 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
580 | | ...                       0 as libc::c_int as libc::c_long
581 | | ...                   } else {
582 | | ...                       (if 1 as libc::c_int != 0 {
...   |
586 | | ...                       }) + s
587 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:580:33
    |
580 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:582:33
    |
582 | / ...                   (if 1 as libc::c_int != 0 {
583 | | ...                       0 as libc::c_int as libc::c_long
584 | | ...                   } else {
585 | | ...                       -(1 as libc::c_int) as idx_t
586 | | ...                   }) + s
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:583:37
    |
583 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:585:37
    |
585 | ...                   -(1 as libc::c_int) as idx_t
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:587:34
    |
587 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:588:35
    |
588 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:590:33
    |
590 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:590:38
    |
590 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:592:33
    |
592 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
593 | | ...                       0 as libc::c_int as libc::c_long
594 | | ...                   } else {
595 | | ...                       s
...   |
658 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
659 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
592 ~                                 i32::from((if (if (if ((if 1 as libc::c_int != 0 {
593 +                                     0 as libc::c_int as libc::c_long
594 +                                 } else {
595 +                                     s
596 +                                 }) - 1 as libc::c_int as libc::c_long)
597 +                                     < 0 as libc::c_int as libc::c_long
598 +                                 {
599 +                                     !(((((if 1 as libc::c_int != 0 {
600 +                                         0 as libc::c_int as libc::c_long
601 +                                     } else {
602 +                                         s
603 +                                     }) + 1 as libc::c_int as libc::c_long)
604 +                                         << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
605 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
606 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
607 +                                         - 1 as libc::c_int as libc::c_long)
608 +                                         * 2 as libc::c_int as libc::c_long
609 +                                         + 1 as libc::c_int as libc::c_long)
610 +                                 } else {
611 +                                     (if 1 as libc::c_int != 0 {
612 +                                         0 as libc::c_int as libc::c_long
613 +                                     } else {
614 +                                         s
615 +                                     }) + 0 as libc::c_int as libc::c_long
616 +                                 }) < 0 as libc::c_int as libc::c_long
617 +                                 {
618 +                                     (s
619 +                                         < -(if ((if 1 as libc::c_int != 0 {
620 +                                             0 as libc::c_int as libc::c_long
621 +                                         } else {
622 +                                             s
623 +                                         }) - 1 as libc::c_int as libc::c_long)
624 +                                             < 0 as libc::c_int as libc::c_long
625 +                                         {
626 +                                             ((((if 1 as libc::c_int != 0 {
627 +                                                 0 as libc::c_int as libc::c_long
628 +                                             } else {
629 +                                                 s
630 +                                             }) + 1 as libc::c_int as libc::c_long)
631 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
632 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
633 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
634 +                                                 - 1 as libc::c_int as libc::c_long)
635 +                                                 * 2 as libc::c_int as libc::c_long
636 +                                                 + 1 as libc::c_int as libc::c_long
637 +                                         } else {
638 +                                             (if 1 as libc::c_int != 0 {
639 +                                                 0 as libc::c_int as libc::c_long
640 +                                             } else {
641 +                                                 s
642 +                                             }) - 1 as libc::c_int as libc::c_long
643 +                                         })) as libc::c_int
644 +                                 } else {
645 +                                     ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
646 +                                 }) != 0
647 +                                 {
648 +                                     (if 1 as libc::c_int != 0 {
649 +                                         0 as libc::c_int as libc::c_long
650 +                                     } else {
651 +                                         s
652 +                                     }) + -(1 as libc::c_int) as idx_t
653 +                                         >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
654 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
655 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
656 +                                 } else {
657 +                                     -(1 as libc::c_int) as idx_t / -s
658 +                                 }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:592:34
    |
592 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ________________________^
593 | | ...                       0 as libc::c_int as libc::c_long
594 | | ...                   } else {
595 | | ...                       s
...   |
657 | | ...                       -(1 as libc::c_int) as idx_t / -s
658 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:592:47
    |
592 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________________^
593 | | ...                       0 as libc::c_int as libc::c_long
594 | | ...                   } else {
595 | | ...                       s
596 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:593:37
    |
593 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:596:38
    |
596 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:597:39
    |
597 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:599:42
    |
599 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
600 | | ...                       0 as libc::c_int as libc::c_long
601 | | ...                   } else {
602 | | ...                       s
603 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:600:41
    |
600 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:603:42
    |
603 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:605:59
    |
605 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:606:59
    |
606 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:607:43
    |
607 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:608:43
    |
608 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:609:43
    |
609 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:611:37
    |
611 | / ...                   (if 1 as libc::c_int != 0 {
612 | | ...                       0 as libc::c_int as libc::c_long
613 | | ...                   } else {
614 | | ...                       s
615 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:612:41
    |
612 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:615:42
    |
615 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:616:38
    |
616 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:618:37
    |
618 | / ...                   (s
619 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
620 | | ...                           0 as libc::c_int as libc::c_long
621 | | ...                       } else {
...   |
642 | | ...                           }) - 1 as libc::c_int as libc::c_long
643 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
618 ~                                     i32::from(s
619 +                                         < -(if ((if 1 as libc::c_int != 0 {
620 +                                             0 as libc::c_int as libc::c_long
621 +                                         } else {
622 +                                             s
623 +                                         }) - 1 as libc::c_int as libc::c_long)
624 +                                             < 0 as libc::c_int as libc::c_long
625 +                                         {
626 +                                             ((((if 1 as libc::c_int != 0 {
627 +                                                 0 as libc::c_int as libc::c_long
628 +                                             } else {
629 +                                                 s
630 +                                             }) + 1 as libc::c_int as libc::c_long)
631 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
632 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
633 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
634 +                                                 - 1 as libc::c_int as libc::c_long)
635 +                                                 * 2 as libc::c_int as libc::c_long
636 +                                                 + 1 as libc::c_int as libc::c_long
637 +                                         } else {
638 +                                             (if 1 as libc::c_int != 0 {
639 +                                                 0 as libc::c_int as libc::c_long
640 +                                             } else {
641 +                                                 s
642 +                                             }) - 1 as libc::c_int as libc::c_long
643 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:619:49
    |
619 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
620 | | ...                       0 as libc::c_int as libc::c_long
621 | | ...                   } else {
622 | | ...                       s
623 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:620:45
    |
620 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:623:46
    |
623 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:624:47
    |
624 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:626:48
    |
626 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
627 | | ...                       0 as libc::c_int as libc::c_long
628 | | ...                   } else {
629 | | ...                       s
630 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:627:49
    |
627 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:630:50
    |
630 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:632:67
    |
632 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:633:67
    |
633 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:634:51
    |
634 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:635:51
    |
635 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:636:51
    |
636 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:638:45
    |
638 | / ...                   (if 1 as libc::c_int != 0 {
639 | | ...                       0 as libc::c_int as libc::c_long
640 | | ...                   } else {
641 | | ...                       s
642 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:639:49
    |
639 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:642:50
    |
642 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:645:37
    |
645 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:645:38
    |
645 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:648:37
    |
648 | / ...                   (if 1 as libc::c_int != 0 {
649 | | ...                       0 as libc::c_int as libc::c_long
650 | | ...                   } else {
651 | | ...                       s
652 | | ...                   }) + -(1 as libc::c_int) as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:649:41
    |
649 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:652:42
    |
652 | ...                   }) + -(1 as libc::c_int) as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:654:59
    |
654 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:655:59
    |
655 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:657:37
    |
657 | ...                   -(1 as libc::c_int) as idx_t / -s
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:658:39
    |
658 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:662:41
    |
662 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
663 | | ...                       0 as libc::c_int as libc::c_long
664 | | ...                   } else {
665 | | ...                       (if 1 as libc::c_int != 0 {
...   |
669 | | ...                       }) + 0 as libc::c_int as idx_t
670 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:663:33
    |
663 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:665:33
    |
665 | / ...                   (if 1 as libc::c_int != 0 {
666 | | ...                       0 as libc::c_int as libc::c_long
667 | | ...                   } else {
668 | | ...                       s
669 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:666:37
    |
666 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:669:38
    |
669 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:670:34
    |
670 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:671:35
    |
671 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:673:38
    |
673 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
674 | | ...                       0 as libc::c_int as libc::c_long
675 | | ...                   } else {
676 | | ...                       (if 1 as libc::c_int != 0 {
...   |
680 | | ...                       }) + 0 as libc::c_int as idx_t
681 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:674:37
    |
674 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:676:37
    |
676 | / ...                   (if 1 as libc::c_int != 0 {
677 | | ...                       0 as libc::c_int as libc::c_long
678 | | ...                   } else {
679 | | ...                       s
680 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:677:41
    |
677 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:680:42
    |
680 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:681:38
    |
681 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:683:55
    |
683 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:684:55
    |
684 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:685:39
    |
685 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:686:39
    |
686 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:687:39
    |
687 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:689:33
    |
689 | / ...                   (if 1 as libc::c_int != 0 {
690 | | ...                       0 as libc::c_int as libc::c_long
691 | | ...                   } else {
692 | | ...                       (if 1 as libc::c_int != 0 {
...   |
696 | | ...                       }) + 0 as libc::c_int as idx_t
697 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:690:37
    |
690 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:692:37
    |
692 | / ...                   (if 1 as libc::c_int != 0 {
693 | | ...                       0 as libc::c_int as libc::c_long
694 | | ...                   } else {
695 | | ...                       s
696 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:693:41
    |
693 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:696:42
    |
696 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:697:38
    |
697 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:698:34
    |
698 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:700:33
    |
700 | / ...                   (((if 1 as libc::c_int != 0 {
701 | | ...                       0 as libc::c_int as libc::c_long
702 | | ...                   } else {
703 | | ...                       s
...   |
740 | | ...                           }) - 1 as libc::c_int as libc::c_long
741 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
700 ~                                 i32::from(((if 1 as libc::c_int != 0 {
701 +                                     0 as libc::c_int as libc::c_long
702 +                                 } else {
703 +                                     s
704 +                                 }) + 0 as libc::c_int as idx_t)
705 +                                     < -(if ((if 1 as libc::c_int != 0 {
706 +                                         0 as libc::c_int as libc::c_long
707 +                                     } else {
708 +                                         (if 1 as libc::c_int != 0 {
709 +                                             0 as libc::c_int as libc::c_long
710 +                                         } else {
711 +                                             s
712 +                                         }) + 0 as libc::c_int as idx_t
713 +                                     }) - 1 as libc::c_int as libc::c_long)
714 +                                         < 0 as libc::c_int as libc::c_long
715 +                                     {
716 +                                         ((((if 1 as libc::c_int != 0 {
717 +                                             0 as libc::c_int as libc::c_long
718 +                                         } else {
719 +                                             (if 1 as libc::c_int != 0 {
720 +                                                 0 as libc::c_int as libc::c_long
721 +                                             } else {
722 +                                                 s
723 +                                             }) + 0 as libc::c_int as idx_t
724 +                                         }) + 1 as libc::c_int as libc::c_long)
725 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
726 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
727 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
728 +                                             - 1 as libc::c_int as libc::c_long)
729 +                                             * 2 as libc::c_int as libc::c_long
730 +                                             + 1 as libc::c_int as libc::c_long
731 +                                     } else {
732 +                                         (if 1 as libc::c_int != 0 {
733 +                                             0 as libc::c_int as libc::c_long
734 +                                         } else {
735 +                                             (if 1 as libc::c_int != 0 {
736 +                                                 0 as libc::c_int as libc::c_long
737 +                                             } else {
738 +                                                 s
739 +                                             }) + 0 as libc::c_int as idx_t
740 +                                         }) - 1 as libc::c_int as libc::c_long
741 +                                     }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:700:35
    |
700 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
701 | | ...                       0 as libc::c_int as libc::c_long
702 | | ...                   } else {
703 | | ...                       s
704 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:701:37
    |
701 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:704:38
    |
704 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:705:45
    |
705 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
706 | | ...                       0 as libc::c_int as libc::c_long
707 | | ...                   } else {
708 | | ...                       (if 1 as libc::c_int != 0 {
...   |
712 | | ...                       }) + 0 as libc::c_int as idx_t
713 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:706:41
    |
706 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:708:41
    |
708 | / ...                   (if 1 as libc::c_int != 0 {
709 | | ...                       0 as libc::c_int as libc::c_long
710 | | ...                   } else {
711 | | ...                       s
712 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:709:45
    |
709 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:712:46
    |
712 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:713:42
    |
713 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:714:43
    |
714 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:716:44
    |
716 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
717 | | ...                       0 as libc::c_int as libc::c_long
718 | | ...                   } else {
719 | | ...                       (if 1 as libc::c_int != 0 {
...   |
723 | | ...                       }) + 0 as libc::c_int as idx_t
724 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:717:45
    |
717 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:719:45
    |
719 | / ...                   (if 1 as libc::c_int != 0 {
720 | | ...                       0 as libc::c_int as libc::c_long
721 | | ...                   } else {
722 | | ...                       s
723 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:720:49
    |
720 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:723:50
    |
723 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:724:46
    |
724 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:726:63
    |
726 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:727:63
    |
727 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:728:47
    |
728 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:729:47
    |
729 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:730:47
    |
730 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:732:41
    |
732 | / ...                   (if 1 as libc::c_int != 0 {
733 | | ...                       0 as libc::c_int as libc::c_long
734 | | ...                   } else {
735 | | ...                       (if 1 as libc::c_int != 0 {
...   |
739 | | ...                       }) + 0 as libc::c_int as idx_t
740 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:733:45
    |
733 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:735:45
    |
735 | / ...                   (if 1 as libc::c_int != 0 {
736 | | ...                       0 as libc::c_int as libc::c_long
737 | | ...                   } else {
738 | | ...                       s
739 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:736:49
    |
736 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:739:50
    |
739 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:740:46
    |
740 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:743:33
    |
743 | / ...                   ((0 as libc::c_int as libc::c_long)
744 | | ...                       < (if 1 as libc::c_int != 0 {
745 | | ...                           0 as libc::c_int as libc::c_long
746 | | ...                       } else {
747 | | ...                           s
748 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
743 ~                                 i32::from((0 as libc::c_int as libc::c_long)
744 +                                     < (if 1 as libc::c_int != 0 {
745 +                                         0 as libc::c_int as libc::c_long
746 +                                     } else {
747 +                                         s
748 +                                     }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:743:34
    |
743 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:744:39
    |
744 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
745 | | ...                       0 as libc::c_int as libc::c_long
746 | | ...                   } else {
747 | | ...                       s
748 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:745:41
    |
745 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:748:42
    |
748 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:749:45
    |
749 | ...                   }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:751:37
    |
751 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
752 | | ...                       0 as libc::c_int as libc::c_long
753 | | ...                   } else {
754 | | ...                       n
755 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:752:37
    |
752 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:755:38
    |
755 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:756:39
    |
756 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:758:37
    |
758 | / ...                   ((0 as libc::c_int as libc::c_long)
759 | | ...                       < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
758 ~                                     i32::from((0 as libc::c_int as libc::c_long)
759 +                                         < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:758:38
    |
758 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:759:47
    |
759 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:761:37
    |
761 | / ...                   ((0 as libc::c_int as libc::c_long) < n
762 | | ...                       && (-(1 as libc::c_int) as libc::c_long
763 | | ...                           - 0 as libc::c_int as idx_t)
764 | | ...                           < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |____________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
761 ~                                     i32::from((0 as libc::c_int as libc::c_long) < n
762 +                                         && (-(1 as libc::c_int) as libc::c_long
763 +                                             - 0 as libc::c_int as idx_t)
764 +                                             < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:761:38
    |
761 | ...                   ((0 as libc::c_int as libc::c_long) < n
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:762:45
    |
762 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:763:47
    |
763 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:764:51
    |
764 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:767:33
    |
767 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:767:34
    |
767 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:771:33
    |
771 |                         if s == 0 as libc::c_int as libc::c_long {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:774:36
    |
774 | ...                   if n < 0 as libc::c_int as libc::c_long {
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:775:45
    |
775 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
776 | | ...                       0 as libc::c_int as libc::c_long
777 | | ...                   } else {
778 | | ...                       (if 1 as libc::c_int != 0 {
...   |
782 | | ...                       }) + 0 as libc::c_int as idx_t
783 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:776:37
    |
776 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:778:37
    |
778 | / ...                   (if 1 as libc::c_int != 0 {
779 | | ...                       0 as libc::c_int as libc::c_long
780 | | ...                   } else {
781 | | ...                       n
782 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:779:41
    |
779 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:782:42
    |
782 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:783:38
    |
783 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:784:39
    |
784 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:786:42
    |
786 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
787 | | ...                       0 as libc::c_int as libc::c_long
788 | | ...                   } else {
789 | | ...                       (if 1 as libc::c_int != 0 {
...   |
793 | | ...                       }) + 0 as libc::c_int as idx_t
794 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:787:41
    |
787 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:789:41
    |
789 | / ...                   (if 1 as libc::c_int != 0 {
790 | | ...                       0 as libc::c_int as libc::c_long
791 | | ...                   } else {
792 | | ...                       n
793 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:790:45
    |
790 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:793:46
    |
793 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:794:42
    |
794 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:796:59
    |
796 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:797:59
    |
797 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:798:43
    |
798 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:799:43
    |
799 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:800:43
    |
800 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:802:37
    |
802 | / ...                   (if 1 as libc::c_int != 0 {
803 | | ...                       0 as libc::c_int as libc::c_long
804 | | ...                   } else {
805 | | ...                       (if 1 as libc::c_int != 0 {
...   |
809 | | ...                       }) + 0 as libc::c_int as idx_t
810 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:803:41
    |
803 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:805:41
    |
805 | / ...                   (if 1 as libc::c_int != 0 {
806 | | ...                       0 as libc::c_int as libc::c_long
807 | | ...                   } else {
808 | | ...                       n
809 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:806:45
    |
806 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:809:46
    |
809 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:810:42
    |
810 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:811:38
    |
811 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:813:37
    |
813 | / ...                   (((if 1 as libc::c_int != 0 {
814 | | ...                       0 as libc::c_int as libc::c_long
815 | | ...                   } else {
816 | | ...                       n
...   |
853 | | ...                           }) - 1 as libc::c_int as libc::c_long
854 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
813 ~                                     i32::from(((if 1 as libc::c_int != 0 {
814 +                                         0 as libc::c_int as libc::c_long
815 +                                     } else {
816 +                                         n
817 +                                     }) + 0 as libc::c_int as idx_t)
818 +                                         < -(if ((if 1 as libc::c_int != 0 {
819 +                                             0 as libc::c_int as libc::c_long
820 +                                         } else {
821 +                                             (if 1 as libc::c_int != 0 {
822 +                                                 0 as libc::c_int as libc::c_long
823 +                                             } else {
824 +                                                 n
825 +                                             }) + 0 as libc::c_int as idx_t
826 +                                         }) - 1 as libc::c_int as libc::c_long)
827 +                                             < 0 as libc::c_int as libc::c_long
828 +                                         {
829 +                                             ((((if 1 as libc::c_int != 0 {
830 +                                                 0 as libc::c_int as libc::c_long
831 +                                             } else {
832 +                                                 (if 1 as libc::c_int != 0 {
833 +                                                     0 as libc::c_int as libc::c_long
834 +                                                 } else {
835 +                                                     n
836 +                                                 }) + 0 as libc::c_int as idx_t
837 +                                             }) + 1 as libc::c_int as libc::c_long)
838 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
839 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
840 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
841 +                                                 - 1 as libc::c_int as libc::c_long)
842 +                                                 * 2 as libc::c_int as libc::c_long
843 +                                                 + 1 as libc::c_int as libc::c_long
844 +                                         } else {
845 +                                             (if 1 as libc::c_int != 0 {
846 +                                                 0 as libc::c_int as libc::c_long
847 +                                             } else {
848 +                                                 (if 1 as libc::c_int != 0 {
849 +                                                     0 as libc::c_int as libc::c_long
850 +                                                 } else {
851 +                                                     n
852 +                                                 }) + 0 as libc::c_int as idx_t
853 +                                             }) - 1 as libc::c_int as libc::c_long
854 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:813:39
    |
813 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
814 | | ...                       0 as libc::c_int as libc::c_long
815 | | ...                   } else {
816 | | ...                       n
817 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:814:41
    |
814 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:817:42
    |
817 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:818:49
    |
818 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
819 | | ...                       0 as libc::c_int as libc::c_long
820 | | ...                   } else {
821 | | ...                       (if 1 as libc::c_int != 0 {
...   |
825 | | ...                       }) + 0 as libc::c_int as idx_t
826 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:819:45
    |
819 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:821:45
    |
821 | / ...                   (if 1 as libc::c_int != 0 {
822 | | ...                       0 as libc::c_int as libc::c_long
823 | | ...                   } else {
824 | | ...                       n
825 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:822:49
    |
822 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:825:50
    |
825 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:826:46
    |
826 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:827:47
    |
827 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:829:48
    |
829 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
830 | | ...                       0 as libc::c_int as libc::c_long
831 | | ...                   } else {
832 | | ...                       (if 1 as libc::c_int != 0 {
...   |
836 | | ...                       }) + 0 as libc::c_int as idx_t
837 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:830:49
    |
830 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:832:49
    |
832 | / ...                   (if 1 as libc::c_int != 0 {
833 | | ...                       0 as libc::c_int as libc::c_long
834 | | ...                   } else {
835 | | ...                       n
836 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:833:53
    |
833 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:836:54
    |
836 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:837:50
    |
837 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:839:67
    |
839 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:840:67
    |
840 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:841:51
    |
841 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:842:51
    |
842 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:843:51
    |
843 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:845:45
    |
845 | / ...                   (if 1 as libc::c_int != 0 {
846 | | ...                       0 as libc::c_int as libc::c_long
847 | | ...                   } else {
848 | | ...                       (if 1 as libc::c_int != 0 {
...   |
852 | | ...                       }) + 0 as libc::c_int as idx_t
853 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:846:49
    |
846 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:848:49
    |
848 | / ...                   (if 1 as libc::c_int != 0 {
849 | | ...                       0 as libc::c_int as libc::c_long
850 | | ...                   } else {
851 | | ...                       n
852 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:849:53
    |
849 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:852:54
    |
852 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:853:50
    |
853 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:856:37
    |
856 | / ...                   ((0 as libc::c_int as libc::c_long)
857 | | ...                       < (if 1 as libc::c_int != 0 {
858 | | ...                           0 as libc::c_int as libc::c_long
859 | | ...                       } else {
860 | | ...                           n
861 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
856 ~                                     i32::from((0 as libc::c_int as libc::c_long)
857 +                                         < (if 1 as libc::c_int != 0 {
858 +                                             0 as libc::c_int as libc::c_long
859 +                                         } else {
860 +                                             n
861 +                                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:856:38
    |
856 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:857:43
    |
857 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
858 | | ...                       0 as libc::c_int as libc::c_long
859 | | ...                   } else {
860 | | ...                       n
861 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:858:45
    |
858 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:861:46
    |
861 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:862:49
    |
862 | ...                   }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:864:41
    |
864 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
865 | | ...                       0 as libc::c_int as libc::c_long
866 | | ...                   } else {
867 | | ...                       s
868 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:865:41
    |
865 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:868:42
    |
868 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:869:43
    |
869 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:871:41
    |
871 | / ...                   ((0 as libc::c_int as libc::c_long)
872 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
871 ~                                         i32::from((0 as libc::c_int as libc::c_long)
872 +                                             < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:871:42
    |
871 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:872:51
    |
872 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:874:41
    |
874 | / ...                   ((-(1 as libc::c_int) as libc::c_long
875 | | ...                       - 0 as libc::c_int as idx_t)
876 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
874 ~                                         i32::from((-(1 as libc::c_int) as libc::c_long
875 +                                             - 0 as libc::c_int as idx_t)
876 +                                             < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:874:43
    |
874 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:875:47
    |
875 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:876:51
    |
876 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:879:37
    |
879 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:879:38
    |
879 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:882:33
    |
882 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:882:34
    |
882 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:888:22
    |
888 |                     *(&mut nbytes as *mut idx_t) = fresh18;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:892:22
    |
892 |                     *(&mut nbytes as *mut idx_t) = fresh20;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:893:21
    |
893 |                     fresh21 as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh21)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:899:23
    |
899 |     pa = xrealloc(pa, nbytes as size_t);
    |                       ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:904:1
    |
904 | / pub unsafe extern "C" fn xzalloc(mut s: size_t) -> *mut libc::c_void {
905 | |     return xcalloc(s, 1 as libc::c_int as size_t);
906 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:905:5
    |
905 |     return xcalloc(s, 1 as libc::c_int as size_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xcalloc(s, 1 as libc::c_int as size_t)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:905:23
    |
905 |     return xcalloc(s, 1 as libc::c_int as size_t);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:908:1
    |
908 | / pub unsafe extern "C" fn xizalloc(mut s: idx_t) -> *mut libc::c_void {
909 | |     return xicalloc(s, 1 as libc::c_int as idx_t);
910 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:909:5
    |
909 |     return xicalloc(s, 1 as libc::c_int as idx_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xicalloc(s, 1 as libc::c_int as idx_t)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:909:24
    |
909 |     return xicalloc(s, 1 as libc::c_int as idx_t);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:912:1
    |
912 | / pub unsafe extern "C" fn xcalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
913 | |     return check_nonnull(calloc(n, s));
914 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:913:5
    |
913 |     return check_nonnull(calloc(n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(calloc(n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:916:1
    |
916 | / pub unsafe extern "C" fn xicalloc(mut n: idx_t, mut s: idx_t) -> *mut libc::c_void {
917 | |     return check_nonnull(icalloc(n, s));
918 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:917:5
    |
917 |     return check_nonnull(icalloc(n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(icalloc(n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:920:1
    |
920 | / pub unsafe extern "C" fn xmemdup(
921 | |     mut p: *const libc::c_void,
922 | |     mut s: size_t,
923 | | ) -> *mut libc::c_void {
924 | |     return memcpy(xmalloc(s), p, s);
925 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:924:5
    |
924 |     return memcpy(xmalloc(s), p, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `memcpy(xmalloc(s), p, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:927:1
    |
927 | / pub unsafe extern "C" fn ximemdup(
928 | |     mut p: *const libc::c_void,
929 | |     mut s: idx_t,
930 | | ) -> *mut libc::c_void {
931 | |     return memcpy(ximalloc(s), p, s as libc::c_ulong);
932 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:931:5
    |
931 |     return memcpy(ximalloc(s), p, s as libc::c_ulong);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `memcpy(ximalloc(s), p, s as libc::c_ulong)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:931:35
    |
931 |     return memcpy(ximalloc(s), p, s as libc::c_ulong);
    |                                   ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:934:1
    |
934 | / pub unsafe extern "C" fn ximemdup0(
935 | |     mut p: *const libc::c_void,
936 | |     mut s: idx_t,
937 | | ) -> *mut libc::c_char {
...   |
942 | |         as *mut libc::c_char;
943 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:941:5
    |
941 | /     return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
942 | |         as *mut libc::c_char;
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
941 ~     memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
942 +         as *mut libc::c_char
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:938:41
    |
938 |       let mut result: *mut libc::c_char = ximalloc(s + 1 as libc::c_int as libc::c_long)
    |  _________________________________________^
939 | |         as *mut libc::c_char;
    | |____________________________^ help: try `pointer::cast`, a safer alternative: `ximalloc(s + 1 as libc::c_int as libc::c_long).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:938:54
    |
938 |     let mut result: *mut libc::c_char = ximalloc(s + 1 as libc::c_int as libc::c_long)
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/xmalloc.rs:940:34
    |
940 |     *result.offset(s as isize) = 0 as libc::c_int as libc::c_char;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/xmalloc.rs:940:20
    |
940 |     *result.offset(s as isize) = 0 as libc::c_int as libc::c_char;
    |                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:941:12
    |
941 |       return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
    |  ____________^
942 | |         as *mut libc::c_char;
    | |____________________________^ help: try `pointer::cast`, a safer alternative: `memcpy(result as *mut libc::c_void, p, s as libc::c_ulong).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:941:19
    |
941 |     return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:941:51
    |
941 |     return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
    |                                                   ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:945:1
    |
945 | / pub unsafe extern "C" fn xstrdup(mut string: *const libc::c_char) -> *mut libc::c_char {
946 | |     return xmemdup(
947 | |         string as *const libc::c_void,
948 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 | |     ) as *mut libc::c_char;
950 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:946:5
    |
946 | /     return xmemdup(
947 | |         string as *const libc::c_void,
948 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 | |     ) as *mut libc::c_char;
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
946 ~     xmemdup(
947 +         string as *const libc::c_void,
948 +         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 +     ) as *mut libc::c_char
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:946:12
    |
946 |       return xmemdup(
    |  ____________^
947 | |         string as *const libc::c_void,
948 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 | |     ) as *mut libc::c_char;
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
946 ~     return xmemdup(
947 +         string as *const libc::c_void,
948 +         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 ~     ).cast::<i8>();
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:947:9
    |
947 |         string as *const libc::c_void,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `string.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:948:39
    |
948 |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: the function has a cognitive complexity of (65/25)
  --> src/xstrtoimax.rs:39:22
   |
39 | unsafe extern "C" fn bkm_scale(
   |                      ^^^^^^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (343/100)
   --> src/xstrtoimax.rs:39:1
    |
39  | / unsafe extern "C" fn bkm_scale(
40  | |     mut x: *mut intmax_t,
41  | |     mut scale_factor: libc::c_int,
42  | | ) -> strtol_error {
...   |
385 | |     return LONGINT_OK;
386 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoimax.rs:385:5
    |
385 |     return LONGINT_OK;
    |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `LONGINT_OK`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:44:11
   |
44 |     if if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:44:44
   |
44 |     if if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:45:13
   |
45 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { *x })
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:45:41
   |
45 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { *x })
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:46:15
   |
46 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:46:51
   |
46 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:47:13
   |
47 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:50:21
   |
50 |             if *x < 0 as libc::c_int as libc::c_long {
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:51:21
   |
51 |                   if ((if 1 as libc::c_int != 0 {
   |  _____________________^
52 | |                     0 as libc::c_int as libc::c_long
53 | |                 } else {
54 | |                     (if 1 as libc::c_int != 0 {
...  |
58 | |                     }) + scale_factor as libc::c_long
59 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   | |__________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:52:21
   |
52 |                     0 as libc::c_int as libc::c_long
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:54:21
   |
54 | /                     (if 1 as libc::c_int != 0 {
55 | |                         0 as libc::c_int as libc::c_long
56 | |                     } else {
57 | |                         -(1 as libc::c_int) as intmax_t
58 | |                     }) + scale_factor as libc::c_long
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:55:25
   |
55 |                         0 as libc::c_int as libc::c_long
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:57:25
   |
57 |                         -(1 as libc::c_int) as intmax_t
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:58:26
   |
58 |                     }) + scale_factor as libc::c_long
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:59:22
   |
59 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:59:58
   |
59 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xstrtoimax.rs:61:21
   |
61 | /                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
62 | |                         as libc::c_int
   | |______________________________________^ help: try: `i32::from(*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:61:27
   |
61 |                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:61:61
   |
61 |                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:64:21
    |
64  | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
65  | |                         0 as libc::c_int
66  | |                     } else {
67  | |                         scale_factor
...   |
123 | |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
124 | |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    | |__________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
64  ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
65  +                         0 as libc::c_int
66  +                     } else {
67  +                         scale_factor
68  +                     }) - 1 as libc::c_int) < 0 as libc::c_int
69  +                     {
70  +                         !(((((if 1 as libc::c_int != 0 {
71  +                             0 as libc::c_int
72  +                         } else {
73  +                             scale_factor
74  +                         }) + 1 as libc::c_int)
75  +                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
76  +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
77  +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
78  +                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
79  +                     } else {
80  +                         (if 1 as libc::c_int != 0 {
81  +                             0 as libc::c_int
82  +                         } else {
83  +                             scale_factor
84  +                         }) + 0 as libc::c_int
85  +                     }) < 0 as libc::c_int
86  +                     {
87  +                         (scale_factor
88  +                             < -(if ((if 1 as libc::c_int != 0 {
89  +                                 0 as libc::c_int
90  +                             } else {
91  +                                 scale_factor
92  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
93  +                             {
94  +                                 ((((if 1 as libc::c_int != 0 {
95  +                                     0 as libc::c_int
96  +                                 } else {
97  +                                     scale_factor
98  +                                 }) + 1 as libc::c_int)
99  +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
100 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
101 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
102 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
103 +                             } else {
104 +                                 (if 1 as libc::c_int != 0 {
105 +                                     0 as libc::c_int
106 +                                 } else {
107 +                                     scale_factor
108 +                                 }) - 1 as libc::c_int
109 +                             })) as libc::c_int
110 +                     } else {
111 +                         ((0 as libc::c_int) < scale_factor) as libc::c_int
112 +                     }) != 0
113 +                     {
114 +                         (if 1 as libc::c_int != 0 {
115 +                             0 as libc::c_int
116 +                         } else {
117 +                             scale_factor
118 +                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
119 +                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
120 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
121 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
122 +                     } else {
123 +                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
124 +                     }) <= -(1 as libc::c_int) as libc::c_long - *x)
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:64:22
    |
64  |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
65  | |                         0 as libc::c_int
66  | |                     } else {
67  | |                         scale_factor
...   |
123 | |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
124 | |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:64:35
   |
64 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
   |  ___________________________________^
65 | |                         0 as libc::c_int
66 | |                     } else {
67 | |                         scale_factor
68 | |                     }) - 1 as libc::c_int) < 0 as libc::c_int
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:70:30
   |
70 |                           !(((((if 1 as libc::c_int != 0 {
   |  ______________________________^
71 | |                             0 as libc::c_int
72 | |                         } else {
73 | |                             scale_factor
74 | |                         }) + 1 as libc::c_int)
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoimax.rs:76:47
   |
76 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoimax.rs:77:47
   |
77 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:80:25
   |
80 | /                         (if 1 as libc::c_int != 0 {
81 | |                             0 as libc::c_int
82 | |                         } else {
83 | |                             scale_factor
84 | |                         }) + 0 as libc::c_int
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:87:25
    |
87  | /                         (scale_factor
88  | |                             < -(if ((if 1 as libc::c_int != 0 {
89  | |                                 0 as libc::c_int
90  | |                             } else {
...   |
108 | |                                 }) - 1 as libc::c_int
109 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
87  ~                         i32::from(scale_factor
88  +                             < -(if ((if 1 as libc::c_int != 0 {
89  +                                 0 as libc::c_int
90  +                             } else {
91  +                                 scale_factor
92  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
93  +                             {
94  +                                 ((((if 1 as libc::c_int != 0 {
95  +                                     0 as libc::c_int
96  +                                 } else {
97  +                                     scale_factor
98  +                                 }) + 1 as libc::c_int)
99  +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
100 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
101 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
102 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
103 +                             } else {
104 +                                 (if 1 as libc::c_int != 0 {
105 +                                     0 as libc::c_int
106 +                                 } else {
107 +                                     scale_factor
108 +                                 }) - 1 as libc::c_int
109 +                             }))
    |

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:88:37
   |
88 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
   |  _______________________________^
89 | | ...                       0 as libc::c_int
90 | | ...                   } else {
91 | | ...                       scale_factor
92 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
   | |________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:94:36
   |
94 |   ...                   ((((if 1 as libc::c_int != 0 {
   |  __________________________^
95 | | ...                       0 as libc::c_int
96 | | ...                   } else {
97 | | ...                       scale_factor
98 | | ...                   }) + 1 as libc::c_int)
   | |________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:100:55
    |
100 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:101:55
    |
101 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:104:33
    |
104 | / ...                   (if 1 as libc::c_int != 0 {
105 | | ...                       0 as libc::c_int
106 | | ...                   } else {
107 | | ...                       scale_factor
108 | | ...                   }) - 1 as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:111:25
    |
111 |                         ((0 as libc::c_int) < scale_factor) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:114:25
    |
114 | /                         (if 1 as libc::c_int != 0 {
115 | |                             0 as libc::c_int
116 | |                         } else {
117 | |                             scale_factor
118 | |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
114 ~                         i64::from((if 1 as libc::c_int != 0 {
115 +                             0 as libc::c_int
116 +                         } else {
117 +                             scale_factor
118 ~                         })) + -(1 as libc::c_int) as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:114:25
    |
114 | /                         (if 1 as libc::c_int != 0 {
115 | |                             0 as libc::c_int
116 | |                         } else {
117 | |                             scale_factor
118 | |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:118:46
    |
118 |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:120:47
    |
120 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:121:47
    |
121 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:123:25
    |
123 |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:123:59
    |
123 |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:124:27
    |
124 |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:127:29
    |
127 |                   if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
128 | |                     0 as libc::c_int as libc::c_long
129 | |                 } else {
130 | |                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
131 | |                         as libc::c_long + 0 as libc::c_int as intmax_t
132 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:128:21
    |
128 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:130:21
    |
130 | /                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
131 | |                         as libc::c_long + 0 as libc::c_int as intmax_t
    | |_______________________________________^ help: try: `i64::from((if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor }))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:130:21
    |
130 |                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:131:43
    |
131 |                         as libc::c_long + 0 as libc::c_int as intmax_t
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:132:22
    |
132 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:132:58
    |
132 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:134:26
    |
134 |                       !(((((if 1 as libc::c_int != 0 {
    |  __________________________^
135 | |                         0 as libc::c_int as libc::c_long
136 | |                     } else {
137 | |                         (if 1 as libc::c_int != 0 {
...   |
141 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
142 | |                     }) + 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:135:25
    |
135 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:137:25
    |
137 | /                         (if 1 as libc::c_int != 0 {
138 | |                             0 as libc::c_int
139 | |                         } else {
140 | |                             scale_factor
141 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
137 ~                         i64::from((if 1 as libc::c_int != 0 {
138 +                             0 as libc::c_int
139 +                         } else {
140 +                             scale_factor
141 ~                         })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:137:25
    |
137 | /                         (if 1 as libc::c_int != 0 {
138 | |                             0 as libc::c_int
139 | |                         } else {
140 | |                             scale_factor
141 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:141:46
    |
141 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:142:26
    |
142 |                     }) + 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:144:43
    |
144 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:145:43
    |
145 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:146:27
    |
146 |                         - 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:147:27
    |
147 |                         * 2 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:148:27
    |
148 |                         + 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:150:21
    |
150 | /                     (if 1 as libc::c_int != 0 {
151 | |                         0 as libc::c_int as libc::c_long
152 | |                     } else {
153 | |                         (if 1 as libc::c_int != 0 {
...   |
157 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
158 | |                     }) + 0 as libc::c_int as libc::c_long
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:151:25
    |
151 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:153:25
    |
153 | /                         (if 1 as libc::c_int != 0 {
154 | |                             0 as libc::c_int
155 | |                         } else {
156 | |                             scale_factor
157 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
153 ~                         i64::from((if 1 as libc::c_int != 0 {
154 +                             0 as libc::c_int
155 +                         } else {
156 +                             scale_factor
157 ~                         })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:153:25
    |
153 | /                         (if 1 as libc::c_int != 0 {
154 | |                             0 as libc::c_int
155 | |                         } else {
156 | |                             scale_factor
157 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:157:46
    |
157 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:158:26
    |
158 |                     }) + 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:159:22
    |
159 |                 }) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:161:21
    |
161 | /                     (((if 1 as libc::c_int != 0 {
162 | |                         0 as libc::c_int
163 | |                     } else {
164 | |                         scale_factor
...   |
201 | |                             }) - 1 as libc::c_int as libc::c_long
202 | |                         })) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
161 ~                     i32::from(((if 1 as libc::c_int != 0 {
162 +                         0 as libc::c_int
163 +                     } else {
164 +                         scale_factor
165 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
166 +                         < -(if ((if 1 as libc::c_int != 0 {
167 +                             0 as libc::c_int as libc::c_long
168 +                         } else {
169 +                             (if 1 as libc::c_int != 0 {
170 +                                 0 as libc::c_int
171 +                             } else {
172 +                                 scale_factor
173 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
174 +                         }) - 1 as libc::c_int as libc::c_long)
175 +                             < 0 as libc::c_int as libc::c_long
176 +                         {
177 +                             ((((if 1 as libc::c_int != 0 {
178 +                                 0 as libc::c_int as libc::c_long
179 +                             } else {
180 +                                 (if 1 as libc::c_int != 0 {
181 +                                     0 as libc::c_int
182 +                                 } else {
183 +                                     scale_factor
184 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
185 +                             }) + 1 as libc::c_int as libc::c_long)
186 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
187 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
188 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
189 +                                 - 1 as libc::c_int as libc::c_long)
190 +                                 * 2 as libc::c_int as libc::c_long
191 +                                 + 1 as libc::c_int as libc::c_long
192 +                         } else {
193 +                             (if 1 as libc::c_int != 0 {
194 +                                 0 as libc::c_int as libc::c_long
195 +                             } else {
196 +                                 (if 1 as libc::c_int != 0 {
197 +                                     0 as libc::c_int
198 +                                 } else {
199 +                                     scale_factor
200 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
201 +                             }) - 1 as libc::c_int as libc::c_long
202 +                         }))
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:161:23
    |
161 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
162 | |                         0 as libc::c_int
163 | |                     } else {
164 | |                         scale_factor
165 | |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    | |______________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
161 ~                     ((i64::from((if 1 as libc::c_int != 0 {
162 +                         0 as libc::c_int
163 +                     } else {
164 +                         scale_factor
165 ~                     })) + 0 as libc::c_int as intmax_t)
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:161:23
    |
161 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
162 | |                         0 as libc::c_int
163 | |                     } else {
164 | |                         scale_factor
165 | |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:165:42
    |
165 |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:166:33
    |
166 |                           < -(if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
167 | |                             0 as libc::c_int as libc::c_long
168 | |                         } else {
169 | |                             (if 1 as libc::c_int != 0 {
...   |
173 | |                             }) as libc::c_long + 0 as libc::c_int as intmax_t
174 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:167:29
    |
167 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:169:29
    |
169 | / ...                   (if 1 as libc::c_int != 0 {
170 | | ...                       0 as libc::c_int
171 | | ...                   } else {
172 | | ...                       scale_factor
173 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
169 ~                             i64::from((if 1 as libc::c_int != 0 {
170 +                                 0 as libc::c_int
171 +                             } else {
172 +                                 scale_factor
173 ~                             })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:169:29
    |
169 | / ...                   (if 1 as libc::c_int != 0 {
170 | | ...                       0 as libc::c_int
171 | | ...                   } else {
172 | | ...                       scale_factor
173 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:173:50
    |
173 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:174:30
    |
174 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:175:31
    |
175 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:177:32
    |
177 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
178 | | ...                       0 as libc::c_int as libc::c_long
179 | | ...                   } else {
180 | | ...                       (if 1 as libc::c_int != 0 {
...   |
184 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
185 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:178:33
    |
178 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:180:33
    |
180 | / ...                   (if 1 as libc::c_int != 0 {
181 | | ...                       0 as libc::c_int
182 | | ...                   } else {
183 | | ...                       scale_factor
184 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
180 ~                                 i64::from((if 1 as libc::c_int != 0 {
181 +                                     0 as libc::c_int
182 +                                 } else {
183 +                                     scale_factor
184 ~                                 })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:180:33
    |
180 | / ...                   (if 1 as libc::c_int != 0 {
181 | | ...                       0 as libc::c_int
182 | | ...                   } else {
183 | | ...                       scale_factor
184 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:184:54
    |
184 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:185:34
    |
185 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:187:51
    |
187 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:188:51
    |
188 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:189:35
    |
189 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:190:35
    |
190 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:191:35
    |
191 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:193:29
    |
193 | / ...                   (if 1 as libc::c_int != 0 {
194 | | ...                       0 as libc::c_int as libc::c_long
195 | | ...                   } else {
196 | | ...                       (if 1 as libc::c_int != 0 {
...   |
200 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
201 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:194:33
    |
194 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:196:33
    |
196 | / ...                   (if 1 as libc::c_int != 0 {
197 | | ...                       0 as libc::c_int
198 | | ...                   } else {
199 | | ...                       scale_factor
200 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
196 ~                                 i64::from((if 1 as libc::c_int != 0 {
197 +                                     0 as libc::c_int
198 +                                 } else {
199 +                                     scale_factor
200 ~                                 })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:196:33
    |
196 | / ...                   (if 1 as libc::c_int != 0 {
197 | | ...                       0 as libc::c_int
198 | | ...                   } else {
199 | | ...                       scale_factor
200 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:200:54
    |
200 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:201:34
    |
201 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:204:21
    |
204 | /                     ((0 as libc::c_int as libc::c_long)
205 | |                         < (if 1 as libc::c_int != 0 {
206 | |                             0 as libc::c_int
207 | |                         } else {
208 | |                             scale_factor
209 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
204 ~                     i32::from((0 as libc::c_int as libc::c_long)
205 +                         < (if 1 as libc::c_int != 0 {
206 +                             0 as libc::c_int
207 +                         } else {
208 +                             scale_factor
209 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:204:22
    |
204 |                     ((0 as libc::c_int as libc::c_long)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:205:27
    |
205 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
206 | |                             0 as libc::c_int
207 | |                         } else {
208 | |                             scale_factor
209 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
205 ~                         < i64::from((if 1 as libc::c_int != 0 {
206 +                             0 as libc::c_int
207 +                         } else {
208 +                             scale_factor
209 ~                         })) + 0 as libc::c_int as intmax_t) as libc::c_int
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:205:27
    |
205 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
206 | |                             0 as libc::c_int
207 | |                         } else {
208 | |                             scale_factor
209 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:209:46
    |
209 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:212:25
    |
212 |                       if ((if 1 as libc::c_int != 0 {
    |  _________________________^
213 | |                         0 as libc::c_int as libc::c_long
214 | |                     } else {
215 | |                         *x
216 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:213:25
    |
213 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:216:26
    |
216 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:217:27
    |
217 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:219:25
    |
219 | /                         ((0 as libc::c_int as libc::c_long)
220 | |                             < *x + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
219 ~                         i32::from((0 as libc::c_int as libc::c_long)
220 +                             < *x + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:219:26
    |
219 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:220:36
    |
220 | ...                   < *x + 0 as libc::c_int as intmax_t) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:222:25
    |
222 | /                         ((0 as libc::c_int as libc::c_long) < *x
223 | |                             && (-(1 as libc::c_int) as libc::c_long
224 | |                                 - 0 as libc::c_int as intmax_t)
225 | |                                 < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |_______________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
222 ~                         i32::from((0 as libc::c_int as libc::c_long) < *x
223 +                             && (-(1 as libc::c_int) as libc::c_long
224 +                                 - 0 as libc::c_int as intmax_t)
225 +                                 < *x - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:222:26
    |
222 |                         ((0 as libc::c_int as libc::c_long) < *x
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:223:33
    |
223 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:224:35
    |
224 | ...                   - 0 as libc::c_int as intmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:225:40
    |
225 | ...                   < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:228:21
    |
228 | /                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
229 | |                         as libc::c_int
    | |______________________________________^ help: try: `i32::from((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:228:23
    |
228 |                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:228:54
    |
228 |                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:236:25
    |
236 |                 if *x < 0 as libc::c_int as libc::c_long {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:237:33
    |
237 |                       if (if (if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
238 | |                         0 as libc::c_int as libc::c_long
239 | |                     } else {
240 | |                         (if 1 as libc::c_int != 0 {
...   |
244 | |                         }) + 0 as libc::c_int as intmax_t
245 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:238:25
    |
238 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:240:25
    |
240 | /                         (if 1 as libc::c_int != 0 {
241 | |                             0 as libc::c_int as libc::c_long
242 | |                         } else {
243 | |                             *x
244 | |                         }) + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:241:29
    |
241 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:244:30
    |
244 |                         }) + 0 as libc::c_int as intmax_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:245:26
    |
245 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:246:27
    |
246 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:248:30
    |
248 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
249 | |                             0 as libc::c_int as libc::c_long
250 | |                         } else {
251 | |                             (if 1 as libc::c_int != 0 {
...   |
255 | |                             }) + 0 as libc::c_int as intmax_t
256 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:249:29
    |
249 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:251:29
    |
251 | / ...                   (if 1 as libc::c_int != 0 {
252 | | ...                       0 as libc::c_int as libc::c_long
253 | | ...                   } else {
254 | | ...                       *x
255 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:252:33
    |
252 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:255:34
    |
255 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:256:30
    |
256 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:258:47
    |
258 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:259:47
    |
259 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:260:31
    |
260 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:261:31
    |
261 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:262:31
    |
262 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:264:25
    |
264 | /                         (if 1 as libc::c_int != 0 {
265 | |                             0 as libc::c_int as libc::c_long
266 | |                         } else {
267 | |                             (if 1 as libc::c_int != 0 {
...   |
271 | |                             }) + 0 as libc::c_int as intmax_t
272 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:265:29
    |
265 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:267:29
    |
267 | / ...                   (if 1 as libc::c_int != 0 {
268 | | ...                       0 as libc::c_int as libc::c_long
269 | | ...                   } else {
270 | | ...                       *x
271 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:268:33
    |
268 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:271:34
    |
271 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:272:30
    |
272 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:273:26
    |
273 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:275:25
    |
275 | /                         (((if 1 as libc::c_int != 0 {
276 | |                             0 as libc::c_int as libc::c_long
277 | |                         } else {
278 | |                             *x
...   |
315 | |                                 }) - 1 as libc::c_int as libc::c_long
316 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
275 ~                         i32::from(((if 1 as libc::c_int != 0 {
276 +                             0 as libc::c_int as libc::c_long
277 +                         } else {
278 +                             *x
279 +                         }) + 0 as libc::c_int as intmax_t)
280 +                             < -(if ((if 1 as libc::c_int != 0 {
281 +                                 0 as libc::c_int as libc::c_long
282 +                             } else {
283 +                                 (if 1 as libc::c_int != 0 {
284 +                                     0 as libc::c_int as libc::c_long
285 +                                 } else {
286 +                                     *x
287 +                                 }) + 0 as libc::c_int as intmax_t
288 +                             }) - 1 as libc::c_int as libc::c_long)
289 +                                 < 0 as libc::c_int as libc::c_long
290 +                             {
291 +                                 ((((if 1 as libc::c_int != 0 {
292 +                                     0 as libc::c_int as libc::c_long
293 +                                 } else {
294 +                                     (if 1 as libc::c_int != 0 {
295 +                                         0 as libc::c_int as libc::c_long
296 +                                     } else {
297 +                                         *x
298 +                                     }) + 0 as libc::c_int as intmax_t
299 +                                 }) + 1 as libc::c_int as libc::c_long)
300 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
301 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
302 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
303 +                                     - 1 as libc::c_int as libc::c_long)
304 +                                     * 2 as libc::c_int as libc::c_long
305 +                                     + 1 as libc::c_int as libc::c_long
306 +                             } else {
307 +                                 (if 1 as libc::c_int != 0 {
308 +                                     0 as libc::c_int as libc::c_long
309 +                                 } else {
310 +                                     (if 1 as libc::c_int != 0 {
311 +                                         0 as libc::c_int as libc::c_long
312 +                                     } else {
313 +                                         *x
314 +                                     }) + 0 as libc::c_int as intmax_t
315 +                                 }) - 1 as libc::c_int as libc::c_long
316 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:275:27
    |
275 |                           (((if 1 as libc::c_int != 0 {
    |  ___________________________^
276 | |                             0 as libc::c_int as libc::c_long
277 | |                         } else {
278 | |                             *x
279 | |                         }) + 0 as libc::c_int as intmax_t)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:276:29
    |
276 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:279:30
    |
279 |                         }) + 0 as libc::c_int as intmax_t)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:280:37
    |
280 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
281 | | ...                       0 as libc::c_int as libc::c_long
282 | | ...                   } else {
283 | | ...                       (if 1 as libc::c_int != 0 {
...   |
287 | | ...                       }) + 0 as libc::c_int as intmax_t
288 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:281:33
    |
281 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:283:33
    |
283 | / ...                   (if 1 as libc::c_int != 0 {
284 | | ...                       0 as libc::c_int as libc::c_long
285 | | ...                   } else {
286 | | ...                       *x
287 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:284:37
    |
284 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:287:38
    |
287 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:288:34
    |
288 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:289:35
    |
289 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:291:36
    |
291 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
292 | | ...                       0 as libc::c_int as libc::c_long
293 | | ...                   } else {
294 | | ...                       (if 1 as libc::c_int != 0 {
...   |
298 | | ...                       }) + 0 as libc::c_int as intmax_t
299 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:292:37
    |
292 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:294:37
    |
294 | / ...                   (if 1 as libc::c_int != 0 {
295 | | ...                       0 as libc::c_int as libc::c_long
296 | | ...                   } else {
297 | | ...                       *x
298 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:295:41
    |
295 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:298:42
    |
298 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:299:38
    |
299 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:301:55
    |
301 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:302:55
    |
302 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:303:39
    |
303 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:304:39
    |
304 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:305:39
    |
305 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:307:33
    |
307 | / ...                   (if 1 as libc::c_int != 0 {
308 | | ...                       0 as libc::c_int as libc::c_long
309 | | ...                   } else {
310 | | ...                       (if 1 as libc::c_int != 0 {
...   |
314 | | ...                       }) + 0 as libc::c_int as intmax_t
315 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:308:37
    |
308 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:310:37
    |
310 | / ...                   (if 1 as libc::c_int != 0 {
311 | | ...                       0 as libc::c_int as libc::c_long
312 | | ...                   } else {
313 | | ...                       *x
314 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:311:41
    |
311 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:314:42
    |
314 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:315:38
    |
315 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:318:25
    |
318 | /                         ((0 as libc::c_int as libc::c_long)
319 | |                             < (if 1 as libc::c_int != 0 {
320 | |                                 0 as libc::c_int as libc::c_long
321 | |                             } else {
322 | |                                 *x
323 | |                             }) + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_____________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
318 ~                         i32::from((0 as libc::c_int as libc::c_long)
319 +                             < (if 1 as libc::c_int != 0 {
320 +                                 0 as libc::c_int as libc::c_long
321 +                             } else {
322 +                                 *x
323 +                             }) + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:318:26
    |
318 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:319:31
    |
319 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
320 | | ...                       0 as libc::c_int as libc::c_long
321 | | ...                   } else {
322 | | ...                       *x
323 | | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:320:33
    |
320 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:323:34
    |
323 | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:324:38
    |
324 |                     }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:326:29
    |
326 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
327 | |                             0 as libc::c_int
328 | |                         } else {
329 | |                             scale_factor
330 | |                         }) - 1 as libc::c_int) < 0 as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:332:29
    |
332 | / ...                   ((0 as libc::c_int as libc::c_long)
333 | | ...                       < scale_factor as libc::c_long
334 | | ...                           + 0 as libc::c_int as intmax_t) as libc::c_int
    | |____________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
332 ~                             i32::from((0 as libc::c_int as libc::c_long)
333 +                                 < scale_factor as libc::c_long
334 +                                     + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:332:30
    |
332 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:333:35
    |
333 | ...                   < scale_factor as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:334:39
    |
334 | ...                   + 0 as libc::c_int as intmax_t) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:336:29
    |
336 | / ...                   ((-(1 as libc::c_int) as libc::c_long
337 | | ...                       - 0 as libc::c_int as intmax_t)
338 | | ...                       < (scale_factor - 1 as libc::c_int) as libc::c_long)
339 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
336 ~                             i32::from((-(1 as libc::c_int) as libc::c_long
337 +                                 - 0 as libc::c_int as intmax_t)
338 +                                 < (scale_factor - 1 as libc::c_int) as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:336:31
    |
336 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:337:35
    |
337 | ...                   - 0 as libc::c_int as intmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:338:35
    |
338 | ...                   < (scale_factor - 1 as libc::c_int) as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:342:25
    |
342 | /                         (0 as libc::c_int as intmax_t / *x
343 | |                             < scale_factor as libc::c_long) as libc::c_int
    | |__________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
342 ~                         i32::from(0 as libc::c_int as intmax_t / *x
343 +                             < scale_factor as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:342:26
    |
342 |                         (0 as libc::c_int as intmax_t / *x
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:343:31
    |
343 | ...                   < scale_factor as libc::c_long) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:346:21
    |
346 | /                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
347 | |                         < *x) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
346 ~                     i32::from((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
347 +                         < *x)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:346:23
    |
346 |                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:346:57
    |
346 |                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xstrtoimax.rs:353:10
    |
353 |         *(&mut scaled as *mut intmax_t) = fresh4;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xstrtoimax.rs:357:10
    |
357 |         *(&mut scaled as *mut intmax_t) = fresh6;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:358:9
    |
358 |         fresh7 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh7)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:361:22
    |
361 |         *x = if *x < 0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:362:17
    |
362 |             !if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:362:50
    |
362 |             !if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:363:17
    |
363 |                 -(1 as libc::c_int) as intmax_t
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:365:19
    |
365 |                 (((1 as libc::c_int as intmax_t)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:367:39
    |
367 |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:368:39
    |
368 |                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:369:23
    |
369 |                     - 1 as libc::c_int as libc::c_long)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:370:23
    |
370 |                     * 2 as libc::c_int as libc::c_long + 1 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:370:58
    |
370 |                     * 2 as libc::c_int as libc::c_long + 1 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:372:19
    |
372 |         } else if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:372:52
    |
372 |         } else if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:373:13
    |
373 |             -(1 as libc::c_int) as intmax_t
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:375:15
    |
375 |             (((1 as libc::c_int as intmax_t)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:377:35
    |
377 |                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:378:35
    |
378 |                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:379:19
    |
379 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:379:55
    |
379 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:380:19
    |
380 |                 + 1 as libc::c_int as libc::c_long
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this boolean expression can be simplified
   --> src/xstrtoimax.rs:396:12
    |
396 |         if !(fresh8 != 0) {
    |            ^^^^^^^^^^^^^^ help: try: `fresh8 == 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/xstrtoimax.rs:404:5
    |
404 |     return err;
    |     ^^^^^^^^^^^ help: remove `return`: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
   --> src/xstrtoimax.rs:395:9
    |
395 |         power = power - 1;
    |         ^^^^^^^^^^^^^^^^^ help: replace it with: `power -= 1`
    |
    = note: `-W clippy::assign-op-pattern` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: transmute from a type (`u32`) to itself
   --> src/xstrtoimax.rs:399:15
    |
399 |           err = ::core::mem::transmute::<
    |  _______________^
400 | |             libc::c_uint,
401 | |             strtol_error,
402 | |         >(err as libc::c_uint | bkm_scale(x, base) as libc::c_uint);
    | |___________________________________________________________________^
    |
    = note: `-W clippy::useless-transmute` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: unsafe function's docs miss `# Safety` section
   --> src/xstrtoimax.rs:407:1
    |
407 | / pub unsafe extern "C" fn xstrtoimax(
408 | |     mut s: *const libc::c_char,
409 | |     mut ptr: *mut *mut libc::c_char,
410 | |     mut strtol_base: libc::c_int,
...   |
585 | |     return err;
586 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this function has too many lines (172/100)
   --> src/xstrtoimax.rs:407:1
    |
407 | / pub unsafe extern "C" fn xstrtoimax(
408 | |     mut s: *const libc::c_char,
409 | |     mut ptr: *mut *mut libc::c_char,
410 | |     mut strtol_base: libc::c_int,
...   |
585 | |     return err;
586 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoimax.rs:585:5
    |
585 |     return err;
    |     ^^^^^^^^^^^ help: remove `return`: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xstrtoimax.rs:414:40
    |
414 |     let mut t_ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/xstrtoimax.rs:415:41
    |
415 |     let mut p: *mut *mut libc::c_char = 0 as *mut *mut libc::c_char;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:420:13
    |
420 | /             b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
421 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:422:13
    |
422 |             b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:423:13
    |
423 |             86 as libc::c_int as libc::c_uint,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoimax.rs:424:15
    |
424 |               (*::core::mem::transmute::<
    |  _______________^
425 | |                 &[u8; 78],
426 | |                 &[libc::c_char; 78],
427 | |             >(
428 | |                 b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0",
429 | |             ))
    | |_____________^ help: try: `&*(b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0" as *const [u8; 78] as *const [i8; 78])`
    |
    = note: `-W clippy::transmute-ptr-to-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
   --> src/xstrtoimax.rs:433:5
    |
433 | /     'c_2247: {
434 | |         if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
435 | |             __assert_fail(
436 | |                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
...   |
448 | |         }
449 | |     };
    | |______^
    |
    = note: `-W clippy::unnecessary-operation` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
433 ~     if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
434 +             __assert_fail(
435 +                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
436 +                     as *const libc::c_char,
437 +                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
438 +                 86 as libc::c_int as libc::c_uint,
439 +                 (*::core::mem::transmute::<
440 +                     &[u8; 78],
441 +                     &[libc::c_char; 78],
442 +                 >(
443 +                     b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0",
444 +                 ))
445 +                     .as_ptr(),
446 +             );
447 +         };
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:436:17
    |
436 | /                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
437 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:438:17
    |
438 |                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:439:17
    |
439 |                 86 as libc::c_int as libc::c_uint,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoimax.rs:440:19
    |
440 |                   (*::core::mem::transmute::<
    |  ___________________^
441 | |                     &[u8; 78],
442 | |                     &[libc::c_char; 78],
443 | |                 >(
444 | |                     b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0",
445 | |                 ))
    | |_________________^ help: try: `&*(b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0" as *const [u8; 78] as *const [i8; 78])`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary boolean `not` operation
   --> src/xstrtoimax.rs:450:9
    |
450 |     p = if !ptr.is_null() { ptr } else { &mut t_ptr };
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:452:8
    |
452 |     if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:452:41
    |
452 |     if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:454:37
    |
454 |         let mut ch: libc::c_uchar = *q as libc::c_uchar;
    |                                     ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:455:15
    |
455 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*(*__ctype_b_loc()).offset(ch as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:455:42
    |
455 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |                                          ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:456:15
    |
456 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISspace as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/xstrtoimax.rs:456:15
    |
456 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/xstrtoimax.rs:456:15
    |
456 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoimax.rs:456:15
    |
456 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:459:18
    |
459 |             ch = *q as libc::c_uchar;
    |                  ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:461:12
    |
461 |         if ch as libc::c_int == '-' as i32 {
    |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:467:41
    |
467 |         if !valid_suffixes.is_null() && **p as libc::c_int != 0
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:468:41
    |
468 |             && !(strchr(valid_suffixes, **p as libc::c_int)).is_null()
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:470:19
    |
470 |             tmp = 1 as libc::c_int as intmax_t;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:484:8
    |
484 |     if **p as libc::c_int != '\0' as i32 {
    |        ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:488:36
    |
488 |         if (strchr(valid_suffixes, **p as libc::c_int)).is_null() {
    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:491:19
    |
491 |                 | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoimax.rs:491:19
    |
491 |                 | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:494:15
    |
494 |         match **p as libc::c_int {
    |               ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:497:27
    |
497 |                       match *(*p.offset(0 as libc::c_int as isize))
    |  ___________________________^
498 | |                         .offset(1 as libc::c_int as isize) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
497 ~                     match i32::from(*(*p.offset(0 as libc::c_int as isize))
498 +                         .offset(1 as libc::c_int as isize))
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:501:32
    |
501 |   ...                   if *(*p.offset(0 as libc::c_int as isize))
    |  __________________________^
502 | | ...                       .offset(2 as libc::c_int as isize) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
501 ~                             if i32::from(*(*p.offset(0 as libc::c_int as isize))
502 +                                 .offset(2 as libc::c_int as isize))
    |

warning: statement with no effect
   --> src/xstrtoimax.rs:511:29
    |
511 | ...                   suffixes;
    |                       ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:519:15
    |
519 |         match **p as libc::c_int {
    |               ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:565:23
    |
565 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoimax.rs:565:23
    |
565 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: transmute from a type (`u32`) to itself
   --> src/xstrtoimax.rs:569:15
    |
569 |           err = ::core::mem::transmute::<
    |  _______________^
570 | |             libc::c_uint,
571 | |             strtol_error,
572 | |         >(err as libc::c_uint | overflow as libc::c_uint);
    | |_________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: transmute from a type (`u32`) to itself
   --> src/xstrtoimax.rs:575:19
    |
575 |               err = ::core::mem::transmute::<
    |  ___________________^
576 | |                 libc::c_uint,
577 | |                 strtol_error,
578 | |             >(
579 | |                 err as libc::c_uint
580 | |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint,
581 | |             );
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:580:23
    |
580 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoimax.rs:580:23
    |
580 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: the function has a cognitive complexity of (65/25)
  --> src/xstrtoumax.rs:39:22
   |
39 | unsafe extern "C" fn bkm_scale(
   |                      ^^^^^^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (392/100)
   --> src/xstrtoumax.rs:39:1
    |
39  | / unsafe extern "C" fn bkm_scale(
40  | |     mut x: *mut uintmax_t,
41  | |     mut scale_factor: libc::c_int,
42  | | ) -> strtol_error {
...   |
434 | |     return LONGINT_OK;
435 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoumax.rs:434:5
    |
434 |     return LONGINT_OK;
    |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `LONGINT_OK`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:44:11
   |
44 |     if if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:44:45
   |
44 |     if if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:45:12
   |
45 |         && (if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_ulong } else { *x })
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:45:40
   |
45 |         && (if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_ulong } else { *x })
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:46:27
   |
46 |             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:47:15
   |
47 |             < 0 as libc::c_int as libc::c_ulong
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:48:13
   |
48 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:51:21
   |
51 |             if *x < 0 as libc::c_int as libc::c_ulong {
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:52:20
   |
52 |                   if (if 1 as libc::c_int != 0 {
   |  ____________________^
53 | |                     0 as libc::c_int as libc::c_ulong
54 | |                 } else {
55 | |                     (if 1 as libc::c_int != 0 {
...  |
60 | |                         .wrapping_add(scale_factor as libc::c_ulong)
61 | |                 })
   | |__________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:53:21
   |
53 |                     0 as libc::c_int as libc::c_ulong
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:55:21
   |
55 | /                     (if 1 as libc::c_int != 0 {
56 | |                         0 as libc::c_int as libc::c_ulong
57 | |                     } else {
58 | |                         -(1 as libc::c_int) as uintmax_t
59 | |                     })
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:56:25
   |
56 |                         0 as libc::c_int as libc::c_ulong
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:58:25
   |
58 |                         -(1 as libc::c_int) as uintmax_t
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:60:39
   |
60 |                         .wrapping_add(scale_factor as libc::c_ulong)
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:62:35
   |
62 |                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:63:23
   |
63 |                     < 0 as libc::c_int as libc::c_ulong
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xstrtoumax.rs:65:21
   |
65 | /                     (*x
66 | |                         < (-(1 as libc::c_int) as uintmax_t)
67 | |                             .wrapping_div(scale_factor as libc::c_ulong)) as libc::c_int
   | |________________________________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
   |
65 ~                     i32::from(*x
66 +                         < (-(1 as libc::c_int) as uintmax_t)
67 +                             .wrapping_div(scale_factor as libc::c_ulong))
   |

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:66:27
   |
66 |                         < (-(1 as libc::c_int) as uintmax_t)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:67:43
   |
67 | ...                   .wrapping_div(scale_factor as libc::c_ulong)) as libc::c_int
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:69:21
    |
69  | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
70  | |                         0 as libc::c_int
71  | |                     } else {
72  | |                         scale_factor
...   |
131 | |                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
132 | |                         as libc::c_int
    | |______________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
69  ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
70  +                         0 as libc::c_int
71  +                     } else {
72  +                         scale_factor
73  +                     }) - 1 as libc::c_int) < 0 as libc::c_int
74  +                     {
75  +                         !(((((if 1 as libc::c_int != 0 {
76  +                             0 as libc::c_int
77  +                         } else {
78  +                             scale_factor
79  +                         }) + 1 as libc::c_int)
80  +                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
81  +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
82  +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
83  +                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
84  +                     } else {
85  +                         (if 1 as libc::c_int != 0 {
86  +                             0 as libc::c_int
87  +                         } else {
88  +                             scale_factor
89  +                         }) + 0 as libc::c_int
90  +                     }) < 0 as libc::c_int
91  +                     {
92  +                         (scale_factor
93  +                             < -(if ((if 1 as libc::c_int != 0 {
94  +                                 0 as libc::c_int
95  +                             } else {
96  +                                 scale_factor
97  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
98  +                             {
99  +                                 ((((if 1 as libc::c_int != 0 {
100 +                                     0 as libc::c_int
101 +                                 } else {
102 +                                     scale_factor
103 +                                 }) + 1 as libc::c_int)
104 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
105 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
106 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
107 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
108 +                             } else {
109 +                                 (if 1 as libc::c_int != 0 {
110 +                                     0 as libc::c_int
111 +                                 } else {
112 +                                     scale_factor
113 +                                 }) - 1 as libc::c_int
114 +                             })) as libc::c_int
115 +                     } else {
116 +                         ((0 as libc::c_int) < scale_factor) as libc::c_int
117 +                     }) != 0
118 +                     {
119 +                         ((if 1 as libc::c_int != 0 {
120 +                             0 as libc::c_int
121 +                         } else {
122 +                             scale_factor
123 +                         }) as libc::c_ulong)
124 +                             .wrapping_add(-(1 as libc::c_int) as uintmax_t)
125 +                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
126 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
127 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
128 +                     } else {
129 +                         (-(1 as libc::c_int) as uintmax_t)
130 +                             .wrapping_div(-scale_factor as libc::c_ulong)
131 +                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
    |

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:69:22
    |
69  |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
70  | |                         0 as libc::c_int
71  | |                     } else {
72  | |                         scale_factor
...   |
130 | |                             .wrapping_div(-scale_factor as libc::c_ulong)
131 | |                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:69:35
   |
69 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
   |  ___________________________________^
70 | |                         0 as libc::c_int
71 | |                     } else {
72 | |                         scale_factor
73 | |                     }) - 1 as libc::c_int) < 0 as libc::c_int
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:75:30
   |
75 |                           !(((((if 1 as libc::c_int != 0 {
   |  ______________________________^
76 | |                             0 as libc::c_int
77 | |                         } else {
78 | |                             scale_factor
79 | |                         }) + 1 as libc::c_int)
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:81:47
   |
81 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:82:47
   |
82 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:85:25
   |
85 | /                         (if 1 as libc::c_int != 0 {
86 | |                             0 as libc::c_int
87 | |                         } else {
88 | |                             scale_factor
89 | |                         }) + 0 as libc::c_int
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:92:25
    |
92  | /                         (scale_factor
93  | |                             < -(if ((if 1 as libc::c_int != 0 {
94  | |                                 0 as libc::c_int
95  | |                             } else {
...   |
113 | |                                 }) - 1 as libc::c_int
114 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
92  ~                         i32::from(scale_factor
93  +                             < -(if ((if 1 as libc::c_int != 0 {
94  +                                 0 as libc::c_int
95  +                             } else {
96  +                                 scale_factor
97  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
98  +                             {
99  +                                 ((((if 1 as libc::c_int != 0 {
100 +                                     0 as libc::c_int
101 +                                 } else {
102 +                                     scale_factor
103 +                                 }) + 1 as libc::c_int)
104 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
105 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
106 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
107 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
108 +                             } else {
109 +                                 (if 1 as libc::c_int != 0 {
110 +                                     0 as libc::c_int
111 +                                 } else {
112 +                                     scale_factor
113 +                                 }) - 1 as libc::c_int
114 +                             }))
    |

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:93:37
   |
93 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
   |  _______________________________^
94 | | ...                       0 as libc::c_int
95 | | ...                   } else {
96 | | ...                       scale_factor
97 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
   | |________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:99:36
    |
99  |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
100 | | ...                       0 as libc::c_int
101 | | ...                   } else {
102 | | ...                       scale_factor
103 | | ...                   }) + 1 as libc::c_int)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:105:55
    |
105 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:106:55
    |
106 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:109:33
    |
109 | / ...                   (if 1 as libc::c_int != 0 {
110 | | ...                       0 as libc::c_int
111 | | ...                   } else {
112 | | ...                       scale_factor
113 | | ...                   }) - 1 as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:116:25
    |
116 |                         ((0 as libc::c_int) < scale_factor) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:119:25
    |
119 | /                         ((if 1 as libc::c_int != 0 {
120 | |                             0 as libc::c_int
121 | |                         } else {
122 | |                             scale_factor
123 | |                         }) as libc::c_ulong)
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:119:26
    |
119 |                           ((if 1 as libc::c_int != 0 {
    |  __________________________^
120 | |                             0 as libc::c_int
121 | |                         } else {
122 | |                             scale_factor
123 | |                         }) as libc::c_ulong)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:124:43
    |
124 | ...                   .wrapping_add(-(1 as libc::c_int) as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:126:47
    |
126 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:127:47
    |
127 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:129:25
    |
129 |                         (-(1 as libc::c_int) as uintmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:130:43
    |
130 | ...                   .wrapping_div(-scale_factor as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:131:27
    |
131 |                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:135:28
    |
135 |                   if (if (if (if 1 as libc::c_int != 0 {
    |  ____________________________^
136 | |                     0 as libc::c_int as libc::c_ulong
137 | |                 } else {
138 | |                     ((if 1 as libc::c_int != 0 {
...   |
143 | |                         .wrapping_add(0 as libc::c_int as uintmax_t)
144 | |                 })
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:136:21
    |
136 |                     0 as libc::c_int as libc::c_ulong
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:138:21
    |
138 | /                     ((if 1 as libc::c_int != 0 {
139 | |                         0 as libc::c_int
140 | |                     } else {
141 | |                         scale_factor
142 | |                     }) as libc::c_ulong)
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:138:22
    |
138 |                       ((if 1 as libc::c_int != 0 {
    |  ______________________^
139 | |                         0 as libc::c_int
140 | |                     } else {
141 | |                         scale_factor
142 | |                     }) as libc::c_ulong)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:143:39
    |
143 |                         .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:145:35
    |
145 |                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:146:23
    |
146 |                     < 0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:148:23
    |
148 |                       !((if 1 as libc::c_int != 0 {
    |  _______________________^
149 | |                         0 as libc::c_int as libc::c_ulong
150 | |                     } else {
151 | |                         ((if 1 as libc::c_int != 0 {
...   |
156 | |                             .wrapping_add(0 as libc::c_int as uintmax_t)
157 | |                     })
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:149:25
    |
149 |                         0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:151:25
    |
151 | /                         ((if 1 as libc::c_int != 0 {
152 | |                             0 as libc::c_int
153 | |                         } else {
154 | |                             scale_factor
155 | |                         }) as libc::c_ulong)
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:151:26
    |
151 |                           ((if 1 as libc::c_int != 0 {
    |  __________________________^
152 | |                             0 as libc::c_int
153 | |                         } else {
154 | |                             scale_factor
155 | |                         }) as libc::c_ulong)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:156:43
    |
156 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:158:39
    |
158 |                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:160:43
    |
160 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:161:43
    |
161 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:162:39
    |
162 |                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:163:39
    |
163 |                         .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:164:39
    |
164 |                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:166:21
    |
166 | /                     (if 1 as libc::c_int != 0 {
167 | |                         0 as libc::c_int as libc::c_ulong
168 | |                     } else {
169 | |                         ((if 1 as libc::c_int != 0 {
...   |
174 | |                             .wrapping_add(0 as libc::c_int as uintmax_t)
175 | |                     })
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:167:25
    |
167 |                         0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:169:25
    |
169 | /                         ((if 1 as libc::c_int != 0 {
170 | |                             0 as libc::c_int
171 | |                         } else {
172 | |                             scale_factor
173 | |                         }) as libc::c_ulong)
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:169:26
    |
169 |                           ((if 1 as libc::c_int != 0 {
    |  __________________________^
170 | |                             0 as libc::c_int
171 | |                         } else {
172 | |                             scale_factor
173 | |                         }) as libc::c_ulong)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:174:43
    |
174 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:176:39
    |
176 |                         .wrapping_add(0 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:177:22
    |
177 |                 }) < 0 as libc::c_int as libc::c_ulong
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:179:21
    |
179 | /                     (((if 1 as libc::c_int != 0 {
180 | |                         0 as libc::c_int
181 | |                     } else {
182 | |                         scale_factor
...   |
228 | |                         })
229 | |                             .wrapping_neg()) as libc::c_int
    | |___________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
179 ~                     i32::from(((if 1 as libc::c_int != 0 {
180 +                         0 as libc::c_int
181 +                     } else {
182 +                         scale_factor
183 +                     }) as libc::c_ulong)
184 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
185 +                         < (if (if 1 as libc::c_int != 0 {
186 +                             0 as libc::c_int as libc::c_ulong
187 +                         } else {
188 +                             ((if 1 as libc::c_int != 0 {
189 +                                 0 as libc::c_int
190 +                             } else {
191 +                                 scale_factor
192 +                             }) as libc::c_ulong)
193 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)
194 +                         })
195 +                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
196 +                             < 0 as libc::c_int as libc::c_ulong
197 +                         {
198 +                             ((if 1 as libc::c_int != 0 {
199 +                                 0 as libc::c_int as libc::c_ulong
200 +                             } else {
201 +                                 ((if 1 as libc::c_int != 0 {
202 +                                     0 as libc::c_int
203 +                                 } else {
204 +                                     scale_factor
205 +                                 }) as libc::c_ulong)
206 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
207 +                             })
208 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
209 +                                 << (::core::mem::size_of::<libc::c_ulong>()
210 +                                     as libc::c_ulong)
211 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
212 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
213 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
214 +                                 .wrapping_mul(2 as libc::c_int as libc::c_ulong)
215 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
216 +                         } else {
217 +                             (if 1 as libc::c_int != 0 {
218 +                                 0 as libc::c_int as libc::c_ulong
219 +                             } else {
220 +                                 ((if 1 as libc::c_int != 0 {
221 +                                     0 as libc::c_int
222 +                                 } else {
223 +                                     scale_factor
224 +                                 }) as libc::c_ulong)
225 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
226 +                             })
227 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
228 +                         })
229 +                             .wrapping_neg())
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:179:22
    |
179 |                       (((if 1 as libc::c_int != 0 {
    |  ______________________^
180 | |                         0 as libc::c_int
181 | |                     } else {
182 | |                         scale_factor
183 | |                     }) as libc::c_ulong)
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:179:23
    |
179 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
180 | |                         0 as libc::c_int
181 | |                     } else {
182 | |                         scale_factor
183 | |                     }) as libc::c_ulong)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:184:39
    |
184 |                         .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:185:31
    |
185 |                           < (if (if 1 as libc::c_int != 0 {
    |  _______________________________^
186 | |                             0 as libc::c_int as libc::c_ulong
187 | |                         } else {
188 | |                             ((if 1 as libc::c_int != 0 {
...   |
193 | |                                 .wrapping_add(0 as libc::c_int as uintmax_t)
194 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:186:29
    |
186 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:188:29
    |
188 | / ...                   ((if 1 as libc::c_int != 0 {
189 | | ...                       0 as libc::c_int
190 | | ...                   } else {
191 | | ...                       scale_factor
192 | | ...                   }) as libc::c_ulong)
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:188:30
    |
188 |   ...                   ((if 1 as libc::c_int != 0 {
    |  ________________________^
189 | | ...                       0 as libc::c_int
190 | | ...                   } else {
191 | | ...                       scale_factor
192 | | ...                   }) as libc::c_ulong)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:193:47
    |
193 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:195:43
    |
195 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:196:31
    |
196 | ...                   < 0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:198:30
    |
198 |   ...                   ((if 1 as libc::c_int != 0 {
    |  ________________________^
199 | | ...                       0 as libc::c_int as libc::c_ulong
200 | | ...                   } else {
201 | | ...                       ((if 1 as libc::c_int != 0 {
...   |
206 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
207 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:199:33
    |
199 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:201:33
    |
201 | / ...                   ((if 1 as libc::c_int != 0 {
202 | | ...                       0 as libc::c_int
203 | | ...                   } else {
204 | | ...                       scale_factor
205 | | ...                   }) as libc::c_ulong)
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:201:34
    |
201 |   ...                   ((if 1 as libc::c_int != 0 {
    |  ________________________^
202 | | ...                       0 as libc::c_int
203 | | ...                   } else {
204 | | ...                       scale_factor
205 | | ...                   }) as libc::c_ulong)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:206:51
    |
206 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:208:47
    |
208 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:211:51
    |
211 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:212:51
    |
212 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:213:47
    |
213 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:214:47
    |
214 | ...                   .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:215:47
    |
215 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:217:29
    |
217 | / ...                   (if 1 as libc::c_int != 0 {
218 | | ...                       0 as libc::c_int as libc::c_ulong
219 | | ...                   } else {
220 | | ...                       ((if 1 as libc::c_int != 0 {
...   |
225 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
226 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:218:33
    |
218 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:220:33
    |
220 | / ...                   ((if 1 as libc::c_int != 0 {
221 | | ...                       0 as libc::c_int
222 | | ...                   } else {
223 | | ...                       scale_factor
224 | | ...                   }) as libc::c_ulong)
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:220:34
    |
220 |   ...                   ((if 1 as libc::c_int != 0 {
    |  ________________________^
221 | | ...                       0 as libc::c_int
222 | | ...                   } else {
223 | | ...                       scale_factor
224 | | ...                   }) as libc::c_ulong)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:225:51
    |
225 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:227:47
    |
227 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:231:21
    |
231 | /                     ((0 as libc::c_int as libc::c_ulong)
232 | |                         < ((if 1 as libc::c_int != 0 {
233 | |                             0 as libc::c_int
234 | |                         } else {
235 | |                             scale_factor
236 | |                         }) as libc::c_ulong)
237 | |                             .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    | |________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
231 ~                     i32::from((0 as libc::c_int as libc::c_ulong)
232 +                         < ((if 1 as libc::c_int != 0 {
233 +                             0 as libc::c_int
234 +                         } else {
235 +                             scale_factor
236 +                         }) as libc::c_ulong)
237 +                             .wrapping_add(0 as libc::c_int as uintmax_t))
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:231:22
    |
231 |                     ((0 as libc::c_int as libc::c_ulong)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:232:27
    |
232 |                           < ((if 1 as libc::c_int != 0 {
    |  ___________________________^
233 | |                             0 as libc::c_int
234 | |                         } else {
235 | |                             scale_factor
236 | |                         }) as libc::c_ulong)
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:232:28
    |
232 |                           < ((if 1 as libc::c_int != 0 {
    |  ____________________________^
233 | |                             0 as libc::c_int
234 | |                         } else {
235 | |                             scale_factor
236 | |                         }) as libc::c_ulong)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:237:43
    |
237 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:240:24
    |
240 |                       if (if 1 as libc::c_int != 0 {
    |  ________________________^
241 | |                         0 as libc::c_int as libc::c_ulong
242 | |                     } else {
243 | |                         *x
244 | |                     })
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:241:25
    |
241 |                         0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:245:39
    |
245 |                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:246:27
    |
246 |                         < 0 as libc::c_int as libc::c_ulong
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:248:25
    |
248 | /                         ((0 as libc::c_int as libc::c_ulong)
249 | |                             < (*x).wrapping_add(0 as libc::c_int as uintmax_t))
250 | |                             as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
248 ~                         i32::from((0 as libc::c_int as libc::c_ulong)
249 +                             < (*x).wrapping_add(0 as libc::c_int as uintmax_t))
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:248:26
    |
248 |                         ((0 as libc::c_int as libc::c_ulong)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:249:49
    |
249 | ...                   < (*x).wrapping_add(0 as libc::c_int as uintmax_t))
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:252:25
    |
252 | /                         ((0 as libc::c_int as libc::c_ulong) < *x
253 | |                             && (-(1 as libc::c_int) as libc::c_ulong)
254 | |                                 .wrapping_sub(0 as libc::c_int as uintmax_t)
255 | |                                 < (*x).wrapping_sub(1 as libc::c_int as libc::c_ulong))
256 | |                             as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
252 ~                         i32::from((0 as libc::c_int as libc::c_ulong) < *x
253 +                             && (-(1 as libc::c_int) as libc::c_ulong)
254 +                                 .wrapping_sub(0 as libc::c_int as uintmax_t)
255 +                                 < (*x).wrapping_sub(1 as libc::c_int as libc::c_ulong))
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:252:26
    |
252 |                         ((0 as libc::c_int as libc::c_ulong) < *x
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:253:32
    |
253 | ...                   && (-(1 as libc::c_int) as libc::c_ulong)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:254:47
    |
254 | ...                   .wrapping_sub(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:255:53
    |
255 | ...                   < (*x).wrapping_sub(1 as libc::c_int as libc::c_ulong))
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:259:21
    |
259 | /                     ((0 as libc::c_int as uintmax_t)
260 | |                         .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
    | |_________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
259 ~                     i32::from((0 as libc::c_int as uintmax_t)
260 +                         .wrapping_div(scale_factor as libc::c_ulong) < *x)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:259:22
    |
259 |                     ((0 as libc::c_int as uintmax_t)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:260:39
    |
260 |                         .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:267:25
    |
267 |                 if *x < 0 as libc::c_int as libc::c_ulong {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:268:32
    |
268 |                       if (if (if (if 1 as libc::c_int != 0 {
    |  ________________________________^
269 | |                         0 as libc::c_int as libc::c_ulong
270 | |                     } else {
271 | |                         (if 1 as libc::c_int != 0 {
...   |
276 | |                             .wrapping_add(0 as libc::c_int as uintmax_t)
277 | |                     })
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:269:25
    |
269 |                         0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:271:25
    |
271 | /                         (if 1 as libc::c_int != 0 {
272 | |                             0 as libc::c_int as libc::c_ulong
273 | |                         } else {
274 | |                             *x
275 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:272:29
    |
272 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:276:43
    |
276 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:278:39
    |
278 |                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:279:27
    |
279 |                         < 0 as libc::c_int as libc::c_ulong
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:281:27
    |
281 |                           !((if 1 as libc::c_int != 0 {
    |  ___________________________^
282 | |                             0 as libc::c_int as libc::c_ulong
283 | |                         } else {
284 | |                             (if 1 as libc::c_int != 0 {
...   |
289 | |                                 .wrapping_add(0 as libc::c_int as uintmax_t)
290 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:282:29
    |
282 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:284:29
    |
284 | / ...                   (if 1 as libc::c_int != 0 {
285 | | ...                       0 as libc::c_int as libc::c_ulong
286 | | ...                   } else {
287 | | ...                       *x
288 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:285:33
    |
285 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:289:47
    |
289 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:291:43
    |
291 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:293:47
    |
293 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:294:47
    |
294 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:295:43
    |
295 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:296:43
    |
296 | ...                   .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:297:43
    |
297 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:299:25
    |
299 | /                         (if 1 as libc::c_int != 0 {
300 | |                             0 as libc::c_int as libc::c_ulong
301 | |                         } else {
302 | |                             (if 1 as libc::c_int != 0 {
...   |
307 | |                                 .wrapping_add(0 as libc::c_int as uintmax_t)
308 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:300:29
    |
300 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:302:29
    |
302 | / ...                   (if 1 as libc::c_int != 0 {
303 | | ...                       0 as libc::c_int as libc::c_ulong
304 | | ...                   } else {
305 | | ...                       *x
306 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:303:33
    |
303 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:307:47
    |
307 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:309:43
    |
309 | ...                   .wrapping_add(0 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:310:26
    |
310 |                     }) < 0 as libc::c_int as libc::c_ulong
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:312:25
    |
312 | /                         ((if 1 as libc::c_int != 0 {
313 | |                             0 as libc::c_int as libc::c_ulong
314 | |                         } else {
315 | |                             *x
...   |
361 | |                             })
362 | |                                 .wrapping_neg()) as libc::c_int
    | |_______________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
312 ~                         i32::from((if 1 as libc::c_int != 0 {
313 +                             0 as libc::c_int as libc::c_ulong
314 +                         } else {
315 +                             *x
316 +                         })
317 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
318 +                             < (if (if 1 as libc::c_int != 0 {
319 +                                 0 as libc::c_int as libc::c_ulong
320 +                             } else {
321 +                                 (if 1 as libc::c_int != 0 {
322 +                                     0 as libc::c_int as libc::c_ulong
323 +                                 } else {
324 +                                     *x
325 +                                 })
326 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
327 +                             })
328 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
329 +                                 < 0 as libc::c_int as libc::c_ulong
330 +                             {
331 +                                 ((if 1 as libc::c_int != 0 {
332 +                                     0 as libc::c_int as libc::c_ulong
333 +                                 } else {
334 +                                     (if 1 as libc::c_int != 0 {
335 +                                         0 as libc::c_int as libc::c_ulong
336 +                                     } else {
337 +                                         *x
338 +                                     })
339 +                                         .wrapping_add(0 as libc::c_int as uintmax_t)
340 +                                 })
341 +                                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
342 +                                     << (::core::mem::size_of::<libc::c_ulong>()
343 +                                         as libc::c_ulong)
344 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
345 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
346 +                                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
347 +                                     .wrapping_mul(2 as libc::c_int as libc::c_ulong)
348 +                                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
349 +                             } else {
350 +                                 (if 1 as libc::c_int != 0 {
351 +                                     0 as libc::c_int as libc::c_ulong
352 +                                 } else {
353 +                                     (if 1 as libc::c_int != 0 {
354 +                                         0 as libc::c_int as libc::c_ulong
355 +                                     } else {
356 +                                         *x
357 +                                     })
358 +                                         .wrapping_add(0 as libc::c_int as uintmax_t)
359 +                                 })
360 +                                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
361 +                             })
362 +                                 .wrapping_neg())
    |

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:312:26
    |
312 |                           ((if 1 as libc::c_int != 0 {
    |  __________________________^
313 | |                             0 as libc::c_int as libc::c_ulong
314 | |                         } else {
315 | |                             *x
316 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:313:29
    |
313 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:317:43
    |
317 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:318:35
    |
318 |   ...                   < (if (if 1 as libc::c_int != 0 {
    |  _____________________________^
319 | | ...                       0 as libc::c_int as libc::c_ulong
320 | | ...                   } else {
321 | | ...                       (if 1 as libc::c_int != 0 {
...   |
326 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
327 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:319:33
    |
319 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:321:33
    |
321 | / ...                   (if 1 as libc::c_int != 0 {
322 | | ...                       0 as libc::c_int as libc::c_ulong
323 | | ...                   } else {
324 | | ...                       *x
325 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:322:37
    |
322 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:326:51
    |
326 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:328:47
    |
328 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:329:35
    |
329 | ...                   < 0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:331:34
    |
331 |   ...                   ((if 1 as libc::c_int != 0 {
    |  ________________________^
332 | | ...                       0 as libc::c_int as libc::c_ulong
333 | | ...                   } else {
334 | | ...                       (if 1 as libc::c_int != 0 {
...   |
339 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
340 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:332:37
    |
332 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:334:37
    |
334 | / ...                   (if 1 as libc::c_int != 0 {
335 | | ...                       0 as libc::c_int as libc::c_ulong
336 | | ...                   } else {
337 | | ...                       *x
338 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:335:41
    |
335 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:339:55
    |
339 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:341:51
    |
341 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:344:55
    |
344 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:345:55
    |
345 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:346:51
    |
346 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:347:51
    |
347 | ...                   .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:348:51
    |
348 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:350:33
    |
350 | / ...                   (if 1 as libc::c_int != 0 {
351 | | ...                       0 as libc::c_int as libc::c_ulong
352 | | ...                   } else {
353 | | ...                       (if 1 as libc::c_int != 0 {
...   |
358 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
359 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:351:37
    |
351 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:353:37
    |
353 | / ...                   (if 1 as libc::c_int != 0 {
354 | | ...                       0 as libc::c_int as libc::c_ulong
355 | | ...                   } else {
356 | | ...                       *x
357 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:354:41
    |
354 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:358:55
    |
358 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:360:51
    |
360 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:364:25
    |
364 | /                         ((0 as libc::c_int as libc::c_ulong)
365 | |                             < (if 1 as libc::c_int != 0 {
366 | |                                 0 as libc::c_int as libc::c_ulong
367 | |                             } else {
368 | |                                 *x
369 | |                             })
370 | |                                 .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    | |____________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
364 ~                         i32::from((0 as libc::c_int as libc::c_ulong)
365 +                             < (if 1 as libc::c_int != 0 {
366 +                                 0 as libc::c_int as libc::c_ulong
367 +                             } else {
368 +                                 *x
369 +                             })
370 +                                 .wrapping_add(0 as libc::c_int as uintmax_t))
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:364:26
    |
364 |                         ((0 as libc::c_int as libc::c_ulong)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:365:31
    |
365 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
366 | | ...                       0 as libc::c_int as libc::c_ulong
367 | | ...                   } else {
368 | | ...                       *x
369 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:366:33
    |
366 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:370:47
    |
370 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:371:38
    |
371 |                     }) != 0 && *x == -(1 as libc::c_int) as libc::c_ulong
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:373:29
    |
373 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
374 | |                             0 as libc::c_int
375 | |                         } else {
376 | |                             scale_factor
377 | |                         }) - 1 as libc::c_int) < 0 as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:379:29
    |
379 | / ...                   ((0 as libc::c_int as libc::c_ulong)
380 | | ...                       < (scale_factor as libc::c_ulong)
381 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    | |__________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
379 ~                             i32::from((0 as libc::c_int as libc::c_ulong)
380 +                                 < (scale_factor as libc::c_ulong)
381 +                                     .wrapping_add(0 as libc::c_int as uintmax_t))
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:379:30
    |
379 | ...                   ((0 as libc::c_int as libc::c_ulong)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:380:35
    |
380 | ...                   < (scale_factor as libc::c_ulong)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:381:51
    |
381 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:383:29
    |
383 | / ...                   ((-(1 as libc::c_int) as libc::c_ulong)
384 | | ...                       .wrapping_sub(0 as libc::c_int as uintmax_t)
385 | | ...                       < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
386 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
383 ~                             i32::from((-(1 as libc::c_int) as libc::c_ulong)
384 +                                 .wrapping_sub(0 as libc::c_int as uintmax_t)
385 +                                 < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:383:30
    |
383 | ...                   ((-(1 as libc::c_int) as libc::c_ulong)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:384:47
    |
384 | ...                   .wrapping_sub(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:385:35
    |
385 | ...                   < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:389:25
    |
389 | /                         ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
390 | |                             < scale_factor as libc::c_ulong) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
389 ~                         i32::from((0 as libc::c_int as uintmax_t).wrapping_div(*x)
390 +                             < scale_factor as libc::c_ulong)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:389:26
    |
389 |                         ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:390:31
    |
390 | ...                   < scale_factor as libc::c_ulong) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:393:21
    |
393 | /                     ((-(1 as libc::c_int) as uintmax_t)
394 | |                         .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
    | |_________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
393 ~                     i32::from((-(1 as libc::c_int) as uintmax_t)
394 +                         .wrapping_div(scale_factor as libc::c_ulong) < *x)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:393:22
    |
393 |                     ((-(1 as libc::c_int) as uintmax_t)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:394:39
    |
394 |                         .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
   --> src/xstrtoumax.rs:400:10
    |
400 |         *(&mut scaled as *mut uintmax_t) = fresh4;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xstrtoumax.rs:404:10
    |
404 |         *(&mut scaled as *mut uintmax_t) = fresh6;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:405:9
    |
405 |         fresh7 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh7)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:408:22
    |
408 |         *x = if *x < 0 as libc::c_int as libc::c_ulong {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:409:17
    |
409 |             !if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:409:51
    |
409 |             !if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:410:17
    |
410 |                 -(1 as libc::c_int) as uintmax_t
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:412:18
    |
412 |                 ((1 as libc::c_int as uintmax_t)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:414:39
    |
414 |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:415:39
    |
415 |                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:416:35
    |
416 |                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:417:35
    |
417 |                     .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:418:35
    |
418 |                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:420:19
    |
420 |         } else if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:420:53
    |
420 |         } else if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:421:13
    |
421 |             -(1 as libc::c_int) as uintmax_t
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:423:14
    |
423 |             ((1 as libc::c_int as uintmax_t)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:425:35
    |
425 |                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:426:35
    |
426 |                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:427:31
    |
427 |                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:428:31
    |
428 |                 .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:429:31
    |
429 |                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this boolean expression can be simplified
   --> src/xstrtoumax.rs:445:12
    |
445 |         if !(fresh8 != 0) {
    |            ^^^^^^^^^^^^^^ help: try: `fresh8 == 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/xstrtoumax.rs:453:5
    |
453 |     return err;
    |     ^^^^^^^^^^^ help: remove `return`: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
   --> src/xstrtoumax.rs:444:9
    |
444 |         power = power - 1;
    |         ^^^^^^^^^^^^^^^^^ help: replace it with: `power -= 1`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: transmute from a type (`u32`) to itself
   --> src/xstrtoumax.rs:448:15
    |
448 |           err = ::core::mem::transmute::<
    |  _______________^
449 | |             libc::c_uint,
450 | |             strtol_error,
451 | |         >(err as libc::c_uint | bkm_scale(x, base) as libc::c_uint);
    | |___________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: unsafe function's docs miss `# Safety` section
   --> src/xstrtoumax.rs:456:1
    |
456 | / pub unsafe extern "C" fn xstrtoumax(
457 | |     mut s: *const libc::c_char,
458 | |     mut ptr: *mut *mut libc::c_char,
459 | |     mut strtol_base: libc::c_int,
...   |
634 | |     return err;
635 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this function has too many lines (172/100)
   --> src/xstrtoumax.rs:456:1
    |
456 | / pub unsafe extern "C" fn xstrtoumax(
457 | |     mut s: *const libc::c_char,
458 | |     mut ptr: *mut *mut libc::c_char,
459 | |     mut strtol_base: libc::c_int,
...   |
634 | |     return err;
635 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoumax.rs:634:5
    |
634 |     return err;
    |     ^^^^^^^^^^^ help: remove `return`: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xstrtoumax.rs:463:40
    |
463 |     let mut t_ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/xstrtoumax.rs:464:41
    |
464 |     let mut p: *mut *mut libc::c_char = 0 as *mut *mut libc::c_char;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:469:13
    |
469 | /             b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
470 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:471:13
    |
471 |             b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoumax.rs:472:13
    |
472 |             86 as libc::c_int as libc::c_uint,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoumax.rs:473:15
    |
473 |               (*::core::mem::transmute::<
    |  _______________^
474 | |                 &[u8; 79],
475 | |                 &[libc::c_char; 79],
476 | |             >(
477 | |                 b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0",
478 | |             ))
    | |_____________^ help: try: `&*(b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0" as *const [u8; 79] as *const [i8; 79])`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
   --> src/xstrtoumax.rs:482:5
    |
482 | /     'c_2256: {
483 | |         if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
484 | |             __assert_fail(
485 | |                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
...   |
497 | |         }
498 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
482 ~     if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
483 +             __assert_fail(
484 +                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
485 +                     as *const libc::c_char,
486 +                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
487 +                 86 as libc::c_int as libc::c_uint,
488 +                 (*::core::mem::transmute::<
489 +                     &[u8; 79],
490 +                     &[libc::c_char; 79],
491 +                 >(
492 +                     b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0",
493 +                 ))
494 +                     .as_ptr(),
495 +             );
496 +         };
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:485:17
    |
485 | /                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
486 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:487:17
    |
487 |                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoumax.rs:488:17
    |
488 |                 86 as libc::c_int as libc::c_uint,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoumax.rs:489:19
    |
489 |                   (*::core::mem::transmute::<
    |  ___________________^
490 | |                     &[u8; 79],
491 | |                     &[libc::c_char; 79],
492 | |                 >(
493 | |                     b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0",
494 | |                 ))
    | |_________________^ help: try: `&*(b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0" as *const [u8; 79] as *const [i8; 79])`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary boolean `not` operation
   --> src/xstrtoumax.rs:499:9
    |
499 |     p = if !ptr.is_null() { ptr } else { &mut t_ptr };
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:501:8
    |
501 |     if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:501:42
    |
501 |     if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoumax.rs:503:37
    |
503 |         let mut ch: libc::c_uchar = *q as libc::c_uchar;
    |                                     ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:504:15
    |
504 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*(*__ctype_b_loc()).offset(ch as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:504:42
    |
504 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |                                          ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:505:15
    |
505 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISspace as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/xstrtoumax.rs:505:15
    |
505 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/xstrtoumax.rs:505:15
    |
505 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoumax.rs:505:15
    |
505 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoumax.rs:508:18
    |
508 |             ch = *q as libc::c_uchar;
    |                  ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:510:12
    |
510 |         if ch as libc::c_int == '-' as i32 {
    |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:516:41
    |
516 |         if !valid_suffixes.is_null() && **p as libc::c_int != 0
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:517:41
    |
517 |             && !(strchr(valid_suffixes, **p as libc::c_int)).is_null()
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:519:19
    |
519 |             tmp = 1 as libc::c_int as uintmax_t;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:533:8
    |
533 |     if **p as libc::c_int != '\0' as i32 {
    |        ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:537:36
    |
537 |         if (strchr(valid_suffixes, **p as libc::c_int)).is_null() {
    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoumax.rs:540:19
    |
540 |                 | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoumax.rs:540:19
    |
540 |                 | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:543:15
    |
543 |         match **p as libc::c_int {
    |               ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:546:27
    |
546 |                       match *(*p.offset(0 as libc::c_int as isize))
    |  ___________________________^
547 | |                         .offset(1 as libc::c_int as isize) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
546 ~                     match i32::from(*(*p.offset(0 as libc::c_int as isize))
547 +                         .offset(1 as libc::c_int as isize))
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:550:32
    |
550 |   ...                   if *(*p.offset(0 as libc::c_int as isize))
    |  __________________________^
551 | | ...                       .offset(2 as libc::c_int as isize) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
550 ~                             if i32::from(*(*p.offset(0 as libc::c_int as isize))
551 +                                 .offset(2 as libc::c_int as isize))
    |

warning: statement with no effect
   --> src/xstrtoumax.rs:560:29
    |
560 | ...                   suffixes;
    |                       ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:568:15
    |
568 |         match **p as libc::c_int {
    |               ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoumax.rs:614:23
    |
614 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoumax.rs:614:23
    |
614 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: transmute from a type (`u32`) to itself
   --> src/xstrtoumax.rs:618:15
    |
618 |           err = ::core::mem::transmute::<
    |  _______________^
619 | |             libc::c_uint,
620 | |             strtol_error,
621 | |         >(err as libc::c_uint | overflow as libc::c_uint);
    | |_________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: transmute from a type (`u32`) to itself
   --> src/xstrtoumax.rs:624:19
    |
624 |               err = ::core::mem::transmute::<
    |  ___________________^
625 | |                 libc::c_uint,
626 | |                 strtol_error,
627 | |             >(
628 | |                 err as libc::c_uint
629 | |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint,
630 | |             );
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoumax.rs:629:23
    |
629 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoumax.rs:629:23
    |
629 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: path statement with no effect
  --> src/basename_lgpl.rs:15:9
   |
15 |         base;
   |         ^^^^^
   |
   = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
  --> src/basename_lgpl.rs:26:9
   |
26 |         p;
   |         ^^

warning: path statement with no effect
  --> src/basename_lgpl.rs:40:9
   |
40 |         len;
   |         ^^^^

warning: path statement with no effect
  --> src/c_strcasecmp.rs:31:9
   |
31 |         p1;
   |         ^^^

warning: path statement with no effect
  --> src/c_strcasecmp.rs:33:9
   |
33 |         p2;
   |         ^^^

warning: path statement with no effect
   --> src/quotearg.rs:358:25
    |
358 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:360:25
    |
360 |                         quote_string;
    |                         ^^^^^^^^^^^^^

warning: path statement with no effect
   --> src/quotearg.rs:396:21
    |
396 |                     len;
    |                     ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:426:21
    |
426 |                     len;
    |                     ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:487:29
    |
487 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:492:29
    |
492 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:497:29
    |
497 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:504:25
    |
504 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:523:29
    |
523 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:528:29
    |
528 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:579:49
    |
579 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:584:49
    |
584 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:589:49
    |
589 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:594:49
    |
594 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:642:49
    |
642 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:647:49
    |
647 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:652:49
    |
652 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:657:49
    |
657 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:767:25
    |
767 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:772:25
    |
772 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:777:25
    |
777 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:830:37
    |
830 | ...                   m;
    |                       ^^

warning: path statement with no effect
   --> src/quotearg.rs:852:41
    |
852 | ...                   j;
    |                       ^^

warning: path statement with no effect
   --> src/quotearg.rs:883:37
    |
883 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:888:37
    |
888 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:893:37
    |
893 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:900:33
    |
900 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:909:33
    |
909 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:919:33
    |
919 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:927:33
    |
927 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:940:33
    |
940 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:945:33
    |
945 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:952:29
    |
952 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1072:25
     |
1072 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1077:25
     |
1077 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1082:25
     |
1082 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1089:21
     |
1089 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1101:25
     |
1101 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1106:25
     |
1106 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1113:21
     |
1113 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1121:13
     |
1121 |             i;
     |             ^^

warning: path statement with no effect
    --> src/quotearg.rs:1186:21
     |
1186 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1188:21
     |
1188 |                     quote_string;
     |                     ^^^^^^^^^^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1305:9
     |
1305 |         i;
     |         ^^

warning: path statement with no effect
   --> src/sig2str.rs:405:13
    |
405 |             i;
    |             ^^

warning: path statement with no effect
   --> src/sig2str.rs:476:9
    |
476 |         i;
    |         ^^

warning: path statement with no effect
   --> src/version_etc.rs:260:9
    |
260 |         n_authors;
    |         ^^^^^^^^^^

warning: path statement with no effect
   --> src/version_etc.rs:282:9
    |
282 |         n_authors;
    |         ^^^^^^^^^^

warning: path statement with no effect
   --> src/xstrtoimax.rs:511:29
    |
511 | ...                   suffixes;
    |                       ^^^^^^^^^

warning: path statement with no effect
   --> src/xstrtoumax.rs:560:29
    |
560 | ...                   suffixes;
    |                       ^^^^^^^^^

warning: `rust` (lib) generated 2927 warnings
warning: unused label
    --> src/split.rs:1336:17
     |
1336 |                 'c_9037: {
     |                 ^^^^^^^
     |
     = note: `#[warn(unused_labels)]` on by default

warning: unused label
    --> src/split.rs:2954:5
     |
2954 |     'c_13572: {
     |     ^^^^^^^^

warning: unused label
    --> src/split.rs:3252:5
     |
3252 |     'c_14132: {
     |     ^^^^^^^^

warning: unused label
    --> src/split.rs:5810:13
     |
5810 |             'c_16295: {
     |             ^^^^^^^^

warning: long literal lacking separators
   --> src/split.rs:332:41
    |
332 | pub const IO_BUFSIZE: C2RustUnnamed_1 = 262144;
    |                                         ^^^^^^ help: consider: `262_144`
    |
    = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:334:46
    |
334 | pub const SYS_BUFSIZE_MAX: C2RustUnnamed_2 = 2146435072;
    |                                              ^^^^^^^^^^ help: consider: `2_146_435_072`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:523:28
    |
523 |     return (*sb).st_mode & 0o170000 as libc::c_int as libc::c_uint
    |                            ^^^^^^^^ help: consider: `0o170_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:524:12
    |
524 |         == 0o100000 as libc::c_int as libc::c_uint
    |            ^^^^^^^^ help: consider: `0o100_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:525:28
    |
525 |         || (*sb).st_mode & 0o170000 as libc::c_int as libc::c_uint
    |                            ^^^^^^^^ help: consider: `0o170_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:526:16
    |
526 |             == 0o120000 as libc::c_int as libc::c_uint
    |                ^^^^^^^^ help: consider: `0o120_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:611:24
    |
611 |     if (*st).st_mode & 0o170000 as libc::c_int as libc::c_uint
    |                        ^^^^^^^^ help: consider: `0o170_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:612:12
    |
612 |         == 0o100000 as libc::c_int as libc::c_uint
    |            ^^^^^^^^ help: consider: `0o100_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: operator precedence can trip the unwary
   --> src/split.rs:613:12
    |
613 |         && blocksize & blocksize - 1 as libc::c_int as libc::c_long != 0
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `blocksize & (blocksize - 1 as libc::c_int as libc::c_long)`
    |
    = note: `-W clippy::precedence` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

warning: long literal lacking separators
   --> src/split.rs:618:13
    |
618 |         if (9223372036854775807 as libc::c_long as libc::c_ulonglong)
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:619:16
    |
619 |             < (9223372036854775807 as libc::c_longlong as libc::c_ulonglong)
    |                ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: operator precedence can trip the unwary
   --> src/split.rs:623:48
    |
623 |               let mut power: libc::c_ulonglong = (1 as libc::c_ulonglong)
    |  ________________________________________________^
624 | |                 << 64 as libc::c_int - leading_zeros;
    | |____________________________________________________^ help: consider parenthesizing your expression: `(1 as libc::c_ulonglong) << (64 as libc::c_int - leading_zeros)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

warning: long literal lacking separators
   --> src/split.rs:625:25
    |
625 |             if power <= 9223372036854775807 as libc::c_long as libc::c_ulonglong {
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:630:21
    |
630 |     return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:631:11
    |
631 |         < 18446744073709551615 as libc::c_ulong
    |           ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:633:9
    |
633 |         9223372036854775807 as libc::c_long as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:635:9
    |
635 |         18446744073709551615 as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:640:14
    |
640 |         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |              ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:641:15
    |
641 |             < 18446744073709551615 as libc::c_ulong
    |               ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:643:13
    |
643 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:645:13
    |
645 |             18446744073709551615 as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:902:35
    |
902 |                     n_units_end = 9223372036854775807 as libc::c_long;
    |                                   ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
   --> src/split.rs:969:12
    |
969 |       } else {
    |  ____________^
970 | |         suffix_length = (if 2 as libc::c_int > suffix_length_needed {
971 | |             2 as libc::c_int
972 | |         } else {
973 | |             suffix_length_needed
974 | |         }) as idx_t;
975 | |     };
    | |_____^
    |
    = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/split.rs:1172:28
     |
1172 |         current_block_37 = 9769017674192345533;
     |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `9_769_017_674_192_345_533`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1179:36
     |
1179 |                 current_block_37 = 14434620278749266018;
     |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_434_620_278_749_266_018`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1192:36
     |
1192 |                 current_block_37 = 9769017674192345533;
     |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `9_769_017_674_192_345_533`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1209:13
     |
1209 |             9769017674192345533 => {}
     |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_769_017_674_192_345_533`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1255:36
     |
1255 |                 current_block_37 = 2873832966593178012;
     |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_873_832_966_593_178_012`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1260:9
     |
1260 |         9769017674192345533 => {
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_769_017_674_192_345_533`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/split.rs:1583:12
     |
1583 |       } else {
     |  ____________^
1584 | |         let mut fd_pair: [libc::c_int; 2] = [0; 2];
1585 | |         let mut child_pid: pid_t = 0;
1586 | |         let mut shell_prog: *const libc::c_char = getenv(
...    |
2053 | |         return fd_pair[1 as libc::c_int as usize];
2054 | |     };
     | |_____^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/split.rs:1521:40
     |
1521 |             && (out_stat_buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
     |                                        ^^^^^^^^ help: consider: `0o170_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1522:20
     |
1522 |                 == 0o100000 as libc::c_int as libc::c_uint
     |                    ^^^^^^^^ help: consider: `0o100_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:2040:21
     |
2040 |                 if (2147483647 as libc::c_int as libc::c_long)
     |                     ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:2041:23
     |
2041 |                     < 9223372036854775807 as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:2043:21
     |
2043 |                     2147483647 as libc::c_int as libc::c_long
     |                     ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:2045:21
     |
2045 |                     9223372036854775807 as libc::c_long
     |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/split.rs:2177:20
     |
2177 |               } else {
     |  ____________________^
2178 | |                 j += 1;
2179 | |                 j;
2180 | |             }
     | |_____________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: this `else { if .. }` block can be collapsed
    --> src/split.rs:2379:16
     |
2379 |           } else {
     |  ________________^
2380 | |             if 0 != 0 {
2381 | |                 error(
2382 | |                     1 as libc::c_int,
...    |
2426 | |             };
2427 | |         }
     | |_________^
     |
     = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
2379 ~         } else if 0 != 0 {
2380 +             error(
2381 +                 1 as libc::c_int,
2382 +                 0 as libc::c_int,
2383 +                 gettext(
2384 +                     b"unknown status from command (0x%X)\0" as *const u8
2385 +                         as *const libc::c_char,
2386 +                 ),
2387 +                 (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
2388 +             );
2389 +             if 1 as libc::c_int != 0 as libc::c_int {
2390 +                 unreachable!();
2391 +             } else {};
2392 +         } else {
2393 +             ({
2394 +                 let __errstatus: libc::c_int = 1 as libc::c_int;
2395 +                 error(
2396 +                     __errstatus,
2397 +                     0 as libc::c_int,
2398 +                     gettext(
2399 +                         b"unknown status from command (0x%X)\0" as *const u8
2400 +                             as *const libc::c_char,
2401 +                     ),
2402 +                     (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
2403 +                 );
2404 +                 if __errstatus != 0 as libc::c_int {
2405 +                     unreachable!();
2406 +                 } else {};
2407 +                 
2408 +             });
2409 +             ({
2410 +                 let __errstatus: libc::c_int = 1 as libc::c_int;
2411 +                 error(
2412 +                     __errstatus,
2413 +                     0 as libc::c_int,
2414 +                     gettext(
2415 +                         b"unknown status from command (0x%X)\0" as *const u8
2416 +                             as *const libc::c_char,
2417 +                     ),
2418 +                     (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
2419 +                 );
2420 +                 if __errstatus != 0 as libc::c_int {
2421 +                     unreachable!();
2422 +                 } else {};
2423 +                 
2424 +             });
2425 +         }
     |

warning: redundant else block
    --> src/split.rs:2501:12
     |
2501 |       } else {
     |  ____________^
2502 | |         if !ignorable(*__errno_location()) {
2503 | |             if 0 != 0 {
2504 | |                 error(
...    |
2554 | |         return 0 as libc::c_int != 0;
2555 | |     };
     | |_____^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
    --> src/split.rs:2654:20
     |
2654 |               } else {
     |  ____________________^
2655 | |                 bp_out = bp_out.offset(to_write as isize);
2656 | |                 n_read -= to_write;
2657 | |                 to_write = n_bytes + (opened < rem_bytes) as libc::c_int as libc::c_long;
2658 | |             }
     | |_____________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
    --> src/split.rs:2764:20
     |
2764 |               } else {
     |  ____________________^
2765 | |                 bp = bp.offset(1);
2766 | |                 bp;
2767 | |                 n += 1;
...    |
2777 | |                 }
2778 | |             }
     | |_____________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: binding's name is too similar to existing binding
    --> src/split.rs:2855:21
     |
2855 |             let mut eol: *mut libc::c_char = 0 as *mut libc::c_char;
     |                     ^^^
     |
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
    --> src/split.rs:2854:21
     |
2854 |             let mut eoc: *mut libc::c_char = 0 as *mut libc::c_char;
     |                     ^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: redundant else block
    --> src/split.rs:3185:24
     |
3185 |                   } else {
     |  ________________________^
3186 | |                     if k == chunk_no {
3187 | |                         return;
3188 | |                     }
...    |
3204 | |                     }
3205 | |                 }
     | |_________________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: binding's name is too similar to existing binding
    --> src/split.rs:3468:9
     |
3468 |     mut nfiles: idx_t,
     |         ^^^^^^
     |
note: existing binding defined here
    --> src/split.rs:3466:9
     |
3466 |     mut files: *mut of_t,
     |         ^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
    --> src/split.rs:3741:13
     |
3741 |         if (9223372036854775807 as libc::c_long) < n {
     |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/split.rs:4247:9
     |
4247 |     mut argv: *mut *mut libc::c_char,
     |         ^^^^
     |
note: existing binding defined here
    --> src/split.rs:4246:9
     |
4246 |     mut argc: libc::c_int,
     |         ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: adding items after statements is confusing, since items exist from the start of the scope
    --> src/split.rs:4254:5
     |
4254 | /     static mut multipliers: [libc::c_char; 15] = unsafe {
4255 | |         *::core::mem::transmute::<&[u8; 15], &[libc::c_char; 15]>(b"bEGKkMmPQRTYZ0\0")
4256 | |     };
     | |______^
     |
     = note: `-W clippy::items-after-statements` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: long literal lacking separators
    --> src/split.rs:4302:21
     |
4302 |                     9223372036854775807 as libc::c_long,
     |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
    --> src/split.rs:4675:28
     |
4675 |                       } else {
     |  ____________________________^
4676 | |                         if 0 != 0 {
4677 | |                             error(
4678 | |                                 1 as libc::c_int,
...    |
4722 | |                         };
4723 | |                     }
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
4675 ~                     } else if 0 != 0 {
4676 +                         error(
4677 +                             1 as libc::c_int,
4678 +                             0 as libc::c_int,
4679 +                             gettext(
4680 +                                 b"multi-character separator %s\0" as *const u8
4681 +                                     as *const libc::c_char,
4682 +                             ),
4683 +                             quote(optarg),
4684 +                         );
4685 +                         if 1 as libc::c_int != 0 as libc::c_int {
4686 +                             unreachable!();
4687 +                         } else {};
4688 +                     } else {
4689 +                         ({
4690 +                             let __errstatus: libc::c_int = 1 as libc::c_int;
4691 +                             error(
4692 +                                 __errstatus,
4693 +                                 0 as libc::c_int,
4694 +                                 gettext(
4695 +                                     b"multi-character separator %s\0" as *const u8
4696 +                                         as *const libc::c_char,
4697 +                                 ),
4698 +                                 quote(optarg),
4699 +                             );
4700 +                             if __errstatus != 0 as libc::c_int {
4701 +                                 unreachable!();
4702 +                             } else {};
4703 +                             
4704 +                         });
4705 +                         ({
4706 +                             let __errstatus: libc::c_int = 1 as libc::c_int;
4707 +                             error(
4708 +                                 __errstatus,
4709 +                                 0 as libc::c_int,
4710 +                                 gettext(
4711 +                                     b"multi-character separator %s\0" as *const u8
4712 +                                         as *const libc::c_char,
4713 +                                 ),
4714 +                                 quote(optarg),
4715 +                             );
4716 +                             if __errstatus != 0 as libc::c_int {
4717 +                                 unreachable!();
4718 +                             } else {};
4719 +                             
4720 +                         });
4721 +                     }
     |

warning: this `else { if .. }` block can be collapsed
    --> src/split.rs:5040:28
     |
5040 |                       } else {
     |  ____________________________^
5041 | |                         if 10 as libc::c_int == 0 as libc::c_int {
5042 | |                             0 as libc::c_int
5043 | |                         } else {
...    |
5158 | |                         }
5159 | |                     }) != 0
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
5040 ~                     } else if 10 as libc::c_int == 0 as libc::c_int {
5041 +                         0 as libc::c_int
5042 +                     } else {
5043 +                         if n_units < 0 as libc::c_int as libc::c_long {
5044 +                             if (if (if ((if 1 as libc::c_int != 0 {
5045 +                                 0 as libc::c_int as libc::c_long
5046 +                             } else {
5047 +                                 (if 1 as libc::c_int != 0 {
5048 +                                     0 as libc::c_int as libc::c_long
5049 +                                 } else {
5050 +                                     n_units
5051 +                                 }) + 0 as libc::c_int as intmax_t
5052 +                             }) - 1 as libc::c_int as libc::c_long)
5053 +                                 < 0 as libc::c_int as libc::c_long
5054 +                             {
5055 +                                 !(((((if 1 as libc::c_int != 0 {
5056 +                                     0 as libc::c_int as libc::c_long
5057 +                                 } else {
5058 +                                     (if 1 as libc::c_int != 0 {
5059 +                                         0 as libc::c_int as libc::c_long
5060 +                                     } else {
5061 +                                         n_units
5062 +                                     }) + 0 as libc::c_int as intmax_t
5063 +                                 }) + 1 as libc::c_int as libc::c_long)
5064 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
5065 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
5066 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
5067 +                                     - 1 as libc::c_int as libc::c_long)
5068 +                                     * 2 as libc::c_int as libc::c_long
5069 +                                     + 1 as libc::c_int as libc::c_long)
5070 +                             } else {
5071 +                                 (if 1 as libc::c_int != 0 {
5072 +                                     0 as libc::c_int as libc::c_long
5073 +                                 } else {
5074 +                                     (if 1 as libc::c_int != 0 {
5075 +                                         0 as libc::c_int as libc::c_long
5076 +                                     } else {
5077 +                                         n_units
5078 +                                     }) + 0 as libc::c_int as intmax_t
5079 +                                 }) + 0 as libc::c_int as libc::c_long
5080 +                             }) < 0 as libc::c_int as libc::c_long
5081 +                             {
5082 +                                 (((if 1 as libc::c_int != 0 {
5083 +                                     0 as libc::c_int as libc::c_long
5084 +                                 } else {
5085 +                                     n_units
5086 +                                 }) + 0 as libc::c_int as intmax_t)
5087 +                                     < -(if ((if 1 as libc::c_int != 0 {
5088 +                                         0 as libc::c_int as libc::c_long
5089 +                                     } else {
5090 +                                         (if 1 as libc::c_int != 0 {
5091 +                                             0 as libc::c_int as libc::c_long
5092 +                                         } else {
5093 +                                             n_units
5094 +                                         }) + 0 as libc::c_int as intmax_t
5095 +                                     }) - 1 as libc::c_int as libc::c_long)
5096 +                                         < 0 as libc::c_int as libc::c_long
5097 +                                     {
5098 +                                         ((((if 1 as libc::c_int != 0 {
5099 +                                             0 as libc::c_int as libc::c_long
5100 +                                         } else {
5101 +                                             (if 1 as libc::c_int != 0 {
5102 +                                                 0 as libc::c_int as libc::c_long
5103 +                                             } else {
5104 +                                                 n_units
5105 +                                             }) + 0 as libc::c_int as intmax_t
5106 +                                         }) + 1 as libc::c_int as libc::c_long)
5107 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
5108 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
5109 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
5110 +                                             - 1 as libc::c_int as libc::c_long)
5111 +                                             * 2 as libc::c_int as libc::c_long
5112 +                                             + 1 as libc::c_int as libc::c_long
5113 +                                     } else {
5114 +                                         (if 1 as libc::c_int != 0 {
5115 +                                             0 as libc::c_int as libc::c_long
5116 +                                         } else {
5117 +                                             (if 1 as libc::c_int != 0 {
5118 +                                                 0 as libc::c_int as libc::c_long
5119 +                                             } else {
5120 +                                                 n_units
5121 +                                             }) + 0 as libc::c_int as intmax_t
5122 +                                         }) - 1 as libc::c_int as libc::c_long
5123 +                                     })) as libc::c_int
5124 +                             } else {
5125 +                                 ((0 as libc::c_int as libc::c_long)
5126 +                                     < (if 1 as libc::c_int != 0 {
5127 +                                         0 as libc::c_int as libc::c_long
5128 +                                     } else {
5129 +                                         n_units
5130 +                                     }) + 0 as libc::c_int as intmax_t) as libc::c_int
5131 +                             }) != 0 && n_units == -(1 as libc::c_int) as libc::c_long
5132 +                             {
5133 +                                 if ((if 1 as libc::c_int != 0 {
5134 +                                     0 as libc::c_int
5135 +                                 } else {
5136 +                                     10 as libc::c_int
5137 +                                 }) - 1 as libc::c_int) < 0 as libc::c_int
5138 +                                 {
5139 +                                     ((0 as libc::c_int as libc::c_long)
5140 +                                         < 10 as libc::c_int as libc::c_long
5141 +                                             + 0 as libc::c_int as intmax_t) as libc::c_int
5142 +                                 } else {
5143 +                                     ((-(1 as libc::c_int) as libc::c_long
5144 +                                         - 0 as libc::c_int as intmax_t)
5145 +                                         < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
5146 +                                         as libc::c_int
5147 +                                 }
5148 +                             } else {
5149 +                                 (0 as libc::c_int as intmax_t / n_units
5150 +                                     < 10 as libc::c_int as libc::c_long) as libc::c_int
5151 +                             }
5152 +                         } else {
5153 +                             ((-(1 as libc::c_int) as intmax_t
5154 +                                 / 10 as libc::c_int as libc::c_long) < n_units)
5155 +                                 as libc::c_int
5156 +                         }
5157 ~                     }) != 0
     |

warning: this `else { if .. }` block can be collapsed
    --> src/split.rs:4928:32
     |
4928 |                           } else {
     |  ________________________________^
4929 | |                             if (if (if ((if 1 as libc::c_int != 0 {
4930 | |                                 0 as libc::c_int as libc::c_long
4931 | |                             } else {
...    |
5038 | |                             }
5039 | |                         }
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
4928 ~                         } else if (if (if ((if 1 as libc::c_int != 0 {
4929 +                             0 as libc::c_int as libc::c_long
4930 +                         } else {
4931 +                             (if 1 as libc::c_int != 0 {
4932 +                                 0 as libc::c_int
4933 +                             } else {
4934 +                                 10 as libc::c_int
4935 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
4936 +                         }) - 1 as libc::c_int as libc::c_long)
4937 +                             < 0 as libc::c_int as libc::c_long
4938 +                         {
4939 +                             !(((((if 1 as libc::c_int != 0 {
4940 +                                 0 as libc::c_int as libc::c_long
4941 +                             } else {
4942 +                                 (if 1 as libc::c_int != 0 {
4943 +                                     0 as libc::c_int
4944 +                                 } else {
4945 +                                     10 as libc::c_int
4946 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
4947 +                             }) + 1 as libc::c_int as libc::c_long)
4948 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4949 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4950 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4951 +                                 - 1 as libc::c_int as libc::c_long)
4952 +                                 * 2 as libc::c_int as libc::c_long
4953 +                                 + 1 as libc::c_int as libc::c_long)
4954 +                         } else {
4955 +                             (if 1 as libc::c_int != 0 {
4956 +                                 0 as libc::c_int as libc::c_long
4957 +                             } else {
4958 +                                 (if 1 as libc::c_int != 0 {
4959 +                                     0 as libc::c_int
4960 +                                 } else {
4961 +                                     10 as libc::c_int
4962 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
4963 +                             }) + 0 as libc::c_int as libc::c_long
4964 +                         }) < 0 as libc::c_int as libc::c_long
4965 +                         {
4966 +                             (((if 1 as libc::c_int != 0 {
4967 +                                 0 as libc::c_int
4968 +                             } else {
4969 +                                 10 as libc::c_int
4970 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t)
4971 +                                 < -(if ((if 1 as libc::c_int != 0 {
4972 +                                     0 as libc::c_int as libc::c_long
4973 +                                 } else {
4974 +                                     (if 1 as libc::c_int != 0 {
4975 +                                         0 as libc::c_int
4976 +                                     } else {
4977 +                                         10 as libc::c_int
4978 +                                     }) as libc::c_long + 0 as libc::c_int as intmax_t
4979 +                                 }) - 1 as libc::c_int as libc::c_long)
4980 +                                     < 0 as libc::c_int as libc::c_long
4981 +                                 {
4982 +                                     ((((if 1 as libc::c_int != 0 {
4983 +                                         0 as libc::c_int as libc::c_long
4984 +                                     } else {
4985 +                                         (if 1 as libc::c_int != 0 {
4986 +                                             0 as libc::c_int
4987 +                                         } else {
4988 +                                             10 as libc::c_int
4989 +                                         }) as libc::c_long + 0 as libc::c_int as intmax_t
4990 +                                     }) + 1 as libc::c_int as libc::c_long)
4991 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4992 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4993 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4994 +                                         - 1 as libc::c_int as libc::c_long)
4995 +                                         * 2 as libc::c_int as libc::c_long
4996 +                                         + 1 as libc::c_int as libc::c_long
4997 +                                 } else {
4998 +                                     (if 1 as libc::c_int != 0 {
4999 +                                         0 as libc::c_int as libc::c_long
5000 +                                     } else {
5001 +                                         (if 1 as libc::c_int != 0 {
5002 +                                             0 as libc::c_int
5003 +                                         } else {
5004 +                                             10 as libc::c_int
5005 +                                         }) as libc::c_long + 0 as libc::c_int as intmax_t
5006 +                                     }) - 1 as libc::c_int as libc::c_long
5007 +                                 })) as libc::c_int
5008 +                         } else {
5009 +                             ((0 as libc::c_int as libc::c_long)
5010 +                                 < (if 1 as libc::c_int != 0 {
5011 +                                     0 as libc::c_int
5012 +                                 } else {
5013 +                                     10 as libc::c_int
5014 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t)
5015 +                                 as libc::c_int
5016 +                         }) != 0 && 10 as libc::c_int == -(1 as libc::c_int)
5017 +                         {
5018 +                             if ((if 1 as libc::c_int != 0 {
5019 +                                 0 as libc::c_int as libc::c_long
5020 +                             } else {
5021 +                                 n_units
5022 +                             }) - 1 as libc::c_int as libc::c_long)
5023 +                                 < 0 as libc::c_int as libc::c_long
5024 +                             {
5025 +                                 ((0 as libc::c_int as libc::c_long)
5026 +                                     < n_units + 0 as libc::c_int as intmax_t) as libc::c_int
5027 +                             } else {
5028 +                                 ((0 as libc::c_int as libc::c_long) < n_units
5029 +                                     && (-(1 as libc::c_int) as libc::c_long
5030 +                                         - 0 as libc::c_int as intmax_t)
5031 +                                         < n_units - 1 as libc::c_int as libc::c_long) as libc::c_int
5032 +                             }
5033 +                         } else {
5034 +                             ((0 as libc::c_int as intmax_t
5035 +                                 / 10 as libc::c_int as libc::c_long) < n_units)
5036 +                                 as libc::c_int
5037 +                         }
     |

warning: operator precedence can trip the unwary
    --> src/split.rs:4914:37
     |
4914 | / ...                   (if 1 as libc::c_int != 0 {
4915 | | ...                       0 as libc::c_int
4916 | | ...                   } else {
4917 | | ...                       10 as libc::c_int
...    |
4920 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4921 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     | |______________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
     |
4914 ~                                     ((if 1 as libc::c_int != 0 {
4915 +                                         0 as libc::c_int
4916 +                                     } else {
4917 +                                         10 as libc::c_int
4918 +                                     }) as libc::c_long + -(1 as libc::c_int) as intmax_t) >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
4919 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4920 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |

warning: this `else { if .. }` block can be collapsed
    --> src/split.rs:5043:32
     |
5043 |                           } else {
     |  ________________________________^
5044 | |                             if n_units < 0 as libc::c_int as libc::c_long {
5045 | |                                 if (if (if ((if 1 as libc::c_int != 0 {
5046 | |                                     0 as libc::c_int as libc::c_long
...    |
5157 | |                             }
5158 | |                         }
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
5043 ~                         } else if n_units < 0 as libc::c_int as libc::c_long {
5044 +                             if (if (if ((if 1 as libc::c_int != 0 {
5045 +                                 0 as libc::c_int as libc::c_long
5046 +                             } else {
5047 +                                 (if 1 as libc::c_int != 0 {
5048 +                                     0 as libc::c_int as libc::c_long
5049 +                                 } else {
5050 +                                     n_units
5051 +                                 }) + 0 as libc::c_int as intmax_t
5052 +                             }) - 1 as libc::c_int as libc::c_long)
5053 +                                 < 0 as libc::c_int as libc::c_long
5054 +                             {
5055 +                                 !(((((if 1 as libc::c_int != 0 {
5056 +                                     0 as libc::c_int as libc::c_long
5057 +                                 } else {
5058 +                                     (if 1 as libc::c_int != 0 {
5059 +                                         0 as libc::c_int as libc::c_long
5060 +                                     } else {
5061 +                                         n_units
5062 +                                     }) + 0 as libc::c_int as intmax_t
5063 +                                 }) + 1 as libc::c_int as libc::c_long)
5064 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
5065 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
5066 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
5067 +                                     - 1 as libc::c_int as libc::c_long)
5068 +                                     * 2 as libc::c_int as libc::c_long
5069 +                                     + 1 as libc::c_int as libc::c_long)
5070 +                             } else {
5071 +                                 (if 1 as libc::c_int != 0 {
5072 +                                     0 as libc::c_int as libc::c_long
5073 +                                 } else {
5074 +                                     (if 1 as libc::c_int != 0 {
5075 +                                         0 as libc::c_int as libc::c_long
5076 +                                     } else {
5077 +                                         n_units
5078 +                                     }) + 0 as libc::c_int as intmax_t
5079 +                                 }) + 0 as libc::c_int as libc::c_long
5080 +                             }) < 0 as libc::c_int as libc::c_long
5081 +                             {
5082 +                                 (((if 1 as libc::c_int != 0 {
5083 +                                     0 as libc::c_int as libc::c_long
5084 +                                 } else {
5085 +                                     n_units
5086 +                                 }) + 0 as libc::c_int as intmax_t)
5087 +                                     < -(if ((if 1 as libc::c_int != 0 {
5088 +                                         0 as libc::c_int as libc::c_long
5089 +                                     } else {
5090 +                                         (if 1 as libc::c_int != 0 {
5091 +                                             0 as libc::c_int as libc::c_long
5092 +                                         } else {
5093 +                                             n_units
5094 +                                         }) + 0 as libc::c_int as intmax_t
5095 +                                     }) - 1 as libc::c_int as libc::c_long)
5096 +                                         < 0 as libc::c_int as libc::c_long
5097 +                                     {
5098 +                                         ((((if 1 as libc::c_int != 0 {
5099 +                                             0 as libc::c_int as libc::c_long
5100 +                                         } else {
5101 +                                             (if 1 as libc::c_int != 0 {
5102 +                                                 0 as libc::c_int as libc::c_long
5103 +                                             } else {
5104 +                                                 n_units
5105 +                                             }) + 0 as libc::c_int as intmax_t
5106 +                                         }) + 1 as libc::c_int as libc::c_long)
5107 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
5108 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
5109 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
5110 +                                             - 1 as libc::c_int as libc::c_long)
5111 +                                             * 2 as libc::c_int as libc::c_long
5112 +                                             + 1 as libc::c_int as libc::c_long
5113 +                                     } else {
5114 +                                         (if 1 as libc::c_int != 0 {
5115 +                                             0 as libc::c_int as libc::c_long
5116 +                                         } else {
5117 +                                             (if 1 as libc::c_int != 0 {
5118 +                                                 0 as libc::c_int as libc::c_long
5119 +                                             } else {
5120 +                                                 n_units
5121 +                                             }) + 0 as libc::c_int as intmax_t
5122 +                                         }) - 1 as libc::c_int as libc::c_long
5123 +                                     })) as libc::c_int
5124 +                             } else {
5125 +                                 ((0 as libc::c_int as libc::c_long)
5126 +                                     < (if 1 as libc::c_int != 0 {
5127 +                                         0 as libc::c_int as libc::c_long
5128 +                                     } else {
5129 +                                         n_units
5130 +                                     }) + 0 as libc::c_int as intmax_t) as libc::c_int
5131 +                             }) != 0 && n_units == -(1 as libc::c_int) as libc::c_long
5132 +                             {
5133 +                                 if ((if 1 as libc::c_int != 0 {
5134 +                                     0 as libc::c_int
5135 +                                 } else {
5136 +                                     10 as libc::c_int
5137 +                                 }) - 1 as libc::c_int) < 0 as libc::c_int
5138 +                                 {
5139 +                                     ((0 as libc::c_int as libc::c_long)
5140 +                                         < 10 as libc::c_int as libc::c_long
5141 +                                             + 0 as libc::c_int as intmax_t) as libc::c_int
5142 +                                 } else {
5143 +                                     ((-(1 as libc::c_int) as libc::c_long
5144 +                                         - 0 as libc::c_int as intmax_t)
5145 +                                         < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
5146 +                                         as libc::c_int
5147 +                                 }
5148 +                             } else {
5149 +                                 (0 as libc::c_int as intmax_t / n_units
5150 +                                     < 10 as libc::c_int as libc::c_long) as libc::c_int
5151 +                             }
5152 +                         } else {
5153 +                             ((-(1 as libc::c_int) as intmax_t
5154 +                                 / 10 as libc::c_int as libc::c_long) < n_units)
5155 +                                 as libc::c_int
5156 +                         }
     |

warning: long literal lacking separators
    --> src/split.rs:5175:31
     |
5175 |                     n_units = 9223372036854775807 as libc::c_long;
     |                               ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:5280:32
     |
5280 |                         < (if (9223372036854775807 as libc::c_long as libc::c_ulong)
     |                                ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:5281:31
     |
5281 | ...                   < 18446744073709551615 as libc::c_ulong
     |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:5283:29
     |
5283 | ...                   9223372036854775807 as libc::c_long as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:5285:29
     |
5285 | ...                   18446744073709551615 as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:5291:30
     |
5291 |                         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
     |                              ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:5292:31
     |
5292 | ...                   < 18446744073709551615 as libc::c_ulong
     |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:5294:29
     |
5294 | ...                   9223372036854775807 as libc::c_long as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:5296:29
     |
5296 | ...                   18446744073709551615 as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: unreachable statement
    --> src/split.rs:5810:13
     |
5800 | /             __assert_fail(
5801 | |                 b"0\0" as *const u8 as *const libc::c_char,
5802 | |                 b"split.c\0" as *const u8 as *const libc::c_char,
5803 | |                 1686 as libc::c_int as libc::c_uint,
...    |
5808 | |                     .as_ptr(),
5809 | |             );
     | |_____________- any code following this expression is unreachable
5810 | /             'c_16295: {
5811 | |                 __assert_fail(
5812 | |                     b"0\0" as *const u8 as *const libc::c_char,
5813 | |                     b"split.c\0" as *const u8 as *const libc::c_char,
...    |
5820 | |                 );
5821 | |             };
     | |______________^ unreachable statement
     |
     = note: `#[warn(unreachable_code)]` on by default

warning: unnecessary structure name repetition
   --> src/split.rs:241:22
    |
241 |     pub _chain: *mut _IO_FILE,
    |                      ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = note: `-W clippy::use-self` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src/split.rs:252:29
    |
252 |     pub _freeres_list: *mut _IO_FILE,
    |                             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this could be a `const fn`
   --> src/split.rs:368:1
    |
368 | / unsafe extern "C" fn to_uchar(mut ch: libc::c_char) -> libc::c_uchar {
369 | |     return ch as libc::c_uchar;
370 | | }
    | |_^
    |
    = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/split.rs:369:5
    |
369 |     return ch as libc::c_uchar;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `ch as libc::c_uchar`
    |
    = note: `-W clippy::needless-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/split.rs:369:12
    |
369 |     return ch as libc::c_uchar;
    |            ^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
   --> src/split.rs:372:1
    |
372 | / unsafe extern "C" fn psame_inode(mut a: *const stat, mut b: *const stat) -> bool {
373 | |     return (*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0;
374 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/split.rs:373:5
    |
373 |     return (*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:379:13
    |
379 | /             b"\nWith no FILE, or when FILE is -, read standard input.\n\0" as *const u8
380 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nWith no FILE, or when FILE is -, read standard input.\n\0" as *const u8).cast::<i8>()`
    |
    = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:389:13
    |
389 | /             b"\nMandatory arguments to long options are mandatory for short options too.\n\0"
390 | |                 as *const u8 as *const libc::c_char,
    | |___________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nMandatory arguments to long options are mandatory for short options too.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:399:13
    |
399 | /             b"\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\nUnits are K,M,G,T,P,E,Z,Y,R,Q (powers of 10...
400 | |                 as *const u8 as *const libc::c_char,
    | |___________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\nUnits are K,M,G,T,P,E,Z,Y,R,Q (powers of 1024) or KB,MB,... (powers of 1000).\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
   --> src/split.rs:461:12
    |
461 |         && !(strcmp(program, (*map_prog).program) == 0 as libc::c_int)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `strcmp(program, (*map_prog).program) != 0 as libc::c_int`
    |
    = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this function has too many lines (113/100)
   --> src/split.rs:406:1
    |
406 | / unsafe extern "C" fn emit_ancillary_info(mut program: *const libc::c_char) {
407 | |     let infomap_0: [infomap; 7] = [
408 | |         {
409 | |             let mut init = infomap {
...   |
519 | |     );
520 | | }
    | |_^
    |
    = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: returning the result of a `let` binding from a block
   --> src/split.rs:413:13
    |
409 | /             let mut init = infomap {
410 | |                 program: b"[\0" as *const u8 as *const libc::c_char,
411 | |                 node: b"test invocation\0" as *const u8 as *const libc::c_char,
412 | |             };
    | |______________- unnecessary `let` binding
413 |               init
    |               ^^^^
    |
    = note: `-W clippy::let-and-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
409 ~             
410 ~             infomap {
411 +                 program: b"[\0" as *const u8 as *const libc::c_char,
412 +                 node: b"test invocation\0" as *const u8 as *const libc::c_char,
413 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:410:26
    |
410 |                 program: b"[\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"[\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:411:23
    |
411 |                 node: b"test invocation\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"test invocation\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:420:13
    |
416 | /             let mut init = infomap {
417 | |                 program: b"coreutils\0" as *const u8 as *const libc::c_char,
418 | |                 node: b"Multi-call invocation\0" as *const u8 as *const libc::c_char,
419 | |             };
    | |______________- unnecessary `let` binding
420 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
416 ~             
417 ~             infomap {
418 +                 program: b"coreutils\0" as *const u8 as *const libc::c_char,
419 +                 node: b"Multi-call invocation\0" as *const u8 as *const libc::c_char,
420 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:417:26
    |
417 |                 program: b"coreutils\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:418:23
    |
418 |                 node: b"Multi-call invocation\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Multi-call invocation\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:427:13
    |
423 | /             let mut init = infomap {
424 | |                 program: b"sha224sum\0" as *const u8 as *const libc::c_char,
425 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
426 | |             };
    | |______________- unnecessary `let` binding
427 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
423 ~             
424 ~             infomap {
425 +                 program: b"sha224sum\0" as *const u8 as *const libc::c_char,
426 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
427 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:424:26
    |
424 |                 program: b"sha224sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha224sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:425:23
    |
425 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:434:13
    |
430 | /             let mut init = infomap {
431 | |                 program: b"sha256sum\0" as *const u8 as *const libc::c_char,
432 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
433 | |             };
    | |______________- unnecessary `let` binding
434 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
430 ~             
431 ~             infomap {
432 +                 program: b"sha256sum\0" as *const u8 as *const libc::c_char,
433 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
434 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:431:26
    |
431 |                 program: b"sha256sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha256sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:432:23
    |
432 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:441:13
    |
437 | /             let mut init = infomap {
438 | |                 program: b"sha384sum\0" as *const u8 as *const libc::c_char,
439 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
440 | |             };
    | |______________- unnecessary `let` binding
441 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
437 ~             
438 ~             infomap {
439 +                 program: b"sha384sum\0" as *const u8 as *const libc::c_char,
440 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
441 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:438:26
    |
438 |                 program: b"sha384sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha384sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:439:23
    |
439 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:448:13
    |
444 | /             let mut init = infomap {
445 | |                 program: b"sha512sum\0" as *const u8 as *const libc::c_char,
446 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
447 | |             };
    | |______________- unnecessary `let` binding
448 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
444 ~             
445 ~             infomap {
446 +                 program: b"sha512sum\0" as *const u8 as *const libc::c_char,
447 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
448 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:445:26
    |
445 |                 program: b"sha512sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha512sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:446:23
    |
446 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:455:13
    |
451 | /             let mut init = infomap {
452 | |                 program: 0 as *const libc::c_char,
453 | |                 node: 0 as *const libc::c_char,
454 | |             };
    | |______________- unnecessary `let` binding
455 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
451 ~             
452 ~             infomap {
453 +                 program: 0 as *const libc::c_char,
454 +                 node: 0 as *const libc::c_char,
455 +             }
    |

warning: `0 as *const _` detected
   --> src/split.rs:452:26
    |
452 |                 program: 0 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/split.rs:453:23
    |
453 |                 node: 0 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/split.rs:464:9
    |
464 |         map_prog;
    |         ^^^^^^^^^
    |
    = note: `-W clippy::no-effect` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:470:17
    |
470 |         gettext(b"\n%s online help: <%s>\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n%s online help: <%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:471:9
    |
471 |         b"GNU coreutils\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:472:9
    |
472 |         b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/software/coreutils/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *const _` detected
   --> src/split.rs:476:9
    |
476 |         0 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:481:13
    |
481 |             b"en_\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"en_\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:483:31
    |
483 |                 .wrapping_sub(1 as libc::c_int as libc::c_ulong),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:488:17
    |
488 | /                 b"Report any translation bugs to <https://translationproject.org/team/>\n\0"
489 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Report any translation bugs to <https://translationproject.org/team/>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:496:9
    |
496 |         b"[\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"[\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:499:9
    |
499 |         b"test\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"test\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:504:17
    |
504 |         gettext(b"Full documentation <%s%s>\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Full documentation <%s%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:505:9
    |
505 |         b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/software/coreutils/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:510:13
    |
510 | /             b"or available locally via: info '(coreutils) %s%s'\n\0" as *const u8
511 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"or available locally via: info '(coreutils) %s%s'\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:515:13
    |
515 |             b" invocation\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b" invocation\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:517:13
    |
517 |             b"\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this could be a `const fn`
   --> src/split.rs:522:1
    |
522 | / unsafe extern "C" fn usable_st_size(mut sb: *const stat) -> bool {
523 | |     return (*sb).st_mode & 0o170000 as libc::c_int as libc::c_uint
524 | |         == 0o100000 as libc::c_int as libc::c_uint
525 | |         || (*sb).st_mode & 0o170000 as libc::c_int as libc::c_uint
526 | |             == 0o120000 as libc::c_int as libc::c_uint
527 | |         || ((*sb).st_mode).wrapping_sub((*sb).st_mode) != 0 || 0 as libc::c_int != 0;
528 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/split.rs:523:5
    |
523 | /     return (*sb).st_mode & 0o170000 as libc::c_int as libc::c_uint
524 | |         == 0o100000 as libc::c_int as libc::c_uint
525 | |         || (*sb).st_mode & 0o170000 as libc::c_int as libc::c_uint
526 | |             == 0o120000 as libc::c_int as libc::c_uint
527 | |         || ((*sb).st_mode).wrapping_sub((*sb).st_mode) != 0 || 0 as libc::c_int != 0;
    | |_____________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
523 ~     (*sb).st_mode & 0o170000 as libc::c_int as libc::c_uint
524 +         == 0o100000 as libc::c_int as libc::c_uint
525 +         || (*sb).st_mode & 0o170000 as libc::c_int as libc::c_uint
526 +             == 0o120000 as libc::c_int as libc::c_uint
527 +         || ((*sb).st_mode).wrapping_sub((*sb).st_mode) != 0 || 0 as libc::c_int != 0
    |

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:523:28
    |
523 |     return (*sb).st_mode & 0o170000 as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:524:12
    |
524 |         == 0o100000 as libc::c_int as libc::c_uint
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:525:28
    |
525 |         || (*sb).st_mode & 0o170000 as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:526:16
    |
526 |             == 0o120000 as libc::c_int as libc::c_uint
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/split.rs:535:5
    |
535 | /     if 0 != 0 {
536 | |         error(
537 | |             1 as libc::c_int,
538 | |             saved_errno,
...   |
568 | |         });
569 | |     };
    | |_____^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/split.rs:535:8
    |
535 |     if 0 != 0 {
    |        ^^^^^^
    |
    = note: `-W clippy::eq-op` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:539:21
    |
539 |             gettext(b"write error\0" as *const u8 as *const libc::c_char),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/split.rs:541:9
    |
541 | /         if 1 as libc::c_int != 0 as libc::c_int {
542 | |             unreachable!();
543 | |         } else {};
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/split.rs:546:13
    |
546 |             let __errstatus: libc::c_int = 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:550:25
    |
550 |                 gettext(b"write error\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/split.rs:552:13
    |
552 | /             if __errstatus != 0 as libc::c_int {
553 | |                 unreachable!();
554 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/split.rs:558:13
    |
558 |             let __errstatus: libc::c_int = 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:562:25
    |
562 |                 gettext(b"write error\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/split.rs:564:13
    |
564 | /             if __errstatus != 0 as libc::c_int {
565 | |                 unreachable!();
566 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this could be a `const fn`
   --> src/split.rs:572:1
    |
572 | / unsafe extern "C" fn __gl_stdbit_clzll(mut n: libc::c_ulonglong) -> libc::c_int {
573 | |     return (if n != 0 {
574 | |         n.leading_zeros() as i32 as libc::c_ulong
575 | |     } else {
...   |
578 | |     }) as libc::c_int;
579 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/split.rs:573:5
    |
573 | /     return (if n != 0 {
574 | |         n.leading_zeros() as i32 as libc::c_ulong
575 | |     } else {
576 | |         (8 as libc::c_int as libc::c_ulong)
577 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
578 | |     }) as libc::c_int;
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
573 ~     (if n != 0 {
574 +         n.leading_zeros() as i32 as libc::c_ulong
575 +     } else {
576 +         (8 as libc::c_int as libc::c_ulong)
577 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
578 +     }) as libc::c_int
    |

warning: casting `u64` to `i32` may truncate the value
   --> src/split.rs:573:12
    |
573 |       return (if n != 0 {
    |  ____________^
574 | |         n.leading_zeros() as i32 as libc::c_ulong
575 | |     } else {
576 | |         (8 as libc::c_int as libc::c_ulong)
577 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
578 | |     }) as libc::c_int;
    | |_____________________^
    |
    = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
   --> src/split.rs:573:12
    |
573 |       return (if n != 0 {
    |  ____________^
574 | |         n.leading_zeros() as i32 as libc::c_ulong
575 | |     } else {
576 | |         (8 as libc::c_int as libc::c_ulong)
577 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
578 | |     }) as libc::c_int;
    | |______^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:574:9
    |
574 |         n.leading_zeros() as i32 as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:574:9
    |
574 |         n.leading_zeros() as i32 as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:576:9
    |
576 |         (8 as libc::c_int as libc::c_ulong)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/split.rs:582:5
    |
582 |     return __gl_stdbit_clzll(n) as libc::c_uint;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_stdbit_clzll(n) as libc::c_uint`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:582:12
    |
582 |     return __gl_stdbit_clzll(n) as libc::c_uint;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/split.rs:630:5
    |
630 | /     return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
631 | |         < 18446744073709551615 as libc::c_ulong
632 | |     {
633 | |         9223372036854775807 as libc::c_long as libc::c_ulong
...   |
650 | |         blocksize as libc::c_ulong
651 | |     }) as idx_t;
    | |________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
630 ~     (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
631 +         < 18446744073709551615 as libc::c_ulong
632 +     {
633 +         9223372036854775807 as libc::c_long as libc::c_ulong
634 +     } else {
635 +         18446744073709551615 as libc::c_ulong
636 +     })
637 +         .wrapping_div(2 as libc::c_int as libc::c_ulong)
638 +         .wrapping_add(1 as libc::c_int as libc::c_ulong) < blocksize as libc::c_ulong
639 +     {
640 +         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
641 +             < 18446744073709551615 as libc::c_ulong
642 +         {
643 +             9223372036854775807 as libc::c_long as libc::c_ulong
644 +         } else {
645 +             18446744073709551615 as libc::c_ulong
646 +         })
647 +             .wrapping_div(2 as libc::c_int as libc::c_ulong)
648 +             .wrapping_add(1 as libc::c_int as libc::c_ulong)
649 +     } else {
650 +         blocksize as libc::c_ulong
651 +     }) as idx_t
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:586:32
    |
586 |       let mut blocksize: idx_t = (if (if (0 as libc::c_int) < (*st).st_blksize
    |  ________________________________^
587 | |         && (*st).st_blksize as libc::c_ulong
588 | |             <= (-(1 as libc::c_int) as size_t)
589 | |                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
...   |
606 | |         512 as libc::c_int
607 | |     }) as idx_t;
    | |_______________^
    |
    = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
586 ~     let mut blocksize: idx_t = i64::from((if (if (0 as libc::c_int) < (*st).st_blksize
587 +         && (*st).st_blksize as libc::c_ulong
588 +             <= (-(1 as libc::c_int) as size_t)
589 +                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
590 +                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
591 +     {
592 +         (*st).st_blksize
593 +     } else {
594 +         512 as libc::c_int
595 +     }) <= 0 as libc::c_int
596 +     {
597 +         IO_BUFSIZE as libc::c_int
598 +     } else if (0 as libc::c_int) < (*st).st_blksize
599 +         && (*st).st_blksize as libc::c_ulong
600 +             <= (-(1 as libc::c_int) as size_t)
601 +                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
602 +                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
603 +     {
604 +         (*st).st_blksize
605 +     } else {
606 +         512 as libc::c_int
607 ~     }));
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:587:12
    |
587 |         && (*st).st_blksize as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:588:16
    |
588 |             <= (-(1 as libc::c_int) as size_t)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:589:31
    |
589 |                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:590:31
    |
590 |                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:597:9
    |
597 |         IO_BUFSIZE as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:599:12
    |
599 |         && (*st).st_blksize as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:600:16
    |
600 |             <= (-(1 as libc::c_int) as size_t)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:601:31
    |
601 |                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:602:31
    |
602 |                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:609:12
    |
609 |         += (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(IO_BUFSIZE as libc::c_int - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:609:13
    |
609 |         += (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:610:15
    |
610 |             - (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long % blocksize;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(IO_BUFSIZE as libc::c_int - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:610:16
    |
610 |             - (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long % blocksize;
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:611:24
    |
611 |     if (*st).st_mode & 0o170000 as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:612:12
    |
612 |         == 0o100000 as libc::c_int as libc::c_uint
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:613:36
    |
613 |         && blocksize & blocksize - 1 as libc::c_int as libc::c_long != 0
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:615:46
    |
615 |           let mut leading_zeros: libc::c_int = stdc_leading_zeros_ull(
    |  ______________________________________________^
616 | |             blocksize as libc::c_ulonglong,
617 | |         ) as libc::c_int;
    | |________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:616:13
    |
616 |             blocksize as libc::c_ulonglong,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:618:12
    |
618 |         if (9223372036854775807 as libc::c_long as libc::c_ulonglong)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:619:15
    |
619 |             < (9223372036854775807 as libc::c_longlong as libc::c_ulonglong)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:625:25
    |
625 |             if power <= 9223372036854775807 as libc::c_long as libc::c_ulonglong {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
   --> src/split.rs:626:29
    |
626 |                 blocksize = power as idx_t;
    |                             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i64` may wrap around the value
   --> src/split.rs:630:12
    |
630 |       return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |  ____________^
631 | |         < 18446744073709551615 as libc::c_ulong
632 | |     {
633 | |         9223372036854775807 as libc::c_long as libc::c_ulong
...   |
650 | |         blocksize as libc::c_ulong
651 | |     }) as idx_t;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:630:20
    |
630 |     return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:633:9
    |
633 |         9223372036854775807 as libc::c_long as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:637:23
    |
637 |         .wrapping_div(2 as libc::c_int as libc::c_ulong)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:638:23
    |
638 |         .wrapping_add(1 as libc::c_int as libc::c_ulong) < blocksize as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:638:60
    |
638 |         .wrapping_add(1 as libc::c_int as libc::c_ulong) < blocksize as libc::c_ulong
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:640:13
    |
640 |         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:643:13
    |
643 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:647:27
    |
647 |             .wrapping_div(2 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:648:27
    |
648 |             .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:650:9
    |
650 |         blocksize as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
   --> src/split.rs:654:1
    |
654 | / unsafe extern "C" fn __gl_setmode(
655 | |     mut _fd: libc::c_int,
656 | |     mut _mode: libc::c_int,
657 | | ) -> libc::c_int {
658 | |     return 0 as libc::c_int;
659 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/split.rs:658:5
    |
658 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/split.rs:665:5
    |
665 |     return __gl_setmode(fd, mode);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_setmode(fd, mode)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
   --> src/split.rs:668:1
    |
668 | unsafe extern "C" fn xset_binary_mode_error() {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:687:51
    |
687 |   static mut suffix_alphabet: *const libc::c_char = b"abcdefghijklmnopqrstuvwxyz\0"
    |  ___________________________________________________^
688 | |     as *const u8 as *const libc::c_char;
    | |_______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"abcdefghijklmnopqrstuvwxyz\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:723:9
    |
717 | /         let mut init = option {
718 | |             name: b"bytes\0" as *const u8 as *const libc::c_char,
719 | |             has_arg: 1 as libc::c_int,
720 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
721 | |             val: 'b' as i32,
722 | |         };
    | |__________- unnecessary `let` binding
723 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
717 ~         
718 ~         option {
719 +             name: b"bytes\0" as *const u8 as *const libc::c_char,
720 +             has_arg: 1 as libc::c_int,
721 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
722 +             val: 'b' as i32,
723 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:718:19
    |
718 |             name: b"bytes\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"bytes\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:732:9
    |
726 | /         let mut init = option {
727 | |             name: b"lines\0" as *const u8 as *const libc::c_char,
728 | |             has_arg: 1 as libc::c_int,
729 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
730 | |             val: 'l' as i32,
731 | |         };
    | |__________- unnecessary `let` binding
732 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
726 ~         
727 ~         option {
728 +             name: b"lines\0" as *const u8 as *const libc::c_char,
729 +             has_arg: 1 as libc::c_int,
730 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
731 +             val: 'l' as i32,
732 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:727:19
    |
727 |             name: b"lines\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"lines\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:741:9
    |
735 | /         let mut init = option {
736 | |             name: b"line-bytes\0" as *const u8 as *const libc::c_char,
737 | |             has_arg: 1 as libc::c_int,
738 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
739 | |             val: 'C' as i32,
740 | |         };
    | |__________- unnecessary `let` binding
741 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
735 ~         
736 ~         option {
737 +             name: b"line-bytes\0" as *const u8 as *const libc::c_char,
738 +             has_arg: 1 as libc::c_int,
739 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
740 +             val: 'C' as i32,
741 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:736:19
    |
736 |             name: b"line-bytes\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"line-bytes\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:750:9
    |
744 | /         let mut init = option {
745 | |             name: b"number\0" as *const u8 as *const libc::c_char,
746 | |             has_arg: 1 as libc::c_int,
747 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
748 | |             val: 'n' as i32,
749 | |         };
    | |__________- unnecessary `let` binding
750 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
744 ~         
745 ~         option {
746 +             name: b"number\0" as *const u8 as *const libc::c_char,
747 +             has_arg: 1 as libc::c_int,
748 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
749 +             val: 'n' as i32,
750 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:745:19
    |
745 |             name: b"number\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"number\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:759:9
    |
753 | /         let mut init = option {
754 | |             name: b"elide-empty-files\0" as *const u8 as *const libc::c_char,
755 | |             has_arg: 0 as libc::c_int,
756 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
757 | |             val: 'e' as i32,
758 | |         };
    | |__________- unnecessary `let` binding
759 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
753 ~         
754 ~         option {
755 +             name: b"elide-empty-files\0" as *const u8 as *const libc::c_char,
756 +             has_arg: 0 as libc::c_int,
757 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
758 +             val: 'e' as i32,
759 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:754:19
    |
754 |             name: b"elide-empty-files\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"elide-empty-files\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:768:9
    |
762 | /         let mut init = option {
763 | |             name: b"unbuffered\0" as *const u8 as *const libc::c_char,
764 | |             has_arg: 0 as libc::c_int,
765 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
766 | |             val: 'u' as i32,
767 | |         };
    | |__________- unnecessary `let` binding
768 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
762 ~         
763 ~         option {
764 +             name: b"unbuffered\0" as *const u8 as *const libc::c_char,
765 +             has_arg: 0 as libc::c_int,
766 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
767 +             val: 'u' as i32,
768 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:763:19
    |
763 |             name: b"unbuffered\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"unbuffered\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:777:9
    |
771 | /         let mut init = option {
772 | |             name: b"suffix-length\0" as *const u8 as *const libc::c_char,
773 | |             has_arg: 1 as libc::c_int,
774 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
775 | |             val: 'a' as i32,
776 | |         };
    | |__________- unnecessary `let` binding
777 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
771 ~         
772 ~         option {
773 +             name: b"suffix-length\0" as *const u8 as *const libc::c_char,
774 +             has_arg: 1 as libc::c_int,
775 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
776 +             val: 'a' as i32,
777 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:772:19
    |
772 |             name: b"suffix-length\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"suffix-length\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:786:9
    |
780 | /         let mut init = option {
781 | |             name: b"additional-suffix\0" as *const u8 as *const libc::c_char,
782 | |             has_arg: 1 as libc::c_int,
783 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
784 | |             val: ADDITIONAL_SUFFIX_OPTION as libc::c_int,
785 | |         };
    | |__________- unnecessary `let` binding
786 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
780 ~         
781 ~         option {
782 +             name: b"additional-suffix\0" as *const u8 as *const libc::c_char,
783 +             has_arg: 1 as libc::c_int,
784 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
785 +             val: ADDITIONAL_SUFFIX_OPTION as libc::c_int,
786 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:781:19
    |
781 |             name: b"additional-suffix\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"additional-suffix\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:784:18
    |
784 |             val: ADDITIONAL_SUFFIX_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/split.rs:795:9
    |
789 | /         let mut init = option {
790 | |             name: b"numeric-suffixes\0" as *const u8 as *const libc::c_char,
791 | |             has_arg: 2 as libc::c_int,
792 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
793 | |             val: 'd' as i32,
794 | |         };
    | |__________- unnecessary `let` binding
795 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
789 ~         
790 ~         option {
791 +             name: b"numeric-suffixes\0" as *const u8 as *const libc::c_char,
792 +             has_arg: 2 as libc::c_int,
793 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
794 +             val: 'd' as i32,
795 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:790:19
    |
790 |             name: b"numeric-suffixes\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"numeric-suffixes\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:804:9
    |
798 | /         let mut init = option {
799 | |             name: b"hex-suffixes\0" as *const u8 as *const libc::c_char,
800 | |             has_arg: 2 as libc::c_int,
801 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
802 | |             val: 'x' as i32,
803 | |         };
    | |__________- unnecessary `let` binding
804 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
798 ~         
799 ~         option {
800 +             name: b"hex-suffixes\0" as *const u8 as *const libc::c_char,
801 +             has_arg: 2 as libc::c_int,
802 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
803 +             val: 'x' as i32,
804 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:799:19
    |
799 |             name: b"hex-suffixes\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"hex-suffixes\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:813:9
    |
807 | /         let mut init = option {
808 | |             name: b"filter\0" as *const u8 as *const libc::c_char,
809 | |             has_arg: 1 as libc::c_int,
810 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
811 | |             val: FILTER_OPTION as libc::c_int,
812 | |         };
    | |__________- unnecessary `let` binding
813 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
807 ~         
808 ~         option {
809 +             name: b"filter\0" as *const u8 as *const libc::c_char,
810 +             has_arg: 1 as libc::c_int,
811 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
812 +             val: FILTER_OPTION as libc::c_int,
813 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:808:19
    |
808 |             name: b"filter\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"filter\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:811:18
    |
811 |             val: FILTER_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/split.rs:822:9
    |
816 | /         let mut init = option {
817 | |             name: b"verbose\0" as *const u8 as *const libc::c_char,
818 | |             has_arg: 0 as libc::c_int,
819 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
820 | |             val: VERBOSE_OPTION as libc::c_int,
821 | |         };
    | |__________- unnecessary `let` binding
822 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
816 ~         
817 ~         option {
818 +             name: b"verbose\0" as *const u8 as *const libc::c_char,
819 +             has_arg: 0 as libc::c_int,
820 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
821 +             val: VERBOSE_OPTION as libc::c_int,
822 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:817:19
    |
817 |             name: b"verbose\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"verbose\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:820:18
    |
820 |             val: VERBOSE_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/split.rs:831:9
    |
825 | /         let mut init = option {
826 | |             name: b"separator\0" as *const u8 as *const libc::c_char,
827 | |             has_arg: 1 as libc::c_int,
828 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
829 | |             val: 't' as i32,
830 | |         };
    | |__________- unnecessary `let` binding
831 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
825 ~         
826 ~         option {
827 +             name: b"separator\0" as *const u8 as *const libc::c_char,
828 +             has_arg: 1 as libc::c_int,
829 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
830 +             val: 't' as i32,
831 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:826:19
    |
826 |             name: b"separator\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"separator\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:840:9
    |
834 | /         let mut init = option {
835 | |             name: b"-io-blksize\0" as *const u8 as *const libc::c_char,
836 | |             has_arg: 1 as libc::c_int,
837 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
838 | |             val: IO_BLKSIZE_OPTION as libc::c_int,
839 | |         };
    | |__________- unnecessary `let` binding
840 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
834 ~         
835 ~         option {
836 +             name: b"-io-blksize\0" as *const u8 as *const libc::c_char,
837 +             has_arg: 1 as libc::c_int,
838 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
839 +             val: IO_BLKSIZE_OPTION as libc::c_int,
840 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:835:19
    |
835 |             name: b"-io-blksize\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-io-blksize\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:838:18
    |
838 |             val: IO_BLKSIZE_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/split.rs:849:9
    |
843 | /         let mut init = option {
844 | |             name: b"help\0" as *const u8 as *const libc::c_char,
845 | |             has_arg: 0 as libc::c_int,
846 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
847 | |             val: GETOPT_HELP_CHAR as libc::c_int,
848 | |         };
    | |__________- unnecessary `let` binding
849 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
843 ~         
844 ~         option {
845 +             name: b"help\0" as *const u8 as *const libc::c_char,
846 +             has_arg: 0 as libc::c_int,
847 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
848 +             val: GETOPT_HELP_CHAR as libc::c_int,
849 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:844:19
    |
844 |             name: b"help\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"help\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:858:9
    |
852 | /         let mut init = option {
853 | |             name: b"version\0" as *const u8 as *const libc::c_char,
854 | |             has_arg: 0 as libc::c_int,
855 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
856 | |             val: GETOPT_VERSION_CHAR as libc::c_int,
857 | |         };
    | |__________- unnecessary `let` binding
858 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
852 ~         
853 ~         option {
854 +             name: b"version\0" as *const u8 as *const libc::c_char,
855 +             has_arg: 0 as libc::c_int,
856 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
857 +             val: GETOPT_VERSION_CHAR as libc::c_int,
858 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:853:19
    |
853 |             name: b"version\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"version\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:867:9
    |
861 | /         let mut init = option {
862 | |             name: 0 as *const libc::c_char,
863 | |             has_arg: 0 as libc::c_int,
864 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
865 | |             val: 0 as libc::c_int,
866 | |         };
    | |__________- unnecessary `let` binding
867 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
861 ~         
862 ~         option {
863 +             name: 0 as *const libc::c_char,
864 +             has_arg: 0 as libc::c_int,
865 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
866 +             val: 0 as libc::c_int,
867 +         }
    |

warning: unneeded `return` statement
   --> src/split.rs:872:5
    |
872 |     return !filter_command.is_null() && err == 32 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `!filter_command.is_null() && err == 32 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this boolean expression can be simplified
   --> src/split.rs:911:16
    |
911 |             if !(n_units_end != 0) {
    |                ^^^^^^^^^^^^^^^^^^^ help: try: `n_units_end == 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/split.rs:968:9
    |
968 |         return;
    |         ^^^^^^^ help: remove `return`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:882:38
    |
882 |     if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:882:38
    |
882 |     if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:883:42
    |
883 |         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:883:42
    |
883 |         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:884:42
    |
884 |         || split_type as libc::c_uint == type_rr as libc::c_int as libc::c_uint
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:884:42
    |
884 |         || split_type as libc::c_uint == type_rr as libc::c_int as libc::c_uint
    |                                          ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:886:51
    |
886 |         let mut n_units_end: intmax_t = n_units - 1 as libc::c_int as libc::c_long;
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
   --> src/split.rs:891:17
    |
891 |                 0 as *mut *mut libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:894:17
    |
894 |                 b"\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:896:37
    |
896 |             if e as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:896:37
    |
896 |             if e as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: borrow as raw pointer
   --> src/split.rs:900:18
    |
900 |                 *(&mut n_units_end as *mut intmax_t) = fresh0;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n_units_end)`
    |
    = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `u64` to `i64` may wrap around the value
   --> src/split.rs:906:39
    |
906 |         let mut alphabet_len: idx_t = strlen(suffix_alphabet) as idx_t;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/split.rs:909:13
    |
909 |             suffix_length_needed;
    |             ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary `!=` operation
   --> src/split.rs:917:5
    |
917 | /     if suffix_length != 0 {
918 | |         if suffix_length < suffix_length_needed as libc::c_long {
919 | |             if 0 != 0 {
920 | |                 error(
...   |
974 | |         }) as idx_t;
975 | |     };
    | |_____^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:918:28
    |
918 |         if suffix_length < suffix_length_needed as libc::c_long {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(suffix_length_needed)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/split.rs:919:13
    |
919 | /             if 0 != 0 {
920 | |                 error(
921 | |                     1 as libc::c_int,
922 | |                     0 as libc::c_int,
...   |
964 | |                 });
965 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/split.rs:919:16
    |
919 |             if 0 != 0 {
    |                ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:924:25
    |
924 | /                         b"the suffix length needs to be at least %d\0" as *const u8
925 | |                             as *const libc::c_char,
    | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"the suffix length needs to be at least %d\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/split.rs:929:17
    |
929 | /                 if 1 as libc::c_int != 0 as libc::c_int {
930 | |                     unreachable!();
931 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/split.rs:934:21
    |
934 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:939:29
    |
939 | / ...                   b"the suffix length needs to be at least %d\0" as *const u8
940 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"the suffix length needs to be at least %d\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/split.rs:944:21
    |
944 | /                     if __errstatus != 0 as libc::c_int {
945 | |                         unreachable!();
946 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/split.rs:950:21
    |
950 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:955:29
    |
955 | / ...                   b"the suffix length needs to be at least %d\0" as *const u8
956 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"the suffix length needs to be at least %d\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/split.rs:960:21
    |
960 | /                     if __errstatus != 0 as libc::c_int {
961 | |                         unreachable!();
962 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:970:25
    |
970 |           suffix_length = (if 2 as libc::c_int > suffix_length_needed {
    |  _________________________^
971 | |             2 as libc::c_int
972 | |         } else {
973 | |             suffix_length_needed
974 | |         }) as idx_t;
    | |___________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
970 ~         suffix_length = i64::from((if 2 as libc::c_int > suffix_length_needed {
971 +             2 as libc::c_int
972 +         } else {
973 +             suffix_length_needed
974 ~         }));
    |

warning: unsafe function's docs miss `# Safety` section
    --> src/split.rs:978:1
     |
978  | / pub unsafe extern "C" fn usage(mut status: libc::c_int) {
979  | |     if status != 0 as libc::c_int {
980  | |         fprintf(
981  | |             stderr,
...    |
1044 | |     exit(status);
1045 | | }
     | |_^
     |
     = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary `!=` operation
    --> src/split.rs:979:5
     |
979  | /     if status != 0 as libc::c_int {
980  | |         fprintf(
981  | |             stderr,
982  | |             gettext(
...    |
1042 | |         emit_ancillary_info(b"split\0" as *const u8 as *const libc::c_char);
1043 | |     }
     | |_____^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:983:17
    |
983 | /                 b"Try '%s --help' for more information.\n\0" as *const u8
984 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Try '%s --help' for more information.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:991:17
    |
991 | /                 b"Usage: %s [OPTION]... [FILE [PREFIX]]\n\0" as *const u8
992 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Usage: %s [OPTION]... [FILE [PREFIX]]\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:998:17
    |
998 | /                 b"Output pieces of FILE to PREFIXaa, PREFIXab, ...;\ndefault size is 1000 lines, and default PREFIX is 'x'.\n\0"
999 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Output pieces of FILE to PREFIXaa, PREFIXab, ...;\ndefault size is 1000 lines, and default PREFIX is 'x'.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1008:17
     |
1008 | /                 b"  -a, --suffix-length=N   generate suffixes of length N (default %d)\n      --additional-suffix=SUFFIX  append an addit...
1009 | |                     as *const u8 as *const libc::c_char,
     | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -a, --suffix-length=N   generate suffixes of length N (default %d)\n      --additional-suffix=SUFFIX  append an additional SUFFIX to file names\n  -b, --bytes=SIZE        put SIZE bytes per output file\n  -C, --line-bytes=SIZE   put at most SIZE bytes of records per output file\n  -d                      use numeric suffixes starting at 0, not alphabetic\n      --numeric-suffixes[=FROM]  same as -d, but allow setting the start value\n  -x                      use hex suffixes starting at 0, not alphabetic\n      --hex-suffixes[=FROM]  same as -x, but allow setting the start value\n  -e, --elide-empty-files  do not generate empty output files with '-n'\n      --filter=COMMAND    write to shell COMMAND; file name is $FILE\n  -l, --lines=NUMBER      put NUMBER lines/records per output file\n  -n, --number=CHUNKS     generate CHUNKS output files; see explanation below\n  -t, --separator=SEP     use SEP instead of newline as the record separator;\n                            '\\0' (zero) specifies the NUL character\n  -u, --unbuffered        immediately copy input to output with '-n r/...'\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1015:17
     |
1015 | /                 b"      --verbose           print a diagnostic just before each\n                            output file is opened\n\0"
1016 | |                     as *const u8 as *const libc::c_char,
     | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --verbose           print a diagnostic just before each\n                            output file is opened\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1022:17
     |
1022 | /                 b"      --help        display this help and exit\n\0" as *const u8
1023 | |                     as *const libc::c_char,
     | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --help        display this help and exit\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1029:17
     |
1029 | /                 b"      --version     output version information and exit\n\0"
1030 | |                     as *const u8 as *const libc::c_char,
     | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --version     output version information and exit\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1037:17
     |
1037 | /                 b"\nCHUNKS may be:\n  N       split into N files based on size of input\n  K/N     output Kth of N to stdout\n  l/N     s...
1038 | |                     as *const u8 as *const libc::c_char,
     | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nCHUNKS may be:\n  N       split into N files based on size of input\n  K/N     output Kth of N to stdout\n  l/N     split into N files without splitting lines/records\n  l/K/N   output Kth of N to stdout without splitting lines/records\n  r/N     like 'l' but use round robin distribution\n  r/K/N   likewise but only output Kth of N to stdout\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1042:29
     |
1042 |         emit_ancillary_info(b"split\0" as *const u8 as *const libc::c_char);
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
    --> src/split.rs:1059:12
     |
1059 |         if !((0 as libc::c_int as libc::c_long) < r) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(0 as libc::c_int as libc::c_long) >= r`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/split.rs:1088:5
     |
1088 |     return copied;
     |     ^^^^^^^^^^^^^^ help: remove `return`: `copied`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
    --> src/split.rs:1051:30
     |
1051 |     let mut tmp: *mut FILE = 0 as *mut FILE;
     |                              ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:1052:31
     |
1052 |     if !temp_stream(&mut tmp, 0 as *mut *mut libc::c_char) {
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1053:16
     |
1053 |         return -(1 as libc::c_int) as off_t;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1055:29
     |
1055 |     let mut copied: off_t = 0 as libc::c_int as off_t;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1058:22
     |
1058 |         r = read(fd, buf as *mut libc::c_void, bufsize as size_t);
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1058:48
     |
1058 |         r = read(fd, buf as *mut libc::c_void, bufsize as size_t);
     |                                                ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1059:14
     |
1059 |         if !((0 as libc::c_int as libc::c_long) < r) {
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:1064:13
     |
1064 |             1 as libc::c_int as size_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1065:13
     |
1065 |             r as size_t,
     |             ^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1067:14
     |
1067 |         ) != r as libc::c_ulong
     |              ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1069:20
     |
1069 |             return -(1 as libc::c_int) as off_t;
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/split.rs:1072:10
     |
1072 |         *(&mut copied as *mut off_t) = fresh2;
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(copied)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1075:20
     |
1075 |             return -(1 as libc::c_int) as off_t;
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1078:12
     |
1078 |     if r < 0 as libc::c_int as libc::c_long {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1081:9
     |
1081 |     r = dup2(fileno(tmp), fd) as off_t;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(dup2(fileno(tmp), fd))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1082:12
     |
1082 |     if r < 0 as libc::c_int as libc::c_long {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1086:16
     |
1086 |         return -(1 as libc::c_int) as off_t;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this boolean expression can be simplified
    --> src/split.rs:1107:12
     |
1107 |         if !(size < bufsize) {
     |            ^^^^^^^^^^^^^^^^^ help: try: `size >= bufsize`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/split.rs:1159:5
     |
1159 |     return size;
     |     ^^^^^^^^^^^^ help: remove `return`: `size`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1096:27
     |
1096 |     let mut size: off_t = 0 as libc::c_int as off_t;
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1100:13
     |
1100 |             buf.offset(size as isize) as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.offset(size as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1100:24
     |
1100 |             buf.offset(size as isize) as *mut libc::c_void,
     |                        ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1101:13
     |
1101 |             (bufsize - size) as size_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1103:22
     |
1103 |         if n_read <= 0 as libc::c_int as libc::c_long {
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1104:32
     |
1104 |             return if n_read < 0 as libc::c_int as libc::c_long { n_read } else { size };
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:1113:8
     |
1113 |     if usable_st_size(st) as libc::c_int != 0 && (*st).st_size < size
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(usable_st_size(st))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1115:29
     |
1115 |             cur = lseek(fd, 0 as libc::c_int as __off_t, 1 as libc::c_int);
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1116:19
     |
1116 |             cur < 0 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1119:29
     |
1119 |             end = lseek(fd, 0 as libc::c_int as __off_t, 2 as libc::c_int);
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1120:19
     |
1120 |             end < 0 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1123:45
     |
1123 |           let mut tmpbuf: *mut libc::c_char = xmalloc(bufsize as size_t)
     |  _____________________________________________^
1124 | |             as *mut libc::c_char;
     | |________________________________^ help: try `pointer::cast`, a safer alternative: `xmalloc(bufsize as size_t).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1123:53
     |
1123 |         let mut tmpbuf: *mut libc::c_char = xmalloc(bufsize as size_t)
     |                                                     ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1126:14
     |
1126 |         free(tmpbuf as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `tmpbuf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1127:18
     |
1127 |         if end < 0 as libc::c_int as libc::c_long {
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1130:15
     |
1130 |         cur = 0 as libc::c_int as off_t;
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1133:16
     |
1133 |         == (if (0 as libc::c_int as off_t) < -(1 as libc::c_int) as off_t {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1133:46
     |
1133 |         == (if (0 as libc::c_int as off_t) < -(1 as libc::c_int) as off_t {
     |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1134:13
     |
1134 |             -(1 as libc::c_int) as off_t
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1136:15
     |
1136 |             (((1 as libc::c_int as off_t)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:1138:35
     |
1138 |                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:1139:35
     |
1139 |                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1140:19
     |
1140 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1140:55
     |
1140 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
     |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1141:19
     |
1141 |                 + 1 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/split.rs:1146:18
     |
1146 |                 *(&mut size as *mut off_t) = fresh4;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(size)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:1147:17
     |
1147 |                 fresh5 as libc::c_int != 0
     |                 ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh5)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1151:16
     |
1151 |         return -(1 as libc::c_int) as off_t;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1155:16
     |
1155 |         if r < 0 as libc::c_int as libc::c_long {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this boolean expression can be simplified
    --> src/split.rs:1178:16
     |
1178 |             if !(fresh13 != 0 as libc::c_int as libc::c_long) {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `fresh13 == 0 as libc::c_int as libc::c_long`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/split.rs:1362:24
     |
1362 |                     if !(fresh12 != 0 as libc::c_int as libc::c_long) {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `fresh12 == 0 as libc::c_int as libc::c_long`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this function has too many lines (209/100)
    --> src/split.rs:1161:1
     |
1161 | / unsafe extern "C" fn next_file_name() {
1162 | |     static mut sufindex: *mut idx_t = 0 as *const idx_t as *mut idx_t;
1163 | |     static mut outbase_length: idx_t = 0;
1164 | |     static mut outfile_length: idx_t = 0;
...    |
1372 | |     };
1373 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: manual implementation of an assign operation
    --> src/split.rs:1177:13
     |
1177 |             i_0 = i_0 - 1;
     |             ^^^^^^^^^^^^^ help: replace it with: `i_0 -= 1`
     |
     = note: `-W clippy::assign-op-pattern` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1178:29
     |
1178 |             if !(fresh13 != 0 as libc::c_int as libc::c_long) {
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:1182:17
     |
1182 |             let ref mut fresh14 = *sufindex.offset(i_0 as isize);
     |             ----^^^^^^^^^^^^^^^---------------------------------- help: try: `let fresh14 = &mut (*sufindex.offset(i_0 as isize));`
     |
     = note: `-W clippy::toplevel-ref-arg` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1182:52
     |
1182 |             let ref mut fresh14 = *sufindex.offset(i_0 as isize);
     |                                                    ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:1185:16
     |
1185 |             if suffix_auto as libc::c_int != 0 && i_0 == 0 as libc::c_int as libc::c_long
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(suffix_auto)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1185:58
     |
1185 |             if suffix_auto as libc::c_int != 0 && i_0 == 0 as libc::c_int as libc::c_long
     |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1188:25
     |
1188 | /                         (*sufindex.offset(0 as libc::c_int as isize)
1189 | |                             + 1 as libc::c_int as libc::c_long) as isize,
     | |________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1189:31
     |
1189 | ...                   + 1 as libc::c_int as libc::c_long) as isize,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1198:45
     |
1198 |                 ) = *suffix_alphabet.offset(*sufindex.offset(i_0 as isize) as isize);
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1198:62
     |
1198 |                 ) = *suffix_alphabet.offset(*sufindex.offset(i_0 as isize) as isize);
     |                                                              ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1197:21
     |
1197 |                     i_0 as isize,
     |                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1199:36
     |
1199 |             if *outfile_mid.offset(i_0 as isize) != 0 {
     |                                    ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1202:46
     |
1202 |             *sufindex.offset(i_0 as isize) = 0 as libc::c_int as idx_t;
     |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1202:30
     |
1202 |             *sufindex.offset(i_0 as isize) = 0 as libc::c_int as idx_t;
     |                              ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1206:45
     |
1206 |                 ) = *suffix_alphabet.offset(*sufindex.offset(i_0 as isize) as isize);
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1206:62
     |
1206 |                 ) = *suffix_alphabet.offset(*sufindex.offset(i_0 as isize) as isize);
     |                                                              ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1205:21
     |
1205 |                     i_0 as isize,
     |                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/split.rs:1208:9
     |
1208 | /         match current_block_37 {
1209 | |             9769017674192345533 => {}
1210 | |             _ => {
1211 | |                 if 0 != 0 {
...    |
1256 | |             }
1257 | |         }
     | |_________^
     |
     = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
     |
1208 ~         if current_block_37 == 9769017674192345533 {} else {
1209 +             if 0 != 0 {
1210 +                 error(
1211 +                     1 as libc::c_int,
1212 +                     0 as libc::c_int,
1213 +                     gettext(
1214 +                         b"output file suffixes exhausted\0" as *const u8
1215 +                             as *const libc::c_char,
1216 +                     ),
1217 +                 );
1218 +                 if 1 as libc::c_int != 0 as libc::c_int {
1219 +                     unreachable!();
1220 +                 } else {};
1221 +             } else {
1222 +                 ({
1223 +                     let __errstatus: libc::c_int = 1 as libc::c_int;
1224 +                     error(
1225 +                         __errstatus,
1226 +                         0 as libc::c_int,
1227 +                         gettext(
1228 +                             b"output file suffixes exhausted\0" as *const u8
1229 +                                 as *const libc::c_char,
1230 +                         ),
1231 +                     );
1232 +                     if __errstatus != 0 as libc::c_int {
1233 +                         unreachable!();
1234 +                     } else {};
1235 +                     
1236 +                 });
1237 +                 ({
1238 +                     let __errstatus: libc::c_int = 1 as libc::c_int;
1239 +                     error(
1240 +                         __errstatus,
1241 +                         0 as libc::c_int,
1242 +                         gettext(
1243 +                             b"output file suffixes exhausted\0" as *const u8
1244 +                                 as *const libc::c_char,
1245 +                         ),
1246 +                     );
1247 +                     if __errstatus != 0 as libc::c_int {
1248 +                         unreachable!();
1249 +                     } else {};
1250 +                     
1251 +                 });
1252 +             };
1253 +             current_block_37 = 2873832966593178012;
1254 +         }
     |

warning: unnecessary `!=` operation
    --> src/split.rs:1211:17
     |
1211 | /                 if 0 != 0 {
1212 | |                     error(
1213 | |                         1 as libc::c_int,
1214 | |                         0 as libc::c_int,
...    |
1253 | |                     });
1254 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1211:20
     |
1211 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1216:29
     |
1216 | / ...                   b"output file suffixes exhausted\0" as *const u8
1217 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"output file suffixes exhausted\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1220:21
     |
1220 | /                     if 1 as libc::c_int != 0 as libc::c_int {
1221 | |                         unreachable!();
1222 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1225:25
     |
1225 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1230:33
     |
1230 | / ...                   b"output file suffixes exhausted\0" as *const u8
1231 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"output file suffixes exhausted\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1234:25
     |
1234 | /                         if __errstatus != 0 as libc::c_int {
1235 | |                             unreachable!();
1236 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1240:25
     |
1240 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1245:33
     |
1245 | / ...                   b"output file suffixes exhausted\0" as *const u8
1246 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"output file suffixes exhausted\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1249:25
     |
1249 | /                         if __errstatus != 0 as libc::c_int {
1250 | |                             unreachable!();
1251 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/split.rs:1259:5
     |
1259 | /     match current_block_37 {
1260 | |         9769017674192345533 => {
1261 | |             widen = outfile_length != 0;
1262 | |             if !widen {
...    |
1371 | |         _ => {}
1372 | |     };
     | |_____^
     |
     = note: `-W clippy::single-match` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1259 ~     if current_block_37 == 9769017674192345533 {
1260 +         widen = outfile_length != 0;
1261 +         if !widen {
1262 +             outbase_length = strlen(outbase) as idx_t;
1263 +             addsuf_length = (if !additional_suffix.is_null() {
1264 +                 strlen(additional_suffix)
1265 +             } else {
1266 +                 0 as libc::c_int as libc::c_ulong
1267 +             }) as idx_t;
1268 +             let (fresh6, fresh7) = (outbase_length + addsuf_length)
1269 +                 .overflowing_add(suffix_length);
1270 +             *(&mut outfile_length as *mut idx_t) = fresh6;
1271 +             overflow = fresh7;
1272 +         } else {
1273 +             let (fresh8, fresh9) = outfile_length.overflowing_add((2 as libc::c_int).into());
1274 +             *(&mut outfile_length as *mut idx_t) = fresh8;
1275 +             overflow = fresh9;
1276 +             suffix_length += 1;
1277 +             suffix_length;
1278 +         }
1279 +         let mut outfile_size: idx_t = 0;
1280 +         let (fresh10, fresh11) = outfile_length.overflowing_add((1 as libc::c_int).into());
1281 +         *(&mut outfile_size as *mut idx_t) = fresh10;
1282 +         overflow = (overflow as libc::c_int | fresh11 as libc::c_int) != 0;
1283 +         if overflow {
1284 +             xalloc_die();
1285 +         }
1286 +         outfile = xirealloc(outfile as *mut libc::c_void, outfile_size)
1287 +             as *mut libc::c_char;
1288 +         if !widen {
1289 +             memcpy(
1290 +                 outfile as *mut libc::c_void,
1291 +                 outbase as *const libc::c_void,
1292 +                 outbase_length as libc::c_ulong,
1293 +             );
1294 +         } else {
1295 +             *outfile
1296 +                 .offset(
1297 +                     outbase_length as isize,
1298 +                 ) = *suffix_alphabet
1299 +                 .offset(*sufindex.offset(0 as libc::c_int as isize) as isize);
1300 +             outbase_length += 1;
1301 +             outbase_length;
1302 +         }
1303 +         outfile_mid = outfile.offset(outbase_length as isize);
1304 +         memset(
1305 +             outfile_mid as *mut libc::c_void,
1306 +             *suffix_alphabet.offset(0 as libc::c_int as isize) as libc::c_int,
1307 +             suffix_length as libc::c_ulong,
1308 +         );
1309 +         if !additional_suffix.is_null() {
1310 +             memcpy(
1311 +                 outfile_mid.offset(suffix_length as isize) as *mut libc::c_void,
1312 +                 additional_suffix as *const libc::c_void,
1313 +                 addsuf_length as libc::c_ulong,
1314 +             );
1315 +         }
1316 +         *outfile.offset(outfile_length as isize) = 0 as libc::c_int as libc::c_char;
1317 +         free(sufindex as *mut libc::c_void);
1318 +         sufindex = xicalloc(
1319 +             suffix_length,
1320 +             ::core::mem::size_of::<idx_t>() as libc::c_ulong as idx_t,
1321 +         ) as *mut idx_t;
1322 +         if !numeric_suffix_start.is_null() {
1323 +             if !widen {} else {
1324 +                 __assert_fail(
1325 +                     b"! widen\0" as *const u8 as *const libc::c_char,
1326 +                     b"split.c\0" as *const u8 as *const libc::c_char,
1327 +                     423 as libc::c_int as libc::c_uint,
1328 +                     (*::core::mem::transmute::<
1329 +                         &[u8; 26],
1330 +                         &[libc::c_char; 26],
1331 +                     >(b"void next_file_name(void)\0"))
1332 +                         .as_ptr(),
1333 +                 );
1334 +             }
1335 +             'c_9037: {
1336 +                 if !widen {} else {
1337 +                     __assert_fail(
1338 +                         b"! widen\0" as *const u8 as *const libc::c_char,
1339 +                         b"split.c\0" as *const u8 as *const libc::c_char,
1340 +                         423 as libc::c_int as libc::c_uint,
1341 +                         (*::core::mem::transmute::<
1342 +                             &[u8; 26],
1343 +                             &[libc::c_char; 26],
1344 +                         >(b"void next_file_name(void)\0"))
1345 +                             .as_ptr(),
1346 +                     );
1347 +                 }
1348 +             };
1349 +             let mut i: idx_t = strlen(numeric_suffix_start) as idx_t;
1350 +             memcpy(
1351 +                 outfile_mid.offset(suffix_length as isize).offset(-(i as isize))
1352 +                     as *mut libc::c_void,
1353 +                 numeric_suffix_start as *const libc::c_void,
1354 +                 i as libc::c_ulong,
1355 +             );
1356 +             let mut sufindex_end: *mut idx_t = sufindex
1357 +                 .offset(suffix_length as isize);
1358 +             loop {
1359 +                 let fresh12 = i;
1360 +                 i = i - 1;
1361 +                 if !(fresh12 != 0 as libc::c_int as libc::c_long) {
1362 +                     break;
1363 +                 }
1364 +                 sufindex_end = sufindex_end.offset(-1);
1365 +                 *sufindex_end = (*numeric_suffix_start.offset(i as isize)
1366 +                     as libc::c_int - '0' as i32) as idx_t;
1367 +             }
1368 +         }
1369 ~     };
     |

warning: unnecessary boolean `not` operation
    --> src/split.rs:1262:13
     |
1262 | /             if !widen {
1263 | |                 outbase_length = strlen(outbase) as idx_t;
1264 | |                 addsuf_length = (if !additional_suffix.is_null() {
1265 | |                     strlen(additional_suffix)
...    |
1278 | |                 suffix_length;
1279 | |             }
     | |_____________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:1263:34
     |
1263 |                 outbase_length = strlen(outbase) as idx_t;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:1264:33
     |
1264 |                   addsuf_length = (if !additional_suffix.is_null() {
     |  _________________________________^
1265 | |                     strlen(additional_suffix)
1266 | |                 } else {
1267 | |                     0 as libc::c_int as libc::c_ulong
1268 | |                 }) as idx_t;
     | |___________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary boolean `not` operation
    --> src/split.rs:1264:33
     |
1264 |                   addsuf_length = (if !additional_suffix.is_null() {
     |  _________________________________^
1265 | |                     strlen(additional_suffix)
1266 | |                 } else {
1267 | |                     0 as libc::c_int as libc::c_ulong
1268 | |                 }) as idx_t;
     | |__________________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:1267:21
     |
1267 |                     0 as libc::c_int as libc::c_ulong
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
    --> src/split.rs:1271:18
     |
1271 |                 *(&mut outfile_length as *mut idx_t) = fresh6;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(outfile_length)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
    --> src/split.rs:1275:18
     |
1275 |                 *(&mut outfile_length as *mut idx_t) = fresh8;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(outfile_length)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: statement with no effect
    --> src/split.rs:1278:17
     |
1278 |                 suffix_length;
     |                 ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: borrow as raw pointer
    --> src/split.rs:1282:14
     |
1282 |             *(&mut outfile_size as *mut idx_t) = fresh10;
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(outfile_size)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:1283:25
     |
1283 |             overflow = (overflow as libc::c_int | fresh11 as libc::c_int) != 0;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(overflow)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:1283:51
     |
1283 |             overflow = (overflow as libc::c_int | fresh11 as libc::c_int) != 0;
     |                                                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh11)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1287:23
     |
1287 |               outfile = xirealloc(outfile as *mut libc::c_void, outfile_size)
     |  _______________________^
1288 | |                 as *mut libc::c_char;
     | |____________________________________^ help: try `pointer::cast`, a safer alternative: `xirealloc(outfile as *mut libc::c_void, outfile_size).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1287:33
     |
1287 |             outfile = xirealloc(outfile as *mut libc::c_void, outfile_size)
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outfile.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
    --> src/split.rs:1289:13
     |
1289 | /             if !widen {
1290 | |                 memcpy(
1291 | |                     outfile as *mut libc::c_void,
1292 | |                     outbase as *const libc::c_void,
...    |
1302 | |                 outbase_length;
1303 | |             }
     | |_____________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1291:21
     |
1291 |                     outfile as *mut libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outfile.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1292:21
     |
1292 |                     outbase as *const libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outbase.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1293:21
     |
1293 |                     outbase_length as libc::c_ulong,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1300:29
     |
1300 |                     .offset(*sufindex.offset(0 as libc::c_int as isize) as isize);
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1298:25
     |
1298 |                         outbase_length as isize,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
    --> src/split.rs:1302:17
     |
1302 |                 outbase_length;
     |                 ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1304:42
     |
1304 |             outfile_mid = outfile.offset(outbase_length as isize);
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1306:17
     |
1306 |                 outfile_mid as *mut libc::c_void,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outfile_mid.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:1307:17
     |
1307 |                 *suffix_alphabet.offset(0 as libc::c_int as isize) as libc::c_int,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*suffix_alphabet.offset(0 as libc::c_int as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1308:17
     |
1308 |                 suffix_length as libc::c_ulong,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1312:21
     |
1312 |                     outfile_mid.offset(suffix_length as isize) as *mut libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outfile_mid.offset(suffix_length as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1312:40
     |
1312 |                     outfile_mid.offset(suffix_length as isize) as *mut libc::c_void,
     |                                        ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1313:21
     |
1313 |                     additional_suffix as *const libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `additional_suffix.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1314:21
     |
1314 |                     addsuf_length as libc::c_ulong,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
    --> src/split.rs:1317:56
     |
1317 |             *outfile.offset(outfile_length as isize) = 0 as libc::c_int as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1317:29
     |
1317 |             *outfile.offset(outfile_length as isize) = 0 as libc::c_int as libc::c_char;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1318:18
     |
1318 |             free(sufindex as *mut libc::c_void);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sufindex.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1319:24
     |
1319 |               sufindex = xicalloc(
     |  ________________________^
1320 | |                 suffix_length,
1321 | |                 ::core::mem::size_of::<idx_t>() as libc::c_ulong as idx_t,
1322 | |             ) as *mut idx_t;
     | |___________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
1319 ~             sufindex = xicalloc(
1320 +                 suffix_length,
1321 +                 ::core::mem::size_of::<idx_t>() as libc::c_ulong as idx_t,
1322 ~             ).cast::<i64>();
     |

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:1321:17
     |
1321 |                 ::core::mem::size_of::<idx_t>() as libc::c_ulong as idx_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary boolean `not` operation
    --> src/split.rs:1324:17
     |
1324 | /                 if !widen {} else {
1325 | |                     __assert_fail(
1326 | |                         b"! widen\0" as *const u8 as *const libc::c_char,
1327 | |                         b"split.c\0" as *const u8 as *const libc::c_char,
...    |
1334 | |                     );
1335 | |                 }
     | |_________________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1326:25
     |
1326 |                         b"! widen\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"! widen\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1327:25
     |
1327 |                         b"split.c\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:1328:25
     |
1328 |                         423 as libc::c_int as libc::c_uint,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:1329:27
     |
1329 |                           (*::core::mem::transmute::<
     |  ___________________________^
1330 | |                             &[u8; 26],
1331 | |                             &[libc::c_char; 26],
1332 | |                         >(b"void next_file_name(void)\0"))
     | |_________________________________________________________^ help: try: `&*(b"void next_file_name(void)\0" as *const [u8; 26] as *const [i8; 26])`
     |
     = note: `-W clippy::transmute-ptr-to-ptr` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
    --> src/split.rs:1336:17
     |
1336 | /                 'c_9037: {
1337 | |                     if !widen {} else {
1338 | |                         __assert_fail(
1339 | |                             b"! widen\0" as *const u8 as *const libc::c_char,
...    |
1348 | |                     }
1349 | |                 };
     | |__________________^
     |
     = note: `-W clippy::unnecessary-operation` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
     |
1336 ~                 if !widen {} else {
1337 +                         __assert_fail(
1338 +                             b"! widen\0" as *const u8 as *const libc::c_char,
1339 +                             b"split.c\0" as *const u8 as *const libc::c_char,
1340 +                             423 as libc::c_int as libc::c_uint,
1341 +                             (*::core::mem::transmute::<
1342 +                                 &[u8; 26],
1343 +                                 &[libc::c_char; 26],
1344 +                             >(b"void next_file_name(void)\0"))
1345 +                                 .as_ptr(),
1346 +                         );
1347 +                     };
     |

warning: unnecessary boolean `not` operation
    --> src/split.rs:1337:21
     |
1337 | /                     if !widen {} else {
1338 | |                         __assert_fail(
1339 | |                             b"! widen\0" as *const u8 as *const libc::c_char,
1340 | |                             b"split.c\0" as *const u8 as *const libc::c_char,
...    |
1347 | |                         );
1348 | |                     }
     | |_____________________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1339:29
     |
1339 | ...                   b"! widen\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"! widen\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1340:29
     |
1340 | ...                   b"split.c\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:1341:29
     |
1341 | ...                   423 as libc::c_int as libc::c_uint,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:1342:31
     |
1342 |   ...                   (*::core::mem::transmute::<
     |  _________________________^
1343 | | ...                       &[u8; 26],
1344 | | ...                       &[libc::c_char; 26],
1345 | | ...                   >(b"void next_file_name(void)\0"))
     | |_______________________________________________________^ help: try: `&*(b"void next_file_name(void)\0" as *const [u8; 26] as *const [i8; 26])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:1350:36
     |
1350 |                 let mut i: idx_t = strlen(numeric_suffix_start) as idx_t;
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1352:21
     |
1352 | /                     outfile_mid.offset(suffix_length as isize).offset(-(i as isize))
1353 | |                         as *mut libc::c_void,
     | |____________________________________________^ help: try `pointer::cast`, a safer alternative: `outfile_mid.offset(suffix_length as isize).offset(-(i as isize)).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1352:40
     |
1352 |                     outfile_mid.offset(suffix_length as isize).offset(-(i as isize))
     |                                        ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1352:72
     |
1352 |                     outfile_mid.offset(suffix_length as isize).offset(-(i as isize))
     |                                                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1354:21
     |
1354 |                     numeric_suffix_start as *const libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `numeric_suffix_start.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1355:21
     |
1355 |                     i as libc::c_ulong,
     |                     ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1358:29
     |
1358 |                     .offset(suffix_length as isize);
     |                             ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: manual implementation of an assign operation
    --> src/split.rs:1361:21
     |
1361 |                     i = i - 1;
     |                     ^^^^^^^^^ help: replace it with: `i -= 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1362:37
     |
1362 |                     if !(fresh12 != 0 as libc::c_int as libc::c_long) {
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1366:37
     |
1366 |                       *sufindex_end = (*numeric_suffix_start.offset(i as isize)
     |  _____________________________________^
1367 | |                         as libc::c_int - '0' as i32) as idx_t;
     | |_____________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1366 ~                     *sufindex_end = i64::from(*numeric_suffix_start.offset(i as isize)
1367 ~                         as libc::c_int - '0' as i32);
     |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:1366:38
     |
1366 |                       *sufindex_end = (*numeric_suffix_start.offset(i as isize)
     |  ______________________________________^
1367 | |                         as libc::c_int - '0' as i32) as idx_t;
     | |______________________________________^ help: try: `i32::from(*numeric_suffix_start.offset(i as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1366:67
     |
1366 |                     *sufindex_end = (*numeric_suffix_start.offset(i as isize)
     |                                                                   ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: the function has a cognitive complexity of (70/25)
    --> src/split.rs:1374:22
     |
1374 | unsafe extern "C" fn create(mut name: *const libc::c_char) -> libc::c_int {
     |                      ^^^^^^
     |
     = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (656/100)
    --> src/split.rs:1374:1
     |
1374 | / unsafe extern "C" fn create(mut name: *const libc::c_char) -> libc::c_int {
1375 | |     if filter_command.is_null() {
1376 | |         if verbose {
1377 | |             fprintf(
...    |
2054 | |     };
2055 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/split.rs:1582:9
     |
1582 |         return fd;
     |         ^^^^^^^^^^ help: remove `return`: `fd`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
    --> src/split.rs:2053:9
     |
2053 |         return fd_pair[1 as libc::c_int as usize];
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fd_pair[1 as libc::c_int as usize]`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1379:25
     |
1379 |                 gettext(b"creating file %s\n\0" as *const u8 as *const libc::c_char),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"creating file %s\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1428:13
     |
1428 | /             if 0 != 0 {
1429 | |                 error(
1430 | |                     1 as libc::c_int,
1431 | |                     *__errno_location(),
...    |
1468 | |                 });
1469 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1428:16
     |
1428 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1432:29
     |
1432 |                     gettext(b"failed to stat %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to stat %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1435:17
     |
1435 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1436 | |                     unreachable!();
1437 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1440:21
     |
1440 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1445:29
     |
1445 | ...                   b"failed to stat %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to stat %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1449:21
     |
1449 | /                     if __errstatus != 0 as libc::c_int {
1450 | |                         unreachable!();
1451 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1455:21
     |
1455 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1460:29
     |
1460 | ...                   b"failed to stat %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to stat %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1464:21
     |
1464 | /                     if __errstatus != 0 as libc::c_int {
1465 | |                         unreachable!();
1466 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: the function `psame_inode` doesn't need a mutable reference
    --> src/split.rs:1471:24
     |
1471 |         if psame_inode(&mut in_stat_buf, &mut out_stat_buf) {
     |                        ^^^^^^^^^^^^^^^^
     |
     = note: `-W clippy::unnecessary-mut-passed` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `psame_inode` doesn't need a mutable reference
    --> src/split.rs:1471:42
     |
1471 |         if psame_inode(&mut in_stat_buf, &mut out_stat_buf) {
     |                                          ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unnecessary `!=` operation
    --> src/split.rs:1472:13
     |
1472 | /             if 0 != 0 {
1473 | |                 error(
1474 | |                     1 as libc::c_int,
1475 | |                     0 as libc::c_int,
...    |
1517 | |                 });
1518 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1472:16
     |
1472 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1477:25
     |
1477 | /                         b"%s would overwrite input; aborting\0" as *const u8
1478 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s would overwrite input; aborting\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1482:17
     |
1482 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1483 | |                     unreachable!();
1484 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1487:21
     |
1487 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1492:29
     |
1492 | / ...                   b"%s would overwrite input; aborting\0" as *const u8
1493 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s would overwrite input; aborting\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1497:21
     |
1497 | /                     if __errstatus != 0 as libc::c_int {
1498 | |                         unreachable!();
1499 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1503:21
     |
1503 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1508:29
     |
1508 | / ...                   b"%s would overwrite input; aborting\0" as *const u8
1509 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s would overwrite input; aborting\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1513:21
     |
1513 | /                     if __errstatus != 0 as libc::c_int {
1514 | |                         unreachable!();
1515 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1520:26
     |
1520 |         if ftruncate(fd, 0 as libc::c_int as __off_t) < 0 as libc::c_int
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:1521:40
     |
1521 |             && (out_stat_buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:1522:20
     |
1522 |                 == 0o100000 as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:1525:13
     |
1525 | /             if 0 != 0 {
1526 | |                 error(
1527 | |                     1 as libc::c_int,
1528 | |                     *__errno_location(),
...    |
1579 | |                 });
1580 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1525:16
     |
1525 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1530:25
     |
1530 |                         b"%s: error truncating\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: error truncating\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1538:17
     |
1538 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1539 | |                     unreachable!();
1540 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1543:21
     |
1543 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1548:29
     |
1548 | ...                   b"%s: error truncating\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: error truncating\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1556:21
     |
1556 | /                     if __errstatus != 0 as libc::c_int {
1557 | |                         unreachable!();
1558 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1562:21
     |
1562 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1567:29
     |
1567 | ...                   b"%s: error truncating\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: error truncating\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1575:21
     |
1575 | /                     if __errstatus != 0 as libc::c_int {
1576 | |                         unreachable!();
1577 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1587:13
     |
1587 |             b"SHELL\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"SHELL\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1590:26
     |
1590 |             shell_prog = b"/bin/sh\0" as *const u8 as *const libc::c_char;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/bin/sh\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1592:19
     |
1592 |         if setenv(b"FILE\0" as *const u8 as *const libc::c_char, name, 1 as libc::c_int)
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"FILE\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1595:13
     |
1595 | /             if 0 != 0 {
1596 | |                 error(
1597 | |                     1 as libc::c_int,
1598 | |                     *__errno_location(),
...    |
1637 | |                 });
1638 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1595:16
     |
1595 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1600:25
     |
1600 | /                         b"failed to set FILE environment variable\0" as *const u8
1601 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to set FILE environment variable\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1604:17
     |
1604 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1605 | |                     unreachable!();
1606 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1609:21
     |
1609 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1614:29
     |
1614 | / ...                   b"failed to set FILE environment variable\0" as *const u8
1615 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to set FILE environment variable\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1618:21
     |
1618 | /                     if __errstatus != 0 as libc::c_int {
1619 | |                         unreachable!();
1620 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1624:21
     |
1624 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1629:29
     |
1629 | / ...                   b"failed to set FILE environment variable\0" as *const u8
1630 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to set FILE environment variable\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1633:21
     |
1633 | /                     if __errstatus != 0 as libc::c_int {
1634 | |                         unreachable!();
1635 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1644:21
     |
1644 |                     b"executing with FILE=%s\n\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"executing with FILE=%s\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1654:13
     |
1654 | /             if 0 != 0 {
1655 | |                 error(
1656 | |                     1 as libc::c_int,
1657 | |                     *__errno_location(),
...    |
1695 | |                 });
1696 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1654:16
     |
1654 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1659:25
     |
1659 |                         b"failed to create pipe\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to create pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1662:17
     |
1662 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1663 | |                     unreachable!();
1664 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1667:21
     |
1667 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1672:29
     |
1672 | / ...                   b"failed to create pipe\0" as *const u8
1673 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to create pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1676:21
     |
1676 | /                     if __errstatus != 0 as libc::c_int {
1677 | |                         unreachable!();
1678 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1682:21
     |
1682 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1687:29
     |
1687 | / ...                   b"failed to create pipe\0" as *const u8
1688 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to create pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1691:21
     |
1691 | /                     if __errstatus != 0 as libc::c_int {
1692 | |                         unreachable!();
1693 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:1704:21
     |
1704 | /                     if 0 != 0 {
1705 | |                         error(
1706 | |                             1 as libc::c_int,
1707 | |                             *__errno_location(),
...    |
1743 | |                         });
1744 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1704:24
     |
1704 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1709:33
     |
1709 | ...                   b"closing prior pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing prior pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1712:25
     |
1712 | /                         if 1 as libc::c_int != 0 as libc::c_int {
1713 | |                             unreachable!();
1714 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1717:29
     |
1717 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1722:37
     |
1722 | ...                   b"closing prior pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing prior pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1725:29
     |
1725 | / ...                   if __errstatus != 0 as libc::c_int {
1726 | | ...                       unreachable!();
1727 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1731:29
     |
1731 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1736:37
     |
1736 | ...                   b"closing prior pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing prior pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1739:29
     |
1739 | / ...                   if __errstatus != 0 as libc::c_int {
1740 | | ...                       unreachable!();
1741 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/split.rs:1747:17
     |
1747 |                 j;
     |                 ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:1749:30
     |
1749 |             if close(fd_pair[1 as libc::c_int as usize]) != 0 {
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:1750:17
     |
1750 | /                 if 0 != 0 {
1751 | |                     error(
1752 | |                         1 as libc::c_int,
1753 | |                         *__errno_location(),
...    |
1789 | |                     });
1790 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1750:20
     |
1750 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1755:29
     |
1755 | ...                   b"closing output pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing output pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1758:21
     |
1758 | /                     if 1 as libc::c_int != 0 as libc::c_int {
1759 | |                         unreachable!();
1760 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1763:25
     |
1763 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1768:33
     |
1768 | ...                   b"closing output pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing output pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1771:25
     |
1771 | /                         if __errstatus != 0 as libc::c_int {
1772 | |                             unreachable!();
1773 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1777:25
     |
1777 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1782:33
     |
1782 | ...                   b"closing output pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing output pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1785:25
     |
1785 | /                         if __errstatus != 0 as libc::c_int {
1786 | |                             unreachable!();
1787 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:1792:24
     |
1792 |             if fd_pair[0 as libc::c_int as usize] != 0 as libc::c_int {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:1793:33
     |
1793 |                 if dup2(fd_pair[0 as libc::c_int as usize], 0 as libc::c_int)
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:1796:21
     |
1796 | /                     if 0 != 0 {
1797 | |                         error(
1798 | |                             1 as libc::c_int,
1799 | |                             *__errno_location(),
...    |
1835 | |                         });
1836 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1796:24
     |
1796 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1801:33
     |
1801 | ...                   b"moving input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"moving input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1804:25
     |
1804 | /                         if 1 as libc::c_int != 0 as libc::c_int {
1805 | |                             unreachable!();
1806 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1809:29
     |
1809 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1814:37
     |
1814 | ...                   b"moving input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"moving input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1817:29
     |
1817 | / ...                   if __errstatus != 0 as libc::c_int {
1818 | | ...                       unreachable!();
1819 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1823:29
     |
1823 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1828:37
     |
1828 | ...                   b"moving input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"moving input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1831:29
     |
1831 | / ...                   if __errstatus != 0 as libc::c_int {
1832 | | ...                       unreachable!();
1833 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:1838:34
     |
1838 |                 if close(fd_pair[0 as libc::c_int as usize]) != 0 as libc::c_int {
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:1839:21
     |
1839 | /                     if 0 != 0 {
1840 | |                         error(
1841 | |                             1 as libc::c_int,
1842 | |                             *__errno_location(),
...    |
1878 | |                         });
1879 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1839:24
     |
1839 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1844:33
     |
1844 | ...                   b"closing input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1847:25
     |
1847 | /                         if 1 as libc::c_int != 0 as libc::c_int {
1848 | |                             unreachable!();
1849 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1852:29
     |
1852 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1857:37
     |
1857 | ...                   b"closing input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1860:29
     |
1860 | / ...                   if __errstatus != 0 as libc::c_int {
1861 | | ...                       unreachable!();
1862 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1866:29
     |
1866 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1871:37
     |
1871 | ...                   b"closing input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1874:29
     |
1874 | / ...                   if __errstatus != 0 as libc::c_int {
1875 | | ...                       unreachable!();
1876 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1888:17
     |
1888 |                 b"-c\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1890:17
     |
1890 |                 0 as *mut libc::c_void as *mut libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(0 as *mut libc::c_void).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:1890:17
     |
1890 |                 0 as *mut libc::c_void as *mut libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1892:13
     |
1892 | /             if 0 != 0 {
1893 | |                 error(
1894 | |                     1 as libc::c_int,
1895 | |                     *__errno_location(),
...    |
1940 | |                 });
1941 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1892:16
     |
1892 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1897:25
     |
1897 | /                         b"failed to run command: \"%s -c %s\"\0" as *const u8
1898 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to run command: \"%s -c %s\"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1903:17
     |
1903 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1904 | |                     unreachable!();
1905 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1908:21
     |
1908 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1913:29
     |
1913 | / ...                   b"failed to run command: \"%s -c %s\"\0" as *const u8
1914 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to run command: \"%s -c %s\"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1919:21
     |
1919 | /                     if __errstatus != 0 as libc::c_int {
1920 | |                         unreachable!();
1921 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1925:21
     |
1925 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1930:29
     |
1930 | / ...                   b"failed to run command: \"%s -c %s\"\0" as *const u8
1931 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to run command: \"%s -c %s\"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1936:21
     |
1936 | /                     if __errstatus != 0 as libc::c_int {
1937 | |                         unreachable!();
1938 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:1944:13
     |
1944 | /             if 0 != 0 {
1945 | |                 error(
1946 | |                     1 as libc::c_int,
1947 | |                     *__errno_location(),
...    |
1985 | |                 });
1986 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1944:16
     |
1944 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1949:25
     |
1949 |                         b"fork system call failed\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"fork system call failed\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1952:17
     |
1952 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1953 | |                     unreachable!();
1954 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1957:21
     |
1957 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1962:29
     |
1962 | / ...                   b"fork system call failed\0" as *const u8
1963 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"fork system call failed\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1966:21
     |
1966 | /                     if __errstatus != 0 as libc::c_int {
1967 | |                         unreachable!();
1968 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1972:21
     |
1972 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1977:29
     |
1977 | / ...                   b"fork system call failed\0" as *const u8
1978 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"fork system call failed\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1981:21
     |
1981 | /                     if __errstatus != 0 as libc::c_int {
1982 | |                         unreachable!();
1983 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:1988:26
     |
1988 |         if close(fd_pair[0 as libc::c_int as usize]) != 0 as libc::c_int {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:1989:13
     |
1989 | /             if 0 != 0 {
1990 | |                 error(
1991 | |                     1 as libc::c_int,
1992 | |                     *__errno_location(),
...    |
2031 | |                 });
2032 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1989:16
     |
1989 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1994:25
     |
1994 | /                         b"failed to close input pipe\0" as *const u8
1995 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to close input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1998:17
     |
1998 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1999 | |                     unreachable!();
2000 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2003:21
     |
2003 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2008:29
     |
2008 | / ...                   b"failed to close input pipe\0" as *const u8
2009 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to close input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2012:21
     |
2012 | /                     if __errstatus != 0 as libc::c_int {
2013 | |                         unreachable!();
2014 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2018:21
     |
2018 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2023:29
     |
2023 | / ...                   b"failed to close input pipe\0" as *const u8
2024 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to close input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2027:21
     |
2027 | /                     if __errstatus != 0 as libc::c_int {
2028 | |                         unreachable!();
2029 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2035:12
     |
2035 |         if n_open_pipes as libc::c_long == open_pipes_alloc {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(n_open_pipes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2036:26
     |
2036 |               open_pipes = xpalloc(
     |  __________________________^
2037 | |                 open_pipes as *mut libc::c_void,
2038 | |                 &mut open_pipes_alloc,
2039 | |                 1 as libc::c_int as idx_t,
...    |
2047 | |                 ::core::mem::size_of::<libc::c_int>() as libc::c_ulong as idx_t,
2048 | |             ) as *mut libc::c_int;
     | |_________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
2036 ~             open_pipes = xpalloc(
2037 +                 open_pipes as *mut libc::c_void,
2038 +                 &mut open_pipes_alloc,
2039 +                 1 as libc::c_int as idx_t,
2040 +                 if (2147483647 as libc::c_int as libc::c_long)
2041 +                     < 9223372036854775807 as libc::c_long
2042 +                 {
2043 +                     2147483647 as libc::c_int as libc::c_long
2044 +                 } else {
2045 +                     9223372036854775807 as libc::c_long
2046 +                 },
2047 +                 ::core::mem::size_of::<libc::c_int>() as libc::c_ulong as idx_t,
2048 ~             ).cast::<i32>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2037:17
     |
2037 |                 open_pipes as *mut libc::c_void,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `open_pipes.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2039:17
     |
2039 |                 1 as libc::c_int as idx_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2040:20
     |
2040 |                 if (2147483647 as libc::c_int as libc::c_long)
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2043:21
     |
2043 |                     2147483647 as libc::c_int as libc::c_long
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:2047:17
     |
2047 |                 ::core::mem::size_of::<libc::c_int>() as libc::c_ulong as idx_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: manual implementation of an assign operation
    --> src/split.rs:2051:9
     |
2051 |         n_open_pipes = n_open_pipes + 1;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `n_open_pipes += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:2052:56
     |
2052 |         *open_pipes.offset(fresh15 as isize) = fd_pair[1 as libc::c_int as usize];
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:2053:24
     |
2053 |         return fd_pair[1 as libc::c_int as usize];
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: the function has a cognitive complexity of (37/25)
    --> src/split.rs:2056:22
     |
2056 | unsafe extern "C" fn closeout(
     |                      ^^^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (355/100)
    --> src/split.rs:2056:1
     |
2056 | / unsafe extern "C" fn closeout(
2057 | |     mut fp: *mut FILE,
2058 | |     mut fd: libc::c_int,
2059 | |     mut pid: pid_t,
...    |
2428 | |     }
2429 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unnecessary `!=` operation
    --> src/split.rs:2065:9
     |
2065 | /         if 0 != 0 {
2066 | |             error(
2067 | |                 1 as libc::c_int,
2068 | |                 *__errno_location(),
...    |
2113 | |             });
2114 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2065:12
     |
2065 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2069:17
     |
2069 |                 b"%s\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2076:13
     |
2076 | /             if 1 as libc::c_int != 0 as libc::c_int {
2077 | |                 unreachable!();
2078 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2081:17
     |
2081 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2085:21
     |
2085 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2092:17
     |
2092 | /                 if __errstatus != 0 as libc::c_int {
2093 | |                     unreachable!();
2094 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2098:17
     |
2098 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2102:21
     |
2102 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2109:17
     |
2109 | /                 if __errstatus != 0 as libc::c_int {
2110 | |                     unreachable!();
2111 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:2118:13
     |
2118 | /             if 0 != 0 {
2119 | |                 error(
2120 | |                     1 as libc::c_int,
2121 | |                     *__errno_location(),
...    |
2166 | |                 });
2167 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2118:16
     |
2118 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2122:21
     |
2122 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2129:17
     |
2129 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2130 | |                     unreachable!();
2131 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2134:21
     |
2134 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2138:25
     |
2138 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2145:21
     |
2145 | /                     if __errstatus != 0 as libc::c_int {
2146 | |                         unreachable!();
2147 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2151:21
     |
2151 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2155:25
     |
2155 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2162:21
     |
2162 | /                     if __errstatus != 0 as libc::c_int {
2163 | |                         unreachable!();
2164 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/split.rs:2179:17
     |
2179 |                 j;
     |                 ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary `!=` operation
    --> src/split.rs:2186:13
     |
2186 | /             if 0 != 0 {
2187 | |                 error(
2188 | |                     1 as libc::c_int,
2189 | |                     *__errno_location(),
...    |
2228 | |                 });
2229 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2186:16
     |
2186 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2191:25
     |
2191 | /                         b"waiting for child process\0" as *const u8
2192 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"waiting for child process\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2195:17
     |
2195 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2196 | |                     unreachable!();
2197 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2200:21
     |
2200 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2205:29
     |
2205 | / ...                   b"waiting for child process\0" as *const u8
2206 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"waiting for child process\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2209:21
     |
2209 | /                     if __errstatus != 0 as libc::c_int {
2210 | |                         unreachable!();
2211 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2215:21
     |
2215 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2220:29
     |
2220 | / ...                   b"waiting for child process\0" as *const u8
2221 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"waiting for child process\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2224:21
     |
2224 | /                     if __errstatus != 0 as libc::c_int {
2225 | |                         unreachable!();
2226 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:2230:19
     |
2230 |           } else if ((wstatus & 0x7f as libc::c_int) + 1 as libc::c_int) as libc::c_schar
     |  ___________________^
2231 | |             as libc::c_int >> 1 as libc::c_int > 0 as libc::c_int
     | |__________________________^ help: try: `i32::from(((wstatus & 0x7f as libc::c_int) + 1 as libc::c_int) as libc::c_schar)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/split.rs:2230:19
     |
2230 |         } else if ((wstatus & 0x7f as libc::c_int) + 1 as libc::c_int) as libc::c_schar
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2239:25
     |
2239 |                         b"%d\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%d\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2243:17
     |
2243 | /                 if 0 != 0 {
2244 | |                     error(
2245 | |                         sig + 128 as libc::c_int,
2246 | |                         0 as libc::c_int,
...    |
2306 | |                     });
2307 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2243:20
     |
2243 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2248:29
     |
2248 | / ...                   b"with FILE=%s, signal %s from command: %s\0" as *const u8
2249 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, signal %s from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2259:21
     |
2259 | /                     if sig + 128 as libc::c_int != 0 as libc::c_int {
2260 | |                         unreachable!();
2261 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2264:25
     |
2264 |                         let __errstatus: libc::c_int = sig + 128 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2269:33
     |
2269 | / ...                   b"with FILE=%s, signal %s from command: %s\0" as *const u8
2270 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, signal %s from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2280:25
     |
2280 | /                         if __errstatus != 0 as libc::c_int {
2281 | |                             unreachable!();
2282 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2286:25
     |
2286 |                         let __errstatus: libc::c_int = sig + 128 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2291:33
     |
2291 | / ...                   b"with FILE=%s, signal %s from command: %s\0" as *const u8
2292 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, signal %s from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2302:25
     |
2302 | /                         if __errstatus != 0 as libc::c_int {
2303 | |                             unreachable!();
2304 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:2313:17
     |
2313 | /                 if 0 != 0 {
2314 | |                     error(
2315 | |                         ex,
2316 | |                         0 as libc::c_int,
...    |
2376 | |                     });
2377 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2313:20
     |
2313 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2318:29
     |
2318 | / ...                   b"with FILE=%s, exit %d from command: %s\0" as *const u8
2319 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, exit %d from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2329:21
     |
2329 | /                     if ex != 0 as libc::c_int {
2330 | |                         unreachable!();
2331 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2334:25
     |
2334 |                         let __errstatus: libc::c_int = ex;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2339:33
     |
2339 | / ...                   b"with FILE=%s, exit %d from command: %s\0" as *const u8
2340 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, exit %d from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2350:25
     |
2350 | /                         if __errstatus != 0 as libc::c_int {
2351 | |                             unreachable!();
2352 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2356:25
     |
2356 |                         let __errstatus: libc::c_int = ex;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2361:33
     |
2361 | / ...                   b"with FILE=%s, exit %d from command: %s\0" as *const u8
2362 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, exit %d from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2372:25
     |
2372 | /                         if __errstatus != 0 as libc::c_int {
2373 | |                             unreachable!();
2374 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:2380:13
     |
2380 | /             if 0 != 0 {
2381 | |                 error(
2382 | |                     1 as libc::c_int,
2383 | |                     0 as libc::c_int,
...    |
2425 | |                 });
2426 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2380:16
     |
2380 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2385:25
     |
2385 | /                         b"unknown status from command (0x%X)\0" as *const u8
2386 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"unknown status from command (0x%X)\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:2388:21
     |
2388 |                     (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:2390:17
     |
2390 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2391 | |                     unreachable!();
2392 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2395:21
     |
2395 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2400:29
     |
2400 | / ...                   b"unknown status from command (0x%X)\0" as *const u8
2401 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"unknown status from command (0x%X)\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:2403:25
     |
2403 |                         (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:2405:21
     |
2405 | /                     if __errstatus != 0 as libc::c_int {
2406 | |                         unreachable!();
2407 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2411:21
     |
2411 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2416:29
     |
2416 | / ...                   b"unknown status from command (0x%X)\0" as *const u8
2417 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"unknown status from command (0x%X)\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:2419:25
     |
2419 |                         (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:2421:21
     |
2421 | /                     if __errstatus != 0 as libc::c_int {
2422 | |                         unreachable!();
2423 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this function has too many lines (117/100)
    --> src/split.rs:2430:1
     |
2430 | / unsafe extern "C" fn cwrite(
2431 | |     mut new_file_flag: bool,
2432 | |     mut bp: *const libc::c_char,
2433 | |     mut bytes: idx_t,
...    |
2555 | |     };
2556 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/split.rs:2500:9
     |
2500 |         return 1 as libc::c_int != 0
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
    --> src/split.rs:2554:9
     |
2554 |         return 0 as libc::c_int != 0;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2436:37
     |
2436 |         if bp.is_null() && bytes == 0 as libc::c_int as libc::c_long
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2437:16
     |
2437 |             && elide_empty_files as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_empty_files)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:2441:18
     |
2441 |         closeout(0 as *mut FILE, output_desc, filter_pid, outfile);
     |                  ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2445:13
     |
2445 | /             if 0 != 0 {
2446 | |                 error(
2447 | |                     1 as libc::c_int,
2448 | |                     *__errno_location(),
...    |
2493 | |                 });
2494 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2445:16
     |
2445 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2449:21
     |
2449 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2456:17
     |
2456 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2457 | |                     unreachable!();
2458 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2461:21
     |
2461 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2465:25
     |
2465 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2472:21
     |
2472 | /                     if __errstatus != 0 as libc::c_int {
2473 | |                         unreachable!();
2474 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2478:21
     |
2478 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2482:25
     |
2482 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2489:21
     |
2489 | /                     if __errstatus != 0 as libc::c_int {
2490 | |                         unreachable!();
2491 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2497:32
     |
2497 |     if full_write(output_desc, bp as *const libc::c_void, bytes as size_t)
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `bp.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2497:59
     |
2497 |     if full_write(output_desc, bp as *const libc::c_void, bytes as size_t)
     |                                                           ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2498:12
     |
2498 |         == bytes as libc::c_ulong
     |            ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:2503:13
     |
2503 | /             if 0 != 0 {
2504 | |                 error(
2505 | |                     1 as libc::c_int,
2506 | |                     *__errno_location(),
...    |
2551 | |                 });
2552 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2503:16
     |
2503 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2507:21
     |
2507 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2514:17
     |
2514 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2515 | |                     unreachable!();
2516 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2519:21
     |
2519 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2523:25
     |
2523 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2530:21
     |
2530 | /                     if __errstatus != 0 as libc::c_int {
2531 | |                         unreachable!();
2532 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2536:21
     |
2536 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2540:25
     |
2540 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2547:21
     |
2547 | /                     if __errstatus != 0 as libc::c_int {
2548 | |                         unreachable!();
2549 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this boolean expression can be simplified
    --> src/split.rs:2660:12
     |
2660 |         if !((0 as libc::c_int as libc::c_long) < n_read) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(0 as libc::c_int as libc::c_long) >= n_read`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/split.rs:2676:12
     |
2676 |         if !(fresh16 < max_files) {
     |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `fresh16 >= max_files`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this function has too many lines (118/100)
    --> src/split.rs:2557:1
     |
2557 | / unsafe extern "C" fn bytes_split(
2558 | |     mut n_bytes: intmax_t,
2559 | |     mut rem_bytes: intmax_t,
2560 | |     mut buf: *mut libc::c_char,
...    |
2684 | |     };
2685 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2567:32
     |
2567 |     let mut opened: intmax_t = 0 as libc::c_int as intmax_t;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2569:11
     |
2569 |           + ((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int
     |  ___________^
2570 | |             as libc::c_long;
     | |___________________________^ help: try: `i64::from(((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2569:11
     |
2569 |         + ((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < rem_bytes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2569:12
     |
2569 |         + ((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2574:12
     |
2574 |         if 0 as libc::c_int as libc::c_long <= initial_read {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2576:28
     |
2576 |             initial_read = -(1 as libc::c_int) as ssize_t;
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2580:20
     |
2580 |                 && 0 as libc::c_int as libc::c_long
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2584:23
     |
2584 |                       + ((opened + 1 as libc::c_int as libc::c_long) < rem_bytes)
     |  _______________________^
2585 | |                         as libc::c_int as libc::c_long;
     | |______________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
2584 ~                     + i64::from(((opened + 1 as libc::c_int as libc::c_long) < rem_bytes)
2585 ~                         as libc::c_int);
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2584:23
     |
2584 |                       + ((opened + 1 as libc::c_int as libc::c_long) < rem_bytes)
     |  _______________________^
2585 | |                         as libc::c_int as libc::c_long;
     | |______________________________________^ help: try: `i32::from((opened + 1 as libc::c_int as libc::c_long) < rem_bytes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2584:34
     |
2584 |                     + ((opened + 1 as libc::c_int as libc::c_long) < rem_bytes)
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2588:45
     |
2588 |             n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2588:71
     |
2588 |             n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                                                       ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2589:25
     |
2589 |             if n_read < 0 as libc::c_int as libc::c_long {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:2590:17
     |
2590 | /                 if 0 != 0 {
2591 | |                     error(
2592 | |                         1 as libc::c_int,
2593 | |                         *__errno_location(),
...    |
2638 | |                     });
2639 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2590:20
     |
2590 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2594:25
     |
2594 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2601:21
     |
2601 | /                     if 1 as libc::c_int != 0 as libc::c_int {
2602 | |                         unreachable!();
2603 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2606:25
     |
2606 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2610:29
     |
2610 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2617:25
     |
2617 | /                         if __errstatus != 0 as libc::c_int {
2618 | |                             unreachable!();
2619 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2623:25
     |
2623 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2627:29
     |
2627 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2634:25
     |
2634 | /                         if __errstatus != 0 as libc::c_int {
2635 | |                             unreachable!();
2636 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2641:29
     |
2641 |             eof = n_read == 0 as libc::c_int as libc::c_long;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2644:15
     |
2644 |         while (0 as libc::c_int as libc::c_long) < to_write && to_write <= n_read {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2645:16
     |
2645 |             if filter_ok as libc::c_int != 0 || new_file_flag as libc::c_int != 0 {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(filter_ok)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2645:49
     |
2645 |             if filter_ok as libc::c_int != 0 || new_file_flag as libc::c_int != 0 {
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(new_file_flag)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i64` is more cleanly stated with `i64::from(_)`
    --> src/split.rs:2648:23
     |
2648 |             opened += new_file_flag as libc::c_long;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(new_file_flag)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2651:26
     |
2651 |                 n_read = 0 as libc::c_int as ssize_t;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2655:40
     |
2655 |                 bp_out = bp_out.offset(to_write as isize);
     |                                        ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2657:38
     |
2657 |                 to_write = n_bytes + (opened < rem_bytes) as libc::c_int as libc::c_long;
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((opened < rem_bytes) as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2657:38
     |
2657 |                 to_write = n_bytes + (opened < rem_bytes) as libc::c_int as libc::c_long;
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(opened < rem_bytes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2660:14
     |
2660 |         if !((0 as libc::c_int as libc::c_long) < n_read) {
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2663:12
     |
2663 |         if filter_ok as libc::c_int != 0 || new_file_flag as libc::c_int != 0 {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(filter_ok)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2663:45
     |
2663 |         if filter_ok as libc::c_int != 0 || new_file_flag as libc::c_int != 0 {
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(new_file_flag)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i64` is more cleanly stated with `i64::from(_)`
    --> src/split.rs:2666:19
     |
2666 |         opened += new_file_flag as libc::c_long;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(new_file_flag)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: manual implementation of an assign operation
    --> src/split.rs:2675:9
     |
2675 |         opened = opened + 1;
     |         ^^^^^^^^^^^^^^^^^^^ help: replace it with: `opened += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: `0 as *const _` detected
    --> src/split.rs:2681:13
     |
2681 |             0 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2682:13
     |
2682 |             0 as libc::c_int as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this boolean expression can be simplified
    --> src/split.rs:2780:12
     |
2780 |         if !(n_read != 0) {
     |            ^^^^^^^^^^^^^^ help: try: `n_read == 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: `0 as *mut _` detected
    --> src/split.rs:2692:37
     |
2692 |     let mut bp: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:2693:41
     |
2693 |     let mut bp_out: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:2694:38
     |
2694 |     let mut eob: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2696:27
     |
2696 |     let mut n: intmax_t = 0 as libc::c_int as intmax_t;
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2698:41
     |
2698 |         n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2698:67
     |
2698 |         n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                                                   ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2699:21
     |
2699 |         if n_read < 0 as libc::c_int as libc::c_long {
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:2700:13
     |
2700 | /             if 0 != 0 {
2701 | |                 error(
2702 | |                     1 as libc::c_int,
2703 | |                     *__errno_location(),
...    |
2748 | |                 });
2749 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2700:16
     |
2700 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2704:21
     |
2704 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2711:17
     |
2711 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2712 | |                     unreachable!();
2713 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2716:21
     |
2716 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2720:25
     |
2720 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2727:21
     |
2727 | /                     if __errstatus != 0 as libc::c_int {
2728 | |                         unreachable!();
2729 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2733:21
     |
2733 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2737:25
     |
2737 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2744:21
     |
2744 | /                     if __errstatus != 0 as libc::c_int {
2745 | |                         unreachable!();
2746 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2753:25
     |
2753 |         eob = bp.offset(n_read as isize);
     |                         ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
    --> src/split.rs:2754:16
     |
2754 |         *eob = eolchar as libc::c_char;
     |                ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2756:18
     |
2756 |             bp = rawmemchr(bp as *const libc::c_void, eolchar) as *mut libc::c_char;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `rawmemchr(bp as *const libc::c_void, eolchar).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: statement with no effect
    --> src/split.rs:2766:17
     |
2766 |                 bp;
     |                 ^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2776:25
     |
2776 |                     n = 0 as libc::c_int as intmax_t;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this boolean expression can be simplified
    --> src/split.rs:2923:12
     |
2923 |         if !(n_read != 0) {
     |            ^^^^^^^^^^^^^^ help: try: `n_read == 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this function has too many lines (139/100)
    --> src/split.rs:2785:1
     |
2785 | / unsafe extern "C" fn line_bytes_split(
2786 | |     mut n_bytes: intmax_t,
2787 | |     mut buf: *mut libc::c_char,
2788 | |     mut bufsize: idx_t,
...    |
2930 | |     free(hold as *mut libc::c_void);
2931 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2791:31
     |
2791 |     let mut n_out: intmax_t = 0 as libc::c_int as intmax_t;
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2792:29
     |
2792 |     let mut n_hold: idx_t = 0 as libc::c_int as idx_t;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:2793:39
     |
2793 |     let mut hold: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2794:32
     |
2794 |     let mut hold_size: idx_t = 0 as libc::c_int as idx_t;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2797:41
     |
2797 |         n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2797:67
     |
2797 |         n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                                                   ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2798:21
     |
2798 |         if n_read < 0 as libc::c_int as libc::c_long {
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:2799:13
     |
2799 | /             if 0 != 0 {
2800 | |                 error(
2801 | |                     1 as libc::c_int,
2802 | |                     *__errno_location(),
...    |
2847 | |                 });
2848 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2799:16
     |
2799 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2803:21
     |
2803 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2810:17
     |
2810 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2811 | |                     unreachable!();
2812 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2815:21
     |
2815 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2819:25
     |
2819 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2826:21
     |
2826 | /                     if __errstatus != 0 as libc::c_int {
2827 | |                         unreachable!();
2828 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2832:21
     |
2832 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2836:25
     |
2836 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2843:21
     |
2843 | /                     if __errstatus != 0 as libc::c_int {
2844 | |                         unreachable!();
2845 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `if _ { .. } else { .. }` is an expression
    --> src/split.rs:2855:13
     |
2855 | /             let mut eol: *mut libc::c_char = 0 as *mut libc::c_char;
2856 | |             if n_bytes - n_out - n_hold <= n_left {
2857 | |                 split_rest = n_bytes - n_out - n_hold;
2858 | |                 eoc = sob
...    |
2865 | |                     as *mut libc::c_char;
2866 | |             }
     | |_____________^
     |
     = note: `-W clippy::useless-let-if-seq` implied by `-W clippy::nursery`
     = note: you might not need `mut` at all
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
help: it is more idiomatic to write
     |
2855 ~             let <mut> eol = if n_bytes - n_out - n_hold <= n_left { ..; memrchr(sob as *const libc::c_void, eolchar, split_rest as size_t)
2856 +                     as *mut libc::c_char } else { memrchr(sob as *const libc::c_void, eolchar, n_left as size_t)
2857 +                     as *mut libc::c_char };
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2853:41
     |
2853 |             let mut split_rest: idx_t = 0 as libc::c_int as idx_t;
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:2854:46
     |
2854 |             let mut eoc: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:2855:46
     |
2855 |             let mut eol: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2859:29
     |
2859 |                     .offset(split_rest as isize)
     |                             ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2861:23
     |
2861 |                   eol = memrchr(sob as *const libc::c_void, eolchar, split_rest as size_t)
     |  _______________________^
2862 | |                     as *mut libc::c_char;
     | |________________________________________^ help: try `pointer::cast`, a safer alternative: `memrchr(sob as *const libc::c_void, eolchar, split_rest as size_t).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2861:68
     |
2861 |                 eol = memrchr(sob as *const libc::c_void, eolchar, split_rest as size_t)
     |                                                                    ^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2864:23
     |
2864 |                   eol = memrchr(sob as *const libc::c_void, eolchar, n_left as size_t)
     |  _______________________^
2865 | |                     as *mut libc::c_char;
     | |________________________________________^ help: try `pointer::cast`, a safer alternative: `memrchr(sob as *const libc::c_void, eolchar, n_left as size_t).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2864:68
     |
2864 |                 eol = memrchr(sob as *const libc::c_void, eolchar, n_left as size_t)
     |                                                                    ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2868:33
     |
2868 |                 cwrite(n_out == 0 as libc::c_int as libc::c_long, hold, n_hold);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2870:26
     |
2870 |                 n_hold = 0 as libc::c_int as idx_t;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2875:23
     |
2875 |                     + 1 as libc::c_int as libc::c_long;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2876:33
     |
2876 |                 cwrite(n_out == 0 as libc::c_int as libc::c_long, sob, n_write);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2879:34
     |
2879 |                 sob = sob.offset(n_write as isize);
     |                                  ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary boolean `not` operation
    --> src/split.rs:2885:44
     |
2885 |                   let mut n_write_0: idx_t = if !eoc.is_null() {
     |  ____________________________________________^
2886 | |                     split_rest
2887 | |                 } else {
2888 | |                     n_left
2889 | |                 };
     | |_________________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2890:33
     |
2890 |                 cwrite(n_out == 0 as libc::c_int as libc::c_long, sob, n_write_0);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2893:34
     |
2893 |                 sob = sob.offset(n_write_0 as isize);
     |                                  ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary boolean `not` operation
    --> src/split.rs:2899:40
     |
2899 |                 let mut n_buf: idx_t = if !eoc.is_null() { split_rest } else { n_left };
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2901:28
     |
2901 |                       hold = xpalloc(
     |  ____________________________^
2902 | |                         hold as *mut libc::c_void,
2903 | |                         &mut hold_size,
2904 | |                         n_buf - (hold_size - n_hold),
2905 | |                         -(1 as libc::c_int) as ptrdiff_t,
2906 | |                         ::core::mem::size_of::<libc::c_char>() as libc::c_ulong as idx_t,
2907 | |                     ) as *mut libc::c_char;
     | |__________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
2901 ~                     hold = xpalloc(
2902 +                         hold as *mut libc::c_void,
2903 +                         &mut hold_size,
2904 +                         n_buf - (hold_size - n_hold),
2905 +                         -(1 as libc::c_int) as ptrdiff_t,
2906 +                         ::core::mem::size_of::<libc::c_char>() as libc::c_ulong as idx_t,
2907 ~                     ).cast::<i8>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2902:25
     |
2902 |                         hold as *mut libc::c_void,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `hold.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2905:25
     |
2905 |                         -(1 as libc::c_int) as ptrdiff_t,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:2906:25
     |
2906 |                         ::core::mem::size_of::<libc::c_char>() as libc::c_ulong as idx_t,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2910:21
     |
2910 |                     hold.offset(n_hold as isize) as *mut libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `hold.offset(n_hold as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2910:33
     |
2910 |                     hold.offset(n_hold as isize) as *mut libc::c_void,
     |                                 ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2912:21
     |
2912 |                     n_buf as libc::c_ulong,
     |                     ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2916:34
     |
2916 |                 sob = sob.offset(n_buf as isize);
     |                                  ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2919:25
     |
2919 |                 n_out = 0 as libc::c_int as intmax_t;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2928:25
     |
2928 |         cwrite(n_out == 0 as libc::c_int as libc::c_long, hold, n_hold);
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2930:10
     |
2930 |     free(hold as *mut libc::c_void);
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `hold.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
    --> src/split.rs:3217:16
     |
3217 |             if !(fresh17 <= n) {
     |                ^^^^^^^^^^^^^^^ help: try: `fresh17 > n`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (36/25)
    --> src/split.rs:2932:22
     |
2932 | unsafe extern "C" fn lines_chunk_split(
     |                      ^^^^^^^^^^^^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (283/100)
    --> src/split.rs:2932:1
     |
2932 | / unsafe extern "C" fn lines_chunk_split(
2933 | |     mut k: intmax_t,
2934 | |     mut n: intmax_t,
2935 | |     mut buf: *mut libc::c_char,
...    |
3226 | |     }
3227 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2942:13
     |
2942 |             b"n && k <= n\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"n && k <= n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2943:13
     |
2943 |             b"split.c\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:2944:13
     |
2944 |             880 as libc::c_int as libc::c_uint,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:2945:15
     |
2945 |               (*::core::mem::transmute::<
     |  _______________^
2946 | |                 &[u8; 74],
2947 | |                 &[libc::c_char; 74],
2948 | |             >(
2949 | |                 b"void lines_chunk_split(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0",
2950 | |             ))
     | |_____________^ help: try: `&*(b"void lines_chunk_split(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0" as *const [u8; 74] as *const [i8; 74])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
    --> src/split.rs:2954:5
     |
2954 | /     'c_13572: {
2955 | |         if n != 0 && k <= n {} else {
2956 | |             __assert_fail(
2957 | |                 b"n && k <= n\0" as *const u8 as *const libc::c_char,
...    |
2968 | |         }
2969 | |     };
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
     |
2954 ~     if n != 0 && k <= n {} else {
2955 +             __assert_fail(
2956 +                 b"n && k <= n\0" as *const u8 as *const libc::c_char,
2957 +                 b"split.c\0" as *const u8 as *const libc::c_char,
2958 +                 880 as libc::c_int as libc::c_uint,
2959 +                 (*::core::mem::transmute::<
2960 +                     &[u8; 74],
2961 +                     &[libc::c_char; 74],
2962 +                 >(
2963 +                     b"void lines_chunk_split(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0",
2964 +                 ))
2965 +                     .as_ptr(),
2966 +             );
2967 +         };
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2957:17
     |
2957 |                 b"n && k <= n\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"n && k <= n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2958:17
     |
2958 |                 b"split.c\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:2959:17
     |
2959 |                 880 as libc::c_int as libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:2960:19
     |
2960 |                   (*::core::mem::transmute::<
     |  ___________________^
2961 | |                     &[u8; 74],
2962 | |                     &[libc::c_char; 74],
2963 | |                 >(
2964 | |                     b"void lines_chunk_split(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0",
2965 | |                 ))
     | |_________________^ help: try: `&*(b"void lines_chunk_split(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0" as *const [u8; 74] as *const [i8; 74])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2972:34
     |
2972 |     let mut chunk_no: intmax_t = 1 as libc::c_int as intmax_t;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2974:11
     |
2974 |           + ((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int
     |  ___________^
2975 | |             as libc::c_long;
     | |___________________________^ help: try: `i64::from(((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2974:11
     |
2974 |         + ((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < rem_bytes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2974:12
     |
2974 |         + ((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2976:32
     |
2976 |     let mut n_written: off_t = 0 as libc::c_int as off_t;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2979:12
     |
2979 |     if k > 1 as libc::c_int as libc::c_long
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2980:12
     |
2980 |         && (0 as libc::c_int as libc::c_long) < file_size
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2982:37
     |
2982 |         let mut start: off_t = (k - 1 as libc::c_int as libc::c_long) * chunk_size
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2983:24
     |
2983 |             + (if (k - 1 as libc::c_int as libc::c_long) < rem_bytes {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2984:21
     |
2984 |                 k - 1 as libc::c_int as libc::c_long
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2987:18
     |
2987 |             }) - 1 as libc::c_int as libc::c_long;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2990:17
     |
2990 |                 buf as *mut libc::c_void,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2991:28
     |
2991 |                 buf.offset(start as isize) as *const libc::c_void,
     |                            ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2992:17
     |
2992 |                 (initial_read - start) as libc::c_ulong,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2998:23
     |
2998 |                     < 0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:3000:17
     |
3000 | /                 if 0 != 0 {
3001 | |                     error(
3002 | |                         1 as libc::c_int,
3003 | |                         *__errno_location(),
...    |
3048 | |                     });
3049 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3000:20
     |
3000 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3004:25
     |
3004 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3011:21
     |
3011 | /                     if 1 as libc::c_int != 0 as libc::c_int {
3012 | |                         unreachable!();
3013 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3016:25
     |
3016 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3020:29
     |
3020 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3027:25
     |
3027 | /                         if __errstatus != 0 as libc::c_int {
3028 | |                             unreachable!();
3029 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3033:25
     |
3033 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3037:29
     |
3037 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3044:25
     |
3044 | /                         if __errstatus != 0 as libc::c_int {
3045 | |                             unreachable!();
3046 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3051:28
     |
3051 |             initial_read = -(1 as libc::c_int) as ssize_t;
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3054:24
     |
3054 |         chunk_no = k - 1 as libc::c_int as libc::c_long;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3055:29
     |
3055 |         chunk_end = start + 1 as libc::c_int as libc::c_long;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:3059:42
     |
3059 |         let mut eob: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3061:12
     |
3061 |         if 0 as libc::c_int as libc::c_long <= initial_read {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3063:28
     |
3063 |             initial_read = -(1 as libc::c_int) as ssize_t;
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3067:17
     |
3067 |                 buf as *mut libc::c_void,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3068:17
     |
3068 | /                 (if bufsize < file_size - n_written {
3069 | |                     bufsize
3070 | |                 } else {
3071 | |                     file_size - n_written
3072 | |                 }) as size_t,
     | |____________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3074:25
     |
3074 |             if n_read < 0 as libc::c_int as libc::c_long {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:3075:17
     |
3075 | /                 if 0 != 0 {
3076 | |                     error(
3077 | |                         1 as libc::c_int,
3078 | |                         *__errno_location(),
...    |
3123 | |                     });
3124 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3075:20
     |
3075 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3079:25
     |
3079 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3086:21
     |
3086 | /                     if 1 as libc::c_int != 0 as libc::c_int {
3087 | |                         unreachable!();
3088 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3091:25
     |
3091 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3095:29
     |
3095 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3102:25
     |
3102 | /                         if __errstatus != 0 as libc::c_int {
3103 | |                             unreachable!();
3104 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3108:25
     |
3108 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3112:29
     |
3112 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3119:25
     |
3119 | /                         if __errstatus != 0 as libc::c_int {
3120 | |                             unreachable!();
3121 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3127:22
     |
3127 |         if n_read == 0 as libc::c_int as libc::c_long {
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3131:26
     |
3131 |         eob = buf.offset(n_read as isize);
     |                          ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3136:23
     |
3136 |                 < (if 0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3137:35
     |
3137 |                     > chunk_end - 1 as libc::c_int as libc::c_long - n_written
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3139:21
     |
3139 |                     0 as libc::c_int as libc::c_long
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3141:33
     |
3141 |                     chunk_end - 1 as libc::c_int as libc::c_long - n_written
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3145:23
     |
3145 |             } else if 0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3146:31
     |
3146 |                 > chunk_end - 1 as libc::c_int as libc::c_long - n_written
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3148:17
     |
3148 |                 0 as libc::c_int as libc::c_long
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3150:29
     |
3150 |                 chunk_end - 1 as libc::c_int as libc::c_long - n_written
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3152:49
     |
3152 |               let mut bp_out: *mut libc::c_char = memchr(
     |  _________________________________________________^
3153 | |                 bp.offset(skip as isize) as *const libc::c_void,
3154 | |                 eolchar,
3155 | |                 (n_read - skip) as libc::c_ulong,
3156 | |             ) as *mut libc::c_char;
     | |__________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
3152 ~             let mut bp_out: *mut libc::c_char = memchr(
3153 +                 bp.offset(skip as isize) as *const libc::c_void,
3154 +                 eolchar,
3155 +                 (n_read - skip) as libc::c_ulong,
3156 ~             ).cast::<i8>();
     |

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3153:27
     |
3153 |                 bp.offset(skip as isize) as *const libc::c_void,
     |                           ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3155:17
     |
3155 |                 (n_read - skip) as libc::c_ulong,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary boolean `not` operation
    --> src/split.rs:3157:13
     |
3157 | /             if !bp_out.is_null() {
3158 | |                 bp_out = bp_out.offset(1);
3159 | |                 bp_out;
3160 | |                 next = 1 as libc::c_int != 0;
3161 | |             } else {
3162 | |                 bp_out = eob;
3163 | |             }
     | |_____________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/split.rs:3159:17
     |
3159 |                 bp_out;
     |                 ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3169:21
     |
3169 |                     to_write as size_t,
     |                     ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3170:22
     |
3170 |                 ) != to_write as libc::c_ulong
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3178:28
     |
3178 |             bp = bp.offset(to_write as isize);
     |                            ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3181:19
     |
3181 |             while next as libc::c_int != 0 || chunk_end <= n_written {
     |                   ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(next)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3191:31
     |
3191 | ...                   + (chunk_no < rem_bytes) as libc::c_int as libc::c_long;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((chunk_no < rem_bytes) as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3191:31
     |
3191 | ...                   + (chunk_no < rem_bytes) as libc::c_int as libc::c_long;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(chunk_no < rem_bytes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
    --> src/split.rs:3193:21
     |
3193 |                     chunk_no;
     |                     ^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *const _` detected
    --> src/split.rs:3198:33
     |
3198 | ...                   0 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3199:33
     |
3199 | ...                   0 as libc::c_int as idx_t,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
    --> src/split.rs:3211:9
     |
3211 |         chunk_no;
     |         ^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/split.rs:3216:13
     |
3216 |             chunk_no = chunk_no + 1;
     |             ^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `chunk_no += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: `0 as *const _` detected
    --> src/split.rs:3222:17
     |
3222 |                 0 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3223:17
     |
3223 |                 0 as libc::c_int as idx_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: the function has a cognitive complexity of (26/25)
    --> src/split.rs:3228:22
     |
3228 | unsafe extern "C" fn bytes_chunk_extract(
     |                      ^^^^^^^^^^^^^^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (222/100)
    --> src/split.rs:3228:1
     |
3228 | / unsafe extern "C" fn bytes_chunk_extract(
3229 | |     mut k: intmax_t,
3230 | |     mut n: intmax_t,
3231 | |     mut buf: *mut libc::c_char,
...    |
3463 | |     }
3464 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3238:8
     |
3238 |     if (0 as libc::c_int as libc::c_long) < k && k <= n {} else {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3240:13
     |
3240 |             b"0 < k && k <= n\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0 < k && k <= n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3241:13
     |
3241 |             b"split.c\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:3242:13
     |
3242 |             1009 as libc::c_int as libc::c_uint,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:3243:15
     |
3243 |               (*::core::mem::transmute::<
     |  _______________^
3244 | |                 &[u8; 76],
3245 | |                 &[libc::c_char; 76],
3246 | |             >(
3247 | |                 b"void bytes_chunk_extract(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0",
3248 | |             ))
     | |_____________^ help: try: `&*(b"void bytes_chunk_extract(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0" as *const [u8; 76] as *const [i8; 76])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
    --> src/split.rs:3252:5
     |
3252 | /     'c_14132: {
3253 | |         if (0 as libc::c_int as libc::c_long) < k && k <= n {} else {
3254 | |             __assert_fail(
3255 | |                 b"0 < k && k <= n\0" as *const u8 as *const libc::c_char,
...    |
3266 | |         }
3267 | |     };
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
     |
3252 ~     if (0 as libc::c_int as libc::c_long) < k && k <= n {} else {
3253 +             __assert_fail(
3254 +                 b"0 < k && k <= n\0" as *const u8 as *const libc::c_char,
3255 +                 b"split.c\0" as *const u8 as *const libc::c_char,
3256 +                 1009 as libc::c_int as libc::c_uint,
3257 +                 (*::core::mem::transmute::<
3258 +                     &[u8; 76],
3259 +                     &[libc::c_char; 76],
3260 +                 >(
3261 +                     b"void bytes_chunk_extract(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0",
3262 +                 ))
3263 +                     .as_ptr(),
3264 +             );
3265 +         };
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3253:12
     |
3253 |         if (0 as libc::c_int as libc::c_long) < k && k <= n {} else {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3255:17
     |
3255 |                 b"0 < k && k <= n\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0 < k && k <= n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3256:17
     |
3256 |                 b"split.c\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:3257:17
     |
3257 |                 1009 as libc::c_int as libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:3258:19
     |
3258 |                   (*::core::mem::transmute::<
     |  ___________________^
3259 | |                     &[u8; 76],
3260 | |                     &[libc::c_char; 76],
3261 | |                 >(
3262 | |                     b"void bytes_chunk_extract(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0",
3263 | |                 ))
     | |_________________^ help: try: `&*(b"void bytes_chunk_extract(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0" as *const [u8; 76] as *const [i8; 76])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3268:18
     |
3268 |     start = (k - 1 as libc::c_int as libc::c_long) * (file_size / n)
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3269:20
     |
3269 |         + (if (k - 1 as libc::c_int as libc::c_long) < file_size % n {
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3270:17
     |
3270 |             k - 1 as libc::c_int as libc::c_long
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3281:13
     |
3281 |             buf as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3282:24
     |
3282 |             buf.offset(start as isize) as *const libc::c_void,
     |                        ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3283:13
     |
3283 |             (initial_read - start) as libc::c_ulong,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3289:19
     |
3289 |                 < 0 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:3291:13
     |
3291 | /             if 0 != 0 {
3292 | |                 error(
3293 | |                     1 as libc::c_int,
3294 | |                     *__errno_location(),
...    |
3339 | |                 });
3340 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3291:16
     |
3291 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3295:21
     |
3295 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3302:17
     |
3302 | /                 if 1 as libc::c_int != 0 as libc::c_int {
3303 | |                     unreachable!();
3304 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3307:21
     |
3307 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3311:25
     |
3311 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3318:21
     |
3318 | /                     if __errstatus != 0 as libc::c_int {
3319 | |                         unreachable!();
3320 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3324:21
     |
3324 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3328:25
     |
3328 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3335:21
     |
3335 | /                     if __errstatus != 0 as libc::c_int {
3336 | |                         unreachable!();
3337 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3342:24
     |
3342 |         initial_read = -(1 as libc::c_int) as ssize_t;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3346:12
     |
3346 |         if 0 as libc::c_int as libc::c_long <= initial_read {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3348:28
     |
3348 |             initial_read = -(1 as libc::c_int) as ssize_t;
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3350:45
     |
3350 |             n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3350:71
     |
3350 |             n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                                                       ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3351:25
     |
3351 |             if n_read < 0 as libc::c_int as libc::c_long {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:3352:17
     |
3352 | /                 if 0 != 0 {
3353 | |                     error(
3354 | |                         1 as libc::c_int,
3355 | |                         *__errno_location(),
...    |
3400 | |                     });
3401 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3352:20
     |
3352 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3356:25
     |
3356 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3363:21
     |
3363 | /                     if 1 as libc::c_int != 0 as libc::c_int {
3364 | |                         unreachable!();
3365 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3368:25
     |
3368 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3372:29
     |
3372 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3379:25
     |
3379 | /                         if __errstatus != 0 as libc::c_int {
3380 | |                             unreachable!();
3381 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3385:25
     |
3385 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3389:29
     |
3389 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3396:25
     |
3396 | /                         if __errstatus != 0 as libc::c_int {
3397 | |                             unreachable!();
3398 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3404:22
     |
3404 |         if n_read == 0 as libc::c_int as libc::c_long {
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3408:69
     |
3408 |         if full_write(1 as libc::c_int, buf as *const libc::c_void, n_read as size_t)
     |                                                                     ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3409:16
     |
3409 |             != n_read as libc::c_ulong && !ignorable(*__errno_location())
     |                ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:3411:13
     |
3411 | /             if 0 != 0 {
3412 | |                 error(
3413 | |                     1 as libc::c_int,
3414 | |                     *__errno_location(),
...    |
3459 | |                 });
3460 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3411:16
     |
3411 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3415:21
     |
3415 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3419:25
     |
3419 |                         b"-\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3422:17
     |
3422 | /                 if 1 as libc::c_int != 0 as libc::c_int {
3423 | |                     unreachable!();
3424 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3427:21
     |
3427 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3431:25
     |
3431 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3435:29
     |
3435 | ...                   b"-\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3438:21
     |
3438 | /                     if __errstatus != 0 as libc::c_int {
3439 | |                         unreachable!();
3440 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3444:21
     |
3444 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3448:25
     |
3448 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3452:29
     |
3452 | ...                   b"-\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3455:21
     |
3455 | /                     if __errstatus != 0 as libc::c_int {
3456 | |                         unreachable!();
3457 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: the function has a cognitive complexity of (27/25)
    --> src/split.rs:3465:22
     |
3465 | unsafe extern "C" fn ofile_open(
     |                      ^^^^^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (246/100)
    --> src/split.rs:3465:1
     |
3465 | / unsafe extern "C" fn ofile_open(
3466 | |     mut files: *mut of_t,
3467 | |     mut i_check: idx_t,
3468 | |     mut nfiles: idx_t,
...    |
3723 | |     return file_limit;
3724 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/split.rs:3723:5
     |
3723 |     return file_limit;
     |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `file_limit`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3471:23
     |
3471 |     if (*files.offset(i_check as isize)).ofd <= OFD_NEW as libc::c_int {
     |                       ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3473:35
     |
3473 |           let mut i_reopen: idx_t = if i_check != 0 {
     |  ___________________________________^
3474 | |             i_check - 1 as libc::c_int as libc::c_long
3475 | |         } else {
3476 | |             nfiles - 1 as libc::c_int as libc::c_long
3477 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3474:23
     |
3474 |             i_check - 1 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3476:22
     |
3476 |             nfiles - 1 as libc::c_int as libc::c_long
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3479:31
     |
3479 |             if (*files.offset(i_check as isize)).ofd == OFD_NEW as libc::c_int {
     |                               ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3480:44
     |
3480 |                 fd = create((*files.offset(i_check as isize)).of_name);
     |                                            ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3483:36
     |
3483 |                     (*files.offset(i_check as isize)).of_name,
     |                                    ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3494:17
     |
3494 | /                 if 0 != 0 {
3495 | |                     error(
3496 | |                         1 as libc::c_int,
3497 | |                         *__errno_location(),
...    |
3542 | |                     });
3543 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3494:20
     |
3494 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3498:25
     |
3498 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3502:44
     |
3502 | ...                   (*files.offset(i_check as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3505:21
     |
3505 | /                     if 1 as libc::c_int != 0 as libc::c_int {
3506 | |                         unreachable!();
3507 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3510:25
     |
3510 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3514:29
     |
3514 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3518:48
     |
3518 | ...                   (*files.offset(i_check as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3521:25
     |
3521 | /                         if __errstatus != 0 as libc::c_int {
3522 | |                             unreachable!();
3523 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3527:25
     |
3527 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3531:29
     |
3531 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3535:48
     |
3535 | ...                   (*files.offset(i_check as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3538:25
     |
3538 | /                         if __errstatus != 0 as libc::c_int {
3539 | |                             unreachable!();
3540 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3546:34
     |
3546 |             while (*files.offset(i_reopen as isize)).ofd < 0 as libc::c_int {
     |                                  ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3547:28
     |
3547 |                   i_reopen = if i_reopen != 0 {
     |  ____________________________^
3548 | |                     i_reopen - 1 as libc::c_int as libc::c_long
3549 | |                 } else {
3550 | |                     nfiles - 1 as libc::c_int as libc::c_long
3551 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3548:32
     |
3548 |                     i_reopen - 1 as libc::c_int as libc::c_long
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3550:30
     |
3550 |                     nfiles - 1 as libc::c_int as libc::c_long
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:3553:21
     |
3553 | /                     if 0 != 0 {
3554 | |                         error(
3555 | |                             1 as libc::c_int,
3556 | |                             *__errno_location(),
...    |
3601 | |                         });
3602 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3553:24
     |
3553 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3557:29
     |
3557 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3561:48
     |
3561 | ...                   (*files.offset(i_check as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3564:25
     |
3564 | /                         if 1 as libc::c_int != 0 as libc::c_int {
3565 | |                             unreachable!();
3566 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3569:29
     |
3569 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3573:33
     |
3573 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3577:52
     |
3577 | ...                   (*files.offset(i_check as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3580:29
     |
3580 | / ...                   if __errstatus != 0 as libc::c_int {
3581 | | ...                       unreachable!();
3582 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3586:29
     |
3586 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3590:33
     |
3590 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3594:52
     |
3594 | ...                   (*files.offset(i_check as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3597:29
     |
3597 | / ...                   if __errstatus != 0 as libc::c_int {
3598 | | ...                       unreachable!();
3599 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3605:42
     |
3605 |             if rpl_fclose((*files.offset(i_reopen as isize)).ofile) != 0 as libc::c_int {
     |                                          ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3606:17
     |
3606 | /                 if 0 != 0 {
3607 | |                     error(
3608 | |                         1 as libc::c_int,
3609 | |                         *__errno_location(),
...    |
3654 | |                     });
3655 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3606:20
     |
3606 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3610:25
     |
3610 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3614:44
     |
3614 | ...                   (*files.offset(i_reopen as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3617:21
     |
3617 | /                     if 1 as libc::c_int != 0 as libc::c_int {
3618 | |                         unreachable!();
3619 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3622:25
     |
3622 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3626:29
     |
3626 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3630:48
     |
3630 | ...                   (*files.offset(i_reopen as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3633:25
     |
3633 | /                         if __errstatus != 0 as libc::c_int {
3634 | |                             unreachable!();
3635 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3639:25
     |
3639 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3643:29
     |
3643 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3647:48
     |
3647 | ...                   (*files.offset(i_reopen as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3650:25
     |
3650 | /                         if __errstatus != 0 as libc::c_int {
3651 | |                             unreachable!();
3652 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:3657:17
     |
3657 |             let ref mut fresh18 = (*files.offset(i_reopen as isize)).ofile;
     |             ----^^^^^^^^^^^^^^^-------------------------------------------- help: try: `let fresh18 = &mut (*files.offset(i_reopen as isize)).ofile;`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3657:50
     |
3657 |             let ref mut fresh18 = (*files.offset(i_reopen as isize)).ofile;
     |                                                  ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `0 as *mut _` detected
    --> src/split.rs:3658:24
     |
3658 |             *fresh18 = 0 as *mut FILE;
     |                        ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3659:28
     |
3659 |             (*files.offset(i_reopen as isize)).ofd = OFD_APPEND as libc::c_int;
     |                            ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3661:24
     |
3661 |         (*files.offset(i_check as isize)).ofd = fd;
     |                        ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3664:13
     |
3664 |             b"a\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"a\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3667:13
     |
3667 | /             if 0 != 0 {
3668 | |                 error(
3669 | |                     1 as libc::c_int,
3670 | |                     *__errno_location(),
...    |
3715 | |                 });
3716 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3667:16
     |
3667 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3671:21
     |
3671 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3675:40
     |
3675 |                         (*files.offset(i_check as isize)).of_name,
     |                                        ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3678:17
     |
3678 | /                 if 1 as libc::c_int != 0 as libc::c_int {
3679 | |                     unreachable!();
3680 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3683:21
     |
3683 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3687:25
     |
3687 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3691:44
     |
3691 | ...                   (*files.offset(i_check as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3694:21
     |
3694 | /                     if __errstatus != 0 as libc::c_int {
3695 | |                         unreachable!();
3696 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3700:21
     |
3700 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3704:25
     |
3704 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3708:44
     |
3708 | ...                   (*files.offset(i_check as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3711:21
     |
3711 | /                     if __errstatus != 0 as libc::c_int {
3712 | |                         unreachable!();
3713 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:3718:13
     |
3718 |         let ref mut fresh19 = (*files.offset(i_check as isize)).ofile;
     |         ----^^^^^^^^^^^^^^^------------------------------------------- help: try: `let fresh19 = &mut (*files.offset(i_check as isize)).ofile;`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3718:46
     |
3718 |         let ref mut fresh19 = (*files.offset(i_check as isize)).ofile;
     |                                              ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3720:24
     |
3720 |         (*files.offset(i_check as isize)).opid = filter_pid;
     |                        ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: the function has a cognitive complexity of (43/25)
    --> src/split.rs:3725:22
     |
3725 | unsafe extern "C" fn lines_rr(
     |                      ^^^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (347/100)
    --> src/split.rs:3725:1
     |
3725 | / unsafe extern "C" fn lines_rr(
3726 | |     mut k: intmax_t,
3727 | |     mut n: intmax_t,
3728 | |     mut buf: *mut libc::c_char,
...    |
4086 | |     }
4087 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: `if _ { .. } else { .. }` is an expression
    --> src/split.rs:3737:5
     |
3737 | /     let mut line_no: intmax_t = 0;
3738 | |     if k != 0 {
3739 | |         line_no = 1 as libc::c_int as intmax_t;
3740 | |     } else {
...    |
3760 | |         file_limit = 0 as libc::c_int != 0;
3761 | |     }
     | |_____^ help: it is more idiomatic to write: `let <mut> line_no = if k != 0 { 1 as libc::c_int as intmax_t } else { ..; 0 };`
     |
     = note: you might not need `mut` at all
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq

warning: `0 as *mut _` detected
    --> src/split.rs:3736:32
     |
3736 |     let mut files: *mut of_t = 0 as *mut of_t;
     |                                ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<of_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3738:5
     |
3738 | /     if k != 0 {
3739 | |         line_no = 1 as libc::c_int as intmax_t;
3740 | |     } else {
3741 | |         if (9223372036854775807 as libc::c_long) < n {
...    |
3760 | |         file_limit = 0 as libc::c_int != 0;
3761 | |     }
     | |_____^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3739:19
     |
3739 |         line_no = 1 as libc::c_int as intmax_t;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3744:19
     |
3744 |           *filesp = xinmalloc(n, ::core::mem::size_of::<of_t>() as libc::c_ulong as idx_t)
     |  ___________________^
3745 | |             as *mut of_t;
     | |________________________^ help: try `pointer::cast`, a safer alternative: `xinmalloc(n, ::core::mem::size_of::<of_t>() as libc::c_ulong as idx_t).cast::<of_info>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:3744:32
     |
3744 |         *filesp = xinmalloc(n, ::core::mem::size_of::<of_t>() as libc::c_ulong as idx_t)
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3747:18
     |
3747 |         i_file = 0 as libc::c_int as idx_t;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:3750:17
     |
3750 |             let ref mut fresh20 = (*files.offset(i_file as isize)).of_name;
     |             ----^^^^^^^^^^^^^^^-------------------------------------------- help: try: `let fresh20 = &mut (*files.offset(i_file as isize)).of_name;`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3750:50
     |
3750 |             let ref mut fresh20 = (*files.offset(i_file as isize)).of_name;
     |                                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3752:28
     |
3752 |             (*files.offset(i_file as isize)).ofd = OFD_NEW as libc::c_int;
     |                            ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:3753:17
     |
3753 |             let ref mut fresh21 = (*files.offset(i_file as isize)).ofile;
     |             ----^^^^^^^^^^^^^^^------------------------------------------ help: try: `let fresh21 = &mut (*files.offset(i_file as isize)).ofile;`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3753:50
     |
3753 |             let ref mut fresh21 = (*files.offset(i_file as isize)).ofile;
     |                                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `0 as *mut _` detected
    --> src/split.rs:3754:24
     |
3754 |             *fresh21 = 0 as *mut FILE;
     |                        ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3755:28
     |
3755 |             (*files.offset(i_file as isize)).opid = 0 as libc::c_int;
     |                            ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
    --> src/split.rs:3757:13
     |
3757 |             i_file;
     |             ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3759:18
     |
3759 |         i_file = 0 as libc::c_int as idx_t;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:3764:42
     |
3764 |         let mut eob: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3767:13
     |
3767 |             buf as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3768:13
     |
3768 |             bufsize as size_t,
     |             ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `if` chain can be rewritten with `match`
    --> src/split.rs:3770:9
     |
3770 | /         if n_read < 0 as libc::c_int as libc::c_long {
3771 | |             if 0 != 0 {
3772 | |                 error(
3773 | |                     1 as libc::c_int,
...    |
3822 | |             break;
3823 | |         }
     | |_________^
     |
     = note: `-W clippy::comparison-chain` implied by `-W clippy::all`
     = help: consider rewriting the `if` chain to use `cmp` and `match`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3770:21
     |
3770 |         if n_read < 0 as libc::c_int as libc::c_long {
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:3771:13
     |
3771 | /             if 0 != 0 {
3772 | |                 error(
3773 | |                     1 as libc::c_int,
3774 | |                     *__errno_location(),
...    |
3819 | |                 });
3820 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3771:16
     |
3771 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3775:21
     |
3775 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3782:17
     |
3782 | /                 if 1 as libc::c_int != 0 as libc::c_int {
3783 | |                     unreachable!();
3784 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3787:21
     |
3787 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3791:25
     |
3791 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3798:21
     |
3798 | /                     if __errstatus != 0 as libc::c_int {
3799 | |                         unreachable!();
3800 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3804:21
     |
3804 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3808:25
     |
3808 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3815:21
     |
3815 | /                     if __errstatus != 0 as libc::c_int {
3816 | |                         unreachable!();
3817 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3821:29
     |
3821 |         } else if n_read == 0 as libc::c_int as libc::c_long {
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3824:26
     |
3824 |         eob = buf.offset(n_read as isize);
     |                          ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3828:49
     |
3828 |               let mut bp_out: *mut libc::c_char = memchr(
     |  _________________________________________________^
3829 | |                 bp as *const libc::c_void,
3830 | |                 eolchar,
3831 | |                 eob.offset_from(bp) as libc::c_long as libc::c_ulong,
3832 | |             ) as *mut libc::c_char;
     | |__________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
3828 ~             let mut bp_out: *mut libc::c_char = memchr(
3829 +                 bp as *const libc::c_void,
3830 +                 eolchar,
3831 +                 eob.offset_from(bp) as libc::c_long as libc::c_ulong,
3832 ~             ).cast::<i8>();
     |

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3831:17
     |
3831 |                 eob.offset_from(bp) as libc::c_long as libc::c_ulong,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary boolean `not` operation
    --> src/split.rs:3833:13
     |
3833 | /             if !bp_out.is_null() {
3834 | |                 bp_out = bp_out.offset(1);
3835 | |                 bp_out;
3836 | |                 next = 1 as libc::c_int != 0;
3837 | |             } else {
3838 | |                 bp_out = eob;
3839 | |             }
     | |_____________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/split.rs:3835:17
     |
3835 |                 bp_out;
     |                 ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary `!=` operation
    --> src/split.rs:3841:13
     |
3841 | /             if k != 0 {
3842 | |                 if line_no == k && unbuffered as libc::c_int != 0 {
3843 | |                     if full_write(
3844 | |                         1 as libc::c_int,
...    |
4061 | |                 }
4062 | |             }
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3842:36
     |
3842 |                 if line_no == k && unbuffered as libc::c_int != 0 {
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(unbuffered)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3846:25
     |
3846 |                         to_write as size_t,
     |                         ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3847:26
     |
3847 |                     ) != to_write as libc::c_ulong
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3854:25
     |
3854 |                         to_write as size_t,
     |                         ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:3855:25
     |
3855 |                         1 as libc::c_int as size_t,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:3857:26
     |
3857 |                     ) != 1 as libc::c_int as libc::c_ulong
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3863:25
     |
3863 |                         1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3865:35
     |
3865 |                         line_no + 1 as libc::c_int as libc::c_long
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3869:31
     |
3869 |                 file_limit = (file_limit as libc::c_int
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(file_limit)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3870:23
     |
3870 |                     | ofile_open(files, i_file, n) as libc::c_int) != 0;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ofile_open(files, i_file, n))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3873:40
     |
3873 |                         (*files.offset(i_file as isize)).ofd,
     |                                        ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3875:25
     |
3875 |                         to_write as size_t,
     |                         ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3876:26
     |
3876 |                     ) != to_write as libc::c_ulong && !ignorable(*__errno_location())
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:3878:25
     |
3878 | /                         if 0 != 0 {
3879 | |                             error(
3880 | |                                 1 as libc::c_int,
3881 | |                                 *__errno_location(),
...    |
3926 | |                             });
3927 | |                         };
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3878:28
     |
3878 |                         if 0 != 0 {
     |                            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3882:33
     |
3882 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3886:52
     |
3886 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3889:29
     |
3889 | / ...                   if 1 as libc::c_int != 0 as libc::c_int {
3890 | | ...                       unreachable!();
3891 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3894:33
     |
3894 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3898:37
     |
3898 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3902:56
     |
3902 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3905:33
     |
3905 | / ...                   if __errstatus != 0 as libc::c_int {
3906 | | ...                       unreachable!();
3907 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3911:33
     |
3911 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3915:37
     |
3915 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3919:56
     |
3919 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3922:33
     |
3922 | / ...                   if __errstatus != 0 as libc::c_int {
3923 | | ...                       unreachable!();
3924 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3931:21
     |
3931 |                     to_write as size_t,
     |                     ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:3932:21
     |
3932 |                     1 as libc::c_int as size_t,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3933:36
     |
3933 |                     (*files.offset(i_file as isize)).ofile,
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:3934:22
     |
3934 |                 ) != 1 as libc::c_int as libc::c_ulong && !ignorable(*__errno_location())
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:3936:21
     |
3936 | /                     if 0 != 0 {
3937 | |                         error(
3938 | |                             1 as libc::c_int,
3939 | |                             *__errno_location(),
...    |
3984 | |                         });
3985 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3936:24
     |
3936 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3940:29
     |
3940 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3944:48
     |
3944 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3947:25
     |
3947 | /                         if 1 as libc::c_int != 0 as libc::c_int {
3948 | |                             unreachable!();
3949 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3952:29
     |
3952 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3956:33
     |
3956 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3960:52
     |
3960 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3963:29
     |
3963 | / ...                   if __errstatus != 0 as libc::c_int {
3964 | | ...                       unreachable!();
3965 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3969:29
     |
3969 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3973:33
     |
3973 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3977:52
     |
3977 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3980:29
     |
3980 | / ...                   if __errstatus != 0 as libc::c_int {
3981 | | ...                       unreachable!();
3982 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3991:50
     |
3991 |                     if rpl_fclose((*files.offset(i_file as isize)).ofile)
     |                                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3994:25
     |
3994 | /                         if 0 != 0 {
3995 | |                             error(
3996 | |                                 1 as libc::c_int,
3997 | |                                 *__errno_location(),
...    |
4042 | |                             });
4043 | |                         };
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3994:28
     |
3994 |                         if 0 != 0 {
     |                            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3998:33
     |
3998 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4002:52
     |
4002 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:4005:29
     |
4005 | / ...                   if 1 as libc::c_int != 0 as libc::c_int {
4006 | | ...                       unreachable!();
4007 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4010:33
     |
4010 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4014:37
     |
4014 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4018:56
     |
4018 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:4021:33
     |
4021 | / ...                   if __errstatus != 0 as libc::c_int {
4022 | | ...                       unreachable!();
4023 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4027:33
     |
4027 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4031:37
     |
4031 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4035:56
     |
4035 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:4038:33
     |
4038 | / ...                   if __errstatus != 0 as libc::c_int {
4039 | | ...                       unreachable!();
4040 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:4045:25
     |
4045 |                     let ref mut fresh22 = (*files.offset(i_file as isize)).ofile;
     |                     ----^^^^^^^^^^^^^^^------------------------------------------ help: try: `let fresh22 = &mut (*files.offset(i_file as isize)).ofile;`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4045:58
     |
4045 |                     let ref mut fresh22 = (*files.offset(i_file as isize)).ofile;
     |                                                          ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `0 as *mut _` detected
    --> src/split.rs:4046:32
     |
4046 |                     *fresh22 = 0 as *mut FILE;
     |                                ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4047:36
     |
4047 |                     (*files.offset(i_file as isize)).ofd = OFD_APPEND as libc::c_int;
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4049:20
     |
4049 |                 if next as libc::c_int != 0
     |                    ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(next)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4060:30
     |
4060 |                     i_file = 0 as libc::c_int as idx_t;
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4067:34
     |
4067 |         let mut ceiling: idx_t = if wrapped as libc::c_int != 0 { n } else { i_file };
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4067:37
     |
4067 |         let mut ceiling: idx_t = if wrapped as libc::c_int != 0 { n } else { i_file };
     |                                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(wrapped)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4068:18
     |
4068 |         i_file = 0 as libc::c_int as idx_t;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4071:31
     |
4071 |                 file_limit = (file_limit as libc::c_int
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(file_limit)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4072:23
     |
4072 |                     | ofile_open(files, i_file, n) as libc::c_int) != 0;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ofile_open(files, i_file, n))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4074:31
     |
4074 |             if (*files.offset(i_file as isize)).ofd >= 0 as libc::c_int {
     |                               ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4076:36
     |
4076 |                     (*files.offset(i_file as isize)).ofile,
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4077:36
     |
4077 |                     (*files.offset(i_file as isize)).ofd,
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4078:36
     |
4078 |                     (*files.offset(i_file as isize)).opid,
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4079:36
     |
4079 |                     (*files.offset(i_file as isize)).of_name,
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:4082:28
     |
4082 |             (*files.offset(i_file as isize)).ofd = OFD_APPEND as libc::c_int;
     |                            ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
    --> src/split.rs:4084:13
     |
4084 |             i_file;
     |             ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary `!=` operation
    --> src/split.rs:4092:5
     |
4092 | /     if 0 != 0 {
4093 | |         error(
4094 | |             1 as libc::c_int,
4095 | |             if *__errno_location() == 22 as libc::c_int {
...    |
4143 | |         });
4144 | |     };
     | |_____^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4092:8
     |
4092 |     if 0 != 0 {
     |        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4100:13
     |
4100 |             b"%s: %s\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4104:9
     |
4104 | /         if 1 as libc::c_int != 0 as libc::c_int {
4105 | |             unreachable!();
4106 | |         } else {};
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4109:13
     |
4109 |             let __errstatus: libc::c_int = 1 as libc::c_int;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4117:17
     |
4117 |                 b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4121:13
     |
4121 | /             if __errstatus != 0 as libc::c_int {
4122 | |                 unreachable!();
4123 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4127:13
     |
4127 |             let __errstatus: libc::c_int = 1 as libc::c_int;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4135:17
     |
4135 |                 b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4139:13
     |
4139 | /             if __errstatus != 0 as libc::c_int {
4140 | |                 unreachable!();
4141 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unneeded `return` statement
    --> src/split.rs:4163:5
     |
4163 |     return n;
     |     ^^^^^^^^^ help: remove `return`: `n`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4152:8
     |
4152 |     if (LONGINT_OVERFLOW as libc::c_int as libc::c_uint)
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4152:9
     |
4152 |     if (LONGINT_OVERFLOW as libc::c_int as libc::c_uint)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *mut _` detected
    --> src/split.rs:4155:13
     |
4155 |             0 as *mut *mut libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4159:34
     |
4159 |         ) as libc::c_uint || n < 1 as libc::c_int as libc::c_long
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:4170:41
     |
4170 |     let mut argend: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4176:9
     |
4176 |         b"\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4178:29
     |
4178 |     if e as libc::c_uint == LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4178:29
     |
4178 |     if e as libc::c_uint == LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4179:12
     |
4179 |         && *argend as libc::c_int == '/' as i32
     |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*argend)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4184:13
     |
4184 |             b"\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4185:13
     |
4185 |             b"invalid number of chunks\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of chunks\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4187:14
     |
4187 |         if !((0 as libc::c_int as libc::c_long) < *k_units && *k_units <= *n_units) {
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4188:13
     |
4188 | /             if 0 != 0 {
4189 | |                 error(
4190 | |                     1 as libc::c_int,
4191 | |                     0 as libc::c_int,
...    |
4233 | |                 });
4234 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4188:16
     |
4188 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4192:21
     |
4192 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4194:25
     |
4194 |                         b"invalid chunk number\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid chunk number\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:4196:36
     |
4196 |                     quote_mem(arg, argend.offset_from(arg) as libc::c_long as size_t),
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:4198:17
     |
4198 | /                 if 1 as libc::c_int != 0 as libc::c_int {
4199 | |                     unreachable!();
4200 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4203:21
     |
4203 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4207:25
     |
4207 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4209:29
     |
4209 | ...                   b"invalid chunk number\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid chunk number\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:4211:40
     |
4211 |                         quote_mem(arg, argend.offset_from(arg) as libc::c_long as size_t),
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:4213:21
     |
4213 | /                     if __errstatus != 0 as libc::c_int {
4214 | |                         unreachable!();
4215 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4219:21
     |
4219 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4223:25
     |
4223 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4225:29
     |
4225 | ...                   b"invalid chunk number\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid chunk number\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:4227:40
     |
4227 |                         quote_mem(arg, argend.offset_from(arg) as libc::c_long as size_t),
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:4229:21
     |
4229 | /                     if __errstatus != 0 as libc::c_int {
4230 | |                         unreachable!();
4231 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4236:38
     |
4236 |     } else if !(e as libc::c_uint <= LONGINT_OVERFLOW as libc::c_int as libc::c_uint
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4236:38
     |
4236 |     } else if !(e as libc::c_uint <= LONGINT_OVERFLOW as libc::c_int as libc::c_uint
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4237:12
     |
4237 |         && (0 as libc::c_int as libc::c_long) < *n_units)
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4240:13
     |
4240 |             b"invalid number of chunks\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of chunks\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
    --> src/split.rs:5540:8
     |
5540 |     if !(strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int)
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) != 0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (183/25)
    --> src/split.rs:4245:11
     |
4245 | unsafe fn main_0(
     |           ^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (1593/100)
    --> src/split.rs:4245:1
     |
4245 | / unsafe fn main_0(
4246 | |     mut argc: libc::c_int,
4247 | |     mut argv: *mut *mut libc::c_char,
4248 | | ) -> libc::c_int {
...    |
5877 | |     exit(0 as libc::c_int);
5878 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: `if _ { .. } else { .. }` is an expression
    --> src/split.rs:5664:5
     |
5664 | /     let mut initial_read: ssize_t = -(1 as libc::c_int) as ssize_t;
5665 | |     if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
5666 | |         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint
5667 | |     {
...    |
5735 | |         initial_read = if file_size < in_blk_size { file_size } else { in_blk_size };
5736 | |     }
     | |_____^
     |
     = note: you might not need `mut` at all
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
help: it is more idiomatic to write
     |
5664 ~     let <mut> initial_read = if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
5665 +         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint { ..; if file_size < in_blk_size { file_size } else { in_blk_size } } else { -(1 as libc::c_int) as ssize_t };
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4250:34
     |
4250 |     let mut in_blk_size: idx_t = 0 as libc::c_int as idx_t;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4251:32
     |
4251 |     let mut page_size: idx_t = getpagesize() as idx_t;
     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(getpagesize())`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4252:33
     |
4252 |     let mut k_units: intmax_t = 0 as libc::c_int as intmax_t;
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4253:33
     |
4253 |     let mut n_units: intmax_t = 0 as libc::c_int as intmax_t;
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4259:35
     |
4259 |     let mut file_size: off_t = if (0 as libc::c_int as off_t)
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4260:11
     |
4260 |         < -(1 as libc::c_int) as off_t
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4262:9
     |
4262 |         -(1 as libc::c_int) as off_t
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4264:11
     |
4264 |         (((1 as libc::c_int as off_t)
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4266:31
     |
4266 |                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4267:31
     |
4267 |                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4268:15
     |
4268 |             - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4268:51
     |
4268 |             - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
     |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4269:15
     |
4269 |             + 1 as libc::c_int as libc::c_long
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4272:33
     |
4272 |     setlocale(6 as libc::c_int, b"\0" as *const u8 as *const libc::c_char);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4274:9
     |
4274 |         b"coreutils\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4275:9
     |
4275 |         b"/usr/local/share/locale\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/usr/local/share/locale\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4277:16
     |
4277 |     textdomain(b"coreutils\0" as *const u8 as *const libc::c_char);
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4279:14
     |
4279 |     infile = b"-\0" as *const u8 as *const libc::c_char;
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4280:15
     |
4280 |     outbase = b"x\0" as *const u8 as *const libc::c_char;
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"x\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4282:44
     |
4282 |           let mut this_optind: libc::c_int = if optind != 0 {
     |  ____________________________________________^
4283 | |             optind
4284 | |         } else {
4285 | |             1 as libc::c_int
4286 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4290:13
     |
4290 |             b"0123456789C:a:b:del:n:t:ux\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0123456789C:a:b:del:n:t:ux\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:4292:13
     |
4292 |             0 as *mut libc::c_int,
     |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_int>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4301:21
     |
4301 |                     0 as libc::c_int as intmax_t,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4303:21
     |
4303 |                     b"\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4305:25
     |
4305 |                         b"invalid suffix length\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid suffix length\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `i32` may truncate the value
    --> src/split.rs:4311:51
     |
4311 |                 let mut suffix_len: libc::c_int = strlen(optarg) as libc::c_int;
     |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4314:28
     |
4314 |                           && *optarg.offset((suffix_len - 1 as libc::c_int) as isize)
     |  ____________________________^
4315 | |                             as libc::c_int == '/' as i32
     | |__________________________________________^ help: try: `i32::from(*optarg.offset((suffix_len - 1 as libc::c_int) as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4317:21
     |
4317 | /                     if 0 != 0 {
4318 | |                         error(
4319 | |                             0 as libc::c_int,
4320 | |                             0 as libc::c_int,
...    |
4362 | |                         });
4363 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4317:24
     |
4317 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4322:33
     |
4322 | / ...                   b"invalid suffix %s, contains directory separator\0"
4323 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid suffix %s, contains directory separator\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4327:25
     |
4327 | /                         if 0 as libc::c_int != 0 as libc::c_int {
4328 | |                             unreachable!();
4329 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4327:28
     |
4327 |                         if 0 as libc::c_int != 0 as libc::c_int {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4332:29
     |
4332 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4337:37
     |
4337 | / ...                   b"invalid suffix %s, contains directory separator\0"
4338 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid suffix %s, contains directory separator\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4342:29
     |
4342 | / ...                   if __errstatus != 0 as libc::c_int {
4343 | | ...                       unreachable!();
4344 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4348:29
     |
4348 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4353:37
     |
4353 | / ...                   b"invalid suffix %s, contains directory separator\0"
4354 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid suffix %s, contains directory separator\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4358:29
     |
4358 | / ...                   if __errstatus != 0 as libc::c_int {
4359 | | ...                       unreachable!();
4360 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4370:24
     |
4370 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4370:24
     |
4370 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
    --> src/split.rs:4372:21
     |
4372 | /                     if 0 != 0 {
4373 | |                         error(
4374 | |                             0 as libc::c_int,
4375 | |                             0 as libc::c_int,
...    |
4414 | |                         });
4415 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4372:24
     |
4372 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4377:33
     |
4377 | / ...                   b"cannot split in more than one way\0" as *const u8
4378 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4381:25
     |
4381 | /                         if 0 as libc::c_int != 0 as libc::c_int {
4382 | |                             unreachable!();
4383 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4381:28
     |
4381 |                         if 0 as libc::c_int != 0 as libc::c_int {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4386:29
     |
4386 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4391:37
     |
4391 | / ...                   b"cannot split in more than one way\0" as *const u8
4392 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4395:29
     |
4395 | / ...                   if __errstatus != 0 as libc::c_int {
4396 | | ...                       unreachable!();
4397 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4401:29
     |
4401 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4406:37
     |
4406 | / ...                   b"cannot split in more than one way\0" as *const u8
4407 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4410:29
     |
4410 | / ...                   if __errstatus != 0 as libc::c_int {
4411 | | ...                       unreachable!();
4412 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4422:21
     |
4422 |                     b"invalid number of bytes\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of bytes\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4427:24
     |
4427 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4427:24
     |
4427 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
    --> src/split.rs:4429:21
     |
4429 | /                     if 0 != 0 {
4430 | |                         error(
4431 | |                             0 as libc::c_int,
4432 | |                             0 as libc::c_int,
...    |
4471 | |                         });
4472 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4429:24
     |
4429 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4434:33
     |
4434 | / ...                   b"cannot split in more than one way\0" as *const u8
4435 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4438:25
     |
4438 | /                         if 0 as libc::c_int != 0 as libc::c_int {
4439 | |                             unreachable!();
4440 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4438:28
     |
4438 |                         if 0 as libc::c_int != 0 as libc::c_int {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4443:29
     |
4443 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4448:37
     |
4448 | / ...                   b"cannot split in more than one way\0" as *const u8
4449 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4452:29
     |
4452 | / ...                   if __errstatus != 0 as libc::c_int {
4453 | | ...                       unreachable!();
4454 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4458:29
     |
4458 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4463:37
     |
4463 | / ...                   b"cannot split in more than one way\0" as *const u8
4464 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4467:29
     |
4467 | / ...                   if __errstatus != 0 as libc::c_int {
4468 | | ...                       unreachable!();
4469 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4478:21
     |
4478 |                     b"\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4479:21
     |
4479 |                     b"invalid number of lines\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of lines\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4484:24
     |
4484 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4484:24
     |
4484 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
    --> src/split.rs:4486:21
     |
4486 | /                     if 0 != 0 {
4487 | |                         error(
4488 | |                             0 as libc::c_int,
4489 | |                             0 as libc::c_int,
...    |
4528 | |                         });
4529 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4486:24
     |
4486 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4491:33
     |
4491 | / ...                   b"cannot split in more than one way\0" as *const u8
4492 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4495:25
     |
4495 | /                         if 0 as libc::c_int != 0 as libc::c_int {
4496 | |                             unreachable!();
4497 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4495:28
     |
4495 |                         if 0 as libc::c_int != 0 as libc::c_int {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4500:29
     |
4500 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4505:37
     |
4505 | / ...                   b"cannot split in more than one way\0" as *const u8
4506 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4509:29
     |
4509 | / ...                   if __errstatus != 0 as libc::c_int {
4510 | | ...                       unreachable!();
4511 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4515:29
     |
4515 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4520:37
     |
4520 | / ...                   b"cannot split in more than one way\0" as *const u8
4521 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4524:29
     |
4524 | / ...                   if __errstatus != 0 as libc::c_int {
4525 | | ...                       unreachable!();
4526 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4536:21
     |
4536 |                     b"invalid number of lines\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of lines\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4541:24
     |
4541 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4541:24
     |
4541 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
    --> src/split.rs:4543:21
     |
4543 | /                     if 0 != 0 {
4544 | |                         error(
4545 | |                             0 as libc::c_int,
4546 | |                             0 as libc::c_int,
...    |
4585 | |                         });
4586 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4543:24
     |
4543 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4548:33
     |
4548 | / ...                   b"cannot split in more than one way\0" as *const u8
4549 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4552:25
     |
4552 | /                         if 0 as libc::c_int != 0 as libc::c_int {
4553 | |                             unreachable!();
4554 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4552:28
     |
4552 |                         if 0 as libc::c_int != 0 as libc::c_int {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4557:29
     |
4557 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4562:37
     |
4562 | / ...                   b"cannot split in more than one way\0" as *const u8
4563 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4566:29
     |
4566 | / ...                   if __errstatus != 0 as libc::c_int {
4567 | | ...                       unreachable!();
4568 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4572:29
     |
4572 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4577:37
     |
4577 | / ...                   b"cannot split in more than one way\0" as *const u8
4578 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4581:29
     |
4581 | / ...                   if __errstatus != 0 as libc::c_int {
4582 | | ...                       unreachable!();
4583 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u16` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4589:23
     |
4589 |                   while *(*__ctype_b_loc())
     |  _______________________^
4590 | |                     .offset(to_uchar(*optarg) as libc::c_int as isize) as libc::c_int
     | |_____________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4589 ~                 while i32::from(*(*__ctype_b_loc())
4590 +                     .offset(to_uchar(*optarg) as libc::c_int as isize))
     |

warning: casting `u8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4590:29
     |
4590 |                     .offset(to_uchar(*optarg) as libc::c_int as isize) as libc::c_int
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(to_uchar(*optarg))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4591:23
     |
4591 |                     & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISspace as libc::c_int as libc::c_ushort)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
    --> src/split.rs:4591:23
     |
4591 |                     & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
    --> src/split.rs:4591:23
     |
4591 |                     & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4591:23
     |
4591 |                     & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
     |                       ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/split.rs:4594:21
     |
4594 |                     optarg;
     |                     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4598:21
     |
4598 |                     b"r/\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"r/\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4600:39
     |
4600 |                         .wrapping_sub(1 as libc::c_int as libc::c_ulong),
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4607:21
     |
4607 |                     b"l/\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"l/\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4609:39
     |
4609 |                         .wrapping_sub(1 as libc::c_int as libc::c_ulong),
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:4625:21
     |
4625 | /                     if 0 != 0 {
4626 | |                         error(
4627 | |                             1 as libc::c_int,
4628 | |                             0 as libc::c_int,
...    |
4667 | |                         });
4668 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4625:24
     |
4625 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4630:33
     |
4630 | / ...                   b"empty record separator\0" as *const u8
4631 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"empty record separator\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4634:25
     |
4634 | /                         if 1 as libc::c_int != 0 as libc::c_int {
4635 | |                             unreachable!();
4636 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4639:29
     |
4639 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4644:37
     |
4644 | / ...                   b"empty record separator\0" as *const u8
4645 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"empty record separator\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4648:29
     |
4648 | / ...                   if __errstatus != 0 as libc::c_int {
4649 | | ...                       unreachable!();
4650 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4654:29
     |
4654 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4659:37
     |
4659 | / ...                   b"empty record separator\0" as *const u8
4660 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"empty record separator\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4663:29
     |
4663 | / ...                   if __errstatus != 0 as libc::c_int {
4664 | | ...                       unreachable!();
4665 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4671:39
     |
4671 |                     if strcmp(optarg, b"\\0\0" as *const u8 as *const libc::c_char)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\\0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/split.rs:4674:34
     |
4674 |                         neweol = '\0' as i32 as libc::c_char;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:4676:25
     |
4676 | /                         if 0 != 0 {
4677 | |                             error(
4678 | |                                 1 as libc::c_int,
4679 | |                                 0 as libc::c_int,
...    |
4721 | |                             });
4722 | |                         };
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4676:28
     |
4676 |                         if 0 != 0 {
     |                            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4681:37
     |
4681 | / ...                   b"multi-character separator %s\0" as *const u8
4682 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"multi-character separator %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4686:29
     |
4686 | / ...                   if 1 as libc::c_int != 0 as libc::c_int {
4687 | | ...                       unreachable!();
4688 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4691:33
     |
4691 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4696:41
     |
4696 | / ...                   b"multi-character separator %s\0" as *const u8
4697 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"multi-character separator %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4701:33
     |
4701 | / ...                   if __errstatus != 0 as libc::c_int {
4702 | | ...                       unreachable!();
4703 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4707:33
     |
4707 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4712:41
     |
4712 | / ...                   b"multi-character separator %s\0" as *const u8
4713 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"multi-character separator %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4717:33
     |
4717 | / ...                   if __errstatus != 0 as libc::c_int {
4718 | | ...                       unreachable!();
4719 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4725:51
     |
4725 |                 if 0 as libc::c_int <= eolchar && neweol as libc::c_int != eolchar {
     |                                                   ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(neweol)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4726:21
     |
4726 | /                     if 0 != 0 {
4727 | |                         error(
4728 | |                             1 as libc::c_int,
4729 | |                             0 as libc::c_int,
...    |
4768 | |                         });
4769 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4726:24
     |
4726 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4731:33
     |
4731 | / ...                   b"multiple separator characters specified\0" as *const u8
4732 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"multiple separator characters specified\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4735:25
     |
4735 | /                         if 1 as libc::c_int != 0 as libc::c_int {
4736 | |                             unreachable!();
4737 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4740:29
     |
4740 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4745:37
     |
4745 | / ...                   b"multiple separator characters specified\0" as *const u8
4746 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"multiple separator characters specified\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4749:29
     |
4749 | / ...                   if __errstatus != 0 as libc::c_int {
4750 | | ...                       unreachable!();
4751 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4755:29
     |
4755 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4760:37
     |
4760 | / ...                   b"multiple separator characters specified\0" as *const u8
4761 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"multiple separator characters specified\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4764:29
     |
4764 | / ...                   if __errstatus != 0 as libc::c_int {
4765 | | ...                       unreachable!();
4766 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4771:27
     |
4771 |                 eolchar = neweol as libc::c_int;
     |                           ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(neweol)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4775:24
     |
4775 |                     == type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4775:24
     |
4775 |                     == type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4778:31
     |
4778 |                     n_units = 0 as libc::c_int as intmax_t;
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4781:24
     |
4781 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4781:24
     |
4781 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4783:28
     |
4783 |                         != type_digits as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4783:28
     |
4783 |                         != type_digits as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
    --> src/split.rs:4785:21
     |
4785 | /                     if 0 != 0 {
4786 | |                         error(
4787 | |                             0 as libc::c_int,
4788 | |                             0 as libc::c_int,
...    |
4827 | |                         });
4828 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4785:24
     |
4785 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4790:33
     |
4790 | / ...                   b"cannot split in more than one way\0" as *const u8
4791 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4794:25
     |
4794 | /                         if 0 as libc::c_int != 0 as libc::c_int {
4795 | |                             unreachable!();
4796 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4794:28
     |
4794 |                         if 0 as libc::c_int != 0 as libc::c_int {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4799:29
     |
4799 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4804:37
     |
4804 | / ...                   b"cannot split in more than one way\0" as *const u8
4805 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4808:29
     |
4808 | / ...                   if __errstatus != 0 as libc::c_int {
4809 | | ...                       unreachable!();
4810 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4814:29
     |
4814 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4819:37
     |
4819 | / ...                   b"cannot split in more than one way\0" as *const u8
4820 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4823:29
     |
4823 | / ...                   if __errstatus != 0 as libc::c_int {
4824 | | ...                       unreachable!();
4825 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4832:31
     |
4832 |                     n_units = 0 as libc::c_int as intmax_t;
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4835:24
     |
4835 |                 if (if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4835:57
     |
4835 |                 if (if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t
     |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4836:25
     |
4836 |                       && ((if 1 as libc::c_int != 0 {
     |  _________________________^
4837 | |                         0 as libc::c_int as libc::c_long
4838 | |                     } else {
4839 | |                         n_units
4840 | |                     }) - 1 as libc::c_int as libc::c_long)
     | |______________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4837:25
     |
4837 |                         0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4840:26
     |
4840 |                     }) - 1 as libc::c_int as libc::c_long)
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4841:27
     |
4841 |                         < 0 as libc::c_int as libc::c_long
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4842:25
     |
4842 |                       && ((if 1 as libc::c_int != 0 {
     |  _________________________^
4843 | |                         0 as libc::c_int
4844 | |                     } else {
4845 | |                         10 as libc::c_int
4846 | |                     }) - 1 as libc::c_int) < 0 as libc::c_int
     | |______________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4848:38
     |
4848 |                         if n_units < 0 as libc::c_int as libc::c_long {
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4849:33
     |
4849 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
4850 | | ...                       0 as libc::c_int as libc::c_long
4851 | | ...                   } else {
4852 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4856 | | ...                       }) + 10 as libc::c_int as libc::c_long
4857 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4850:33
     |
4850 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4852:33
     |
4852 | / ...                   (if 1 as libc::c_int != 0 {
4853 | | ...                       0 as libc::c_int as libc::c_long
4854 | | ...                   } else {
4855 | | ...                       -(1 as libc::c_int) as intmax_t
4856 | | ...                   }) + 10 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4853:37
     |
4853 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4855:37
     |
4855 | ...                   -(1 as libc::c_int) as intmax_t
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4856:38
     |
4856 | ...                   }) + 10 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4857:34
     |
4857 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4858:35
     |
4858 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4860:33
     |
4860 | / ...                   (n_units
4861 | | ...                       < -(1 as libc::c_int) as intmax_t
4862 | | ...                           / 10 as libc::c_int as libc::c_long) as libc::c_int
     | |_________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4860 ~                                 i32::from(n_units
4861 +                                     < -(1 as libc::c_int) as intmax_t
4862 +                                         / 10 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4861:39
     |
4861 | ...                   < -(1 as libc::c_int) as intmax_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4862:43
     |
4862 | ...                   / 10 as libc::c_int as libc::c_long) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4864:33
     |
4864 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
4865 | | ...                       0 as libc::c_int
4866 | | ...                   } else {
4867 | | ...                       10 as libc::c_int
...    |
4925 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n_units)
4926 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4864 ~                                 i32::from((if (if (if ((if 1 as libc::c_int != 0 {
4865 +                                     0 as libc::c_int
4866 +                                 } else {
4867 +                                     10 as libc::c_int
4868 +                                 }) - 1 as libc::c_int) < 0 as libc::c_int
4869 +                                 {
4870 +                                     !(((((if 1 as libc::c_int != 0 {
4871 +                                         0 as libc::c_int
4872 +                                     } else {
4873 +                                         10 as libc::c_int
4874 +                                     }) + 1 as libc::c_int)
4875 +                                         << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
4876 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4877 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4878 +                                         - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
4879 +                                 } else {
4880 +                                     (if 1 as libc::c_int != 0 {
4881 +                                         0 as libc::c_int
4882 +                                     } else {
4883 +                                         10 as libc::c_int
4884 +                                     }) + 0 as libc::c_int
4885 +                                 }) < 0 as libc::c_int
4886 +                                 {
4887 +                                     ((10 as libc::c_int)
4888 +                                         < -(if ((if 1 as libc::c_int != 0 {
4889 +                                             0 as libc::c_int
4890 +                                         } else {
4891 +                                             10 as libc::c_int
4892 +                                         }) - 1 as libc::c_int) < 0 as libc::c_int
4893 +                                         {
4894 +                                             ((((if 1 as libc::c_int != 0 {
4895 +                                                 0 as libc::c_int
4896 +                                             } else {
4897 +                                                 10 as libc::c_int
4898 +                                             }) + 1 as libc::c_int)
4899 +                                                 << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
4900 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4901 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4902 +                                                 - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
4903 +                                         } else {
4904 +                                             (if 1 as libc::c_int != 0 {
4905 +                                                 0 as libc::c_int
4906 +                                             } else {
4907 +                                                 10 as libc::c_int
4908 +                                             }) - 1 as libc::c_int
4909 +                                         })) as libc::c_int
4910 +                                 } else {
4911 +                                     ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
4912 +                                 }) != 0
4913 +                                 {
4914 +                                     (if 1 as libc::c_int != 0 {
4915 +                                         0 as libc::c_int
4916 +                                     } else {
4917 +                                         10 as libc::c_int
4918 +                                     }) as libc::c_long + -(1 as libc::c_int) as intmax_t
4919 +                                         >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
4920 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4921 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
4922 +                                 } else {
4923 +                                     -(1 as libc::c_int) as intmax_t
4924 +                                         / -(10 as libc::c_int) as libc::c_long
4925 +                                 }) <= -(1 as libc::c_int) as libc::c_long - n_units)
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4864:34
     |
4864 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
     |  ________________________^
4865 | | ...                       0 as libc::c_int
4866 | | ...                   } else {
4867 | | ...                       10 as libc::c_int
...    |
4924 | | ...                           / -(10 as libc::c_int) as libc::c_long
4925 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n_units)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:4864:47
     |
4864 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
     |  _____________________________________^
4865 | | ...                       0 as libc::c_int
4866 | | ...                   } else {
4867 | | ...                       10 as libc::c_int
4868 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:4870:42
     |
4870 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
4871 | | ...                       0 as libc::c_int
4872 | | ...                   } else {
4873 | | ...                       10 as libc::c_int
4874 | | ...                   }) + 1 as libc::c_int)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4876:59
     |
4876 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4877:59
     |
4877 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:4880:37
     |
4880 | / ...                   (if 1 as libc::c_int != 0 {
4881 | | ...                       0 as libc::c_int
4882 | | ...                   } else {
4883 | | ...                       10 as libc::c_int
4884 | | ...                   }) + 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4887:37
     |
4887 | / ...                   ((10 as libc::c_int)
4888 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
4889 | | ...                           0 as libc::c_int
4890 | | ...                       } else {
...    |
4908 | | ...                           }) - 1 as libc::c_int
4909 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4887 ~                                     i32::from((10 as libc::c_int)
4888 +                                         < -(if ((if 1 as libc::c_int != 0 {
4889 +                                             0 as libc::c_int
4890 +                                         } else {
4891 +                                             10 as libc::c_int
4892 +                                         }) - 1 as libc::c_int) < 0 as libc::c_int
4893 +                                         {
4894 +                                             ((((if 1 as libc::c_int != 0 {
4895 +                                                 0 as libc::c_int
4896 +                                             } else {
4897 +                                                 10 as libc::c_int
4898 +                                             }) + 1 as libc::c_int)
4899 +                                                 << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
4900 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4901 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4902 +                                                 - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
4903 +                                         } else {
4904 +                                             (if 1 as libc::c_int != 0 {
4905 +                                                 0 as libc::c_int
4906 +                                             } else {
4907 +                                                 10 as libc::c_int
4908 +                                             }) - 1 as libc::c_int
4909 +                                         }))
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4888:49
     |
4888 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
4889 | | ...                       0 as libc::c_int
4890 | | ...                   } else {
4891 | | ...                       10 as libc::c_int
4892 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:4894:48
     |
4894 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
4895 | | ...                       0 as libc::c_int
4896 | | ...                   } else {
4897 | | ...                       10 as libc::c_int
4898 | | ...                   }) + 1 as libc::c_int)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4900:67
     |
4900 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4901:67
     |
4901 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:4904:45
     |
4904 | / ...                   (if 1 as libc::c_int != 0 {
4905 | | ...                       0 as libc::c_int
4906 | | ...                   } else {
4907 | | ...                       10 as libc::c_int
4908 | | ...                   }) - 1 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4911:37
     |
4911 | ...                   ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < 10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4914:37
     |
4914 | / ...                   (if 1 as libc::c_int != 0 {
4915 | | ...                       0 as libc::c_int
4916 | | ...                   } else {
4917 | | ...                       10 as libc::c_int
4918 | | ...                   }) as libc::c_long + -(1 as libc::c_int) as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4914 ~                                     i64::from((if 1 as libc::c_int != 0 {
4915 +                                         0 as libc::c_int
4916 +                                     } else {
4917 +                                         10 as libc::c_int
4918 ~                                     })) + -(1 as libc::c_int) as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4914:37
     |
4914 | / ...                   (if 1 as libc::c_int != 0 {
4915 | | ...                       0 as libc::c_int
4916 | | ...                   } else {
4917 | | ...                       10 as libc::c_int
4918 | | ...                   }) as libc::c_long + -(1 as libc::c_int) as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4918:58
     |
4918 | ...                   }) as libc::c_long + -(1 as libc::c_int) as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4920:59
     |
4920 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4921:59
     |
4921 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4923:37
     |
4923 | ...                   -(1 as libc::c_int) as intmax_t
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4924:43
     |
4924 | ...                   / -(10 as libc::c_int) as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(10 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4925:39
     |
4925 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n_units)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4929:41
     |
4929 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
     |  ___________________________________^
4930 | | ...                       0 as libc::c_int as libc::c_long
4931 | | ...                   } else {
4932 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4936 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4937 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4930:33
     |
4930 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4932:33
     |
4932 | / ...                   (if 1 as libc::c_int != 0 {
4933 | | ...                       0 as libc::c_int
4934 | | ...                   } else {
4935 | | ...                       10 as libc::c_int
4936 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4932 ~                                 i64::from((if 1 as libc::c_int != 0 {
4933 +                                     0 as libc::c_int
4934 +                                 } else {
4935 +                                     10 as libc::c_int
4936 ~                                 })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4932:33
     |
4932 | / ...                   (if 1 as libc::c_int != 0 {
4933 | | ...                       0 as libc::c_int
4934 | | ...                   } else {
4935 | | ...                       10 as libc::c_int
4936 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4936:54
     |
4936 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4937:34
     |
4937 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4938:35
     |
4938 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4940:38
     |
4940 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
4941 | | ...                       0 as libc::c_int as libc::c_long
4942 | | ...                   } else {
4943 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4947 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4948 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4941:37
     |
4941 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4943:37
     |
4943 | / ...                   (if 1 as libc::c_int != 0 {
4944 | | ...                       0 as libc::c_int
4945 | | ...                   } else {
4946 | | ...                       10 as libc::c_int
4947 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4943 ~                                     i64::from((if 1 as libc::c_int != 0 {
4944 +                                         0 as libc::c_int
4945 +                                     } else {
4946 +                                         10 as libc::c_int
4947 ~                                     })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4943:37
     |
4943 | / ...                   (if 1 as libc::c_int != 0 {
4944 | | ...                       0 as libc::c_int
4945 | | ...                   } else {
4946 | | ...                       10 as libc::c_int
4947 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4947:58
     |
4947 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4948:38
     |
4948 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4950:55
     |
4950 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4951:55
     |
4951 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4952:39
     |
4952 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4953:39
     |
4953 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4954:39
     |
4954 | ...                   + 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4956:33
     |
4956 | / ...                   (if 1 as libc::c_int != 0 {
4957 | | ...                       0 as libc::c_int as libc::c_long
4958 | | ...                   } else {
4959 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4963 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4964 | | ...                   }) + 0 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4957:37
     |
4957 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4959:37
     |
4959 | / ...                   (if 1 as libc::c_int != 0 {
4960 | | ...                       0 as libc::c_int
4961 | | ...                   } else {
4962 | | ...                       10 as libc::c_int
4963 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4959 ~                                     i64::from((if 1 as libc::c_int != 0 {
4960 +                                         0 as libc::c_int
4961 +                                     } else {
4962 +                                         10 as libc::c_int
4963 ~                                     })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4959:37
     |
4959 | / ...                   (if 1 as libc::c_int != 0 {
4960 | | ...                       0 as libc::c_int
4961 | | ...                   } else {
4962 | | ...                       10 as libc::c_int
4963 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4963:58
     |
4963 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4964:38
     |
4964 | ...                   }) + 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4965:34
     |
4965 | ...                   }) < 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4967:33
     |
4967 | / ...                   (((if 1 as libc::c_int != 0 {
4968 | | ...                       0 as libc::c_int
4969 | | ...                   } else {
4970 | | ...                       10 as libc::c_int
...    |
5007 | | ...                           }) - 1 as libc::c_int as libc::c_long
5008 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4967 ~                                 i32::from(((if 1 as libc::c_int != 0 {
4968 +                                     0 as libc::c_int
4969 +                                 } else {
4970 +                                     10 as libc::c_int
4971 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t)
4972 +                                     < -(if ((if 1 as libc::c_int != 0 {
4973 +                                         0 as libc::c_int as libc::c_long
4974 +                                     } else {
4975 +                                         (if 1 as libc::c_int != 0 {
4976 +                                             0 as libc::c_int
4977 +                                         } else {
4978 +                                             10 as libc::c_int
4979 +                                         }) as libc::c_long + 0 as libc::c_int as intmax_t
4980 +                                     }) - 1 as libc::c_int as libc::c_long)
4981 +                                         < 0 as libc::c_int as libc::c_long
4982 +                                     {
4983 +                                         ((((if 1 as libc::c_int != 0 {
4984 +                                             0 as libc::c_int as libc::c_long
4985 +                                         } else {
4986 +                                             (if 1 as libc::c_int != 0 {
4987 +                                                 0 as libc::c_int
4988 +                                             } else {
4989 +                                                 10 as libc::c_int
4990 +                                             }) as libc::c_long + 0 as libc::c_int as intmax_t
4991 +                                         }) + 1 as libc::c_int as libc::c_long)
4992 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4993 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4994 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4995 +                                             - 1 as libc::c_int as libc::c_long)
4996 +                                             * 2 as libc::c_int as libc::c_long
4997 +                                             + 1 as libc::c_int as libc::c_long
4998 +                                     } else {
4999 +                                         (if 1 as libc::c_int != 0 {
5000 +                                             0 as libc::c_int as libc::c_long
5001 +                                         } else {
5002 +                                             (if 1 as libc::c_int != 0 {
5003 +                                                 0 as libc::c_int
5004 +                                             } else {
5005 +                                                 10 as libc::c_int
5006 +                                             }) as libc::c_long + 0 as libc::c_int as intmax_t
5007 +                                         }) - 1 as libc::c_int as libc::c_long
5008 +                                     }))
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4967:35
     |
4967 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
4968 | | ...                       0 as libc::c_int
4969 | | ...                   } else {
4970 | | ...                       10 as libc::c_int
4971 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4967 ~                                 ((i64::from((if 1 as libc::c_int != 0 {
4968 +                                     0 as libc::c_int
4969 +                                 } else {
4970 +                                     10 as libc::c_int
4971 ~                                 })) + 0 as libc::c_int as intmax_t)
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4967:35
     |
4967 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
4968 | | ...                       0 as libc::c_int
4969 | | ...                   } else {
4970 | | ...                       10 as libc::c_int
4971 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4971:54
     |
4971 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4972:45
     |
4972 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
4973 | | ...                       0 as libc::c_int as libc::c_long
4974 | | ...                   } else {
4975 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4979 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4980 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4973:41
     |
4973 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4975:41
     |
4975 | / ...                   (if 1 as libc::c_int != 0 {
4976 | | ...                       0 as libc::c_int
4977 | | ...                   } else {
4978 | | ...                       10 as libc::c_int
4979 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4975 ~                                         i64::from((if 1 as libc::c_int != 0 {
4976 +                                             0 as libc::c_int
4977 +                                         } else {
4978 +                                             10 as libc::c_int
4979 ~                                         })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4975:41
     |
4975 | / ...                   (if 1 as libc::c_int != 0 {
4976 | | ...                       0 as libc::c_int
4977 | | ...                   } else {
4978 | | ...                       10 as libc::c_int
4979 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4979:62
     |
4979 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4980:42
     |
4980 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4981:43
     |
4981 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4983:44
     |
4983 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
4984 | | ...                       0 as libc::c_int as libc::c_long
4985 | | ...                   } else {
4986 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4990 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4991 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4984:45
     |
4984 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4986:45
     |
4986 | / ...                   (if 1 as libc::c_int != 0 {
4987 | | ...                       0 as libc::c_int
4988 | | ...                   } else {
4989 | | ...                       10 as libc::c_int
4990 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4986 ~                                             i64::from((if 1 as libc::c_int != 0 {
4987 +                                                 0 as libc::c_int
4988 +                                             } else {
4989 +                                                 10 as libc::c_int
4990 ~                                             })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4986:45
     |
4986 | / ...                   (if 1 as libc::c_int != 0 {
4987 | | ...                       0 as libc::c_int
4988 | | ...                   } else {
4989 | | ...                       10 as libc::c_int
4990 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4990:66
     |
4990 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4991:46
     |
4991 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4993:63
     |
4993 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4994:63
     |
4994 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4995:47
     |
4995 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4996:47
     |
4996 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4997:47
     |
4997 | ...                   + 1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4999:41
     |
4999 | / ...                   (if 1 as libc::c_int != 0 {
5000 | | ...                       0 as libc::c_int as libc::c_long
5001 | | ...                   } else {
5002 | | ...                       (if 1 as libc::c_int != 0 {
...    |
5006 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
5007 | | ...                   }) - 1 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5000:45
     |
5000 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5002:45
     |
5002 | / ...                   (if 1 as libc::c_int != 0 {
5003 | | ...                       0 as libc::c_int
5004 | | ...                   } else {
5005 | | ...                       10 as libc::c_int
5006 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5002 ~                                             i64::from((if 1 as libc::c_int != 0 {
5003 +                                                 0 as libc::c_int
5004 +                                             } else {
5005 +                                                 10 as libc::c_int
5006 ~                                             })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:5002:45
     |
5002 | / ...                   (if 1 as libc::c_int != 0 {
5003 | | ...                       0 as libc::c_int
5004 | | ...                   } else {
5005 | | ...                       10 as libc::c_int
5006 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5006:66
     |
5006 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5007:46
     |
5007 | ...                   }) - 1 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5010:33
     |
5010 | / ...                   ((0 as libc::c_int as libc::c_long)
5011 | | ...                       < (if 1 as libc::c_int != 0 {
5012 | | ...                           0 as libc::c_int
5013 | | ...                       } else {
5014 | | ...                           10 as libc::c_int
5015 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t)
5016 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5010 ~                                 i32::from((0 as libc::c_int as libc::c_long)
5011 +                                     < (if 1 as libc::c_int != 0 {
5012 +                                         0 as libc::c_int
5013 +                                     } else {
5014 +                                         10 as libc::c_int
5015 +                                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5010:34
     |
5010 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5011:39
     |
5011 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
5012 | | ...                       0 as libc::c_int
5013 | | ...                   } else {
5014 | | ...                       10 as libc::c_int
5015 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5011 ~                                     < i64::from((if 1 as libc::c_int != 0 {
5012 +                                         0 as libc::c_int
5013 +                                     } else {
5014 +                                         10 as libc::c_int
5015 ~                                     })) + 0 as libc::c_int as intmax_t)
     |

warning: unnecessary `!=` operation
    --> src/split.rs:5011:39
     |
5011 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
5012 | | ...                       0 as libc::c_int
5013 | | ...                   } else {
5014 | | ...                       10 as libc::c_int
5015 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5015:58
     |
5015 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5019:37
     |
5019 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
5020 | | ...                       0 as libc::c_int as libc::c_long
5021 | | ...                   } else {
5022 | | ...                       n_units
5023 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5020:37
     |
5020 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5023:38
     |
5023 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5024:39
     |
5024 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5026:37
     |
5026 | / ...                   ((0 as libc::c_int as libc::c_long)
5027 | | ...                       < n_units + 0 as libc::c_int as intmax_t) as libc::c_int
     | |__________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5026 ~                                     i32::from((0 as libc::c_int as libc::c_long)
5027 +                                         < n_units + 0 as libc::c_int as intmax_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5026:38
     |
5026 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5027:53
     |
5027 | ...                   < n_units + 0 as libc::c_int as intmax_t) as libc::c_int
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5029:37
     |
5029 | / ...                   ((0 as libc::c_int as libc::c_long) < n_units
5030 | | ...                       && (-(1 as libc::c_int) as libc::c_long
5031 | | ...                           - 0 as libc::c_int as intmax_t)
5032 | | ...                           < n_units - 1 as libc::c_int as libc::c_long) as libc::c_int
     | |__________________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5029 ~                                     i32::from((0 as libc::c_int as libc::c_long) < n_units
5030 +                                         && (-(1 as libc::c_int) as libc::c_long
5031 +                                             - 0 as libc::c_int as intmax_t)
5032 +                                             < n_units - 1 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5029:38
     |
5029 | ...                   ((0 as libc::c_int as libc::c_long) < n_units
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5030:45
     |
5030 | ...                   && (-(1 as libc::c_int) as libc::c_long
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5031:47
     |
5031 | ...                   - 0 as libc::c_int as intmax_t)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5032:57
     |
5032 | ...                   < n_units - 1 as libc::c_int as libc::c_long) as libc::c_int
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5035:33
     |
5035 | / ...                   ((0 as libc::c_int as intmax_t
5036 | | ...                       / 10 as libc::c_int as libc::c_long) < n_units)
5037 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5035 ~                                 i32::from((0 as libc::c_int as intmax_t
5036 +                                     / 10 as libc::c_int as libc::c_long) < n_units)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5035:35
     |
5035 | ...                   ((0 as libc::c_int as intmax_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5036:39
     |
5036 | ...                   / 10 as libc::c_int as libc::c_long) < n_units)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5044:42
     |
5044 | ...                   if n_units < 0 as libc::c_int as libc::c_long {
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5045:45
     |
5045 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
     |  ___________________________________^
5046 | | ...                       0 as libc::c_int as libc::c_long
5047 | | ...                   } else {
5048 | | ...                       (if 1 as libc::c_int != 0 {
...    |
5052 | | ...                       }) + 0 as libc::c_int as intmax_t
5053 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5046:37
     |
5046 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5048:37
     |
5048 | / ...                   (if 1 as libc::c_int != 0 {
5049 | | ...                       0 as libc::c_int as libc::c_long
5050 | | ...                   } else {
5051 | | ...                       n_units
5052 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5049:41
     |
5049 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5052:42
     |
5052 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5053:38
     |
5053 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5054:39
     |
5054 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5056:42
     |
5056 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
5057 | | ...                       0 as libc::c_int as libc::c_long
5058 | | ...                   } else {
5059 | | ...                       (if 1 as libc::c_int != 0 {
...    |
5063 | | ...                       }) + 0 as libc::c_int as intmax_t
5064 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5057:41
     |
5057 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5059:41
     |
5059 | / ...                   (if 1 as libc::c_int != 0 {
5060 | | ...                       0 as libc::c_int as libc::c_long
5061 | | ...                   } else {
5062 | | ...                       n_units
5063 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5060:45
     |
5060 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5063:46
     |
5063 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5064:42
     |
5064 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:5066:59
     |
5066 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:5067:59
     |
5067 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5068:43
     |
5068 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5069:43
     |
5069 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5070:43
     |
5070 | ...                   + 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5072:37
     |
5072 | / ...                   (if 1 as libc::c_int != 0 {
5073 | | ...                       0 as libc::c_int as libc::c_long
5074 | | ...                   } else {
5075 | | ...                       (if 1 as libc::c_int != 0 {
...    |
5079 | | ...                       }) + 0 as libc::c_int as intmax_t
5080 | | ...                   }) + 0 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5073:41
     |
5073 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5075:41
     |
5075 | / ...                   (if 1 as libc::c_int != 0 {
5076 | | ...                       0 as libc::c_int as libc::c_long
5077 | | ...                   } else {
5078 | | ...                       n_units
5079 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5076:45
     |
5076 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5079:46
     |
5079 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5080:42
     |
5080 | ...                   }) + 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5081:38
     |
5081 | ...                   }) < 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5083:37
     |
5083 | / ...                   (((if 1 as libc::c_int != 0 {
5084 | | ...                       0 as libc::c_int as libc::c_long
5085 | | ...                   } else {
5086 | | ...                       n_units
...    |
5123 | | ...                           }) - 1 as libc::c_int as libc::c_long
5124 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5083 ~                                     i32::from(((if 1 as libc::c_int != 0 {
5084 +                                         0 as libc::c_int as libc::c_long
5085 +                                     } else {
5086 +                                         n_units
5087 +                                     }) + 0 as libc::c_int as intmax_t)
5088 +                                         < -(if ((if 1 as libc::c_int != 0 {
5089 +                                             0 as libc::c_int as libc::c_long
5090 +                                         } else {
5091 +                                             (if 1 as libc::c_int != 0 {
5092 +                                                 0 as libc::c_int as libc::c_long
5093 +                                             } else {
5094 +                                                 n_units
5095 +                                             }) + 0 as libc::c_int as intmax_t
5096 +                                         }) - 1 as libc::c_int as libc::c_long)
5097 +                                             < 0 as libc::c_int as libc::c_long
5098 +                                         {
5099 +                                             ((((if 1 as libc::c_int != 0 {
5100 +                                                 0 as libc::c_int as libc::c_long
5101 +                                             } else {
5102 +                                                 (if 1 as libc::c_int != 0 {
5103 +                                                     0 as libc::c_int as libc::c_long
5104 +                                                 } else {
5105 +                                                     n_units
5106 +                                                 }) + 0 as libc::c_int as intmax_t
5107 +                                             }) + 1 as libc::c_int as libc::c_long)
5108 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
5109 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
5110 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
5111 +                                                 - 1 as libc::c_int as libc::c_long)
5112 +                                                 * 2 as libc::c_int as libc::c_long
5113 +                                                 + 1 as libc::c_int as libc::c_long
5114 +                                         } else {
5115 +                                             (if 1 as libc::c_int != 0 {
5116 +                                                 0 as libc::c_int as libc::c_long
5117 +                                             } else {
5118 +                                                 (if 1 as libc::c_int != 0 {
5119 +                                                     0 as libc::c_int as libc::c_long
5120 +                                                 } else {
5121 +                                                     n_units
5122 +                                                 }) + 0 as libc::c_int as intmax_t
5123 +                                             }) - 1 as libc::c_int as libc::c_long
5124 +                                         }))
     |

warning: unnecessary `!=` operation
    --> src/split.rs:5083:39
     |
5083 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
5084 | | ...                       0 as libc::c_int as libc::c_long
5085 | | ...                   } else {
5086 | | ...                       n_units
5087 | | ...                   }) + 0 as libc::c_int as intmax_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5084:41
     |
5084 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5087:42
     |
5087 | ...                   }) + 0 as libc::c_int as intmax_t)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5088:49
     |
5088 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
5089 | | ...                       0 as libc::c_int as libc::c_long
5090 | | ...                   } else {
5091 | | ...                       (if 1 as libc::c_int != 0 {
...    |
5095 | | ...                       }) + 0 as libc::c_int as intmax_t
5096 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5089:45
     |
5089 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5091:45
     |
5091 | / ...                   (if 1 as libc::c_int != 0 {
5092 | | ...                       0 as libc::c_int as libc::c_long
5093 | | ...                   } else {
5094 | | ...                       n_units
5095 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5092:49
     |
5092 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5095:50
     |
5095 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5096:46
     |
5096 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5097:47
     |
5097 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5099:48
     |
5099 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
5100 | | ...                       0 as libc::c_int as libc::c_long
5101 | | ...                   } else {
5102 | | ...                       (if 1 as libc::c_int != 0 {
...    |
5106 | | ...                       }) + 0 as libc::c_int as intmax_t
5107 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5100:49
     |
5100 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5102:49
     |
5102 | / ...                   (if 1 as libc::c_int != 0 {
5103 | | ...                       0 as libc::c_int as libc::c_long
5104 | | ...                   } else {
5105 | | ...                       n_units
5106 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5103:53
     |
5103 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5106:54
     |
5106 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5107:50
     |
5107 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:5109:67
     |
5109 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:5110:67
     |
5110 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5111:51
     |
5111 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5112:51
     |
5112 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5113:51
     |
5113 | ...                   + 1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5115:45
     |
5115 | / ...                   (if 1 as libc::c_int != 0 {
5116 | | ...                       0 as libc::c_int as libc::c_long
5117 | | ...                   } else {
5118 | | ...                       (if 1 as libc::c_int != 0 {
...    |
5122 | | ...                       }) + 0 as libc::c_int as intmax_t
5123 | | ...                   }) - 1 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5116:49
     |
5116 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5118:49
     |
5118 | / ...                   (if 1 as libc::c_int != 0 {
5119 | | ...                       0 as libc::c_int as libc::c_long
5120 | | ...                   } else {
5121 | | ...                       n_units
5122 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5119:53
     |
5119 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5122:54
     |
5122 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5123:50
     |
5123 | ...                   }) - 1 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5126:37
     |
5126 | / ...                   ((0 as libc::c_int as libc::c_long)
5127 | | ...                       < (if 1 as libc::c_int != 0 {
5128 | | ...                           0 as libc::c_int as libc::c_long
5129 | | ...                       } else {
5130 | | ...                           n_units
5131 | | ...                       }) + 0 as libc::c_int as intmax_t) as libc::c_int
     | |___________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5126 ~                                     i32::from((0 as libc::c_int as libc::c_long)
5127 +                                         < (if 1 as libc::c_int != 0 {
5128 +                                             0 as libc::c_int as libc::c_long
5129 +                                         } else {
5130 +                                             n_units
5131 +                                         }) + 0 as libc::c_int as intmax_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5126:38
     |
5126 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5127:43
     |
5127 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
5128 | | ...                       0 as libc::c_int as libc::c_long
5129 | | ...                   } else {
5130 | | ...                       n_units
5131 | | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5128:45
     |
5128 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5131:46
     |
5131 | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5132:55
     |
5132 | ...                   }) != 0 && n_units == -(1 as libc::c_int) as libc::c_long
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5134:41
     |
5134 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
5135 | | ...                       0 as libc::c_int
5136 | | ...                   } else {
5137 | | ...                       10 as libc::c_int
5138 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5140:41
     |
5140 | / ...                   ((0 as libc::c_int as libc::c_long)
5141 | | ...                       < 10 as libc::c_int as libc::c_long
5142 | | ...                           + 0 as libc::c_int as intmax_t) as libc::c_int
     | |____________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5140 ~                                         i32::from((0 as libc::c_int as libc::c_long)
5141 +                                             < 10 as libc::c_int as libc::c_long
5142 +                                                 + 0 as libc::c_int as intmax_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5140:42
     |
5140 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5141:47
     |
5141 | ...                   < 10 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5142:51
     |
5142 | ...                   + 0 as libc::c_int as intmax_t) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5144:41
     |
5144 | / ...                   ((-(1 as libc::c_int) as libc::c_long
5145 | | ...                       - 0 as libc::c_int as intmax_t)
5146 | | ...                       < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
5147 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5144 ~                                         i32::from((-(1 as libc::c_int) as libc::c_long
5145 +                                             - 0 as libc::c_int as intmax_t)
5146 +                                             < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5144:43
     |
5144 | ...                   ((-(1 as libc::c_int) as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5145:47
     |
5145 | ...                   - 0 as libc::c_int as intmax_t)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5146:47
     |
5146 | ...                   < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int - 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5150:37
     |
5150 | / ...                   (0 as libc::c_int as intmax_t / n_units
5151 | | ...                       < 10 as libc::c_int as libc::c_long) as libc::c_int
     | |_____________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5150 ~                                     i32::from(0 as libc::c_int as intmax_t / n_units
5151 +                                         < 10 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5150:38
     |
5150 | ...                   (0 as libc::c_int as intmax_t / n_units
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5151:43
     |
5151 | ...                   < 10 as libc::c_int as libc::c_long) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5154:33
     |
5154 | / ...                   ((-(1 as libc::c_int) as intmax_t
5155 | | ...                       / 10 as libc::c_int as libc::c_long) < n_units)
5156 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
5154 ~                                 i32::from((-(1 as libc::c_int) as intmax_t
5155 +                                     / 10 as libc::c_int as libc::c_long) < n_units)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5154:35
     |
5154 | ...                   ((-(1 as libc::c_int) as intmax_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5155:39
     |
5155 | ...                   / 10 as libc::c_int as libc::c_long) < n_units)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/split.rs:5162:22
     |
5162 |                     *(&mut n_units as *mut intmax_t) = fresh27;
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n_units)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
    --> src/split.rs:5166:22
     |
5166 |                     *(&mut n_units as *mut intmax_t) = fresh29;
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n_units)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5167:21
     |
5167 |                     fresh30 as libc::c_int
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh30)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/split.rs:5171:26
     |
5171 |                         *(&mut n_units as *mut intmax_t) = fresh31;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n_units)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:5172:25
     |
5172 |                         fresh32 as libc::c_int != 0
     |                         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh32)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5180:39
     |
5180 |                       suffix_alphabet = b"0123456789\0" as *const u8
     |  _______________________________________^
5181 | |                         as *const libc::c_char;
     | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0123456789\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5183:39
     |
5183 |                       suffix_alphabet = b"0123456789abcdef\0" as *const u8
     |  _______________________________________^
5184 | |                         as *const libc::c_char;
     | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0123456789abcdef\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5187:21
     |
5187 | /                     if strlen(optarg) != strspn(optarg, suffix_alphabet) {
5188 | |                         if 0 != 0 {
5189 | |                             error(
5190 | |                                 0 as libc::c_int,
...    |
5265 | |                         numeric_suffix_start = optarg;
5266 | |                     }
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:5188:25
     |
5188 | /                         if 0 != 0 {
5189 | |                             error(
5190 | |                                 0 as libc::c_int,
5191 | |                                 0 as libc::c_int,
...    |
5254 | |                             });
5255 | |                         };
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5188:28
     |
5188 |                         if 0 != 0 {
     |                            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5194:41
     |
5194 | / ...                   b"%s: invalid start value for numerical suffix\0"
5195 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for numerical suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5199:41
     |
5199 | / ...                   b"%s: invalid start value for hexadecimal suffix\0"
5200 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for hexadecimal suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5205:29
     |
5205 | / ...                   if 0 as libc::c_int != 0 as libc::c_int {
5206 | | ...                       unreachable!();
5207 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5205:32
     |
5205 | ...                   if 0 as libc::c_int != 0 as libc::c_int {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5210:33
     |
5210 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5216:45
     |
5216 | / ...                   b"%s: invalid start value for numerical suffix\0"
5217 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for numerical suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5221:45
     |
5221 | / ...                   b"%s: invalid start value for hexadecimal suffix\0"
5222 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for hexadecimal suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5227:33
     |
5227 | / ...                   if __errstatus != 0 as libc::c_int {
5228 | | ...                       unreachable!();
5229 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5233:33
     |
5233 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5239:45
     |
5239 | / ...                   b"%s: invalid start value for numerical suffix\0"
5240 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for numerical suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5244:45
     |
5244 | / ...                   b"%s: invalid start value for hexadecimal suffix\0"
5245 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for hexadecimal suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5250:33
     |
5250 | / ...                   if __errstatus != 0 as libc::c_int {
5251 | | ...                       unreachable!();
5252 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:5258:31
     |
5258 |                         while *optarg as libc::c_int == '0' as i32
     |                               ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*optarg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:5259:32
     |
5259 | ...                   && *optarg.offset(1 as libc::c_int as isize) as libc::c_int
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*optarg.offset(1 as libc::c_int as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
    --> src/split.rs:5263:29
     |
5263 | ...                   optarg;
     |                       ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:5276:31
     |
5276 |                   in_blk_size = xdectoumax(
     |  _______________________________^
5277 | |                     optarg,
5278 | |                     1 as libc::c_int as uintmax_t,
5279 | |                     if (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong)
...    |
5304 | |                     0 as libc::c_int,
5305 | |                 ) as idx_t;
     | |__________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:5278:21
     |
5278 |                     1 as libc::c_int as uintmax_t,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:5279:24
     |
5279 |                     if (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:5279:25
     |
5279 |                     if (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:5280:31
     |
5280 |                         < (if (9223372036854775807 as libc::c_long as libc::c_ulong)
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:5283:29
     |
5283 | ...                   9223372036854775807 as libc::c_long as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:5287:43
     |
5287 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:5289:25
     |
5289 |                         SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:5289:25
     |
5289 |                         SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:5291:29
     |
5291 |                         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:5294:29
     |
5294 | ...                   9223372036854775807 as libc::c_long as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:5298:43
     |
5298 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5302:25
     |
5302 |                         b"invalid IO block size\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid IO block size\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5316:21
     |
5316 |                     b"split\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5317:21
     |
5317 |                     b"GNU coreutils\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5320:25
     |
5320 |                         b"Torbjorn Granlund\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Torbjorn Granlund\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5321:25
     |
5321 |                         b"Torbj\xC3\xB6rn Granlund\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Torbj\xC3\xB6rn Granlund\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5324:25
     |
5324 |                         b"Richard M. Stallman\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Richard M. Stallman\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5325:25
     |
5325 |                         b"Richard M. Stallman\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Richard M. Stallman\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5327:21
     |
5327 |                     0 as *mut libc::c_void as *mut libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(0 as *mut libc::c_void).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:5327:21
     |
5327 |                     0 as *mut libc::c_void as *mut libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5336:19
     |
5336 |     if k_units != 0 as libc::c_int as libc::c_long && !filter_command.is_null() {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5337:9
     |
5337 | /         if 0 != 0 {
5338 | |             error(
5339 | |                 0 as libc::c_int,
5340 | |                 0 as libc::c_int,
...    |
5379 | |             });
5380 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5337:12
     |
5337 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5342:21
     |
5342 | /                     b"--filter does not process a chunk extracted to stdout\0"
5343 | |                         as *const u8 as *const libc::c_char,
     | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--filter does not process a chunk extracted to stdout\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5346:13
     |
5346 | /             if 0 as libc::c_int != 0 as libc::c_int {
5347 | |                 unreachable!();
5348 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5346:16
     |
5346 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5351:17
     |
5351 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5356:25
     |
5356 | /                         b"--filter does not process a chunk extracted to stdout\0"
5357 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--filter does not process a chunk extracted to stdout\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5360:17
     |
5360 | /                 if __errstatus != 0 as libc::c_int {
5361 | |                     unreachable!();
5362 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5366:17
     |
5366 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5371:25
     |
5371 | /                         b"--filter does not process a chunk extracted to stdout\0"
5372 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--filter does not process a chunk extracted to stdout\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5375:17
     |
5375 | /                 if __errstatus != 0 as libc::c_int {
5376 | |                     unreachable!();
5377 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:5383:38
     |
5383 |     if split_type as libc::c_uint == type_undef as libc::c_int as libc::c_uint {
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:5383:38
     |
5383 |     if split_type as libc::c_uint == type_undef as libc::c_int as libc::c_uint {
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5385:19
     |
5385 |         n_units = 1000 as libc::c_int as intmax_t;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1000 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5387:19
     |
5387 |     if n_units == 0 as libc::c_int as libc::c_long {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5388:9
     |
5388 | /         if 0 != 0 {
5389 | |             error(
5390 | |                 0 as libc::c_int,
5391 | |                 0 as libc::c_int,
...    |
5432 | |             });
5433 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5388:12
     |
5388 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5393:21
     |
5393 |                     b"invalid number of lines: %s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of lines: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5395:23
     |
5395 |                 quote(b"0\0" as *const u8 as *const libc::c_char),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5397:13
     |
5397 | /             if 0 as libc::c_int != 0 as libc::c_int {
5398 | |                 unreachable!();
5399 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5397:16
     |
5397 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5402:17
     |
5402 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5407:25
     |
5407 | /                         b"invalid number of lines: %s\0" as *const u8
5408 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of lines: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5410:27
     |
5410 |                     quote(b"0\0" as *const u8 as *const libc::c_char),
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5412:17
     |
5412 | /                 if __errstatus != 0 as libc::c_int {
5413 | |                     unreachable!();
5414 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5418:17
     |
5418 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5423:25
     |
5423 | /                         b"invalid number of lines: %s\0" as *const u8
5424 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of lines: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5426:27
     |
5426 |                     quote(b"0\0" as *const u8 as *const libc::c_char),
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5428:17
     |
5428 | /                 if __errstatus != 0 as libc::c_int {
5429 | |                     unreachable!();
5430 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: manual implementation of an assign operation
    --> src/split.rs:5442:9
     |
5442 |         optind = optind + 1;
     |         ^^^^^^^^^^^^^^^^^^^ help: replace it with: `optind += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/split.rs:5447:9
     |
5447 |         optind = optind + 1;
     |         ^^^^^^^^^^^^^^^^^^^ help: replace it with: `optind += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: unnecessary `!=` operation
    --> src/split.rs:5451:9
     |
5451 | /         if 0 != 0 {
5452 | |             error(
5453 | |                 0 as libc::c_int,
5454 | |                 0 as libc::c_int,
...    |
5487 | |             });
5488 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5451:12
     |
5451 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5455:25
     |
5455 |                 gettext(b"extra operand %s\0" as *const u8 as *const libc::c_char),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5458:13
     |
5458 | /             if 0 as libc::c_int != 0 as libc::c_int {
5459 | |                 unreachable!();
5460 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5458:16
     |
5458 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5463:17
     |
5463 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5467:29
     |
5467 |                     gettext(b"extra operand %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5470:17
     |
5470 | /                 if __errstatus != 0 as libc::c_int {
5471 | |                     unreachable!();
5472 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5476:17
     |
5476 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5480:29
     |
5480 |                     gettext(b"extra operand %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5483:17
     |
5483 | /                 if __errstatus != 0 as libc::c_int {
5484 | |                     unreachable!();
5485 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:5492:43
     |
5492 |         && strlen(numeric_suffix_start) > suffix_length as libc::c_ulong
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:5494:9
     |
5494 | /         if 0 != 0 {
5495 | |             error(
5496 | |                 0 as libc::c_int,
5497 | |                 0 as libc::c_int,
...    |
5536 | |             });
5537 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5494:12
     |
5494 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5499:21
     |
5499 | /                     b"numerical suffix start value is too large for the suffix length\0"
5500 | |                         as *const u8 as *const libc::c_char,
     | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"numerical suffix start value is too large for the suffix length\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5503:13
     |
5503 | /             if 0 as libc::c_int != 0 as libc::c_int {
5504 | |                 unreachable!();
5505 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5503:16
     |
5503 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5508:17
     |
5508 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5513:25
     |
5513 | /                         b"numerical suffix start value is too large for the suffix length\0"
5514 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"numerical suffix start value is too large for the suffix length\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5517:17
     |
5517 | /                 if __errstatus != 0 as libc::c_int {
5518 | |                     unreachable!();
5519 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5523:17
     |
5523 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5528:25
     |
5528 | /                         b"numerical suffix start value is too large for the suffix length\0"
5529 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"numerical suffix start value is too large for the suffix length\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5532:17
     |
5532 | /                 if __errstatus != 0 as libc::c_int {
5533 | |                     unreachable!();
5534 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5540:25
     |
5540 |     if !(strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:5545:13
     |
5545 |             0 as libc::c_int as mode_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:5548:9
     |
5548 | /         if 0 != 0 {
5549 | |             error(
5550 | |                 1 as libc::c_int,
5551 | |                 *__errno_location(),
...    |
5592 | |             });
5593 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5548:12
     |
5548 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5553:21
     |
5553 |                     b"cannot open %s for reading\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"cannot open %s for reading\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5557:13
     |
5557 | /             if 1 as libc::c_int != 0 as libc::c_int {
5558 | |                 unreachable!();
5559 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5562:17
     |
5562 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5567:25
     |
5567 | /                         b"cannot open %s for reading\0" as *const u8
5568 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot open %s for reading\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5572:17
     |
5572 | /                 if __errstatus != 0 as libc::c_int {
5573 | |                     unreachable!();
5574 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5578:17
     |
5578 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5583:25
     |
5583 | /                         b"cannot open %s for reading\0" as *const u8
5584 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot open %s for reading\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5588:17
     |
5588 | /                 if __errstatus != 0 as libc::c_int {
5589 | |                     unreachable!();
5590 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5598:9
     |
5598 |         0 as libc::c_int as off_t,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5599:9
     |
5599 |         0 as libc::c_int as off_t,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5603:9
     |
5603 | /         if 0 != 0 {
5604 | |             error(
5605 | |                 1 as libc::c_int,
5606 | |                 *__errno_location(),
...    |
5651 | |             });
5652 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5603:12
     |
5603 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5607:17
     |
5607 |                 b"%s\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5614:13
     |
5614 | /             if 1 as libc::c_int != 0 as libc::c_int {
5615 | |                 unreachable!();
5616 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5619:17
     |
5619 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5623:21
     |
5623 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5630:17
     |
5630 | /                 if __errstatus != 0 as libc::c_int {
5631 | |                     unreachable!();
5632 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5636:17
     |
5636 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5640:21
     |
5640 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5647:17
     |
5647 | /                 if __errstatus != 0 as libc::c_int {
5648 | |                     unreachable!();
5649 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5654:23
     |
5654 |     if in_blk_size == 0 as libc::c_int as libc::c_long {
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: the function `io_blksize` doesn't need a mutable reference
    --> src/split.rs:5655:34
     |
5655 |         in_blk_size = io_blksize(&mut in_stat_buf);
     |                                  ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5656:12
     |
5656 |         if (SYS_BUFSIZE_MAX as libc::c_int as libc::c_long) < in_blk_size {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(SYS_BUFSIZE_MAX as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:5656:13
     |
5656 |         if (SYS_BUFSIZE_MAX as libc::c_int as libc::c_long) < in_blk_size {
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5657:27
     |
5657 |             in_blk_size = SYS_BUFSIZE_MAX as libc::c_int as idx_t;
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(SYS_BUFSIZE_MAX as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:5657:27
     |
5657 |             in_blk_size = SYS_BUFSIZE_MAX as libc::c_int as idx_t;
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5660:38
     |
5660 |       let mut buf: *mut libc::c_char = xalignalloc(
     |  ______________________________________^
5661 | |         page_size,
5662 | |         in_blk_size + 1 as libc::c_int as libc::c_long,
5663 | |     ) as *mut libc::c_char;
     | |__________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
5660 ~     let mut buf: *mut libc::c_char = xalignalloc(
5661 +         page_size,
5662 +         in_blk_size + 1 as libc::c_int as libc::c_long,
5663 ~     ).cast::<i8>();
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5662:23
     |
5662 |         in_blk_size + 1 as libc::c_int as libc::c_long,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5664:37
     |
5664 |     let mut initial_read: ssize_t = -(1 as libc::c_int) as ssize_t;
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:5665:38
     |
5665 |     if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:5665:38
     |
5665 |     if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:5666:42
     |
5666 |         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:5666:42
     |
5666 |         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: the function `input_file_size` doesn't need a mutable reference
    --> src/split.rs:5670:13
     |
5670 |             &mut in_stat_buf,
     |             ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5674:24
     |
5674 |         if file_size < 0 as libc::c_int as libc::c_long {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:5675:13
     |
5675 | /             if 0 != 0 {
5676 | |                 error(
5677 | |                     1 as libc::c_int,
5678 | |                     *__errno_location(),
...    |
5732 | |                 });
5733 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5675:16
     |
5675 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5680:25
     |
5680 | /                         b"%s: cannot determine file size\0" as *const u8
5681 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot determine file size\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5689:17
     |
5689 | /                 if 1 as libc::c_int != 0 as libc::c_int {
5690 | |                     unreachable!();
5691 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5694:21
     |
5694 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5699:29
     |
5699 | / ...                   b"%s: cannot determine file size\0" as *const u8
5700 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot determine file size\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5708:21
     |
5708 | /                     if __errstatus != 0 as libc::c_int {
5709 | |                         unreachable!();
5710 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5714:21
     |
5714 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5719:29
     |
5719 | / ...                   b"%s: cannot determine file size\0" as *const u8
5720 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot determine file size\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5728:21
     |
5728 | /                     if __errstatus != 0 as libc::c_int {
5729 | |                         unreachable!();
5730 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5754:17
     |
5754 |                 0 as libc::c_int as intmax_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5757:17
     |
5757 |                 -(1 as libc::c_int) as ssize_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5758:17
     |
5758 |                 0 as libc::c_int as intmax_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5765:27
     |
5765 |             if k_units == 0 as libc::c_int as libc::c_long {
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:5796:40
     |
5796 |             let mut files: *mut of_t = 0 as *mut of_t;
     |                                        ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<of_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5801:17
     |
5801 |                 b"0\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5802:17
     |
5802 |                 b"split.c\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:5803:17
     |
5803 |                 1686 as libc::c_int as libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:5804:19
     |
5804 |                   (*::core::mem::transmute::<
     |  ___________________^
5805 | |                     &[u8; 23],
5806 | |                     &[libc::c_char; 23],
5807 | |                 >(b"int main(int, char **)\0"))
     | |______________________________________________^ help: try: `&*(b"int main(int, char **)\0" as *const [u8; 23] as *const [i8; 23])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5812:21
     |
5812 |                     b"0\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5813:21
     |
5813 |                     b"split.c\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:5814:21
     |
5814 |                     1686 as libc::c_int as libc::c_uint,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:5815:23
     |
5815 |                       (*::core::mem::transmute::<
     |  _______________________^
5816 | |                         &[u8; 23],
5817 | |                         &[libc::c_char; 23],
5818 | |                     >(b"int main(int, char **)\0"))
     | |__________________________________________________^ help: try: `&*(b"int main(int, char **)\0" as *const [u8; 23] as *const [i8; 23])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5825:9
     |
5825 | /         if 0 != 0 {
5826 | |             error(
5827 | |                 1 as libc::c_int,
5828 | |                 *__errno_location(),
...    |
5873 | |             });
5874 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5825:12
     |
5825 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5829:17
     |
5829 |                 b"%s\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5836:13
     |
5836 | /             if 1 as libc::c_int != 0 as libc::c_int {
5837 | |                 unreachable!();
5838 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5841:17
     |
5841 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5845:21
     |
5845 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5852:17
     |
5852 | /                 if __errstatus != 0 as libc::c_int {
5853 | |                     unreachable!();
5854 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5858:17
     |
5858 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5862:21
     |
5862 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5869:17
     |
5869 | /                 if __errstatus != 0 as libc::c_int {
5870 | |                     unreachable!();
5871 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `0 as *mut _` detected
    --> src/split.rs:5876:14
     |
5876 |     closeout(0 as *mut FILE, output_desc, filter_pid, outfile);
     |              ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
    --> src/split.rs:5892:17
     |
5892 |                 (args.len() - 1) as libc::c_int,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
    --> src/split.rs:5892:17
     |
5892 |                 (args.len() - 1) as libc::c_int,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5893:17
     |
5893 |                 args.as_mut_ptr() as *mut *mut libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `args.as_mut_ptr().cast::<*mut i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: path statement with no effect
   --> src/split.rs:464:9
    |
464 |         map_prog;
    |         ^^^^^^^^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
   --> src/split.rs:909:13
    |
909 |             suffix_length_needed;
    |             ^^^^^^^^^^^^^^^^^^^^^

warning: path statement with no effect
    --> src/split.rs:1278:17
     |
1278 |                 suffix_length;
     |                 ^^^^^^^^^^^^^^

warning: path statement with no effect
    --> src/split.rs:1302:17
     |
1302 |                 outbase_length;
     |                 ^^^^^^^^^^^^^^^

warning: path statement with no effect
    --> src/split.rs:1747:17
     |
1747 |                 j;
     |                 ^^

warning: path statement with no effect
    --> src/split.rs:2179:17
     |
2179 |                 j;
     |                 ^^

warning: path statement with no effect
    --> src/split.rs:2766:17
     |
2766 |                 bp;
     |                 ^^^

warning: path statement with no effect
    --> src/split.rs:3159:17
     |
3159 |                 bp_out;
     |                 ^^^^^^^

warning: path statement with no effect
    --> src/split.rs:3193:21
     |
3193 |                     chunk_no;
     |                     ^^^^^^^^^

warning: path statement with no effect
    --> src/split.rs:3211:9
     |
3211 |         chunk_no;
     |         ^^^^^^^^^

warning: path statement with no effect
    --> src/split.rs:3757:13
     |
3757 |             i_file;
     |             ^^^^^^^

warning: path statement with no effect
    --> src/split.rs:3835:17
     |
3835 |                 bp_out;
     |                 ^^^^^^^

warning: path statement with no effect
    --> src/split.rs:4084:13
     |
4084 |             i_file;
     |             ^^^^^^^

warning: path statement with no effect
    --> src/split.rs:4594:21
     |
4594 |                     optarg;
     |                     ^^^^^^^

warning: path statement with no effect
    --> src/split.rs:5263:29
     |
5263 | ...                   optarg;
     |                       ^^^^^^^

warning: `rust` (bin "split") generated 1683 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 32.17s
