[
  {
    "func_defid": "DefId(0:136 ~ c2rust_out[3c70]::lil::lil_arg)",
    "span": "lil.rs:2896:1: 2902:2 (#0)",
    "pieces": [
      "lil.rs:2896:1: 2902:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn lil_arg(mut argv: *mut lil_value_t,\n                                 mut index: size_t) -> lil_value_t {\n    return if !argv.is_null() {\n               *argv.offset(index as isize)\n           } else { 0 as lil_value_t };\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:119 ~ c2rust_out[3c70]::lil::ee_skip_spaces)",
    "span": "lil.rs:1633:1: 1639:2 (#0)",
    "pieces": [
      "lil.rs:1633:1: 1639:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 7,
    "source": "unsafe extern \"C\" fn ee_skip_spaces(mut ee: *mut expreval_t) {\n    while (*ee).head < (*ee).len &&\n              isspace(*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int)\n                  != 0 {\n        (*ee).head = (*ee).head.wrapping_add(1)\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:158 ~ c2rust_out[3c70]::lil::ee_equals)",
        "span": "lil.rs:2465:5: 2465:24 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:161 ~ c2rust_out[3c70]::lil::ee_logand)",
        "span": "lil.rs:2686:5: 2686:24 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:150 ~ c2rust_out[3c70]::lil::ee_numeric_element)",
        "span": "lil.rs:1644:14: 1644:33 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:156 ~ c2rust_out[3c70]::lil::ee_shift)",
        "span": "lil.rs:2067:5: 2067:24 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:157 ~ c2rust_out[3c70]::lil::ee_compare)",
        "span": "lil.rs:2166:9: 2166:28 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:155 ~ c2rust_out[3c70]::lil::ee_addsub)",
        "span": "lil.rs:1979:5: 1979:24 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:152 ~ c2rust_out[3c70]::lil::ee_paren)",
        "span": "lil.rs:1689:9: 1689:28 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:160 ~ c2rust_out[3c70]::lil::ee_bitor)",
        "span": "lil.rs:2639:5: 2639:24 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:153 ~ c2rust_out[3c70]::lil::ee_unary)",
        "span": "lil.rs:1707:5: 1707:24 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:154 ~ c2rust_out[3c70]::lil::ee_muldiv)",
        "span": "lil.rs:1761:5: 1761:24 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:152 ~ c2rust_out[3c70]::lil::ee_paren)",
        "span": "lil.rs:1694:13: 1694:32 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:162 ~ c2rust_out[3c70]::lil::ee_logor)",
        "span": "lil.rs:2751:9: 2751:28 (#0)",
        "source": "ee_skip_spaces(ee);"
      },
      {
        "caller": "DefId(0:159 ~ c2rust_out[3c70]::lil::ee_bitand)",
        "span": "lil.rs:2592:5: 2592:24 (#0)",
        "source": "ee_skip_spaces(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:120 ~ c2rust_out[3c70]::lil::ee_numeric_element)",
    "span": "lil.rs:1640:1: 1670:2 (#0)",
    "pieces": [
      "lil.rs:1640:1: 1670:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 37,
    "source": "unsafe extern \"C\" fn ee_numeric_element(mut ee: *mut expreval_t) {\n    let mut fpart: lilint_t = 0 as std::os::raw::c_int as lilint_t;\n    let mut fpartlen: lilint_t = 1 as std::os::raw::c_int as lilint_t;\n    (*ee).type_0 = 0 as std::os::raw::c_int;\n    ee_skip_spaces(ee);\n    (*ee).ival = 0 as std::os::raw::c_int as lilint_t;\n    (*ee).dval = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    while (*ee).head < (*ee).len {\n        if *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n               '.' as i32 {\n            if (*ee).type_0 == 1 as std::os::raw::c_int { break ; }\n            (*ee).type_0 = 1 as std::os::raw::c_int;\n            (*ee).head = (*ee).head.wrapping_add(1)\n        } else if isdigit(*(*ee).code.offset((*ee).head as isize) as\n                              std::os::raw::c_int) == 0 {\n            break ;\n        }\n        if (*ee).type_0 == 0 as std::os::raw::c_int {\n            (*ee).ival =\n                (*ee).ival * 10 as std::os::raw::c_int as std::os::raw::c_longlong +\n                    (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int -\n                         '0' as i32) as std::os::raw::c_longlong\n        } else {\n            fpart =\n                fpart * 10 as std::os::raw::c_int as std::os::raw::c_longlong +\n                    (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int -\n                         '0' as i32) as std::os::raw::c_longlong;\n            fpartlen *= 10 as std::os::raw::c_int as std::os::raw::c_longlong\n        }\n        (*ee).head = (*ee).head.wrapping_add(1)\n    }\n    if (*ee).type_0 == 1 as std::os::raw::c_int {\n        (*ee).dval =\n            (*ee).ival as std::os::raw::c_double +\n                fpart as std::os::raw::c_double / fpartlen as std::os::raw::c_double\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:151 ~ c2rust_out[3c70]::lil::ee_element)",
        "span": "lil.rs:1675:9: 1675:32 (#0)",
        "source": "ee_numeric_element(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:121 ~ c2rust_out[3c70]::lil::ee_element)",
    "span": "lil.rs:1672:1: 1685:2 (#0)",
    "pieces": [
      "lil.rs:1672:1: 1685:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 13,
    "source": "unsafe extern \"C\" fn ee_element(mut ee: *mut expreval_t) {\n    if isdigit(*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int) != 0 {\n        ee_numeric_element(ee);\n        return\n    }\n    /* for anything else that might creep in (usually from strings), we set the\n     * value to 1 so that strings evaluate as \"true\" when used in conditional\n     * expressions */\n    (*ee).type_0 = 0 as std::os::raw::c_int;\n    (*ee).ival = 1 as std::os::raw::c_int as lilint_t;\n    (*ee).error = 4 as std::os::raw::c_int;\n    /* special flag, will be cleared */\n}",
    "calls": [
      {
        "caller": "DefId(0:152 ~ c2rust_out[3c70]::lil::ee_paren)",
        "span": "lil.rs:1701:13: 1701:28 (#0)",
        "source": "ee_element(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:126 ~ c2rust_out[3c70]::lil::ee_shift)",
    "span": "lil.rs:2065:1: 2162:2 (#0)",
    "pieces": [
      "lil.rs:2065:1: 2162:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 98,
    "source": "unsafe extern \"C\" fn ee_shift(mut ee: *mut expreval_t) {\n    ee_addsub(ee);\n    ee_skip_spaces(ee);\n    while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '<' as i32 &&\n                   *(*ee).code.offset((*ee).head.wrapping_add(1 as std::os::raw::c_int\n                                                                  as\n                                                                  std::os::raw::c_ulong)\n                                          as isize) as std::os::raw::c_int ==\n                       '<' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '>' as i32 &&\n                       *(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      std::os::raw::c_ulong)\n                                              as isize) as std::os::raw::c_int ==\n                           '>' as i32) {\n        let mut odval: std::os::raw::c_double = (*ee).dval;\n        let mut oival: lilint_t = (*ee).ival;\n        (*ee).head = (*ee).head.wrapping_add(1);\n        match *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int {\n            60 => {\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_addsub(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    (odval as lilint_t) <<\n                                        (*ee).dval as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival = (odval as lilint_t) << (*ee).ival\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_addsub(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival = oival << (*ee).dval as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => { (*ee).ival = oival << (*ee).ival }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            62 => {\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_addsub(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    odval as lilint_t >>\n                                        (*ee).dval as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival = odval as lilint_t >> (*ee).ival\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_addsub(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival = oival >> (*ee).dval as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => { (*ee).ival = oival >> (*ee).ival }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            _ => { }\n        }\n        ee_skip_spaces(ee);\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:157 ~ c2rust_out[3c70]::lil::ee_compare)",
        "span": "lil.rs:2165:9: 2165:22 (#0)",
        "source": "ee_shift(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:127 ~ c2rust_out[3c70]::lil::ee_compare)",
    "span": "lil.rs:2163:1: 2461:2 (#0)",
    "pieces": [
      "lil.rs:2163:1: 2167:7 (#0)",
      "lil.rs:2459:1: 2461:2 (#0)"
    ],
    "sub_chunks": [
      7
    ],
    "num_lines": 5,
    "source": "unsafe extern \"C\" fn ee_compare(mut ee: *mut expreval_t) {\n    ee_shift(ee);\n    ee_skip_spaces(ee);\n   <<chunk 7>>}",
    "calls": [
      {
        "caller": "DefId(0:158 ~ c2rust_out[3c70]::lil::ee_equals)",
        "span": "lil.rs:2464:5: 2464:20 (#0)",
        "source": "ee_compare(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": [
      {
        "chunk_id": 0,
        "span": "lil.rs:2222:9: 2274:2 (#0)",
        "pieces": [
          "lil.rs:2222:9: 2274:2 (#0)"
        ],
        "num_lines": 44,
        "source": "match (*ee).type_0 {\n                    1 => {\n                        ee_shift(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if odval < (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if odval < (*ee).ival as std::os::raw::c_double {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        ee_shift(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if (oival as std::os::raw::c_double) < (*ee).dval\n                                       {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if oival < (*ee).ival {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }",
        "sub_chunks": [],
        "live_in": [
          "ee: *mut lil::_expreval_t",
          "mut ee: &mut lil::_expreval_t",
          "odval: f64",
          "oival: i64"
        ],
        "live_out": [
          "ee: *mut lil::_expreval_t",
          "mut ee: &mut lil::_expreval_t",
          "odval: f64",
          "oival: i64"
        ]
      },
      {
        "chunk_id": 1,
        "span": "lil.rs:2279:9: 2331:2 (#0)",
        "pieces": [
          "lil.rs:2279:9: 2331:2 (#0)"
        ],
        "num_lines": 43,
        "source": "match (*ee).type_0 {\n                    1 => {\n                        ee_shift(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if odval > (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if odval > (*ee).ival as std::os::raw::c_double {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        ee_shift(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if oival as std::os::raw::c_double > (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if oival > (*ee).ival {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }",
        "sub_chunks": [],
        "live_in": [
          "ee: *mut lil::_expreval_t",
          "mut ee: &mut lil::_expreval_t",
          "odval: f64",
          "oival: i64"
        ],
        "live_out": [
          "ee: *mut lil::_expreval_t",
          "mut ee: &mut lil::_expreval_t",
          "odval: f64",
          "oival: i64"
        ]
      },
      {
        "chunk_id": 2,
        "span": "lil.rs:2336:9: 2388:2 (#0)",
        "pieces": [
          "lil.rs:2336:9: 2388:2 (#0)"
        ],
        "num_lines": 43,
        "source": "match (*ee).type_0 {\n                    1 => {\n                        ee_shift(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if odval <= (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if odval <= (*ee).ival as std::os::raw::c_double {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        ee_shift(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if oival as std::os::raw::c_double <= (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if oival <= (*ee).ival {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }",
        "sub_chunks": [],
        "live_in": [
          "ee: *mut lil::_expreval_t",
          "mut ee: &mut lil::_expreval_t",
          "odval: f64",
          "oival: i64"
        ],
        "live_out": [
          "ee: *mut lil::_expreval_t",
          "mut ee: &mut lil::_expreval_t",
          "odval: f64",
          "oival: i64"
        ]
      },
      {
        "chunk_id": 3,
        "span": "lil.rs:2393:9: 2445:2 (#0)",
        "pieces": [
          "lil.rs:2393:9: 2445:2 (#0)"
        ],
        "num_lines": 43,
        "source": "match (*ee).type_0 {\n                    1 => {\n                        ee_shift(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if odval >= (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if odval >= (*ee).ival as std::os::raw::c_double {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        ee_shift(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if oival as std::os::raw::c_double >= (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if oival >= (*ee).ival {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }",
        "sub_chunks": [],
        "live_in": [
          "ee: *mut lil::_expreval_t",
          "mut ee: &mut lil::_expreval_t",
          "odval: f64",
          "oival: i64"
        ],
        "live_out": [
          "ee: *mut lil::_expreval_t",
          "mut ee: &mut lil::_expreval_t",
          "odval: f64",
          "oival: i64"
        ]
      },
      {
        "chunk_id": 4,
        "span": "lil.rs:2202:9: 2456:3 (#0)",
        "pieces": [
          "lil.rs:2202:9: 2222:8 (#0)",
          "lil.rs:2276:1: 2279:8 (#0)",
          "lil.rs:2333:1: 2336:8 (#0)",
          "lil.rs:2390:1: 2393:8 (#0)",
          "lil.rs:2447:1: 2456:3 (#0)"
        ],
        "num_lines": 55,
        "source": "let mut odval: std::os::raw::c_double = (*ee).dval;\n        let mut oival: lilint_t = (*ee).ival;\n        let mut op: std::os::raw::c_int = 4 as std::os::raw::c_int;\n        if *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n               '<' as i32 &&\n               ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                              std::os::raw::c_int\n                                                                              as\n                                                                              std::os::raw::c_ulong)\n                                                      as isize) as\n                                   std::os::raw::c_int) == 0 {\n            op = 1 as std::os::raw::c_int\n        } else if *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                      '>' as i32 &&\n                      ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1\n                                                                                     as\n                                                                                     std::os::raw::c_int\n                                                                                     as\n                                                                                     std::os::raw::c_ulong)\n                                                             as isize) as\n                                          std::os::raw::c_int) == 0 {\n            op = 2 as std::os::raw::c_int\n        } else if *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                      '<' as i32 &&\n                      *(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                     std::os::raw::c_int\n                                                                     as\n                                                                     std::os::raw::c_ulong)\n                                             as isize) as std::os::raw::c_int ==\n                          '=' as i32 {\n            op = 3 as std::os::raw::c_int\n        }\n        (*ee).head =\n            ((*ee).head as\n                 std::os::raw::c_ulong).wrapping_add(if op > 2 as std::os::raw::c_int {\n                                                 2 as std::os::raw::c_int\n                                             } else { 1 as std::os::raw::c_int } as\n                                                 std::os::raw::c_ulong) as size_t as\n                size_t;\n        match op {\n            1 => {\n               <<chunk 0>>            }\n            2 => {\n               <<chunk 1>>            }\n            3 => {\n               <<chunk 2>>            }\n            4 => {\n               <<chunk 3>>            }\n            _ => { }\n        }\n        ee_skip_spaces(ee);",
        "sub_chunks": [
          0,
          1,
          2,
          3
        ],
        "live_in": [
          "ee: *mut lil::_expreval_t"
        ],
        "live_out": [
          "ee: *mut lil::_expreval_t"
        ]
      },
      {
        "chunk_id": 5,
        "span": "lil.rs:2167:8: 2458:6 (#259)",
        "pieces": [
          "lil.rs:2167:8: 2202:8 (#0)",
          "lil.rs:2458:1: 2458:6 (#0)"
        ],
        "num_lines": 37,
        "source": "while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '<' as i32 &&\n                   ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  std::os::raw::c_ulong)\n                                                          as isize) as\n                                       std::os::raw::c_int) == 0 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '>' as i32 &&\n                       ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1\n                                                                                      as\n                                                                                      std::os::raw::c_int\n                                                                                      as\n                                                                                      std::os::raw::c_ulong)\n                                                              as isize) as\n                                           std::os::raw::c_int) == 0 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '<' as i32 &&\n                       *(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      std::os::raw::c_ulong)\n                                              as isize) as std::os::raw::c_int ==\n                           '=' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '>' as i32 &&\n                       *(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      std::os::raw::c_ulong)\n                                              as isize) as std::os::raw::c_int ==\n                           '=' as i32) {\n       <<chunk 4>>    }",
        "sub_chunks": [
          4
        ],
        "live_in": [
          "ee: *mut lil::_expreval_t"
        ],
        "live_out": [
          "ee: *mut lil::_expreval_t"
        ]
      },
      {
        "chunk_id": 6,
        "span": "lil.rs:2167:8: 2458:6 (#259)",
        "pieces": [
          "lil.rs:2167:8: 2202:8 (#0)",
          "lil.rs:2458:1: 2458:6 (#0)"
        ],
        "num_lines": 37,
        "source": "while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '<' as i32 &&\n                   ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  std::os::raw::c_ulong)\n                                                          as isize) as\n                                       std::os::raw::c_int) == 0 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '>' as i32 &&\n                       ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1\n                                                                                      as\n                                                                                      std::os::raw::c_int\n                                                                                      as\n                                                                                      std::os::raw::c_ulong)\n                                                              as isize) as\n                                           std::os::raw::c_int) == 0 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '<' as i32 &&\n                       *(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      std::os::raw::c_ulong)\n                                              as isize) as std::os::raw::c_int ==\n                           '=' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '>' as i32 &&\n                       *(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      std::os::raw::c_ulong)\n                                              as isize) as std::os::raw::c_int ==\n                           '=' as i32) {\n       <<chunk 4>>    }",
        "sub_chunks": [
          4
        ],
        "live_in": [
          "ee: *mut lil::_expreval_t"
        ],
        "live_out": [
          "ee: *mut lil::_expreval_t"
        ]
      },
      {
        "chunk_id": 7,
        "span": "lil.rs:2167:8: 2458:7 (#0)",
        "pieces": [
          "lil.rs:2167:8: 2167:8 (#0)",
          "lil.rs:2458:7: 2458:7 (#0)"
        ],
        "num_lines": 2,
        "source": "<<chunk 5>>",
        "sub_chunks": [
          5
        ],
        "live_in": [
          "ee: *mut lil::_expreval_t"
        ],
        "live_out": [
          "ee: *mut lil::_expreval_t"
        ]
      }
    ]
  },
  {
    "func_defid": "DefId(0:128 ~ c2rust_out[3c70]::lil::ee_equals)",
    "span": "lil.rs:2463:1: 2589:2 (#0)",
    "pieces": [
      "lil.rs:2463:1: 2589:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 127,
    "source": "unsafe extern \"C\" fn ee_equals(mut ee: *mut expreval_t) {\n    ee_compare(ee);\n    ee_skip_spaces(ee);\n    while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '=' as i32 &&\n                   *(*ee).code.offset((*ee).head.wrapping_add(1 as std::os::raw::c_int\n                                                                  as\n                                                                  std::os::raw::c_ulong)\n                                          as isize) as std::os::raw::c_int ==\n                       '=' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '!' as i32 &&\n                       *(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      std::os::raw::c_ulong)\n                                              as isize) as std::os::raw::c_int ==\n                           '=' as i32) {\n        let mut odval: std::os::raw::c_double = (*ee).dval;\n        let mut oival: lilint_t = (*ee).ival;\n        let mut op: std::os::raw::c_int =\n            if *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '=' as i32 {\n                1 as std::os::raw::c_int\n            } else { 2 as std::os::raw::c_int };\n        (*ee).head =\n            ((*ee).head as\n                 std::os::raw::c_ulong).wrapping_add(2 as std::os::raw::c_int as\n                                                 std::os::raw::c_ulong) as size_t as\n                size_t;\n        match op {\n            1 => {\n                match (*ee).type_0 {\n                    1 => {\n                        ee_compare(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if odval == (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if odval == (*ee).ival as std::os::raw::c_double {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        ee_compare(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if oival as std::os::raw::c_double == (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if oival == (*ee).ival {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            2 => {\n                match (*ee).type_0 {\n                    1 => {\n                        ee_compare(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if odval != (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if odval != (*ee).ival as std::os::raw::c_double {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        ee_compare(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).ival =\n                                    if oival as std::os::raw::c_double != (*ee).dval {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t;\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                (*ee).ival =\n                                    if oival != (*ee).ival {\n                                        1 as std::os::raw::c_int\n                                    } else { 0 as std::os::raw::c_int } as lilint_t\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            _ => { }\n        }\n        ee_skip_spaces(ee);\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:159 ~ c2rust_out[3c70]::lil::ee_bitand)",
        "span": "lil.rs:2591:5: 2591:19 (#0)",
        "source": "ee_equals(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:129 ~ c2rust_out[3c70]::lil::ee_bitand)",
    "span": "lil.rs:2590:1: 2636:2 (#0)",
    "pieces": [
      "lil.rs:2590:1: 2636:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 47,
    "source": "unsafe extern \"C\" fn ee_bitand(mut ee: *mut expreval_t) {\n    ee_equals(ee);\n    ee_skip_spaces(ee);\n    while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '&' as i32 &&\n                   ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  std::os::raw::c_ulong)\n                                                          as isize) as\n                                       std::os::raw::c_int) == 0) {\n        let mut odval: std::os::raw::c_double = (*ee).dval;\n        let mut oival: lilint_t = (*ee).ival;\n        (*ee).head = (*ee).head.wrapping_add(1);\n        match (*ee).type_0 {\n            1 => {\n                ee_equals(ee);\n                if (*ee).error != 0 { return }\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).ival =\n                            odval as lilint_t & (*ee).dval as lilint_t;\n                        (*ee).type_0 = 0 as std::os::raw::c_int\n                    }\n                    0 => { (*ee).ival = odval as lilint_t & (*ee).ival }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            0 => {\n                ee_equals(ee);\n                if (*ee).error != 0 { return }\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).ival = oival & (*ee).dval as lilint_t;\n                        (*ee).type_0 = 0 as std::os::raw::c_int\n                    }\n                    0 => { (*ee).ival = oival & (*ee).ival }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            _ => { (*ee).error = 2 as std::os::raw::c_int }\n        }\n        ee_skip_spaces(ee);\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:160 ~ c2rust_out[3c70]::lil::ee_bitor)",
        "span": "lil.rs:2638:5: 2638:19 (#0)",
        "source": "ee_bitand(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:130 ~ c2rust_out[3c70]::lil::ee_bitor)",
    "span": "lil.rs:2637:1: 2683:2 (#0)",
    "pieces": [
      "lil.rs:2637:1: 2683:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 47,
    "source": "unsafe extern \"C\" fn ee_bitor(mut ee: *mut expreval_t) {\n    ee_bitand(ee);\n    ee_skip_spaces(ee);\n    while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '|' as i32 &&\n                   ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  std::os::raw::c_ulong)\n                                                          as isize) as\n                                       std::os::raw::c_int) == 0) {\n        let mut odval: std::os::raw::c_double = (*ee).dval;\n        let mut oival: lilint_t = (*ee).ival;\n        (*ee).head = (*ee).head.wrapping_add(1);\n        match (*ee).type_0 {\n            1 => {\n                ee_bitand(ee);\n                if (*ee).error != 0 { return }\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).ival =\n                            odval as lilint_t | (*ee).dval as lilint_t;\n                        (*ee).type_0 = 0 as std::os::raw::c_int\n                    }\n                    0 => { (*ee).ival = odval as lilint_t | (*ee).ival }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            0 => {\n                ee_bitand(ee);\n                if (*ee).error != 0 { return }\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).ival = oival | (*ee).dval as lilint_t;\n                        (*ee).type_0 = 0 as std::os::raw::c_int\n                    }\n                    0 => { (*ee).ival = oival | (*ee).ival }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            _ => { (*ee).error = 2 as std::os::raw::c_int }\n        }\n        ee_skip_spaces(ee);\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:161 ~ c2rust_out[3c70]::lil::ee_logand)",
        "span": "lil.rs:2685:5: 2685:18 (#0)",
        "source": "ee_bitor(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:131 ~ c2rust_out[3c70]::lil::ee_logand)",
    "span": "lil.rs:2684:1: 2747:2 (#0)",
    "pieces": [
      "lil.rs:2684:1: 2747:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 64,
    "source": "unsafe extern \"C\" fn ee_logand(mut ee: *mut expreval_t) {\n    ee_bitor(ee);\n    ee_skip_spaces(ee);\n    while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '&' as i32 &&\n                   *(*ee).code.offset((*ee).head.wrapping_add(1 as std::os::raw::c_int\n                                                                  as\n                                                                  std::os::raw::c_ulong)\n                                          as isize) as std::os::raw::c_int ==\n                       '&' as i32) {\n        let mut odval: std::os::raw::c_double = (*ee).dval;\n        let mut oival: lilint_t = (*ee).ival;\n        (*ee).head =\n            ((*ee).head as\n                 std::os::raw::c_ulong).wrapping_add(2 as std::os::raw::c_int as\n                                                 std::os::raw::c_ulong) as size_t as\n                size_t;\n        match (*ee).type_0 {\n            1 => {\n                ee_bitor(ee);\n                if (*ee).error != 0 { return }\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).ival =\n                            if odval != 0. && (*ee).dval != 0. {\n                                1 as std::os::raw::c_int\n                            } else { 0 as std::os::raw::c_int } as lilint_t;\n                        (*ee).type_0 = 0 as std::os::raw::c_int\n                    }\n                    0 => {\n                        (*ee).ival =\n                            if odval != 0. && (*ee).ival != 0 {\n                                1 as std::os::raw::c_int\n                            } else { 0 as std::os::raw::c_int } as lilint_t\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            0 => {\n                ee_bitor(ee);\n                if (*ee).error != 0 { return }\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).ival =\n                            if oival != 0 && (*ee).dval != 0. {\n                                1 as std::os::raw::c_int\n                            } else { 0 as std::os::raw::c_int } as lilint_t;\n                        (*ee).type_0 = 0 as std::os::raw::c_int\n                    }\n                    0 => {\n                        (*ee).ival =\n                            if oival != 0 && (*ee).ival != 0 {\n                                1 as std::os::raw::c_int\n                            } else { 0 as std::os::raw::c_int } as lilint_t\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            _ => { (*ee).error = 2 as std::os::raw::c_int }\n        }\n        ee_skip_spaces(ee);\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:162 ~ c2rust_out[3c70]::lil::ee_logor)",
        "span": "lil.rs:2750:9: 2750:23 (#0)",
        "source": "ee_logand(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:132 ~ c2rust_out[3c70]::lil::ee_logor)",
    "span": "lil.rs:2748:1: 2808:2 (#0)",
    "pieces": [
      "lil.rs:2748:1: 2808:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 64,
    "source": "unsafe extern \"C\" fn ee_logor(mut ee: *mut expreval_t) {\n    ee_logand(ee);\n    ee_skip_spaces(ee);\n    while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '|' as i32 &&\n                   *(*ee).code.offset((*ee).head.wrapping_add(1 as std::os::raw::c_int\n                                                                  as\n                                                                  std::os::raw::c_ulong)\n                                          as isize) as std::os::raw::c_int ==\n                       '|' as i32) {\n        let mut odval: std::os::raw::c_double = (*ee).dval;\n        let mut oival: lilint_t = (*ee).ival;\n        (*ee).head =\n            ((*ee).head as\n                 std::os::raw::c_ulong).wrapping_add(2 as std::os::raw::c_int as\n                                                 std::os::raw::c_ulong) as size_t as\n                size_t;\n        match (*ee).type_0 {\n            1 => {\n                ee_logand(ee);\n                if (*ee).error != 0 { return }\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).ival =\n                            if odval != 0. || (*ee).dval != 0. {\n                                1 as std::os::raw::c_int\n                            } else { 0 as std::os::raw::c_int } as lilint_t;\n                        (*ee).type_0 = 0 as std::os::raw::c_int\n                    }\n                    0 => {\n                        (*ee).ival =\n                            if odval != 0. || (*ee).ival != 0 {\n                                1 as std::os::raw::c_int\n                            } else { 0 as std::os::raw::c_int } as lilint_t\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            0 => {\n                ee_logand(ee);\n                if (*ee).error != 0 { return }\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).ival =\n                            if oival != 0 || (*ee).dval != 0. {\n                                1 as std::os::raw::c_int\n                            } else { 0 as std::os::raw::c_int } as lilint_t;\n                        (*ee).type_0 = 0 as std::os::raw::c_int\n                    }\n                    0 => {\n                        (*ee).ival =\n                            if oival != 0 || (*ee).ival != 0 {\n                                1 as std::os::raw::c_int\n                            } else { 0 as std::os::raw::c_int } as lilint_t\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            _ => { (*ee).error = 2 as std::os::raw::c_int }\n        }\n        ee_skip_spaces(ee);\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:163 ~ c2rust_out[3c70]::lil::ee_expr)",
        "span": "lil.rs:2811:5: 2811:18 (#0)",
        "source": "ee_logor(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:133 ~ c2rust_out[3c70]::lil::ee_expr)",
    "span": "lil.rs:2810:1: 2818:2 (#0)",
    "pieces": [
      "lil.rs:2810:1: 2818:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "unsafe extern \"C\" fn ee_expr(mut ee: *mut expreval_t) {\n    ee_logor(ee);\n    /* invalid expression doesn't really matter, it is only used to stop\n     * the expression parsing. */\n    if (*ee).error == 4 as std::os::raw::c_int {\n        (*ee).error = 0 as std::os::raw::c_int;\n        (*ee).ival = 1 as std::os::raw::c_int as lilint_t\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:152 ~ c2rust_out[3c70]::lil::ee_paren)",
        "span": "lil.rs:1693:13: 1693:25 (#0)",
        "source": "ee_expr(ee);"
      },
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2846:5: 2846:22 (#0)",
        "source": "ee_expr(&mut ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:122 ~ c2rust_out[3c70]::lil::ee_paren)",
    "span": "lil.rs:1687:1: 1704:2 (#0)",
    "pieces": [
      "lil.rs:1687:1: 1704:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "unsafe extern \"C\" fn ee_paren(mut ee: *mut expreval_t) {\n    ee_skip_spaces(ee);\n    if *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int == '(' as i32 {\n        (*ee).head = (*ee).head.wrapping_add(1);\n        ee_expr(ee);\n        ee_skip_spaces(ee);\n        if *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n               ')' as i32 {\n            (*ee).head = (*ee).head.wrapping_add(1)\n        } else { (*ee).error = 1 as std::os::raw::c_int }\n    } else { ee_element(ee); };\n}",
    "calls": [
      {
        "caller": "DefId(0:153 ~ c2rust_out[3c70]::lil::ee_unary)",
        "span": "lil.rs:1756:14: 1756:33 (#0)",
        "source": "ee_paren(&mut *ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:123 ~ c2rust_out[3c70]::lil::ee_unary)",
    "span": "lil.rs:1706:1: 1757:2 (#0)",
    "pieces": [
      "lil.rs:1706:1: 1757:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 52,
    "source": "unsafe extern \"C\" fn ee_unary(mut ee: *mut expreval_t) {\n    ee_skip_spaces(ee);\n    if (*ee).head < (*ee).len && (*ee).error == 0 &&\n           (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                '-' as i32 ||\n                *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                    '+' as i32 ||\n                *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                    '~' as i32 ||\n                *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                    '!' as i32) {\n        let fresh19 = (*ee).head;\n        (*ee).head = (*ee).head.wrapping_add(1);\n        let mut op: std::os::raw::c_char = *(*ee).code.offset(fresh19 as isize);\n        ee_unary(ee);\n        if (*ee).error != 0 { return }\n        match op as std::os::raw::c_int {\n            45 => {\n                match (*ee).type_0 {\n                    1 => { (*ee).dval = -(*ee).dval }\n                    0 => { (*ee).ival = -(*ee).ival }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            126 => {\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).ival = !((*ee).dval as lilint_t);\n                        (*ee).type_0 = 0 as std::os::raw::c_int\n                    }\n                    0 => { (*ee).ival = !(*ee).ival }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            33 => {\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).dval =\n                            ((*ee).dval == 0.) as std::os::raw::c_int as\n                                std::os::raw::c_double\n                    }\n                    0 => {\n                        (*ee).ival =\n                            ((*ee).ival == 0) as std::os::raw::c_int as lilint_t\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            43 | _ => { }\n        }\n    } else { ee_paren(ee); };\n}",
    "calls": [
      {
        "caller": "DefId(0:153 ~ c2rust_out[3c70]::lil::ee_unary)",
        "span": "lil.rs:1720:9: 1720:22 (#0)",
        "source": "ee_unary(ee);"
      },
      {
        "caller": "DefId(0:154 ~ c2rust_out[3c70]::lil::ee_muldiv)",
        "span": "lil.rs:1759:5: 1759:18 (#0)",
        "source": "ee_unary(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:124 ~ c2rust_out[3c70]::lil::ee_muldiv)",
    "span": "lil.rs:1758:1: 1976:2 (#0)",
    "pieces": [
      "lil.rs:1758:1: 1762:4 (#0)",
      "lil.rs:1976:1: 1976:2 (#0)"
    ],
    "sub_chunks": [
      7
    ],
    "num_lines": 6,
    "source": "unsafe extern \"C\" fn ee_muldiv(mut ee: *mut expreval_t) {\n    ee_unary(ee);\n    if (*ee).error != 0 { return }\n    ee_skip_spaces(ee);\n   <<chunk 7>>}",
    "calls": [
      {
        "caller": "DefId(0:155 ~ c2rust_out[3c70]::lil::ee_addsub)",
        "span": "lil.rs:1978:5: 1978:19 (#0)",
        "source": "ee_muldiv(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": [
      {
        "chunk_id": 0,
        "span": "lil.rs:1774:9: 1802:2 (#0)",
        "pieces": [
          "lil.rs:1774:9: 1802:2 (#0)"
        ],
        "num_lines": 31,
        "source": "match (*ee).type_0 {\n                    1 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_unary(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => { (*ee).dval = (*ee).dval * odval }\n                            0 => {\n                                (*ee).dval =\n                                    (*ee).ival as std::os::raw::c_double * odval;\n                                (*ee).type_0 = 1 as std::os::raw::c_int\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_unary(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).dval =\n                                    (*ee).dval * oival as std::os::raw::c_double;\n                                (*ee).type_0 = 1 as std::os::raw::c_int\n                            }\n                            0 => { (*ee).ival = (*ee).ival * oival }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }",
        "sub_chunks": [],
        "live_in": [
          "mut ee: *mut lil::_expreval_t",
          "mut odval: f64",
          "mut oival: i64"
        ],
        "live_out": [
          "mut ee: *mut lil::_expreval_t",
          "mut odval: f64",
          "mut oival: i64"
        ]
      },
      {
        "chunk_id": 1,
        "span": "lil.rs:1807:9: 1854:2 (#0)",
        "pieces": [
          "lil.rs:1807:9: 1854:2 (#0)"
        ],
        "num_lines": 52,
        "source": "match (*ee).type_0 {\n                    1 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_unary(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                if (*ee).dval == 0.0f64 {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else {\n                                    (*ee).dval = fmod(odval, (*ee).dval)\n                                }\n                            }\n                            0 => {\n                                if (*ee).ival ==\n                                       0 as std::os::raw::c_int as std::os::raw::c_longlong {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else {\n                                    (*ee).dval =\n                                        fmod(odval,\n                                             (*ee).ival as std::os::raw::c_double)\n                                }\n                                (*ee).type_0 = 1 as std::os::raw::c_int\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_unary(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                if (*ee).dval == 0.0f64 {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else {\n                                    (*ee).dval =\n                                        fmod(oival as std::os::raw::c_double,\n                                             (*ee).dval)\n                                }\n                            }\n                            0 => {\n                                if (*ee).ival ==\n                                       0 as std::os::raw::c_int as std::os::raw::c_longlong {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else { (*ee).ival = oival % (*ee).ival }\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { }\n                }",
        "sub_chunks": [],
        "live_in": [
          "mut ee: *mut lil::_expreval_t",
          "mut odval: f64",
          "mut oival: i64"
        ],
        "live_out": [
          "mut ee: *mut lil::_expreval_t",
          "mut odval: f64",
          "mut oival: i64"
        ]
      },
      {
        "chunk_id": 2,
        "span": "lil.rs:1859:9: 1911:2 (#0)",
        "pieces": [
          "lil.rs:1859:9: 1911:2 (#0)"
        ],
        "num_lines": 53,
        "source": "match (*ee).type_0 {\n                    1 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_unary(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                if (*ee).dval == 0.0f64 {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else { (*ee).dval = odval / (*ee).dval }\n                            }\n                            0 => {\n                                if (*ee).ival ==\n                                       0 as std::os::raw::c_int as std::os::raw::c_longlong {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else {\n                                    (*ee).dval =\n                                        odval / (*ee).ival as std::os::raw::c_double\n                                }\n                                (*ee).type_0 = 1 as std::os::raw::c_int\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_unary(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                if (*ee).dval == 0.0f64 {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else {\n                                    (*ee).dval =\n                                        oival as std::os::raw::c_double / (*ee).dval\n                                }\n                            }\n                            0 => {\n                                if (*ee).ival ==\n                                       0 as std::os::raw::c_int as std::os::raw::c_longlong {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else {\n                                    (*ee).dval =\n                                        oival as std::os::raw::c_double /\n                                            (*ee).ival as std::os::raw::c_double\n                                }\n                                (*ee).type_0 = 1 as std::os::raw::c_int\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { }\n                }",
        "sub_chunks": [],
        "live_in": [
          "mut ee: *mut lil::_expreval_t",
          "mut odval: f64",
          "mut oival: i64"
        ],
        "live_out": [
          "mut ee: *mut lil::_expreval_t",
          "mut odval: f64",
          "mut oival: i64"
        ]
      },
      {
        "chunk_id": 3,
        "span": "lil.rs:1916:9: 1964:2 (#0)",
        "pieces": [
          "lil.rs:1916:9: 1964:2 (#0)"
        ],
        "num_lines": 54,
        "source": "match (*ee).type_0 {\n                    1 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_unary(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                if (*ee).dval == 0.0f64 {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else {\n                                    (*ee).ival =\n                                        (odval / (*ee).dval) as lilint_t\n                                }\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                if (*ee).ival ==\n                                       0 as std::os::raw::c_int as std::os::raw::c_longlong {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else {\n                                    (*ee).ival =\n                                        (odval / (*ee).ival as std::os::raw::c_double)\n                                            as lilint_t\n                                }\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_unary(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                if (*ee).dval == 0.0f64 {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else {\n                                    (*ee).ival =\n                                        (oival as std::os::raw::c_double / (*ee).dval)\n                                            as lilint_t\n                                }\n                                (*ee).type_0 = 0 as std::os::raw::c_int\n                            }\n                            0 => {\n                                if (*ee).ival ==\n                                       0 as std::os::raw::c_int as std::os::raw::c_longlong {\n                                    (*ee).error = 3 as std::os::raw::c_int\n                                } else { (*ee).ival = oival / (*ee).ival }\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }",
        "sub_chunks": [],
        "live_in": [
          "mut ee: *mut lil::_expreval_t",
          "mut odval: f64",
          "mut oival: i64"
        ],
        "live_out": [
          "mut ee: *mut lil::_expreval_t",
          "mut odval: f64",
          "mut oival: i64"
        ]
      },
      {
        "chunk_id": 4,
        "span": "lil.rs:1768:5: 1971:20 (#0)",
        "pieces": [
          "lil.rs:1768:5: 1774:8 (#0)",
          "lil.rs:1804:1: 1807:8 (#0)",
          "lil.rs:1856:1: 1859:8 (#0)",
          "lil.rs:1913:1: 1916:8 (#0)",
          "lil.rs:1966:1: 1971:20 (#0)"
        ],
        "num_lines": 18,
        "source": "let mut odval: std::os::raw::c_double = (*ee).dval;\n        let mut oival: lilint_t = (*ee).ival;\n        match *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int {\n            42 => {\n               <<chunk 0>>            }\n            37 => {\n               <<chunk 1>>            }\n            47 => {\n               <<chunk 2>>            }\n            92 => {\n               <<chunk 3>>            }\n            _ => { }\n        }\n        ee_skip_spaces(ee);",
        "sub_chunks": [
          0,
          1,
          2,
          3
        ],
        "live_in": [
          "mut ee: *mut lil::_expreval_t"
        ],
        "live_out": [
          "mut ee: *mut lil::_expreval_t"
        ]
      },
      {
        "chunk_id": 5,
        "span": "lil.rs:1762:5: 1974:2 (#225)",
        "pieces": [
          "lil.rs:1762:5: 1768:4 (#0)",
          "lil.rs:1973:1: 1974:2 (#0)"
        ],
        "num_lines": 17,
        "source": "while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                             std::os::raw::c_int\n                                                                             as\n                                                                             std::os::raw::c_ulong)\n                                                     as isize) as std::os::raw::c_int)\n                  == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '*' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '/' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '\\\\' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '%' as i32) {\n       <<chunk 4>>    }",
        "sub_chunks": [
          4
        ],
        "live_in": [
          "mut ee: *mut lil::_expreval_t"
        ],
        "live_out": [
          "mut ee: *mut lil::_expreval_t"
        ]
      },
      {
        "chunk_id": 6,
        "span": "lil.rs:1762:5: 1974:2 (#225)",
        "pieces": [
          "lil.rs:1762:5: 1768:4 (#0)",
          "lil.rs:1973:1: 1974:2 (#0)"
        ],
        "num_lines": 17,
        "source": "while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                             std::os::raw::c_int\n                                                                             as\n                                                                             std::os::raw::c_ulong)\n                                                     as isize) as std::os::raw::c_int)\n                  == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '*' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '/' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '\\\\' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '%' as i32) {\n       <<chunk 4>>    }",
        "sub_chunks": [
          4
        ],
        "live_in": [
          "mut ee: *mut lil::_expreval_t"
        ],
        "live_out": [
          "mut ee: *mut lil::_expreval_t"
        ]
      },
      {
        "chunk_id": 7,
        "span": "lil.rs:1762:5: 1974:3 (#0)",
        "pieces": [
          "lil.rs:1761:5: 1761:5 (#0)",
          "lil.rs:1975:1: 1975:1 (#0)"
        ],
        "num_lines": 2,
        "source": "<<chunk 5>>",
        "sub_chunks": [
          5
        ],
        "live_in": [
          "mut ee: *mut lil::_expreval_t"
        ],
        "live_out": [
          "mut ee: *mut lil::_expreval_t"
        ]
      }
    ]
  },
  {
    "func_defid": "DefId(0:125 ~ c2rust_out[3c70]::lil::ee_addsub)",
    "span": "lil.rs:1977:1: 2064:2 (#0)",
    "pieces": [
      "lil.rs:1977:1: 2064:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 88,
    "source": "unsafe extern \"C\" fn ee_addsub(mut ee: *mut expreval_t) {\n    ee_muldiv(ee);\n    ee_skip_spaces(ee);\n    while (*ee).head < (*ee).len && (*ee).error == 0 &&\n              ee_invalidpunct(*(*ee).code.offset((*ee).head.wrapping_add(1 as\n                                                                             std::os::raw::c_int\n                                                                             as\n                                                                             std::os::raw::c_ulong)\n                                                     as isize) as std::os::raw::c_int)\n                  == 0 &&\n              (*(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                   '+' as i32 ||\n                   *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int ==\n                       '-' as i32) {\n        let mut odval: std::os::raw::c_double = (*ee).dval;\n        let mut oival: lilint_t = (*ee).ival;\n        match *(*ee).code.offset((*ee).head as isize) as std::os::raw::c_int {\n            43 => {\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_muldiv(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => { (*ee).dval = (*ee).dval + odval }\n                            0 => {\n                                (*ee).dval =\n                                    (*ee).ival as std::os::raw::c_double + odval;\n                                (*ee).type_0 = 1 as std::os::raw::c_int\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_muldiv(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).dval =\n                                    (*ee).dval + oival as std::os::raw::c_double;\n                                (*ee).type_0 = 1 as std::os::raw::c_int\n                            }\n                            0 => { (*ee).ival = (*ee).ival + oival }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            45 => {\n                match (*ee).type_0 {\n                    1 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_muldiv(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => { (*ee).dval = odval - (*ee).dval }\n                            0 => {\n                                (*ee).dval =\n                                    odval - (*ee).ival as std::os::raw::c_double;\n                                (*ee).type_0 = 1 as std::os::raw::c_int\n                            }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    0 => {\n                        (*ee).head = (*ee).head.wrapping_add(1);\n                        ee_muldiv(ee);\n                        if (*ee).error != 0 { return }\n                        match (*ee).type_0 {\n                            1 => {\n                                (*ee).dval =\n                                    oival as std::os::raw::c_double - (*ee).dval;\n                                (*ee).type_0 = 1 as std::os::raw::c_int\n                            }\n                            0 => { (*ee).ival = oival - (*ee).ival }\n                            _ => { (*ee).error = 2 as std::os::raw::c_int }\n                        }\n                    }\n                    _ => { (*ee).error = 2 as std::os::raw::c_int }\n                }\n            }\n            _ => { }\n        }\n        ee_skip_spaces(ee);\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:156 ~ c2rust_out[3c70]::lil::ee_shift)",
        "span": "lil.rs:2066:5: 2066:19 (#0)",
        "source": "ee_addsub(ee);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:155 ~ c2rust_out[3c70]::lil::lil_write)",
    "span": "lil.rs:3193:1: 3205:2 (#0)",
    "pieces": [
      "lil.rs:3193:1: 3205:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 13,
    "source": "pub unsafe extern \"C\" fn lil_write(mut lil: lil_t,\n                                   mut msg: *const std::os::raw::c_char) {\n    if (*lil).callback[1 as std::os::raw::c_int as usize].is_some() {\n        let mut proc_0: lil_write_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_write_callback_proc_t>((*lil).callback[1\n                                                                                   as\n                                                                                   std::os::raw::c_int\n                                                                                   as\n                                                                                   usize]);\n        proc_0.expect(\"non-null function pointer\")(lil, msg);\n    } else { printf(b\"%s\\x00\" as *const u8 as *const std::os::raw::c_char, msg); };\n}",
    "calls": [
      {
        "caller": "DefId(0:192 ~ c2rust_out[3c70]::lil::fnc_print)",
        "span": "lil.rs:3548:5: 3548:75 (#0)",
        "source": "lil_write(lil, b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:191 ~ c2rust_out[3c70]::lil::fnc_write)",
        "span": "lil.rs:3541:5: 3541:40 (#0)",
        "source": "lil_write(lil, lil_to_string(msg));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:80 ~ c2rust_out[3c70]::lil::lil_free_value)",
    "span": "lil.rs:635:1: 639:2 (#0)",
    "pieces": [
      "lil.rs:635:1: 639:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn lil_free_value(mut val: lil_value_t) {\n    if val.is_null() { return }\n    free((*val).d as *mut std::os::raw::c_void);\n    free(val as *mut std::os::raw::c_void);\n}",
    "calls": [
      {
        "caller": "DefId(0:142 ~ c2rust_out[3c70]::lil::lil_call)",
        "span": "lil.rs:1564:17: 1564:41 (#0)",
        "source": "lil_free_value(argsval);"
      },
      {
        "caller": "DefId(0:135 ~ c2rust_out[3c70]::lil::get_dollarpart)",
        "span": "lil.rs:1165:5: 1165:26 (#0)",
        "source": "lil_free_value(name);"
      },
      {
        "caller": "DefId(0:193 ~ c2rust_out[3c70]::lil::fnc_eval)",
        "span": "lil.rs:3568:9: 3568:29 (#0)",
        "source": "lil_free_value(val);"
      },
      {
        "caller": "DefId(0:116 ~ c2rust_out[3c70]::lil::lil_free_env)",
        "span": "lil.rs:772:5: 772:35 (#0)",
        "source": "lil_free_value((*env).retval);"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3416:13: 3416:33 (#0)",
        "source": "lil_free_value(tmp);"
      },
      {
        "caller": "DefId(0:240 ~ c2rust_out[3c70]::lil::fnc_try)",
        "span": "lil.rs:4536:9: 4536:27 (#0)",
        "source": "lil_free_value(r);"
      },
      {
        "caller": "DefId(0:123 ~ c2rust_out[3c70]::lil::del_func)",
        "span": "lil.rs:857:5: 857:33 (#0)",
        "source": "lil_free_value((*cmd).code);"
      },
      {
        "caller": "DefId(0:177 ~ c2rust_out[3c70]::lil::lil_free)",
        "span": "lil.rs:2981:5: 2981:34 (#0)",
        "source": "lil_free_value((*lil).empty);"
      },
      {
        "caller": "DefId(0:134 ~ c2rust_out[3c70]::lil::get_bracketpart)",
        "span": "lil.rs:1152:9: 1152:29 (#0)",
        "source": "lil_free_value(cmd);"
      },
      {
        "caller": "DefId(0:140 ~ c2rust_out[3c70]::lil::lil_parse)",
        "span": "lil.rs:1392:5: 1392:25 (#0)",
        "source": "lil_free_value(val);"
      },
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:348:5: 348:28 (#0)",
        "source": "lil_free_value(result);"
      },
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2837:5: 2837:26 (#0)",
        "source": "lil_free_value(code);"
      },
      {
        "caller": "DefId(0:181 ~ c2rust_out[3c70]::lil::lil_embedded)",
        "span": "lil.rs:3173:5: 3174:57 (#0)",
        "source": "lil_free_value(lil_parse(lil, lilcode, 0 as std::os::raw::c_int as size_t,\n                             1 as std::os::raw::c_int));"
      },
      {
        "caller": "DefId(0:213 ~ c2rust_out[3c70]::lil::fnc_expr)",
        "span": "lil.rs:4008:9: 4008:29 (#0)",
        "source": "lil_free_value(val);"
      },
      {
        "caller": "DefId(0:219 ~ c2rust_out[3c70]::lil::fnc_if)",
        "span": "lil.rs:4163:5: 4163:25 (#0)",
        "source": "lil_free_value(val);"
      },
      {
        "caller": "DefId(0:122 ~ c2rust_out[3c70]::lil::add_func)",
        "span": "lil.rs:813:9: 813:37 (#0)",
        "source": "lil_free_value((*cmd).code);"
      },
      {
        "caller": "DefId(0:211 ~ c2rust_out[3c70]::lil::fnc_return)",
        "span": "lil.rs:3968:5: 3968:42 (#0)",
        "source": "lil_free_value((*(*lil).env).retval);"
      },
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:337:5: 337:26 (#0)",
        "source": "lil_free_value(args);"
      },
      {
        "caller": "DefId(0:140 ~ c2rust_out[3c70]::lil::lil_parse)",
        "span": "lil.rs:1508:29: 1508:49 (#0)",
        "source": "lil_free_value(val);"
      },
      {
        "caller": "DefId(0:125 ~ c2rust_out[3c70]::lil::lil_set_var)",
        "span": "lil.rs:914:13: 914:38 (#0)",
        "source": "lil_free_value((*var).v);"
      },
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2847:5: 2847:26 (#0)",
        "source": "lil_free_value(code);"
      },
      {
        "caller": "DefId(0:191 ~ c2rust_out[3c70]::lil::fnc_write)",
        "span": "lil.rs:3542:5: 3542:25 (#0)",
        "source": "lil_free_value(msg);"
      },
      {
        "caller": "DefId(0:135 ~ c2rust_out[3c70]::lil::get_dollarpart)",
        "span": "lil.rs:1167:5: 1167:25 (#0)",
        "source": "lil_free_value(tmp);"
      },
      {
        "caller": "DefId(0:212 ~ c2rust_out[3c70]::lil::fnc_result)",
        "span": "lil.rs:3983:9: 3983:46 (#0)",
        "source": "lil_free_value((*(*lil).env).retval);"
      },
      {
        "caller": "DefId(0:221 ~ c2rust_out[3c70]::lil::fnc_for)",
        "span": "lil.rs:4207:5: 4209:63 (#0)",
        "source": "lil_free_value(lil_parse_value(lil,\n                                   *argv.offset(0 as std::os::raw::c_int as isize),\n                                   0 as std::os::raw::c_int));"
      },
      {
        "caller": "DefId(0:125 ~ c2rust_out[3c70]::lil::lil_set_var)",
        "span": "lil.rs:920:17: 922:69 (#0)",
        "source": "lil_free_value(lil_parse(lil, (*var).w,\n                                         0 as std::os::raw::c_int as size_t,\n                                         1 as std::os::raw::c_int));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:137 ~ c2rust_out[3c70]::lil::lil_to_string)",
    "span": "lil.rs:2905:1: 2910:2 (#0)",
    "pieces": [
      "lil.rs:2905:1: 2910:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn lil_to_string(mut val: lil_value_t)\n -> *const std::os::raw::c_char {\n    return if !val.is_null() && (*val).l != 0 {\n               (*val).d as *const std::os::raw::c_char\n           } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char };\n}",
    "calls": [
      {
        "caller": "DefId(0:218 ~ c2rust_out[3c70]::lil::fnc_store)",
        "span": "lil.rs:4120:9: 4120:81 (#0)",
        "source": "buffer = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:191 ~ c2rust_out[3c70]::lil::fnc_write)",
        "span": "lil.rs:3541:5: 3541:40 (#0)",
        "source": "lil_write(lil, lil_to_string(msg));"
      },
      {
        "caller": "DefId(0:187 ~ c2rust_out[3c70]::lil::fnc_unusedname)",
        "span": "lil.rs:3467:33: 3469:2 (#0)",
        "source": "{\n    lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize))\n}"
      },
      {
        "caller": "DefId(0:217 ~ c2rust_out[3c70]::lil::fnc_read)",
        "span": "lil.rs:4072:9: 4074:74 (#0)",
        "source": "f =\n            fopen(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                  b\"rb\\x00\" as *const u8 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:218 ~ c2rust_out[3c70]::lil::fnc_store)",
        "span": "lil.rs:4116:9: 4118:74 (#0)",
        "source": "f =\n            fopen(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                  b\"wb\\x00\" as *const u8 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3417:13: 3417:54 (#0)",
        "source": "cmd = add_func(lil, lil_to_string(name));"
      },
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2833:5: 2833:35 (#0)",
        "source": "ee.code = lil_to_string(code);"
      },
      {
        "caller": "DefId(0:239 ~ c2rust_out[3c70]::lil::fnc_split)",
        "span": "lil.rs:4510:5: 4510:74 (#0)",
        "source": "str = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:246 ~ c2rust_out[3c70]::lil::fnc_catcher)",
        "span": "lil.rs:4662:9: 4663:76 (#0)",
        "source": "let mut catcher: *const std::os::raw::c_char =\n            lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:186 ~ c2rust_out[3c70]::lil::fnc_rename)",
        "span": "lil.rs:3440:5: 3440:78 (#0)",
        "source": "oldname = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:204 ~ c2rust_out[3c70]::lil::fnc_append)",
        "span": "lil.rs:3802:9: 3802:82 (#0)",
        "source": "varname = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3327:9: 3327:83 (#0)",
        "source": "target_1 = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:206 ~ c2rust_out[3c70]::lil::fnc_filter)",
        "span": "lil.rs:3865:65: 3868:6 (#0)",
        "source": "{\n        base = 1 as std::os::raw::c_int;\n        varname = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize))\n    }"
      },
      {
        "caller": "DefId(0:218 ~ c2rust_out[3c70]::lil::fnc_store)",
        "span": "lil.rs:4104:9: 4114:92 (#0)",
        "source": "proc_0.expect(\"non-null function pointer\")(lil,\n                                                   lil_to_string(*argv.offset(0\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  isize)),\n                                                   lil_to_string(*argv.offset(1\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  isize)));"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3425:13: 3425:54 (#0)",
        "source": "cmd = add_func(lil, lil_to_string(name));"
      },
      {
        "caller": "DefId(0:229 ~ c2rust_out[3c70]::lil::fnc_substr)",
        "span": "lil.rs:4277:5: 4279:20 (#0)",
        "source": "start =\n        atoll(lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize))) as\n            size_t;"
      },
      {
        "caller": "DefId(0:230 ~ c2rust_out[3c70]::lil::fnc_strpos)",
        "span": "lil.rs:4312:5: 4314:80 (#0)",
        "source": "str =\n        strstr(hay.offset(min as isize),\n               lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:168 ~ c2rust_out[3c70]::lil::lil_to_double)",
        "span": "lil.rs:2914:5: 2914:37 (#0)",
        "source": "return atof(lil_to_string(val));"
      },
      {
        "caller": "DefId(0:216 ~ c2rust_out[3c70]::lil::fnc_dec)",
        "span": "lil.rs:4046:5: 4046:73 (#0)",
        "source": "return real_inc(lil, lil_to_string(*arg0), -decrement_value as f32);"
      },
      {
        "caller": "DefId(0:169 ~ c2rust_out[3c70]::lil::lil_to_integer)",
        "span": "lil.rs:2918:5: 2918:38 (#0)",
        "source": "return atoll(lil_to_string(val));"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3352:9: 3353:86 (#0)",
        "source": "(*lil).dollarprefix =\n            strclone(lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:243 ~ c2rust_out[3c70]::lil::fnc_source)",
        "span": "lil.rs:4584:69: 4599:6 (#0)",
        "source": "{\n        let mut proc_0: lil_source_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_source_callback_proc_t>((*lil).callback[4\n                                                                                    as\n                                                                                    std::os::raw::c_int\n                                                                                    as\n                                                                                    usize]);\n        buffer =\n            proc_0.expect(\"non-null function pointer\")(lil,\n                                                       lil_to_string(*argv.offset(0\n                                                                                      as\n                                                                                      std::os::raw::c_int\n                                                                                      as\n                                                                                      isize)))\n    }"
      },
      {
        "caller": "DefId(0:239 ~ c2rust_out[3c70]::lil::fnc_split)",
        "span": "lil.rs:4504:9: 4504:78 (#0)",
        "source": "sep = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:217 ~ c2rust_out[3c70]::lil::fnc_read)",
        "span": "lil.rs:4056:69: 4071:6 (#0)",
        "source": "{\n        let mut proc_0: lil_read_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_read_callback_proc_t>((*lil).callback[2\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  usize]);\n        buffer =\n            proc_0.expect(\"non-null function pointer\")(lil,\n                                                       lil_to_string(*argv.offset(0\n                                                                                      as\n                                                                                      std::os::raw::c_int\n                                                                                      as\n                                                                                      isize)))\n    }"
      },
      {
        "caller": "DefId(0:243 ~ c2rust_out[3c70]::lil::fnc_source)",
        "span": "lil.rs:4615:9: 4617:74 (#0)",
        "source": "f =\n            fopen(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                  b\"rb\\x00\" as *const u8 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:230 ~ c2rust_out[3c70]::lil::fnc_strpos)",
        "span": "lil.rs:4303:5: 4303:74 (#0)",
        "source": "hay = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:238 ~ c2rust_out[3c70]::lil::fnc_repstr)",
        "span": "lil.rs:4459:5: 4459:84 (#0)",
        "source": "src = strclone(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:229 ~ c2rust_out[3c70]::lil::fnc_substr)",
        "span": "lil.rs:4274:5: 4274:74 (#0)",
        "source": "str = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:236 ~ c2rust_out[3c70]::lil::fnc_strcmp)",
        "span": "lil.rs:4421:5: 4422:89 (#0)",
        "source": "let result = strcmp(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                        lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:238 ~ c2rust_out[3c70]::lil::fnc_repstr)",
        "span": "lil.rs:4455:5: 4455:73 (#0)",
        "source": "to = lil_to_string(*argv.offset(2 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:230 ~ c2rust_out[3c70]::lil::fnc_strpos)",
        "span": "lil.rs:4305:9: 4307:24 (#0)",
        "source": "min =\n            atoll(lil_to_string(*argv.offset(2 as std::os::raw::c_int as isize))) as\n                size_t;"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3223:9: 3225:86 (#0)",
        "source": "func =\n            find_cmd(lil,\n                     lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:236 ~ c2rust_out[3c70]::lil::fnc_strcmp)",
        "span": "lil.rs:4421:5: 4422:89 (#0)",
        "source": "let result = strcmp(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                        lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:234 ~ c2rust_out[3c70]::lil::fnc_ltrim)",
        "span": "lil.rs:4400:29: 4403:23 (#0)",
        "source": "{\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3311:9: 3311:83 (#0)",
        "source": "target_0 = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:204 ~ c2rust_out[3c70]::lil::fnc_append)",
        "span": "lil.rs:3796:5: 3796:78 (#0)",
        "source": "varname = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:247 ~ c2rust_out[3c70]::lil::fnc_watch)",
        "span": "lil.rs:4678:5: 4681:48 (#0)",
        "source": "wcode =\n        lil_to_string(*argv.offset(argc.wrapping_sub(1 as std::os::raw::c_int as\n                                                         std::os::raw::c_ulong) as\n                                       isize));"
      },
      {
        "caller": "DefId(0:225 ~ c2rust_out[3c70]::lil::fnc_charat)",
        "span": "lil.rs:4246:5: 4246:74 (#0)",
        "source": "str = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:238 ~ c2rust_out[3c70]::lil::fnc_repstr)",
        "span": "lil.rs:4454:5: 4454:75 (#0)",
        "source": "from = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:233 ~ c2rust_out[3c70]::lil::fnc_trim)",
        "span": "lil.rs:4388:29: 4391:23 (#0)",
        "source": "{\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3403:9: 3405:86 (#0)",
        "source": "cmd =\n            add_func(lil,\n                     lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3235:9: 3237:86 (#0)",
        "source": "func =\n            find_cmd(lil,\n                     lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:215 ~ c2rust_out[3c70]::lil::fnc_inc)",
        "span": "lil.rs:4029:5: 4034:48 (#0)",
        "source": "return real_inc(lil,\n                    lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                    if argc > 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n                        lil_to_double(*argv.offset(1 as std::os::raw::c_int as isize))\n                    } else { 1 as std::os::raw::c_int as std::os::raw::c_double } as\n                        std::os::raw::c_float);"
      },
      {
        "caller": "DefId(0:186 ~ c2rust_out[3c70]::lil::fnc_rename)",
        "span": "lil.rs:3441:5: 3441:78 (#0)",
        "source": "newname = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:241 ~ c2rust_out[3c70]::lil::fnc_error)",
        "span": "lil.rs:4548:79: 4550:20 (#0)",
        "source": "{\n                      lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize))\n                  }"
      },
      {
        "caller": "DefId(0:234 ~ c2rust_out[3c70]::lil::fnc_ltrim)",
        "span": "lil.rs:4396:5: 4403:77 (#0)",
        "source": "return real_trim(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                     if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n                         b\" \\x0c\\n\\r\\t\\x0b\\x00\" as *const u8 as\n                             *const std::os::raw::c_char\n                     } else {\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }, 1 as std::os::raw::c_int, 0 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:210 ~ c2rust_out[3c70]::lil::fnc_foreach)",
        "span": "lil.rs:3940:9: 3940:82 (#0)",
        "source": "varname = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:235 ~ c2rust_out[3c70]::lil::fnc_rtrim)",
        "span": "lil.rs:4408:5: 4415:77 (#0)",
        "source": "return real_trim(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                     if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n                         b\" \\x0c\\n\\r\\t\\x0b\\x00\" as *const u8 as\n                             *const std::os::raw::c_char\n                     } else {\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }, 0 as std::os::raw::c_int, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:229 ~ c2rust_out[3c70]::lil::fnc_substr)",
        "span": "lil.rs:4281:69: 4284:10 (#0)",
        "source": "{\n            atoll(lil_to_string(*argv.offset(2 as std::os::raw::c_int as isize))) as\n                size_t\n        }"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3298:9: 3298:81 (#0)",
        "source": "target = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:228 ~ c2rust_out[3c70]::lil::fnc_codeat)",
        "span": "lil.rs:4258:5: 4258:74 (#0)",
        "source": "str = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:170 ~ c2rust_out[3c70]::lil::lil_to_boolean)",
        "span": "lil.rs:2922:13: 2922:42 (#0)",
        "source": "unsafe { lil_to_string(val) }"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3213:5: 3213:77 (#0)",
        "source": "type_0 = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:243 ~ c2rust_out[3c70]::lil::fnc_source)",
        "span": "lil.rs:4599:76: 4614:6 (#0)",
        "source": "{\n        let mut proc_1: lil_read_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_read_callback_proc_t>((*lil).callback[2\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  usize]);\n        buffer =\n            proc_1.expect(\"non-null function pointer\")(lil,\n                                                       lil_to_string(*argv.offset(0\n                                                                                      as\n                                                                                      std::os::raw::c_int\n                                                                                      as\n                                                                                      isize)))\n    }"
      },
      {
        "caller": "DefId(0:233 ~ c2rust_out[3c70]::lil::fnc_trim)",
        "span": "lil.rs:4384:5: 4391:77 (#0)",
        "source": "return real_trim(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                     if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n                         b\" \\x0c\\n\\r\\t\\x0b\\x00\" as *const u8 as\n                             *const std::os::raw::c_char\n                     } else {\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }, 1 as std::os::raw::c_int, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:138 ~ c2rust_out[3c70]::lil::lil_subst_to_list)",
        "span": "lil.rs:1334:5: 1334:39 (#0)",
        "source": "(*lil).code = lil_to_string(code);"
      },
      {
        "caller": "DefId(0:218 ~ c2rust_out[3c70]::lil::fnc_store)",
        "span": "lil.rs:4104:9: 4114:92 (#0)",
        "source": "proc_0.expect(\"non-null function pointer\")(lil,\n                                                   lil_to_string(*argv.offset(0\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  isize)),\n                                                   lil_to_string(*argv.offset(1\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  isize)));"
      },
      {
        "caller": "DefId(0:235 ~ c2rust_out[3c70]::lil::fnc_rtrim)",
        "span": "lil.rs:4412:29: 4415:23 (#0)",
        "source": "{\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:73 ~ c2rust_out[3c70]::lil::alloc_value_len)",
    "span": "lil.rs:502:1: 526:2 (#0)",
    "pieces": [
      "lil.rs:502:1: 526:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 25,
    "source": "unsafe extern \"C\" fn alloc_value_len(mut str: *const std::os::raw::c_char,\n                                     mut len: size_t) -> lil_value_t {\n    let mut val: lil_value_t =\n        calloc(1 as std::os::raw::c_int as std::os::raw::c_ulong,\n               ::std::mem::size_of::<_lil_value_t>() as std::os::raw::c_ulong) as\n            lil_value_t;\n    if val.is_null() { return 0 as lil_value_t }\n    if !str.is_null() {\n        (*val).l = len;\n        (*val).d =\n            malloc(len.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong)) as\n                *mut std::os::raw::c_char;\n        if (*val).d.is_null() {\n            free(val as *mut std::os::raw::c_void);\n            return 0 as lil_value_t\n        }\n        memcpy((*val).d as *mut std::os::raw::c_void, str as *const std::os::raw::c_void,\n               len);\n        *(*val).d.offset(len as isize) = 0 as std::os::raw::c_int as std::os::raw::c_char\n    } else {\n        (*val).l = 0 as std::os::raw::c_int as size_t;\n        (*val).d = 0 as *mut std::os::raw::c_char\n    }\n    return val;\n}",
    "calls": [
      {
        "caller": "DefId(0:172 ~ c2rust_out[3c70]::lil::lil_alloc_string_len)",
        "span": "lil.rs:2952:5: 2954:6 (#0)",
        "source": "unsafe {\n        alloc_value_len(c_string.as_ptr(), len.try_into().unwrap())\n    }"
      },
      {
        "caller": "DefId(0:136 ~ c2rust_out[3c70]::lil::next_word)",
        "span": "lil.rs:1277:12: 1289:6 (#0)",
        "source": "{\n        start = (*lil).head;\n        while (*lil).head < (*lil).clen &&\n                  isspace(*(*lil).code.offset((*lil).head as isize) as\n                              std::os::raw::c_int) == 0 &&\n                  islilspecial(*(*lil).code.offset((*lil).head as isize)) == 0\n              {\n            (*lil).head = (*lil).head.wrapping_add(1)\n        }\n        val =\n            alloc_value_len((*lil).code.offset(start as isize),\n                            (*lil).head.wrapping_sub(start))\n    }"
      },
      {
        "caller": "DefId(0:101 ~ c2rust_out[3c70]::lil::alloc_value)",
        "span": "lil.rs:529:5: 532:90 (#0)",
        "source": "return alloc_value_len(str,\n                           if !str.is_null() {\n                               strlen(str)\n                           } else { 0 as std::os::raw::c_int as std::os::raw::c_ulong });"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:74 ~ c2rust_out[3c70]::lil::alloc_value)",
    "span": "lil.rs:527:1: 533:2 (#0)",
    "pieces": [
      "lil.rs:527:1: 533:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 7,
    "source": "unsafe extern \"C\" fn alloc_value(mut str: *const std::os::raw::c_char)\n -> lil_value_t {\n    return alloc_value_len(str,\n                           if !str.is_null() {\n                               strlen(str)\n                           } else { 0 as std::os::raw::c_int as std::os::raw::c_ulong });\n}",
    "calls": [
      {
        "caller": "DefId(0:199 ~ c2rust_out[3c70]::lil::fnc_count)",
        "span": "lil.rs:3746:18: 3748:6 (#0)",
        "source": "{\n        return alloc_value(b\"0\\x00\" as *const u8 as *const std::os::raw::c_char)\n    }"
      },
      {
        "caller": "DefId(0:140 ~ c2rust_out[3c70]::lil::lil_parse)",
        "span": "lil.rs:1517:19: 1517:68 (#0)",
        "source": "{ alloc_value(0 as *const std::os::raw::c_char) }"
      },
      {
        "caller": "DefId(0:176 ~ c2rust_out[3c70]::lil::lil_alloc_integer)",
        "span": "lil.rs:2972:9: 2972:33 (#0)",
        "source": "return alloc_value(ptr);"
      },
      {
        "caller": "DefId(0:136 ~ c2rust_out[3c70]::lil::next_word)",
        "span": "lil.rs:1292:19: 1292:68 (#0)",
        "source": "{ alloc_value(0 as *const std::os::raw::c_char) }"
      },
      {
        "caller": "DefId(0:173 ~ c2rust_out[3c70]::lil::lil_alloc_double)",
        "span": "lil.rs:2963:5: 2963:43 (#0)",
        "source": "return alloc_value(buff.as_mut_ptr());"
      },
      {
        "caller": "DefId(0:114 ~ c2rust_out[3c70]::lil::lil_list_to_value)",
        "span": "lil.rs:717:5: 717:78 (#0)",
        "source": "let mut val: lil_value_t = alloc_value(0 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:171 ~ c2rust_out[3c70]::lil::lil_alloc_string)",
        "span": "lil.rs:2944:5: 2944:29 (#0)",
        "source": "return alloc_value(str);"
      },
      {
        "caller": "DefId(0:141 ~ c2rust_out[3c70]::lil::lil_parse_value)",
        "span": "lil.rs:1523:61: 1525:6 (#0)",
        "source": "{\n        return alloc_value(0 as *const std::os::raw::c_char)\n    }"
      },
      {
        "caller": "DefId(0:193 ~ c2rust_out[3c70]::lil::fnc_eval)",
        "span": "lil.rs:3558:9: 3558:82 (#0)",
        "source": "let mut val: lil_value_t = alloc_value(0 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:130 ~ c2rust_out[3c70]::lil::lil_new)",
        "span": "lil.rs:1014:5: 1014:66 (#0)",
        "source": "(*lil).empty = alloc_value(0 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:213 ~ c2rust_out[3c70]::lil::fnc_expr)",
        "span": "lil.rs:3998:9: 3998:82 (#0)",
        "source": "let mut val: lil_value_t = alloc_value(0 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:188 ~ c2rust_out[3c70]::lil::fnc_quote)",
        "span": "lil.rs:3479:5: 3479:55 (#0)",
        "source": "r = alloc_value(0 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:136 ~ c2rust_out[3c70]::lil::next_word)",
        "span": "lil.rs:1210:9: 1210:61 (#0)",
        "source": "val = alloc_value(0 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:199 ~ c2rust_out[3c70]::lil::fnc_count)",
        "span": "lil.rs:3753:5: 3753:43 (#0)",
        "source": "return alloc_value(buff.as_mut_ptr());"
      },
      {
        "caller": "DefId(0:135 ~ c2rust_out[3c70]::lil::get_dollarpart)",
        "span": "lil.rs:1163:5: 1163:44 (#0)",
        "source": "tmp = alloc_value((*lil).dollarprefix);"
      },
      {
        "caller": "DefId(0:136 ~ c2rust_out[3c70]::lil::next_word)",
        "span": "lil.rs:1181:9: 1181:61 (#0)",
        "source": "val = alloc_value(0 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:134 ~ c2rust_out[3c70]::lil::get_bracketpart)",
        "span": "lil.rs:1124:9: 1124:45 (#0)",
        "source": "cmd = alloc_value(std::ptr::null());"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:141 ~ c2rust_out[3c70]::lil::lil_alloc_string)",
    "span": "lil.rs:2942:1: 2945:2 (#0)",
    "pieces": [
      "lil.rs:2942:1: 2945:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn lil_alloc_string(mut str: *const std::os::raw::c_char)\n -> lil_value_t {\n    return alloc_value(str);\n}",
    "calls": [
      {
        "caller": "DefId(0:388 ~ c2rust_out[3c70]::main::fnc_readline)",
        "span": "main.rs:242:5: 242:39 (#0)",
        "source": "retval = lil_alloc_string(buffer);"
      },
      {
        "caller": "DefId(0:209 ~ c2rust_out[3c70]::lil::fnc_concat)",
        "span": "lil.rs:3916:5: 3916:79 (#0)",
        "source": "r = lil_alloc_string(b\"\\x00\" as *const u8 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:238 ~ c2rust_out[3c70]::lil::fnc_repstr)",
        "span": "lil.rs:4490:5: 4490:31 (#0)",
        "source": "r = lil_alloc_string(src);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3340:45: 3342:17 (#0)",
        "source": "{\n                   lil_alloc_string((*lil).err_msg)\n               }"
      },
      {
        "caller": "DefId(0:225 ~ c2rust_out[3c70]::lil::fnc_charat)",
        "span": "lil.rs:4251:5: 4251:49 (#0)",
        "source": "return lil_alloc_string(chstr.as_mut_ptr());"
      },
      {
        "caller": "DefId(0:232 ~ c2rust_out[3c70]::lil::real_trim)",
        "span": "lil.rs:4376:9: 4376:33 (#0)",
        "source": "r = lil_alloc_string(s);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3347:70: 3349:10 (#0)",
        "source": "{\n            return lil_alloc_string((*lil).dollarprefix)\n        }"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3363:9: 3363:60 (#0)",
        "source": "return lil_alloc_string(unsafe { (*lil).catcher });"
      },
      {
        "caller": "DefId(0:229 ~ c2rust_out[3c70]::lil::fnc_substr)",
        "span": "lil.rs:4287:5: 4287:79 (#0)",
        "source": "r = lil_alloc_string(b\"\\x00\" as *const u8 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3366:9: 3366:61 (#0)",
        "source": "return lil_alloc_string(unsafe { (*lil).rootcode });"
      },
      {
        "caller": "DefId(0:191 ~ c2rust_out[3c70]::lil::fnc_write)",
        "span": "lil.rs:3534:5: 3534:83 (#0)",
        "source": "let mut msg: lil_value_t = lil_alloc_string(0 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:387 ~ c2rust_out[3c70]::main::fnc_system)",
        "span": "main.rs:205:9: 205:34 (#0)",
        "source": "r = lil_alloc_string(rv);"
      },
      {
        "caller": "DefId(0:239 ~ c2rust_out[3c70]::lil::fnc_split)",
        "span": "lil.rs:4509:5: 4509:81 (#0)",
        "source": "val = lil_alloc_string(b\"\\x00\" as *const u8 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:246 ~ c2rust_out[3c70]::lil::fnc_catcher)",
        "span": "lil.rs:4659:66: 4661:6 (#0)",
        "source": "{\n        return lil_alloc_string((*lil).catcher)\n    }"
      },
      {
        "caller": "DefId(0:186 ~ c2rust_out[3c70]::lil::fnc_rename)",
        "span": "lil.rs:3455:5: 3455:40 (#0)",
        "source": "r = lil_alloc_string((*func).name);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3385:51: 3387:13 (#0)",
        "source": "{\n               lil_alloc_string(unsafe { (*(*env_2).func).name })\n           }"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3299:59: 3302:17 (#0)",
        "source": "{\n                   lil_alloc_string(b\"1\\x00\" as *const u8 as\n                                        *const std::os::raw::c_char)\n               }"
      },
      {
        "caller": "DefId(0:217 ~ c2rust_out[3c70]::lil::fnc_read)",
        "span": "lil.rs:4087:5: 4087:34 (#0)",
        "source": "r = lil_alloc_string(buffer);"
      },
      {
        "caller": "DefId(0:222 ~ c2rust_out[3c70]::lil::fnc_char)",
        "span": "lil.rs:4238:5: 4238:45 (#0)",
        "source": "return lil_alloc_string(s.as_mut_ptr());"
      },
      {
        "caller": "DefId(0:232 ~ c2rust_out[3c70]::lil::real_trim)",
        "span": "lil.rs:4355:23: 4361:10 (#0)",
        "source": "{\n            r =\n                lil_alloc_string(if *str.offset(base as isize) as std::os::raw::c_int\n                                        != 0 {\n                                     str.offset(base as isize)\n                                 } else { 0 as *const std::os::raw::c_char })\n        }"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3350:9: 3350:53 (#0)",
        "source": "r_0 = lil_alloc_string((*lil).dollarprefix);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3215:8: 3218:6 (#0)",
        "source": "{\n        return lil_alloc_string(b\"0.1\\x00\" as *const u8 as\n                                    *const std::os::raw::c_char)\n    }"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3412:13: 3414:67 (#0)",
        "source": "let mut tmp: lil_value_t =\n                lil_alloc_string(b\"args\\x00\" as *const u8 as\n                                     *const std::os::raw::c_char);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:163 ~ c2rust_out[3c70]::lil::fnc_write)",
    "span": "lil.rs:3531:1: 3544:2 (#0)",
    "pieces": [
      "lil.rs:3531:1: 3544:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 14,
    "source": "unsafe extern \"C\" fn fnc_write(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut i: size_t = 0;\n    let mut msg: lil_value_t = lil_alloc_string(0 as *const std::os::raw::c_char);\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < argc {\n        if i != 0 { lil_append_char(msg, ' ' as i32 as std::os::raw::c_char); }\n        lil_append_val(msg, *argv.offset(i as isize));\n        i = i.wrapping_add(1)\n    }\n    lil_write(lil, lil_to_string(msg));\n    lil_free_value(msg);\n    return 0 as lil_value_t;\n}",
    "calls": [
      {
        "caller": "DefId(0:192 ~ c2rust_out[3c70]::lil::fnc_print)",
        "span": "lil.rs:3547:5: 3547:32 (#0)",
        "source": "fnc_write(lil, argc, argv);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:164 ~ c2rust_out[3c70]::lil::fnc_print)",
    "span": "lil.rs:3545:1: 3550:2 (#0)",
    "pieces": [
      "lil.rs:3545:1: 3550:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "unsafe extern \"C\" fn fnc_print(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    fnc_write(lil, argc, argv);\n    lil_write(lil, b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n    return 0 as lil_value_t;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:139 ~ c2rust_out[3c70]::lil::lil_to_integer)",
    "span": "lil.rs:2917:1: 2919:2 (#0)",
    "pieces": [
      "lil.rs:2917:1: 2919:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "pub unsafe extern \"C\" fn lil_to_integer(mut val: lil_value_t) -> lilint_t {\n    return atoll(lil_to_string(val));\n}",
    "calls": [
      {
        "caller": "DefId(0:228 ~ c2rust_out[3c70]::lil::fnc_codeat)",
        "span": "lil.rs:4259:5: 4259:87 (#0)",
        "source": "index = lil_to_integer(*argv.offset(1 as std::os::raw::c_int as isize)) as size_t;"
      },
      {
        "caller": "DefId(0:384 ~ c2rust_out[3c70]::main::do_exit)",
        "span": "main.rs:147:5: 147:60 (#0)",
        "source": "exit_code = lil_to_integer(val) as std::os::raw::c_int;"
      },
      {
        "caller": "DefId(0:225 ~ c2rust_out[3c70]::lil::fnc_charat)",
        "span": "lil.rs:4247:5: 4247:87 (#0)",
        "source": "index = lil_to_integer(*argv.offset(1 as std::os::raw::c_int as isize)) as size_t;"
      },
      {
        "caller": "DefId(0:386 ~ c2rust_out[3c70]::main::fnc_writechar)",
        "span": "main.rs:177:5: 177:133 (#0)",
        "source": "let char_value = lil_to_integer(*argv.offset(0 as std::os::raw::c_int as isize)) as std::os::raw::c_char as std::os::raw::c_int;"
      },
      {
        "caller": "DefId(0:205 ~ c2rust_out[3c70]::lil::fnc_slice)",
        "span": "lil.rs:3835:69: 3837:10 (#0)",
        "source": "{\n            lil_to_integer(*argv.offset(2 as std::os::raw::c_int as isize))\n        }"
      },
      {
        "caller": "DefId(0:222 ~ c2rust_out[3c70]::lil::fnc_char)",
        "span": "lil.rs:4234:5: 4236:34 (#0)",
        "source": "s[0 as std::os::raw::c_int as usize] =\n        lil_to_integer(*argv.offset(0 as std::os::raw::c_int as isize)) as\n            std::os::raw::c_char;"
      },
      {
        "caller": "DefId(0:202 ~ c2rust_out[3c70]::lil::fnc_index)",
        "span": "lil.rs:3762:5: 3762:87 (#0)",
        "source": "index = lil_to_integer(*argv.offset(1 as std::os::raw::c_int as isize)) as size_t;"
      },
      {
        "caller": "DefId(0:205 ~ c2rust_out[3c70]::lil::fnc_slice)",
        "span": "lil.rs:3829:5: 3829:76 (#0)",
        "source": "from = lil_to_integer(*argv.offset(1 as std::os::raw::c_int as isize));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:82 ~ c2rust_out[3c70]::lil::lil_free_list)",
    "span": "lil.rs:651:1: 661:2 (#0)",
    "pieces": [
      "lil.rs:651:1: 661:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 11,
    "source": "pub unsafe extern \"C\" fn lil_free_list(mut list: lil_list_t) {\n    let mut i: size_t = 0;\n    if list.is_null() { return }\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < (*list).c {\n        lil_free_value(*(*list).v.offset(i as isize));\n        i = i.wrapping_add(1)\n    }\n    free((*list).v as *mut std::os::raw::c_void);\n    free(list as *mut std::os::raw::c_void);\n}",
    "calls": [
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:334:5: 334:28 (#0)",
        "source": "lil_free_list(arglist);"
      },
      {
        "caller": "DefId(0:210 ~ c2rust_out[3c70]::lil::fnc_foreach)",
        "span": "lil.rs:3961:5: 3961:25 (#0)",
        "source": "lil_free_list(list);"
      },
      {
        "caller": "DefId(0:202 ~ c2rust_out[3c70]::lil::fnc_index)",
        "span": "lil.rs:3766:5: 3766:25 (#0)",
        "source": "lil_free_list(list);"
      },
      {
        "caller": "DefId(0:203 ~ c2rust_out[3c70]::lil::fnc_indexof)",
        "span": "lil.rs:3783:5: 3783:25 (#0)",
        "source": "lil_free_list(list);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3257:9: 3257:30 (#0)",
        "source": "lil_free_list(funcs);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3289:9: 3289:31 (#0)",
        "source": "lil_free_list(vars_0);"
      },
      {
        "caller": "DefId(0:210 ~ c2rust_out[3c70]::lil::fnc_foreach)",
        "span": "lil.rs:3962:5: 3962:26 (#0)",
        "source": "lil_free_list(rlist);"
      },
      {
        "caller": "DefId(0:142 ~ c2rust_out[3c70]::lil::lil_call)",
        "span": "lil.rs:1565:17: 1565:37 (#0)",
        "source": "lil_free_list(args);"
      },
      {
        "caller": "DefId(0:239 ~ c2rust_out[3c70]::lil::fnc_split)",
        "span": "lil.rs:4523:5: 4523:25 (#0)",
        "source": "lil_free_list(list);"
      },
      {
        "caller": "DefId(0:244 ~ c2rust_out[3c70]::lil::fnc_lmap)",
        "span": "lil.rs:4649:5: 4649:25 (#0)",
        "source": "lil_free_list(list);"
      },
      {
        "caller": "DefId(0:206 ~ c2rust_out[3c70]::lil::fnc_filter)",
        "span": "lil.rs:3885:5: 3885:25 (#0)",
        "source": "lil_free_list(list);"
      },
      {
        "caller": "DefId(0:140 ~ c2rust_out[3c70]::lil::lil_parse)",
        "span": "lil.rs:1388:5: 1388:26 (#0)",
        "source": "lil_free_list(words);"
      },
      {
        "caller": "DefId(0:206 ~ c2rust_out[3c70]::lil::fnc_filter)",
        "span": "lil.rs:3887:5: 3887:29 (#0)",
        "source": "lil_free_list(filtered);"
      },
      {
        "caller": "DefId(0:205 ~ c2rust_out[3c70]::lil::fnc_slice)",
        "span": "lil.rs:3849:5: 3849:26 (#0)",
        "source": "lil_free_list(slice);"
      },
      {
        "caller": "DefId(0:140 ~ c2rust_out[3c70]::lil::lil_parse)",
        "span": "lil.rs:1503:27: 1503:48 (#0)",
        "source": "lil_free_list(words);"
      },
      {
        "caller": "DefId(0:123 ~ c2rust_out[3c70]::lil::del_func)",
        "span": "lil.rs:856:37: 856:68 (#0)",
        "source": "lil_free_list((*cmd).argnames);"
      },
      {
        "caller": "DefId(0:204 ~ c2rust_out[3c70]::lil::fnc_append)",
        "span": "lil.rs:3813:5: 3813:25 (#0)",
        "source": "lil_free_list(list);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3274:9: 3274:29 (#0)",
        "source": "lil_free_list(vars);"
      },
      {
        "caller": "DefId(0:207 ~ c2rust_out[3c70]::lil::fnc_list)",
        "span": "lil.rs:3901:5: 3901:25 (#0)",
        "source": "lil_free_list(list);"
      },
      {
        "caller": "DefId(0:139 ~ c2rust_out[3c70]::lil::lil_subst_to_value)",
        "span": "lil.rs:1351:9: 1351:30 (#0)",
        "source": "lil_free_list(words);"
      },
      {
        "caller": "DefId(0:205 ~ c2rust_out[3c70]::lil::fnc_slice)",
        "span": "lil.rs:3847:5: 3847:25 (#0)",
        "source": "lil_free_list(list);"
      },
      {
        "caller": "DefId(0:199 ~ c2rust_out[3c70]::lil::fnc_count)",
        "span": "lil.rs:3752:5: 3752:25 (#0)",
        "source": "lil_free_list(list);"
      },
      {
        "caller": "DefId(0:122 ~ c2rust_out[3c70]::lil::add_func)",
        "span": "lil.rs:812:41: 812:72 (#0)",
        "source": "lil_free_list((*cmd).argnames);"
      },
      {
        "caller": "DefId(0:197 ~ c2rust_out[3c70]::lil::fnc_enveval)",
        "span": "lil.rs:3705:9: 3705:31 (#0)",
        "source": "lil_free_list(invars);"
      },
      {
        "caller": "DefId(0:197 ~ c2rust_out[3c70]::lil::fnc_enveval)",
        "span": "lil.rs:3706:33: 3706:56 (#0)",
        "source": "lil_free_list(outvars);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:81 ~ c2rust_out[3c70]::lil::lil_alloc_list)",
    "span": "lil.rs:641:1: 648:2 (#0)",
    "pieces": [
      "lil.rs:641:1: 648:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "pub unsafe extern \"C\" fn lil_alloc_list() -> lil_list_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    list =\n        calloc(1 as std::os::raw::c_int as std::os::raw::c_ulong,\n               ::std::mem::size_of::<_lil_list_t>() as std::os::raw::c_ulong) as\n            lil_list_t;\n    (*list).v = 0 as *mut lil_value_t;\n    return list;\n}",
    "calls": [
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3261:9: 3261:59 (#0)",
        "source": "let mut vars: *mut _lil_list_t = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:313:5: 313:58 (#0)",
        "source": "let mut arglist: *mut _lil_list_t = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3248:9: 3248:60 (#0)",
        "source": "let mut funcs: *mut _lil_list_t = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:239 ~ c2rust_out[3c70]::lil::fnc_split)",
        "span": "lil.rs:4511:5: 4511:51 (#0)",
        "source": "let list: *mut _lil_list_t = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:137 ~ c2rust_out[3c70]::lil::substitute)",
        "span": "lil.rs:1295:5: 1295:50 (#0)",
        "source": "let mut words: lil_list_t = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:206 ~ c2rust_out[3c70]::lil::fnc_filter)",
        "span": "lil.rs:3870:5: 3870:55 (#0)",
        "source": "let filtered: *mut _lil_list_t = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:142 ~ c2rust_out[3c70]::lil::lil_call)",
        "span": "lil.rs:1551:17: 1551:67 (#0)",
        "source": "let mut args: *mut _lil_list_t = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3279:9: 3279:61 (#0)",
        "source": "let mut vars_0: *mut _lil_list_t = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:205 ~ c2rust_out[3c70]::lil::fnc_slice)",
        "span": "lil.rs:3840:5: 3840:52 (#0)",
        "source": "let slice: *mut _lil_list_t = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:138 ~ c2rust_out[3c70]::lil::lil_subst_to_list)",
        "span": "lil.rs:1339:26: 1339:51 (#0)",
        "source": "words = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:207 ~ c2rust_out[3c70]::lil::fnc_list)",
        "span": "lil.rs:3892:5: 3892:55 (#0)",
        "source": "let mut list: *mut _lil_list_t = lil_alloc_list();"
      },
      {
        "caller": "DefId(0:210 ~ c2rust_out[3c70]::lil::fnc_foreach)",
        "span": "lil.rs:3944:5: 3944:52 (#0)",
        "source": "let rlist: *mut _lil_list_t = lil_alloc_list();"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:104 ~ c2rust_out[3c70]::lil::skip_spaces)",
    "span": "lil.rs:1037:1: 1118:2 (#0)",
    "pieces": [
      "lil.rs:1037:1: 1118:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 82,
    "source": "unsafe extern \"C\" fn skip_spaces(mut lil: lil_t) {\n    while (*lil).head < (*lil).clen {\n        if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n               '#' as i32 {\n            if *(*lil).code.offset((*lil).head.wrapping_add(1 as std::os::raw::c_int\n                                                                as\n                                                                std::os::raw::c_ulong)\n                                       as isize) as std::os::raw::c_int == '#' as i32\n                   &&\n                   *(*lil).code.offset((*lil).head.wrapping_add(2 as\n                                                                    std::os::raw::c_int\n                                                                    as\n                                                                    std::os::raw::c_ulong)\n                                           as isize) as std::os::raw::c_int !=\n                       '#' as i32 {\n                (*lil).head =\n                    ((*lil).head as\n                         std::os::raw::c_ulong).wrapping_add(2 as std::os::raw::c_int as\n                                                         std::os::raw::c_ulong) as\n                        size_t as size_t;\n                while (*lil).head < (*lil).clen {\n                    if *(*lil).code.offset((*lil).head as isize) as\n                           std::os::raw::c_int == '#' as i32 &&\n                           *(*lil).code.offset((*lil).head.wrapping_add(1 as\n                                                                            std::os::raw::c_int\n                                                                            as\n                                                                            std::os::raw::c_ulong)\n                                                   as isize) as std::os::raw::c_int ==\n                               '#' as i32 &&\n                           *(*lil).code.offset((*lil).head.wrapping_add(2 as\n                                                                            std::os::raw::c_int\n                                                                            as\n                                                                            std::os::raw::c_ulong)\n                                                   as isize) as std::os::raw::c_int !=\n                               '#' as i32 {\n                        (*lil).head =\n                            ((*lil).head as\n                                 std::os::raw::c_ulong).wrapping_add(2 as std::os::raw::c_int\n                                                                 as\n                                                                 std::os::raw::c_ulong)\n                                as size_t as size_t;\n                        break ;\n                    } else { (*lil).head = (*lil).head.wrapping_add(1) }\n                }\n            } else {\n                while (*lil).head < (*lil).clen && ateol(lil) == 0 {\n                    (*lil).head = (*lil).head.wrapping_add(1)\n                }\n            }\n        } else if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                      '\\\\' as i32 &&\n                      (*(*lil).code.offset((*lil).head.wrapping_add(1 as\n                                                                        std::os::raw::c_int\n                                                                        as\n                                                                        std::os::raw::c_ulong)\n                                               as isize) as std::os::raw::c_int ==\n                           '\\r' as i32 ||\n                           *(*lil).code.offset((*lil).head.wrapping_add(1 as\n                                                                            std::os::raw::c_int\n                                                                            as\n                                                                            std::os::raw::c_ulong)\n                                                   as isize) as std::os::raw::c_int ==\n                               '\\n' as i32) {\n            (*lil).head = (*lil).head.wrapping_add(1);\n            while (*lil).head < (*lil).clen && ateol(lil) != 0 {\n                (*lil).head = (*lil).head.wrapping_add(1)\n            }\n        } else if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                      '\\r' as i32 ||\n                      *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int\n                          == '\\n' as i32 {\n            if !((*lil).ignoreeol != 0) { break ; }\n            (*lil).head = (*lil).head.wrapping_add(1)\n        } else {\n            if !(isspace(*(*lil).code.offset((*lil).head as isize) as\n                             std::os::raw::c_int) != 0) {\n                break ;\n            }\n            (*lil).head = (*lil).head.wrapping_add(1)\n        }\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:136 ~ c2rust_out[3c70]::lil::next_word)",
        "span": "lil.rs:1173:5: 1173:22 (#0)",
        "source": "skip_spaces(lil);"
      },
      {
        "caller": "DefId(0:140 ~ c2rust_out[3c70]::lil::lil_parse)",
        "span": "lil.rs:1376:1: 1376:18 (#0)",
        "source": "skip_spaces(lil);"
      },
      {
        "caller": "DefId(0:137 ~ c2rust_out[3c70]::lil::substitute)",
        "span": "lil.rs:1297:9: 1297:26 (#0)",
        "source": "skip_spaces(lil);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:108 ~ c2rust_out[3c70]::lil::substitute)",
    "span": "lil.rs:1294:1: 1323:2 (#0)",
    "pieces": [
      "lil.rs:1294:1: 1323:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 28,
    "source": "unsafe extern \"C\" fn substitute(mut lil: lil_t) -> lil_list_t {\n    let mut words: lil_list_t = lil_alloc_list();\n    skip_spaces(lil);\n    while (*lil).head < (*lil).clen && ateol(lil) == 0 && (*lil).error == 0 {\n        let mut w: lil_value_t = alloc_value(0 as *const std::os::raw::c_char);\n        loop  {\n            let mut head: size_t = (*lil).head;\n            let mut wp: lil_value_t = next_word(lil);\n            if head == (*lil).head {\n                /* something wrong, the parser can't proceed */\n                lil_free_value(w);\n                lil_free_value(wp);\n                lil_free_list(words);\n                return 0 as lil_list_t\n            }\n            lil_append_val(w, wp);\n            lil_free_value(wp);\n            if !((*lil).head < (*lil).clen && ateol(lil) == 0 &&\n                     isspace(*(*lil).code.offset((*lil).head as isize) as\n                                 std::os::raw::c_int) == 0 && (*lil).error == 0) {\n                break ;\n            }\n        }\n        skip_spaces(lil);\n        lil_list_append(words, w);\n    }\n    return words;\n}",
    "calls": [
      {
        "caller": "DefId(0:138 ~ c2rust_out[3c70]::lil::lil_subst_to_list)",
        "span": "lil.rs:1338:5: 1338:29 (#0)",
        "source": "words = substitute(lil);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:109 ~ c2rust_out[3c70]::lil::lil_subst_to_list)",
    "span": "lil.rs:1326:1: 1345:2 (#0)",
    "pieces": [
      "lil.rs:1326:1: 1345:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 20,
    "source": "pub unsafe extern \"C\" fn lil_subst_to_list(mut lil: lil_t,\n                                           mut code: lil_value_t)\n -> lil_list_t {\n    let mut save_code: *const std::os::raw::c_char = (*lil).code;\n    let mut save_clen: size_t = (*lil).clen;\n    let mut save_head: size_t = (*lil).head;\n    let mut save_igeol: std::os::raw::c_int = (*lil).ignoreeol;\n    let mut words: lil_list_t = 0 as *mut _lil_list_t;\n    (*lil).code = lil_to_string(code);\n    (*lil).clen = (*code).l;\n    (*lil).head = 0 as std::os::raw::c_int as size_t;\n    (*lil).ignoreeol = 1 as std::os::raw::c_int;\n    words = substitute(lil);\n    if words.is_null() { words = lil_alloc_list() }\n    (*lil).code = save_code;\n    (*lil).clen = save_clen;\n    (*lil).head = save_head;\n    (*lil).ignoreeol = save_igeol;\n    return words;\n}",
    "calls": [
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3401:9: 3402:85 (#0)",
        "source": "fargs =\n            lil_subst_to_list(lil, *argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:202 ~ c2rust_out[3c70]::lil::fnc_index)",
        "span": "lil.rs:3761:5: 3761:84 (#0)",
        "source": "list = lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3422:13: 3424:84 (#0)",
        "source": "fargs =\n                lil_subst_to_list(lil,\n                                  *argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:204 ~ c2rust_out[3c70]::lil::fnc_append)",
        "span": "lil.rs:3806:5: 3806:62 (#0)",
        "source": "list = lil_subst_to_list(lil, lil_get_var(lil, varname));"
      },
      {
        "caller": "DefId(0:199 ~ c2rust_out[3c70]::lil::fnc_count)",
        "span": "lil.rs:3749:5: 3749:84 (#0)",
        "source": "list = lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:205 ~ c2rust_out[3c70]::lil::fnc_slice)",
        "span": "lil.rs:3833:5: 3833:84 (#0)",
        "source": "list = lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:139 ~ c2rust_out[3c70]::lil::lil_subst_to_value)",
        "span": "lil.rs:1349:9: 1349:62 (#0)",
        "source": "let words: lil_list_t = lil_subst_to_list(lil, code);"
      },
      {
        "caller": "DefId(0:197 ~ c2rust_out[3c70]::lil::fnc_enveval)",
        "span": "lil.rs:3638:69: 3643:10 (#0)",
        "source": "{\n            codeindex = 2 as std::os::raw::c_int;\n            outvars =\n                lil_subst_to_list(lil,\n                                  *argv.offset(1 as std::os::raw::c_int as isize))\n        }"
      },
      {
        "caller": "DefId(0:210 ~ c2rust_out[3c70]::lil::fnc_foreach)",
        "span": "lil.rs:3945:5: 3945:67 (#0)",
        "source": "list = lil_subst_to_list(lil, *argv.offset(listidx as isize));"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3415:13: 3415:49 (#0)",
        "source": "fargs = lil_subst_to_list(lil, tmp);"
      },
      {
        "caller": "DefId(0:203 ~ c2rust_out[3c70]::lil::fnc_indexof)",
        "span": "lil.rs:3772:5: 3772:56 (#0)",
        "source": "let list = lil_subst_to_list(lil, *argv.offset(0));"
      },
      {
        "caller": "DefId(0:197 ~ c2rust_out[3c70]::lil::fnc_enveval)",
        "span": "lil.rs:3623:9: 3624:85 (#0)",
        "source": "invars =\n            lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:244 ~ c2rust_out[3c70]::lil::fnc_lmap)",
        "span": "lil.rs:4639:5: 4639:84 (#0)",
        "source": "list = lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:206 ~ c2rust_out[3c70]::lil::fnc_filter)",
        "span": "lil.rs:3869:5: 3869:64 (#0)",
        "source": "list = lil_subst_to_list(lil, *argv.offset(base as isize));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:171 ~ c2rust_out[3c70]::lil::fnc_count)",
    "span": "lil.rs:3742:1: 3754:2 (#0)",
    "pieces": [
      "lil.rs:3742:1: 3754:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 13,
    "source": "unsafe extern \"C\" fn fnc_count(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    let mut buff: [std::os::raw::c_char; 64] = [0; 64];\n    if argc == 0 {\n        return alloc_value(b\"0\\x00\" as *const u8 as *const std::os::raw::c_char)\n    }\n    list = lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));\n    sprintf(buff.as_mut_ptr(), b\"%u\\x00\" as *const u8 as *const std::os::raw::c_char,\n            (*list).c as std::os::raw::c_uint);\n    lil_free_list(list);\n    return alloc_value(buff.as_mut_ptr());\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:77 ~ c2rust_out[3c70]::lil::lil_append_string_len)",
    "span": "lil.rs:575:1: 596:2 (#0)",
    "pieces": [
      "lil.rs:575:1: 596:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 22,
    "source": "pub unsafe extern \"C\" fn lil_append_string_len(mut val: lil_value_t,\n                                               mut s: *const std::os::raw::c_char,\n                                               mut len: size_t)\n -> std::os::raw::c_int {\n    let mut new: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    if s.is_null() || *s.offset(0 as std::os::raw::c_int as isize) == 0 {\n        return 1 as std::os::raw::c_int\n    }\n    new =\n        realloc((*val).d as *mut std::os::raw::c_void,\n                (*val).l.wrapping_add(len).wrapping_add(1 as std::os::raw::c_int as\n                                                            std::os::raw::c_ulong)) as\n            *mut std::os::raw::c_char;\n    if new.is_null() { return 0 as std::os::raw::c_int }\n    memcpy(new.offset((*val).l as isize) as *mut std::os::raw::c_void,\n           s as *const std::os::raw::c_void,\n           len.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong));\n    (*val).d = new;\n    (*val).l =\n        ((*val).l as std::os::raw::c_ulong).wrapping_add(len) as size_t as size_t;\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:105 ~ c2rust_out[3c70]::lil::lil_append_string)",
        "span": "lil.rs:601:5: 601:53 (#0)",
        "source": "return lil_append_string_len(val, s, strlen(s));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:66 ~ c2rust_out[3c70]::lil::strclone)",
    "span": "lil.rs:408:1: 416:2 (#0)",
    "pieces": [
      "lil.rs:408:1: 416:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "unsafe extern \"C\" fn strclone(mut s: *const std::os::raw::c_char)\n -> *mut std::os::raw::c_char {\n    let mut len: size_t =\n        strlen(s).wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong);\n    let mut ns: *mut std::os::raw::c_char = malloc(len) as *mut std::os::raw::c_char;\n    if ns.is_null() { return 0 as *mut std::os::raw::c_char }\n    memcpy(ns as *mut std::os::raw::c_void, s as *const std::os::raw::c_void, len);\n    return ns;\n}",
    "calls": [
      {
        "caller": "DefId(0:238 ~ c2rust_out[3c70]::lil::fnc_repstr)",
        "span": "lil.rs:4459:5: 4459:84 (#0)",
        "source": "src = strclone(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:145 ~ c2rust_out[3c70]::lil::lil_set_error_at)",
        "span": "lil.rs:1611:5: 1614:82 (#0)",
        "source": "(*lil).err_msg =\n        strclone(if !msg.is_null() {\n                     msg\n                 } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char });"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3352:9: 3353:86 (#0)",
        "source": "(*lil).dollarprefix =\n            strclone(lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:122 ~ c2rust_out[3c70]::lil::add_func)",
        "span": "lil.rs:823:5: 823:34 (#0)",
        "source": "(*cmd).name = strclone(name);"
      },
      {
        "caller": "DefId(0:97 ~ c2rust_out[3c70]::lil::hm_put)",
        "span": "lil.rs:471:5: 471:29 (#0)",
        "source": "*fresh2 = strclone(key);"
      },
      {
        "caller": "DefId(0:144 ~ c2rust_out[3c70]::lil::lil_set_error)",
        "span": "lil.rs:1599:5: 1602:82 (#0)",
        "source": "(*lil).err_msg =\n        strclone(if !msg.is_null() {\n                     msg\n                 } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char });"
      },
      {
        "caller": "DefId(0:246 ~ c2rust_out[3c70]::lil::fnc_catcher)",
        "span": "lil.rs:4667:16: 4669:14 (#0)",
        "source": "{\n                strclone(catcher)\n            }"
      },
      {
        "caller": "DefId(0:232 ~ c2rust_out[3c70]::lil::real_trim)",
        "span": "lil.rs:4366:9: 4366:49 (#0)",
        "source": "s = strclone(str.offset(base as isize));"
      },
      {
        "caller": "DefId(0:130 ~ c2rust_out[3c70]::lil::lil_new)",
        "span": "lil.rs:1015:5: 1016:75 (#0)",
        "source": "(*lil).dollarprefix =\n        strclone(b\"set \\x00\" as *const u8 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:186 ~ c2rust_out[3c70]::lil::fnc_rename)",
        "span": "lil.rs:3456:64: 3461:6 (#0)",
        "source": "{\n        hm_put(&mut (*lil).cmdmap, oldname, 0 as *mut std::os::raw::c_void);\n        hm_put(&mut (*lil).cmdmap, newname, func as *mut std::os::raw::c_void);\n        free((*func).name as *mut std::os::raw::c_void);\n        (*func).name = strclone(newname)\n    }"
      },
      {
        "caller": "DefId(0:181 ~ c2rust_out[3c70]::lil::lil_embedded)",
        "span": "lil.rs:3179:16: 3179:81 (#0)",
        "source": "{ strclone(b\"\\x00\" as *const u8 as *const std::os::raw::c_char) }"
      },
      {
        "caller": "DefId(0:125 ~ c2rust_out[3c70]::lil::lil_set_var)",
        "span": "lil.rs:947:5: 947:31 (#0)",
        "source": "*fresh11 = strclone(name);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:218 ~ c2rust_out[3c70]::lil::fnc_catcher)",
    "span": "lil.rs:4657:1: 4672:2 (#0)",
    "pieces": [
      "lil.rs:4657:1: 4672:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 16,
    "source": "unsafe extern \"C\" fn fnc_catcher(mut lil: lil_t, mut argc: size_t,\n                                 mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc == 0 as std::os::raw::c_int as std::os::raw::c_ulong {\n        return lil_alloc_string((*lil).catcher)\n    } else {\n        let mut catcher: *const std::os::raw::c_char =\n            lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));\n        free((*lil).catcher as *mut std::os::raw::c_void);\n        (*lil).catcher =\n            if *catcher.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int != 0\n               {\n                strclone(catcher)\n            } else { 0 as *mut std::os::raw::c_char }\n    }\n    return 0 as lil_value_t;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:111 ~ c2rust_out[3c70]::lil::lil_parse)",
    "span": "lil.rs:1357:1: 1518:2 (#0)",
    "pieces": [
      "lil.rs:1357:1: 1362:4 (#0)",
      "lil.rs:1399:1: 1399:4 (#0)",
      "lil.rs:1490:1: 1490:4 (#0)",
      "lil.rs:1518:1: 1518:2 (#0)"
    ],
    "sub_chunks": [
      0,
      1,
      2
    ],
    "num_lines": 9,
    "source": "pub unsafe extern \"C\" fn lil_parse(mut lil: lil_t,\n                                   mut code: *const std::os::raw::c_char,\n                                   mut codelen: size_t,\n                                   mut funclevel: std::os::raw::c_int)\n -> lil_value_t {\n   <<chunk 0>>   <<chunk 1>>   <<chunk 2>>}",
    "calls": [
      {
        "caller": "DefId(0:243 ~ c2rust_out[3c70]::lil::fnc_source)",
        "span": "lil.rs:4630:5: 4630:94 (#0)",
        "source": "r = lil_parse(lil, buffer, 0 as std::os::raw::c_int as size_t, 0 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:141 ~ c2rust_out[3c70]::lil::lil_parse_value)",
        "span": "lil.rs:1526:5: 1526:58 (#0)",
        "source": "return lil_parse(lil, (*val).d, (*val).l, funclevel);"
      },
      {
        "caller": "DefId(0:181 ~ c2rust_out[3c70]::lil::lil_embedded)",
        "span": "lil.rs:3173:5: 3174:57 (#0)",
        "source": "lil_free_value(lil_parse(lil, lilcode, 0 as std::os::raw::c_int as size_t,\n                             1 as std::os::raw::c_int));"
      },
      {
        "caller": "DefId(0:125 ~ c2rust_out[3c70]::lil::lil_set_var)",
        "span": "lil.rs:920:17: 922:69 (#0)",
        "source": "lil_free_value(lil_parse(lil, (*var).w,\n                                         0 as std::os::raw::c_int as size_t,\n                                         1 as std::os::raw::c_int));"
      },
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:345:5: 346:95 (#0)",
        "source": "result =\n        lil_parse(lil, tmpcode, 0 as std::os::raw::c_int as size_t, 1 as std::os::raw::c_int);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": [
      {
        "chunk_id": 0,
        "span": "lil.rs:1362:5: 1397:28 (#0)",
        "pieces": [
          "lil.rs:1362:5: 1397:28 (#0)"
        ],
        "num_lines": 15,
        "source": "let mut save_code: *const std::os::raw::c_char = (*lil).code;\n    let mut save_clen: size_t = (*lil).clen;\n    let mut save_head: size_t = (*lil).head;\n    let mut val: lil_value_t = 0 as lil_value_t;\n    let mut words: lil_list_t = 0 as lil_list_t;\n    if save_code.is_null() { (*lil).rootcode = code }\n    (*lil).code = code;\n    (*lil).clen = if codelen != 0 { codelen } else { strlen(code) };\n    (*lil).head = 0 as std::os::raw::c_int as size_t;\n    skip_spaces(lil);\n    (*lil).parse_depth = (*lil).parse_depth.wrapping_add(1);\n    if (*lil).parse_depth == 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n        (*lil).error = 0 as std::os::raw::c_int\n    }\n    if funclevel != 0 { (*(*lil).env).breakrun = 0 as std::os::raw::c_int }",
        "sub_chunks": [],
        "live_in": [
          "mut lil: *mut lil::_lil_t",
          "mut code: *const i8",
          "mut codelen: u64",
          "mut funclevel: i32"
        ],
        "live_out": [
          "mut lil: *mut lil::_lil_t",
          "mut code: *const i8",
          "mut codelen: u64",
          "mut funclevel: i32",
          "save_code: *const i8",
          "save_clen: u64",
          "save_head: u64",
          "mut val: *mut lil::_lil_value_t",
          "mut words: *mut lil::_lil_list_t"
        ]
      },
      {
        "chunk_id": 1,
        "span": "lil.rs:1399:5: 1488:2 (#0)",
        "pieces": [
          "lil.rs:1399:5: 1488:2 (#0)"
        ],
        "num_lines": 145,
        "source": "while (*lil).head < (*lil).clen && (*lil).error == 0 {\n        if !words.is_null() { lil_free_list(words); }\n        if !val.is_null() { lil_free_value(val); }\n        val = 0 as lil_value_t;\n        words = substitute(lil);\n        if words.is_null() || (*lil).error != 0 { break ; }\n        if (*words).c != 0 {\n            let mut cmd: lil_func_t =\n                find_cmd(lil,\n                         lil_to_string(*(*words).v.offset(0 as std::os::raw::c_int as\n                                                              isize)));\n            if cmd.is_null() {\n                if (**(*words).v.offset(0 as std::os::raw::c_int as isize)).l != 0 {\n                    if !(*lil).catcher.is_null() {\n                        if (*lil).in_catcher < 16384 as std::os::raw::c_int {\n                            let mut args: lil_value_t =\n                                0 as *mut _lil_value_t;\n                            (*lil).in_catcher += 1;\n                            lil_push_env(lil);\n                            (*(*lil).env).catcher_for =\n                                *(*words).v.offset(0 as std::os::raw::c_int as isize);\n                            args = lil_list_to_value(words, 1 as std::os::raw::c_int);\n                            lil_set_var(lil,\n                                        b\"args\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char, args,\n                                        2 as std::os::raw::c_int);\n                            lil_free_value(args);\n                            val =\n                                lil_parse(lil, (*lil).catcher,\n                                          0 as std::os::raw::c_int as size_t,\n                                          1 as std::os::raw::c_int);\n                            lil_pop_env(lil);\n                            (*lil).in_catcher -= 1\n                        } else {\n                            let mut msg: *mut std::os::raw::c_char =\n                                malloc((**(*words).v.offset(0 as std::os::raw::c_int\n                                                                as\n                                                                isize)).l.wrapping_add(64\n                                                                                           as\n                                                                                           std::os::raw::c_int\n                                                                                           as\n                                                                                           std::os::raw::c_ulong))\n                                    as *mut std::os::raw::c_char;\n                            sprintf(msg,\n                                    b\"catcher limit reached while trying to call unknown function %s\\x00\"\n                                        as *const u8 as *const std::os::raw::c_char,\n                                    (**(*words).v.offset(0 as std::os::raw::c_int as\n                                                             isize)).d);\n                            lil_set_error_at(lil, (*lil).head, msg);\n                            free(msg as *mut std::os::raw::c_void);\n                            break ;\n                        }\n                    } else {\n                        let mut msg_0: *mut std::os::raw::c_char =\n                            malloc((**(*words).v.offset(0 as std::os::raw::c_int as\n                                                            isize)).l.wrapping_add(32\n                                                                                       as\n                                                                                       std::os::raw::c_int\n                                                                                       as\n                                                                                       std::os::raw::c_ulong))\n                                as *mut std::os::raw::c_char;\n                        sprintf(msg_0,\n                                b\"unknown function %s\\x00\" as *const u8 as\n                                    *const std::os::raw::c_char,\n                                (**(*words).v.offset(0 as std::os::raw::c_int as\n                                                         isize)).d);\n                        lil_set_error_at(lil, (*lil).head, msg_0);\n                        free(msg_0 as *mut std::os::raw::c_void);\n                        break ;\n                    }\n                }\n            }\n            if !cmd.is_null() {\n                if (*cmd).proc_0.is_some() {\n                    let mut shead: size_t = (*lil).head;\n                    val =\n                        (*cmd).proc_0.expect(\"non-null function pointer\")(lil,\n                                                                          (*words).c.wrapping_sub(1\n                                                                                                      as\n                                                                                                      std::os::raw::c_int\n                                                                                                      as\n                                                                                                      std::os::raw::c_ulong),\n                                                                          (*words).v.offset(1\n                                                                                                as\n                                                                                                std::os::raw::c_int\n                                                                                                as\n                                                                                                isize));\n                    if (*lil).error == 2 as std::os::raw::c_int {\n                        (*lil).error = 1 as std::os::raw::c_int;\n                        (*lil).err_head = shead\n                    }\n                } else {\n                    lil_push_env(lil);\n                    (*(*lil).env).func = cmd;\n                    if (*(*cmd).argnames).c ==\n                           1 as std::os::raw::c_int as std::os::raw::c_ulong &&\n                           strcmp(lil_to_string(*(*(*cmd).argnames).v.offset(0\n                                                                                 as\n                                                                                 std::os::raw::c_int\n                                                                                 as\n                                                                                 isize)),\n                                  b\"args\\x00\" as *const u8 as\n                                      *const std::os::raw::c_char) == 0 {\n                        let mut args_0: lil_value_t =\n                            lil_list_to_value(words, 1 as std::os::raw::c_int);\n                        lil_set_var(lil,\n                                    b\"args\\x00\" as *const u8 as\n                                        *const std::os::raw::c_char, args_0,\n                                    2 as std::os::raw::c_int);\n                        lil_free_value(args_0);\n                    } else {\n                        let mut i: size_t = 0;\n                        i = 0 as std::os::raw::c_int as size_t;\n                        while i < (*(*cmd).argnames).c {\n                            lil_set_var(lil,\n                                        lil_to_string(*(*(*cmd).argnames).v.offset(i\n                                                                                       as\n                                                                                       isize)),\n                                        if i <\n                                               (*words).c.wrapping_sub(1 as\n                                                                           std::os::raw::c_int\n                                                                           as\n                                                                           std::os::raw::c_ulong)\n                                           {\n                                            *(*words).v.offset(i.wrapping_add(1\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  std::os::raw::c_ulong)\n                                                                   as isize)\n                                        } else { (*lil).empty },\n                                        2 as std::os::raw::c_int);\n                            i = i.wrapping_add(1)\n                        }\n                    }\n                    val = lil_parse_value(lil, (*cmd).code, 1 as std::os::raw::c_int);\n                    lil_pop_env(lil);\n                }\n            }\n        }\n        if (*(*lil).env).breakrun != 0 { break ; }\n        skip_spaces(lil);\n        while ateol(lil) != 0 { (*lil).head = (*lil).head.wrapping_add(1) }\n        skip_spaces(lil);\n    }",
        "sub_chunks": [],
        "live_in": [
          "mut lil: *mut lil::_lil_t",
          "mut code: *const i8",
          "mut val: *mut lil::_lil_value_t",
          "mut words: *mut lil::_lil_list_t"
        ],
        "live_out": [
          "mut lil: *mut lil::_lil_t",
          "mut code: *const i8",
          "mut val: *mut lil::_lil_value_t",
          "mut words: *mut lil::_lil_list_t"
        ]
      },
      {
        "chunk_id": 2,
        "span": "lil.rs:1490:5: 1517:69 (#0)",
        "pieces": [
          "lil.rs:1490:5: 1517:69 (#0)"
        ],
        "num_lines": 28,
        "source": "if (*lil).error != 0 &&\n           (*lil).callback[5 as std::os::raw::c_int as usize].is_some() &&\n           (*lil).parse_depth == 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n        let mut proc_0: lil_error_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_error_callback_proc_t>((*lil).callback[5\n                                                                                   as\n                                                                                   std::os::raw::c_int\n                                                                                   as\n                                                                                   usize]);\n        proc_0.expect(\"non-null function pointer\")(lil, (*lil).err_head,\n                                                   (*lil).err_msg);\n    }\n    if !words.is_null() { lil_free_list(words); }\n    (*lil).code = save_code;\n    (*lil).clen = save_clen;\n    (*lil).head = save_head;\n    if funclevel != 0 && (*(*lil).env).retval_set != 0 {\n        if !val.is_null() { lil_free_value(val); }\n        val = (*(*lil).env).retval;\n        (*(*lil).env).retval = 0 as lil_value_t;\n        (*(*lil).env).retval_set = 0 as std::os::raw::c_int;\n        (*(*lil).env).breakrun = 0 as std::os::raw::c_int\n    }\n    (*lil).parse_depth = (*lil).parse_depth.wrapping_sub(1);\n    return if !val.is_null() {\n               val\n           } else { alloc_value(0 as *const std::os::raw::c_char) };",
        "sub_chunks": [],
        "live_in": [
          "mut lil: *mut lil::_lil_t",
          "mut code: *const i8",
          "mut funclevel: i32",
          "save_code: *const i8",
          "save_clen: u64",
          "save_head: u64",
          "mut val: *mut lil::_lil_value_t",
          "mut words: *mut lil::_lil_list_t"
        ],
        "live_out": [
          "mut lil: *mut lil::_lil_t",
          "mut code: *const i8",
          "mut funclevel: i32"
        ]
      }
    ]
  },
  {
    "func_defid": "DefId(0:112 ~ c2rust_out[3c70]::lil::lil_parse_value)",
    "span": "lil.rs:1520:1: 1527:2 (#0)",
    "pieces": [
      "lil.rs:1520:1: 1527:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 8,
    "source": "pub unsafe extern \"C\" fn lil_parse_value(mut lil: lil_t, mut val: lil_value_t,\n                                         mut funclevel: std::os::raw::c_int)\n -> lil_value_t {\n    if val.is_null() || (*val).d.is_null() || (*val).l == 0 {\n        return alloc_value(0 as *const std::os::raw::c_char)\n    }\n    return lil_parse(lil, (*val).d, (*val).l, funclevel);\n}",
    "calls": [
      {
        "caller": "DefId(0:134 ~ c2rust_out[3c70]::lil::get_bracketpart)",
        "span": "lil.rs:1151:9: 1151:48 (#0)",
        "source": "let val = lil_parse_value(lil, cmd, 0);"
      },
      {
        "caller": "DefId(0:193 ~ c2rust_out[3c70]::lil::fnc_eval)",
        "span": "lil.rs:3553:66: 3556:6 (#0)",
        "source": "{\n        return lil_parse_value(lil, *argv.offset(0 as std::os::raw::c_int as isize),\n                               0 as std::os::raw::c_int)\n    }"
      },
      {
        "caller": "DefId(0:142 ~ c2rust_out[3c70]::lil::lil_call)",
        "span": "lil.rs:1580:13: 1580:77 (#0)",
        "source": "r = lil_parse_value(lil, (*cmd).code, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:219 ~ c2rust_out[3c70]::lil::fnc_if)",
        "span": "lil.rs:4149:15: 4154:6 (#0)",
        "source": "{\n        r =\n            lil_parse_value(lil,\n                            *argv.offset((base + 1 as std::os::raw::c_int) as isize),\n                            0 as std::os::raw::c_int)\n    }"
      },
      {
        "caller": "DefId(0:135 ~ c2rust_out[3c70]::lil::get_dollarpart)",
        "span": "lil.rs:1166:5: 1166:63 (#0)",
        "source": "val = lil_parse_value(lil, tmp, 0 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:219 ~ c2rust_out[3c70]::lil::fnc_if)",
        "span": "lil.rs:4157:6: 4162:6 (#0)",
        "source": "{\n        r =\n            lil_parse_value(lil,\n                            *argv.offset((base + 2 as std::os::raw::c_int) as isize),\n                            0 as std::os::raw::c_int)\n    }"
      },
      {
        "caller": "DefId(0:240 ~ c2rust_out[3c70]::lil::fnc_try)",
        "span": "lil.rs:4531:5: 4533:51 (#0)",
        "source": "r =\n        lil_parse_value(lil, *argv.offset(0 as std::os::raw::c_int as isize),\n                        0 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:221 ~ c2rust_out[3c70]::lil::fnc_for)",
        "span": "lil.rs:4207:5: 4209:63 (#0)",
        "source": "lil_free_value(lil_parse_value(lil,\n                                   *argv.offset(0 as std::os::raw::c_int as isize),\n                                   0 as std::os::raw::c_int));"
      },
      {
        "caller": "DefId(0:240 ~ c2rust_out[3c70]::lil::fnc_try)",
        "span": "lil.rs:4537:69: 4541:10 (#0)",
        "source": "{\n            r =\n                lil_parse_value(lil, *argv.offset(1 as std::os::raw::c_int as isize),\n                                0 as std::os::raw::c_int)\n        }"
      },
      {
        "caller": "DefId(0:193 ~ c2rust_out[3c70]::lil::fnc_eval)",
        "span": "lil.rs:3567:9: 3567:65 (#0)",
        "source": "r = lil_parse_value(lil, val, 0 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:198 ~ c2rust_out[3c70]::lil::fnc_jaileval)",
        "span": "lil.rs:3736:5: 3738:51 (#0)",
        "source": "r =\n        lil_parse_value(sublil, *argv.offset(base as isize),\n                        1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:197 ~ c2rust_out[3c70]::lil::fnc_enveval)",
        "span": "lil.rs:3655:5: 3657:51 (#0)",
        "source": "r =\n        lil_parse_value(lil, *argv.offset(codeindex as isize),\n                        0 as std::os::raw::c_int);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:140 ~ c2rust_out[3c70]::lil::lil_to_boolean)",
    "span": "lil.rs:2921:1: 2939:2 (#0)",
    "pieces": [
      "lil.rs:2921:1: 2939:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 19,
    "source": "pub unsafe extern \"C\" fn lil_to_boolean(mut val: lil_value_t) -> std::os::raw::c_int {\n    let mut s: *const std::os::raw::c_char = lil_to_string(val);\n    let mut i: size_t = 0;\n    let mut dots: size_t = 0 as std::os::raw::c_int as size_t;\n    if *s.offset(0 as std::os::raw::c_int as isize) == 0 { return 0 as std::os::raw::c_int }\n    i = 0 as std::os::raw::c_int as size_t;\n    while *s.offset(i as isize) != 0 {\n        if *s.offset(i as isize) as std::os::raw::c_int != '0' as i32 &&\n               *s.offset(i as isize) as std::os::raw::c_int != '.' as i32 {\n            return 1 as std::os::raw::c_int\n        }\n        if *s.offset(i as isize) as std::os::raw::c_int == '.' as i32 {\n            if dots != 0 { return 1 as std::os::raw::c_int }\n            dots = 1 as std::os::raw::c_int as size_t\n        }\n        i = i.wrapping_add(1)\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:219 ~ c2rust_out[3c70]::lil::fnc_if)",
        "span": "lil.rs:4146:5: 4146:37 (#0)",
        "source": "let mut v = lil_to_boolean(val);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:143 ~ c2rust_out[3c70]::lil::lil_alloc_double)",
    "span": "lil.rs:2958:1: 2964:2 (#0)",
    "pieces": [
      "lil.rs:2958:1: 2964:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 7,
    "source": "pub unsafe extern \"C\" fn lil_alloc_double(mut num: std::os::raw::c_double)\n -> lil_value_t {\n    let mut buff: [std::os::raw::c_char; 128] = [0; 128];\n    sprintf(buff.as_mut_ptr(), b\"%f\\x00\" as *const u8 as *const std::os::raw::c_char,\n            num);\n    return alloc_value(buff.as_mut_ptr());\n}",
    "calls": [
      {
        "caller": "DefId(0:245 ~ c2rust_out[3c70]::lil::fnc_rand)",
        "span": "lil.rs:4654:5: 4655:94 (#0)",
        "source": "return lil_alloc_double(rand() as std::os::raw::c_double /\n                                0x7fffffff as std::os::raw::c_int as std::os::raw::c_double);"
      },
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2871:8: 2871:44 (#0)",
        "source": "{ return lil_alloc_double(ee.dval) }"
      },
      {
        "caller": "DefId(0:214 ~ c2rust_out[3c70]::lil::real_inc)",
        "span": "lil.rs:4018:75: 4020:6 (#0)",
        "source": "{\n        pv = lil_alloc_double(dv)\n    }"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:115 ~ c2rust_out[3c70]::lil::lil_set_error)",
    "span": "lil.rs:1593:1: 1603:2 (#0)",
    "pieces": [
      "lil.rs:1593:1: 1603:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 11,
    "source": "pub unsafe extern \"C\" fn lil_set_error(mut lil: lil_t,\n                                       mut msg: *const std::os::raw::c_char) {\n    if (*lil).error != 0 { return }\n    free((*lil).err_msg as *mut std::os::raw::c_void);\n    (*lil).error = 2 as std::os::raw::c_int;\n    (*lil).err_head = 0 as std::os::raw::c_int as size_t;\n    (*lil).err_msg =\n        strclone(if !msg.is_null() {\n                     msg\n                 } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char });\n}",
    "calls": [
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2861:17: 2863:64 (#0)",
        "source": "lil_set_error(lil,\n                              b\"expression syntax error\\x00\" as *const u8 as\n                                  *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:241 ~ c2rust_out[3c70]::lil::fnc_error)",
        "span": "lil.rs:4547:5: 4550:64 (#0)",
        "source": "lil_set_error(lil,\n                  if argc > 0 as std::os::raw::c_int as std::os::raw::c_ulong {\n                      lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize))\n                  } else { 0 as *const std::os::raw::c_char });"
      },
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2856:17: 2858:77 (#0)",
        "source": "lil_set_error(lil,\n                              b\"mixing invalid types in expression\\x00\" as\n                                  *const u8 as *const std::os::raw::c_char);"
      },
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2851:17: 2853:77 (#0)",
        "source": "lil_set_error(lil,\n                              b\"division by zero in expression\\x00\" as\n                                  *const u8 as *const std::os::raw::c_char);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:146 ~ c2rust_out[3c70]::lil::lil_alloc_integer)",
    "span": "lil.rs:2966:1: 2974:2 (#0)",
    "pieces": [
      "lil.rs:2966:1: 2974:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn lil_alloc_integer(mut num: lilint_t) -> lil_value_t {\n    let mut buff: [std::os::raw::c_char; 128] = [0; 128];\n    sprintf(buff.as_mut_ptr(),\n            b\"%lli\\x00\" as *const u8 as *const std::os::raw::c_char, num);\n    return alloc_value(buff.as_mut_ptr());\n}",
    "calls": [
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2870:5: 2870:39 (#0)",
        "source": "return lil_alloc_integer(ee.ival);"
      },
      {
        "caller": "DefId(0:214 ~ c2rust_out[3c70]::lil::real_inc)",
        "span": "lil.rs:4021:5: 4021:44 (#0)",
        "source": "pv = lil_alloc_integer(dv as lilint_t);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3245:5: 3245:55 (#0)",
        "source": "return lil_alloc_integer((*lil).cmds as lilint_t);"
      },
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2838:5: 2838:68 (#0)",
        "source": "return lil_alloc_integer(0 as std::os::raw::c_int as lilint_t);"
      },
      {
        "caller": "DefId(0:236 ~ c2rust_out[3c70]::lil::fnc_strcmp)",
        "span": "lil.rs:4423:5: 4423:50 (#0)",
        "source": "return lil_alloc_integer(result as lilint_t);"
      },
      {
        "caller": "DefId(0:230 ~ c2rust_out[3c70]::lil::fnc_strpos)",
        "span": "lil.rs:4309:5: 4309:71 (#0)",
        "source": "return lil_alloc_integer(-(1 as std::os::raw::c_int) as lilint_t);"
      },
      {
        "caller": "DefId(0:237 ~ c2rust_out[3c70]::lil::fnc_streq)",
        "span": "lil.rs:4436:5: 4436:50 (#0)",
        "source": "return lil_alloc_integer(result as lilint_t);"
      },
      {
        "caller": "DefId(0:228 ~ c2rust_out[3c70]::lil::fnc_codeat)",
        "span": "lil.rs:4262:5: 4262:71 (#0)",
        "source": "return lil_alloc_integer(*str.offset(index as isize) as lilint_t);"
      },
      {
        "caller": "DefId(0:231 ~ c2rust_out[3c70]::lil::fnc_length)",
        "span": "lil.rs:4339:5: 4339:49 (#0)",
        "source": "return lil_alloc_integer(total as lilint_t);"
      },
      {
        "caller": "DefId(0:230 ~ c2rust_out[3c70]::lil::fnc_strpos)",
        "span": "lil.rs:4316:5: 4316:71 (#0)",
        "source": "return lil_alloc_integer(-(1 as std::os::raw::c_int) as lilint_t);"
      },
      {
        "caller": "DefId(0:230 ~ c2rust_out[3c70]::lil::fnc_strpos)",
        "span": "lil.rs:4320:5: 4320:38 (#0)",
        "source": "return lil_alloc_integer(offset);"
      },
      {
        "caller": "DefId(0:230 ~ c2rust_out[3c70]::lil::fnc_strpos)",
        "span": "lil.rs:4301:5: 4301:71 (#0)",
        "source": "return lil_alloc_integer(-(1 as std::os::raw::c_int) as lilint_t);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:87 ~ c2rust_out[3c70]::lil::lil_list_to_value)",
    "span": "lil.rs:714:1: 757:2 (#0)",
    "pieces": [
      "lil.rs:714:1: 757:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 44,
    "source": "pub unsafe extern \"C\" fn lil_list_to_value(mut list: lil_list_t,\n                                           mut do_escape: std::os::raw::c_int)\n -> lil_value_t {\n    let mut val: lil_value_t = alloc_value(0 as *const std::os::raw::c_char);\n    let mut i: size_t = 0;\n    let mut j: size_t = 0;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < (*list).c {\n        let mut escape: std::os::raw::c_int =\n            if do_escape != 0 {\n                needs_escape(lil_to_string(*(*list).v.offset(i as isize)))\n            } else { 0 as std::os::raw::c_int };\n        if i != 0 { lil_append_char(val, ' ' as i32 as std::os::raw::c_char); }\n        if escape != 0 {\n            lil_append_char(val, '{' as i32 as std::os::raw::c_char);\n            j = 0 as std::os::raw::c_int as size_t;\n            while j < (**(*list).v.offset(i as isize)).l {\n                if *(**(*list).v.offset(i as isize)).d.offset(j as isize) as\n                       std::os::raw::c_int == '{' as i32 {\n                    lil_append_string(val,\n                                      b\"}\\\"\\\\o\\\"{\\x00\" as *const u8 as\n                                          *const std::os::raw::c_char);\n                } else if *(**(*list).v.offset(i as\n                                                   isize)).d.offset(j as\n                                                                        isize)\n                              as std::os::raw::c_int == '}' as i32 {\n                    lil_append_string(val,\n                                      b\"}\\\"\\\\c\\\"{\\x00\" as *const u8 as\n                                          *const std::os::raw::c_char);\n                } else {\n                    lil_append_char(val,\n                                    *(**(*list).v.offset(i as\n                                                             isize)).d.offset(j\n                                                                                  as\n                                                                                  isize));\n                }\n                j = j.wrapping_add(1)\n            }\n            lil_append_char(val, '}' as i32 as std::os::raw::c_char);\n        } else { lil_append_val(val, *(*list).v.offset(i as isize)); }\n        i = i.wrapping_add(1)\n    }\n    return val;\n}",
    "calls": [
      {
        "caller": "DefId(0:239 ~ c2rust_out[3c70]::lil::fnc_split)",
        "span": "lil.rs:4522:5: 4522:61 (#0)",
        "source": "val = lil_list_to_value(list, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:204 ~ c2rust_out[3c70]::lil::fnc_append)",
        "span": "lil.rs:3812:5: 3812:59 (#0)",
        "source": "r = lil_list_to_value(list, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:142 ~ c2rust_out[3c70]::lil::lil_call)",
        "span": "lil.rs:1560:17: 1560:77 (#0)",
        "source": "argsval = lil_list_to_value(args, 0 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:206 ~ c2rust_out[3c70]::lil::fnc_filter)",
        "span": "lil.rs:3886:5: 3886:63 (#0)",
        "source": "r = lil_list_to_value(filtered, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:333:5: 333:65 (#0)",
        "source": "args = lil_list_to_value(arglist, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3288:9: 3288:65 (#0)",
        "source": "r = lil_list_to_value(vars_0, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3256:9: 3256:64 (#0)",
        "source": "r = lil_list_to_value(funcs, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:210 ~ c2rust_out[3c70]::lil::fnc_foreach)",
        "span": "lil.rs:3960:5: 3960:60 (#0)",
        "source": "r = lil_list_to_value(rlist, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:139 ~ c2rust_out[3c70]::lil::lil_subst_to_value)",
        "span": "lil.rs:1350:9: 1350:60 (#0)",
        "source": "let val: lil_value_t = lil_list_to_value(words, 0);"
      },
      {
        "caller": "DefId(0:207 ~ c2rust_out[3c70]::lil::fnc_list)",
        "span": "lil.rs:3900:5: 3900:59 (#0)",
        "source": "r = lil_list_to_value(list, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3273:9: 3273:63 (#0)",
        "source": "r = lil_list_to_value(vars, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3219:85: 3230:6 (#0)",
        "source": "{\n        if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n            return 0 as lil_value_t\n        }\n        func =\n            find_cmd(lil,\n                     lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));\n        if func.is_null() || (*func).argnames.is_null() {\n            return 0 as lil_value_t\n        }\n        return lil_list_to_value((*func).argnames, 1 as std::os::raw::c_int)\n    }"
      },
      {
        "caller": "DefId(0:205 ~ c2rust_out[3c70]::lil::fnc_slice)",
        "span": "lil.rs:3848:5: 3848:60 (#0)",
        "source": "r = lil_list_to_value(slice, 1 as std::os::raw::c_int);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:110 ~ c2rust_out[3c70]::lil::lil_subst_to_value)",
    "span": "lil.rs:1347:1: 1354:2 (#0)",
    "pieces": [
      "lil.rs:1347:1: 1354:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "pub unsafe extern \"C\" fn lil_subst_to_value(mut lil: lil_t,\n                                            mut code: lil_value_t)\n -> lil_value_t {\n    let mut words: lil_list_t = lil_subst_to_list(lil, code);\n    let mut val: lil_value_t = 0 as *mut _lil_value_t;\n    val = lil_list_to_value(words, 0 as std::os::raw::c_int);\n    lil_free_list(words);\n    return val;\n}",
    "calls": [
      {
        "caller": "DefId(0:164 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
        "span": "lil.rs:2831:5: 2831:46 (#0)",
        "source": "let code = lil_subst_to_value(lil, code);"
      },
      {
        "caller": "DefId(0:208 ~ c2rust_out[3c70]::lil::fnc_subst)",
        "span": "lil.rs:3906:5: 3906:43 (#0)",
        "source": "return lil_subst_to_value(lil, *argv);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:134 ~ c2rust_out[3c70]::lil::lil_eval_expr)",
    "span": "lil.rs:2821:1: 2872:2 (#0)",
    "pieces": [
      "lil.rs:2821:1: 2872:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 52,
    "source": "pub unsafe extern \"C\" fn lil_eval_expr(mut lil: lil_t, mut code: lil_value_t)\n -> lil_value_t {\n    let mut ee: expreval_t =\n        expreval_t{code: 0 as *const std::os::raw::c_char,\n                   len: 0,\n                   head: 0,\n                   ival: 0,\n                   dval: 0.,\n                   type_0: 0,\n                   error: 0,};\n    code = lil_subst_to_value(lil, code);\n    if (*lil).error != 0 { return 0 as lil_value_t }\n    ee.code = lil_to_string(code);\n    /* an empty expression equals to 0 so that it can be used as a false value\n     * in conditionals */\n    if *ee.code.offset(0 as std::os::raw::c_int as isize) == 0 {\n        lil_free_value(code);\n        return lil_alloc_integer(0 as std::os::raw::c_int as lilint_t)\n    }\n    ee.head = 0 as std::os::raw::c_int as size_t;\n    ee.len = (*code).l;\n    ee.ival = 0 as std::os::raw::c_int as lilint_t;\n    ee.dval = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    ee.type_0 = 0 as std::os::raw::c_int;\n    ee.error = 0 as std::os::raw::c_int;\n    ee_expr(&mut ee);\n    lil_free_value(code);\n    if ee.error != 0 {\n        match ee.error {\n            3 => {\n                lil_set_error(lil,\n                              b\"division by zero in expression\\x00\" as\n                                  *const u8 as *const std::os::raw::c_char);\n            }\n            2 => {\n                lil_set_error(lil,\n                              b\"mixing invalid types in expression\\x00\" as\n                                  *const u8 as *const std::os::raw::c_char);\n            }\n            1 => {\n                lil_set_error(lil,\n                              b\"expression syntax error\\x00\" as *const u8 as\n                                  *const std::os::raw::c_char);\n            }\n            _ => { }\n        }\n        return 0 as lil_value_t\n    }\n    if ee.type_0 == 0 as std::os::raw::c_int {\n        return lil_alloc_integer(ee.ival)\n    } else { return lil_alloc_double(ee.dval) };\n}",
    "calls": [
      {
        "caller": "DefId(0:213 ~ c2rust_out[3c70]::lil::fnc_expr)",
        "span": "lil.rs:3994:66: 3996:6 (#0)",
        "source": "{\n        return lil_eval_expr(lil, *argv.offset(0 as std::os::raw::c_int as isize))\n    }"
      },
      {
        "caller": "DefId(0:213 ~ c2rust_out[3c70]::lil::fnc_expr)",
        "span": "lil.rs:4007:9: 4007:37 (#0)",
        "source": "r = lil_eval_expr(lil, val);"
      },
      {
        "caller": "DefId(0:219 ~ c2rust_out[3c70]::lil::fnc_if)",
        "span": "lil.rs:4144:5: 4144:59 (#0)",
        "source": "val = lil_eval_expr(lil, *argv.offset(base as isize));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:191 ~ c2rust_out[3c70]::lil::fnc_if)",
    "span": "lil.rs:4127:1: 4165:2 (#0)",
    "pieces": [
      "lil.rs:4127:1: 4165:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 38,
    "source": "unsafe extern \"C\" fn fnc_if(mut lil: lil_t, mut argc: size_t,\n                            mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut val: lil_value_t = 0 as *mut _lil_value_t;\n    let mut r: lil_value_t = 0 as lil_value_t;\n    let mut base: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut not: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut v: std::os::raw::c_int = 0;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if strcmp(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n              b\"not\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        not = 1 as std::os::raw::c_int;\n        base = not\n    }\n    if argc < (base as size_t).wrapping_add(2 as std::os::raw::c_int as std::os::raw::c_ulong)\n       {\n        return 0 as lil_value_t\n    }\n    val = lil_eval_expr(lil, *argv.offset(base as isize));\n    if val.is_null() || (*lil).error != 0 { return 0 as lil_value_t }\n    v = lil_to_boolean(val);\n    if not != 0 { v = (v == 0) as std::os::raw::c_int }\n    if v != 0 {\n        r =\n            lil_parse_value(lil,\n                            *argv.offset((base + 1 as std::os::raw::c_int) as isize),\n                            0 as std::os::raw::c_int)\n    } else if argc >\n                  (base as\n                       size_t).wrapping_add(2 as std::os::raw::c_int as std::os::raw::c_ulong)\n     {\n        r =\n            lil_parse_value(lil,\n                            *argv.offset((base + 2 as std::os::raw::c_int) as isize),\n                            0 as std::os::raw::c_int)\n    }\n    lil_free_value(val);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:88 ~ c2rust_out[3c70]::lil::lil_alloc_env)",
    "span": "lil.rs:759:1: 767:2 (#0)",
    "pieces": [
      "lil.rs:759:1: 767:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "pub unsafe extern \"C\" fn lil_alloc_env(mut parent: lil_env_t) -> lil_env_t {\n    let mut env: lil_env_t = 0 as *mut _lil_env_t;\n    env =\n        calloc(1 as std::os::raw::c_int as std::os::raw::c_ulong,\n               ::std::mem::size_of::<_lil_env_t>() as std::os::raw::c_ulong) as\n            lil_env_t;\n    (*env).parent = parent;\n    return env;\n}",
    "calls": [
      {
        "caller": "DefId(0:130 ~ c2rust_out[3c70]::lil::lil_new)",
        "span": "lil.rs:1012:5: 1012:48 (#0)",
        "source": "(*lil).env = lil_alloc_env(0 as lil_env_t);"
      },
      {
        "caller": "DefId(0:128 ~ c2rust_out[3c70]::lil::lil_push_env)",
        "span": "lil.rs:995:5: 995:56 (#0)",
        "source": "let mut env: lil_env_t = lil_alloc_env((*lil).env);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:213 ~ c2rust_out[3c70]::lil::fnc_error)",
    "span": "lil.rs:4545:1: 4552:2 (#0)",
    "pieces": [
      "lil.rs:4545:1: 4552:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 8,
    "source": "unsafe extern \"C\" fn fnc_error(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    lil_set_error(lil,\n                  if argc > 0 as std::os::raw::c_int as std::os::raw::c_ulong {\n                      lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize))\n                  } else { 0 as *const std::os::raw::c_char });\n    return 0 as lil_value_t;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_expr)",
    "span": "lil.rs:3992:1: 4012:2 (#0)",
    "pieces": [
      "lil.rs:3992:1: 4012:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 21,
    "source": "unsafe extern \"C\" fn fnc_expr(mut lil: lil_t, mut argc: size_t,\n                              mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc == 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n        return lil_eval_expr(lil, *argv.offset(0 as std::os::raw::c_int as isize))\n    }\n    if argc > 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n        let mut val: lil_value_t = alloc_value(0 as *const std::os::raw::c_char);\n        let mut r: lil_value_t = 0 as *mut _lil_value_t;\n        let mut i: size_t = 0;\n        i = 0 as std::os::raw::c_int as size_t;\n        while i < argc {\n            if i != 0 { lil_append_char(val, ' ' as i32 as std::os::raw::c_char); }\n            lil_append_val(val, *argv.offset(i as isize));\n            i = i.wrapping_add(1)\n        }\n        r = lil_eval_expr(lil, val);\n        lil_free_value(val);\n        return r\n    }\n    return 0 as lil_value_t;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:135 ~ c2rust_out[3c70]::lil::lil_unused_name)",
    "span": "lil.rs:2874:1: 2893:2 (#0)",
    "pieces": [
      "lil.rs:2874:1: 2893:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 24,
    "source": "pub unsafe extern \"C\" fn lil_unused_name(mut lil: lil_t,\n                                         mut part: *const std::os::raw::c_char)\n -> lil_value_t {\n    let mut name: *mut std::os::raw::c_char =\n        malloc(strlen(part).wrapping_add(64 as std::os::raw::c_int as std::os::raw::c_ulong))\n            as *mut std::os::raw::c_char;\n    let mut val: lil_value_t = 0 as *mut _lil_value_t;\n    let mut i: size_t = 0;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < -(1 as std::os::raw::c_int) as size_t {\n        sprintf(name,\n                b\"!!un!%s!%09u!nu!!\\x00\" as *const u8 as *const std::os::raw::c_char,\n                part, i as std::os::raw::c_uint);\n        if find_cmd(lil, name).is_null() {\n            if lil_find_var(lil, (*lil).env, name).is_null() {\n                val = lil_alloc_string(name);\n                free(name as *mut std::os::raw::c_void);\n                return val\n            }\n        }\n        i = i.wrapping_add(1)\n    }\n    return 0 as lil_value_t;\n}",
    "calls": [
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3410:1: 3410:51 (#0)",
        "source": "name = lil_unused_name(lil, part_name.as_c_str());"
      },
      {
        "caller": "DefId(0:187 ~ c2rust_out[3c70]::lil::fnc_unusedname)",
        "span": "lil.rs:3472:1: 3472:56 (#0)",
        "source": "return lil_unused_name(lil, CStr::from_ptr(part_name));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:67 ~ c2rust_out[3c70]::lil::hm_hash)",
    "span": "lil.rs:417:1: 428:2 (#0)",
    "pieces": [
      "lil.rs:417:1: 428:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 16,
    "source": "unsafe extern \"C\" fn hm_hash(mut key: *const std::os::raw::c_char) -> std::os::raw::c_ulong {\n    let mut hash: std::os::raw::c_ulong = 5381 as std::os::raw::c_int as std::os::raw::c_ulong;\n    let mut c: std::os::raw::c_int = 0;\n    loop  {\n        let fresh0 = key;\n        key = key.offset(1);\n        c = *fresh0 as std::os::raw::c_int;\n        if !(c != 0) { break ; }\n        hash =\n            (hash <<\n                 5 as\n                     std::os::raw::c_int).wrapping_add(hash).wrapping_add(c as\n                                                                      std::os::raw::c_ulong)\n    }\n    return hash;\n}",
    "calls": [
      {
        "caller": "DefId(0:98 ~ c2rust_out[3c70]::lil::hm_get)",
        "span": "lil.rs:477:5: 477:75 (#0)",
        "source": "let index = (hm_hash(unsafe { CStr::from_ptr(key) }) & 0xff) as usize;"
      },
      {
        "caller": "DefId(0:99 ~ c2rust_out[3c70]::lil::hm_has)",
        "span": "lil.rs:491:1: 491:101 (#0)",
        "source": "let mut cell: *mut hashcell_t = (*hm).cell.as_mut_ptr().offset((hm_hash(key_cstr) & 0xff) as isize);"
      },
      {
        "caller": "DefId(0:97 ~ c2rust_out[3c70]::lil::hm_put)",
        "span": "lil.rs:451:1: 451:101 (#0)",
        "source": "let mut cell: *mut hashcell_t = (*hm).cell.as_mut_ptr().offset((hm_hash(key_cstr) & 0xff) as isize);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:70 ~ c2rust_out[3c70]::lil::hm_put)",
    "span": "lil.rs:447:1: 475:2 (#0)",
    "pieces": [
      "lil.rs:447:1: 475:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 31,
    "source": "unsafe extern \"C\" fn hm_put(mut hm: *mut hashmap_t,\n                            mut key: *const std::os::raw::c_char,\n                            mut value: *mut std::os::raw::c_void) {\n    let mut cell: *mut hashcell_t =\n        (*hm).cell.as_mut_ptr().offset((hm_hash(key) &\n                                            0xff as std::os::raw::c_int as\n                                                std::os::raw::c_ulong) as isize);\n    let mut i: size_t = 0;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < (*cell).c {\n        if strcmp(key, (*(*cell).e.offset(i as isize)).k) == 0 {\n            let ref mut fresh1 = (*(*cell).e.offset(i as isize)).v;\n            *fresh1 = value;\n            return\n        }\n        i = i.wrapping_add(1)\n    }\n    (*cell).e =\n        realloc((*cell).e as *mut std::os::raw::c_void,\n                (::std::mem::size_of::<hashentry_t>() as\n                     std::os::raw::c_ulong).wrapping_mul((*cell).c.wrapping_add(1 as\n                                                                            std::os::raw::c_int\n                                                                            as\n                                                                            std::os::raw::c_ulong)))\n            as *mut hashentry_t;\n    let ref mut fresh2 = (*(*cell).e.offset((*cell).c as isize)).k;\n    *fresh2 = strclone(key);\n    let ref mut fresh3 = (*(*cell).e.offset((*cell).c as isize)).v;\n    *fresh3 = value;\n    (*cell).c = (*cell).c.wrapping_add(1);\n}",
    "calls": [
      {
        "caller": "DefId(0:125 ~ c2rust_out[3c70]::lil::lil_set_var)",
        "span": "lil.rs:954:5: 955:77 (#0)",
        "source": "hm_put(&mut (*env).varmap, name,\n           *nvar.offset((*env).vars as isize) as *mut std::os::raw::c_void);"
      },
      {
        "caller": "DefId(0:122 ~ c2rust_out[3c70]::lil::add_func)",
        "span": "lil.rs:841:5: 841:72 (#0)",
        "source": "hm_put(&mut (*lil).cmdmap, name, cmd as *mut std::os::raw::c_void);"
      },
      {
        "caller": "DefId(0:123 ~ c2rust_out[3c70]::lil::del_func)",
        "span": "lil.rs:855:5: 855:77 (#0)",
        "source": "hm_put(&mut (*lil).cmdmap, (*cmd).name, 0 as *mut std::os::raw::c_void);"
      },
      {
        "caller": "DefId(0:186 ~ c2rust_out[3c70]::lil::fnc_rename)",
        "span": "lil.rs:3458:9: 3458:80 (#0)",
        "source": "hm_put(&mut (*lil).cmdmap, newname, func as *mut std::os::raw::c_void);"
      },
      {
        "caller": "DefId(0:186 ~ c2rust_out[3c70]::lil::fnc_rename)",
        "span": "lil.rs:3457:9: 3457:77 (#0)",
        "source": "hm_put(&mut (*lil).cmdmap, oldname, 0 as *mut std::os::raw::c_void);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:71 ~ c2rust_out[3c70]::lil::hm_get)",
    "span": "lil.rs:476:1: 486:2 (#0)",
    "pieces": [
      "lil.rs:476:1: 486:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "unsafe extern \"C\" fn hm_get(mut hm: *mut hashmap_t,\n                            mut key: *const std::os::raw::c_char)\n -> *mut std::os::raw::c_void {\n    let mut cell: *mut hashcell_t =\n        (*hm).cell.as_mut_ptr().offset((hm_hash(key) &\n                                            0xff as std::os::raw::c_int as\n                                                std::os::raw::c_ulong) as isize);\n    let mut i: size_t = 0;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < (*cell).c {\n        if strcmp(key, (*(*cell).e.offset(i as isize)).k) == 0 {\n            return (*(*cell).e.offset(i as isize)).v\n        }\n        i = i.wrapping_add(1)\n    }\n    return 0 as *mut std::os::raw::c_void;\n}",
    "calls": [
      {
        "caller": "DefId(0:117 ~ c2rust_out[3c70]::lil::lil_find_local_var)",
        "span": "lil.rs:788:5: 788:51 (#0)",
        "source": "let result = hm_get(&mut (*env).varmap, name);"
      },
      {
        "caller": "DefId(0:120 ~ c2rust_out[3c70]::lil::find_cmd)",
        "span": "lil.rs:803:5: 803:51 (#0)",
        "source": "let result = hm_get(&mut (*lil).cmdmap, name);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:92 ~ c2rust_out[3c70]::lil::find_cmd)",
    "span": "lil.rs:801:1: 805:2 (#0)",
    "pieces": [
      "lil.rs:801:1: 805:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "unsafe extern \"C\" fn find_cmd(mut lil: lil_t, mut name: *const std::os::raw::c_char)\n -> lil_func_t {\n    return hm_get(&mut (*lil).cmdmap, name) as lil_func_t;\n}",
    "calls": [
      {
        "caller": "DefId(0:122 ~ c2rust_out[3c70]::lil::add_func)",
        "span": "lil.rs:810:5: 810:31 (#0)",
        "source": "cmd = find_cmd(lil, name);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3223:9: 3225:86 (#0)",
        "source": "func =\n            find_cmd(lil,\n                     lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:186 ~ c2rust_out[3c70]::lil::fnc_rename)",
        "span": "lil.rs:3442:5: 3442:35 (#0)",
        "source": "func = find_cmd(lil, oldname);"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3235:9: 3237:86 (#0)",
        "source": "func =\n            find_cmd(lil,\n                     lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:142 ~ c2rust_out[3c70]::lil::lil_call)",
        "span": "lil.rs:1533:5: 1533:55 (#0)",
        "source": "let mut cmd: lil_func_t = find_cmd(lil, funcname);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:93 ~ c2rust_out[3c70]::lil::add_func)",
    "span": "lil.rs:806:1: 843:2 (#0)",
    "pieces": [
      "lil.rs:806:1: 843:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 38,
    "source": "unsafe extern \"C\" fn add_func(mut lil: lil_t, mut name: *const std::os::raw::c_char)\n -> lil_func_t {\n    let mut cmd: lil_func_t = 0 as *mut _lil_func_t;\n    let mut ncmd: *mut lil_func_t = 0 as *mut lil_func_t;\n    cmd = find_cmd(lil, name);\n    if !cmd.is_null() {\n        if !(*cmd).argnames.is_null() { lil_free_list((*cmd).argnames); }\n        lil_free_value((*cmd).code);\n        (*cmd).argnames = 0 as lil_list_t;\n        (*cmd).code = 0 as lil_value_t;\n        (*cmd).proc_0 = None;\n        return cmd\n    }\n    cmd =\n        calloc(1 as std::os::raw::c_int as std::os::raw::c_ulong,\n               ::std::mem::size_of::<_lil_func_t>() as std::os::raw::c_ulong) as\n            lil_func_t;\n    (*cmd).name = strclone(name);\n    ncmd =\n        realloc((*lil).cmd as *mut std::os::raw::c_void,\n                (::std::mem::size_of::<lil_func_t>() as\n                     std::os::raw::c_ulong).wrapping_mul((*lil).cmds.wrapping_add(1 as\n                                                                              std::os::raw::c_int\n                                                                              as\n                                                                              std::os::raw::c_ulong)))\n            as *mut lil_func_t;\n    if ncmd.is_null() {\n        free(cmd as *mut std::os::raw::c_void);\n        return 0 as lil_func_t\n    }\n    (*lil).cmd = ncmd;\n    let fresh7 = (*lil).cmds;\n    (*lil).cmds = (*lil).cmds.wrapping_add(1);\n    let ref mut fresh8 = *ncmd.offset(fresh7 as isize);\n    *fresh8 = cmd;\n    hm_put(&mut (*lil).cmdmap, name, cmd as *mut std::os::raw::c_void);\n    return cmd;\n}",
    "calls": [
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3417:13: 3417:54 (#0)",
        "source": "cmd = add_func(lil, lil_to_string(name));"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3403:9: 3405:86 (#0)",
        "source": "cmd =\n            add_func(lil,\n                     lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)));"
      },
      {
        "caller": "DefId(0:124 ~ c2rust_out[3c70]::lil::lil_register)",
        "span": "lil.rs:875:5: 875:51 (#0)",
        "source": "let mut cmd: lil_func_t = add_func(lil, name);"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3425:13: 3425:54 (#0)",
        "source": "cmd = add_func(lil, lil_to_string(name));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:75 ~ c2rust_out[3c70]::lil::lil_clone_value)",
    "span": "lil.rs:535:1: 557:2 (#0)",
    "pieces": [
      "lil.rs:535:1: 557:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 23,
    "source": "pub unsafe extern \"C\" fn lil_clone_value(mut src: lil_value_t)\n -> lil_value_t {\n    let mut val: lil_value_t = 0 as *mut _lil_value_t;\n    if src.is_null() { return 0 as lil_value_t }\n    val =\n        calloc(1 as std::os::raw::c_int as std::os::raw::c_ulong,\n               ::std::mem::size_of::<_lil_value_t>() as std::os::raw::c_ulong) as\n            lil_value_t;\n    if val.is_null() { return 0 as lil_value_t }\n    (*val).l = (*src).l;\n    if (*src).l != 0 {\n        (*val).d =\n            malloc((*val).l.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong))\n                as *mut std::os::raw::c_char;\n        if (*val).d.is_null() {\n            free(val as *mut std::os::raw::c_void);\n            return 0 as lil_value_t\n        }\n        memcpy((*val).d as *mut std::os::raw::c_void, (*src).d as *const std::os::raw::c_void,\n               (*val).l.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong));\n    } else { (*val).d = 0 as *mut std::os::raw::c_char }\n    return val;\n}",
    "calls": [
      {
        "caller": "DefId(0:189 ~ c2rust_out[3c70]::lil::fnc_set)",
        "span": "lil.rs:3516:30: 3518:13 (#0)",
        "source": "{\n               lil_clone_value((*var).v)\n           }"
      },
      {
        "caller": "DefId(0:211 ~ c2rust_out[3c70]::lil::fnc_return)",
        "span": "lil.rs:3976:19: 3978:13 (#0)",
        "source": "{\n               lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n           }"
      },
      {
        "caller": "DefId(0:218 ~ c2rust_out[3c70]::lil::fnc_store)",
        "span": "lil.rs:4125:5: 4125:77 (#0)",
        "source": "return lil_clone_value(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_reflect)",
        "span": "lil.rs:3231:85: 3242:6 (#0)",
        "source": "{\n        if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n            return 0 as lil_value_t\n        }\n        func =\n            find_cmd(lil,\n                     lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));\n        if func.is_null() || (*func).proc_0.is_some() {\n            return 0 as lil_value_t\n        }\n        return lil_clone_value((*func).code)\n    }"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3400:9: 3400:81 (#0)",
        "source": "name = lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:205 ~ c2rust_out[3c70]::lil::fnc_slice)",
        "span": "lil.rs:3826:65: 3828:6 (#0)",
        "source": "{\n        return lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n    }"
      },
      {
        "caller": "DefId(0:125 ~ c2rust_out[3c70]::lil::lil_set_var)",
        "span": "lil.rs:953:45: 953:69 (#0)",
        "source": "{ lil_clone_value(val) }"
      },
      {
        "caller": "DefId(0:212 ~ c2rust_out[3c70]::lil::fnc_result)",
        "span": "lil.rs:3984:9: 3985:78 (#0)",
        "source": "(*(*lil).env).retval =\n            lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3421:16: 3429:10 (#0)",
        "source": "{\n            fargs =\n                lil_subst_to_list(lil,\n                                  *argv.offset(0 as std::os::raw::c_int as isize));\n            cmd = add_func(lil, lil_to_string(name));\n            (*cmd).argnames = fargs;\n            (*cmd).code =\n                lil_clone_value(*argv.offset(1 as std::os::raw::c_int as isize))\n        }"
      },
      {
        "caller": "DefId(0:212 ~ c2rust_out[3c70]::lil::fnc_result)",
        "span": "lil.rs:3988:45: 3990:13 (#0)",
        "source": "{\n               lil_clone_value((*(*lil).env).retval)\n           }"
      },
      {
        "caller": "DefId(0:125 ~ c2rust_out[3c70]::lil::lil_set_var)",
        "span": "lil.rs:915:53: 915:77 (#0)",
        "source": "{ lil_clone_value(val) }"
      },
      {
        "caller": "DefId(0:206 ~ c2rust_out[3c70]::lil::fnc_filter)",
        "span": "lil.rs:3862:65: 3864:6 (#0)",
        "source": "{\n        return lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n    }"
      },
      {
        "caller": "DefId(0:239 ~ c2rust_out[3c70]::lil::fnc_split)",
        "span": "lil.rs:4505:81: 4507:10 (#0)",
        "source": "{\n            return lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n        }"
      },
      {
        "caller": "DefId(0:202 ~ c2rust_out[3c70]::lil::fnc_index)",
        "span": "lil.rs:3765:12: 3765:70 (#0)",
        "source": "{ r = lil_clone_value(*(*list).v.offset(index as isize)) }"
      },
      {
        "caller": "DefId(0:238 ~ c2rust_out[3c70]::lil::fnc_repstr)",
        "span": "lil.rs:4451:65: 4453:6 (#0)",
        "source": "{\n        return lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n    }"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3399:66: 3408:6 (#0)",
        "source": "{\n        name = lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize));\n        fargs =\n            lil_subst_to_list(lil, *argv.offset(1 as std::os::raw::c_int as isize));\n        cmd =\n            add_func(lil,\n                     lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)));\n        (*cmd).argnames = fargs;\n        (*cmd).code = lil_clone_value(*argv.offset(2 as std::os::raw::c_int as isize))\n    }"
      },
      {
        "caller": "DefId(0:185 ~ c2rust_out[3c70]::lil::fnc_func)",
        "span": "lil.rs:3411:69: 3421:10 (#0)",
        "source": "{\n            let mut tmp: lil_value_t =\n                lil_alloc_string(b\"args\\x00\" as *const u8 as\n                                     *const std::os::raw::c_char);\n            fargs = lil_subst_to_list(lil, tmp);\n            lil_free_value(tmp);\n            cmd = add_func(lil, lil_to_string(name));\n            (*cmd).argnames = fargs;\n            (*cmd).code =\n                lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n        }"
      },
      {
        "caller": "DefId(0:211 ~ c2rust_out[3c70]::lil::fnc_return)",
        "span": "lil.rs:3972:16: 3972:84 (#0)",
        "source": "{ lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize)) }"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:157 ~ c2rust_out[3c70]::lil::fnc_func)",
    "span": "lil.rs:3393:1: 3432:2 (#0)",
    "pieces": [
      "lil.rs:3393:1: 3432:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 42,
    "source": "unsafe extern \"C\" fn fnc_func(mut lil: lil_t, mut argc: size_t,\n                              mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut name: lil_value_t = 0 as *mut _lil_value_t;\n    let mut cmd: lil_func_t = 0 as *mut _lil_func_t;\n    let mut fargs: lil_list_t = 0 as *mut _lil_list_t;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if argc >= 3 as std::os::raw::c_int as std::os::raw::c_ulong {\n        name = lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize));\n        fargs =\n            lil_subst_to_list(lil, *argv.offset(1 as std::os::raw::c_int as isize));\n        cmd =\n            add_func(lil,\n                     lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)));\n        (*cmd).argnames = fargs;\n        (*cmd).code = lil_clone_value(*argv.offset(2 as std::os::raw::c_int as isize))\n    } else {\n        name =\n            lil_unused_name(lil,\n                            b\"anonymous-function\\x00\" as *const u8 as\n                                *const std::os::raw::c_char);\n        if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n            let mut tmp: lil_value_t =\n                lil_alloc_string(b\"args\\x00\" as *const u8 as\n                                     *const std::os::raw::c_char);\n            fargs = lil_subst_to_list(lil, tmp);\n            lil_free_value(tmp);\n            cmd = add_func(lil, lil_to_string(name));\n            (*cmd).argnames = fargs;\n            (*cmd).code =\n                lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n        } else {\n            fargs =\n                lil_subst_to_list(lil,\n                                  *argv.offset(0 as std::os::raw::c_int as isize));\n            cmd = add_func(lil, lil_to_string(name));\n            (*cmd).argnames = fargs;\n            (*cmd).code =\n                lil_clone_value(*argv.offset(1 as std::os::raw::c_int as isize))\n        }\n    }\n    return name;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:208 ~ c2rust_out[3c70]::lil::fnc_strcmp)",
    "span": "lil.rs:4417:1: 4425:2 (#0)",
    "pieces": [
      "lil.rs:4417:1: 4425:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 11,
    "source": "unsafe extern \"C\" fn fnc_strcmp(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    return lil_alloc_integer(strcmp(lil_to_string(*argv.offset(0 as\n                                                                   std::os::raw::c_int\n                                                                   as isize)),\n                                    lil_to_string(*argv.offset(1 as\n                                                                   std::os::raw::c_int\n                                                                   as isize)))\n                                 as lilint_t);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:204 ~ c2rust_out[3c70]::lil::real_trim)",
    "span": "lil.rs:4342:1: 4380:2 (#0)",
    "pieces": [
      "lil.rs:4342:1: 4380:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 39,
    "source": "unsafe extern \"C\" fn real_trim(mut str: *const std::os::raw::c_char,\n                               mut chars: *const std::os::raw::c_char,\n                               mut left: std::os::raw::c_int, mut right: std::os::raw::c_int)\n -> lil_value_t {\n    let mut base: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut r: lil_value_t = 0 as lil_value_t;\n    if left != 0 {\n        while *str.offset(base as isize) as std::os::raw::c_int != 0 &&\n                  !strchr(chars,\n                          *str.offset(base as isize) as std::os::raw::c_int).is_null()\n              {\n            base += 1\n        }\n        if right == 0 {\n            r =\n                lil_alloc_string(if *str.offset(base as isize) as std::os::raw::c_int\n                                        != 0 {\n                                     str.offset(base as isize)\n                                 } else { 0 as *const std::os::raw::c_char })\n        }\n    }\n    if right != 0 {\n        let mut len: size_t = 0;\n        let mut s: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n        s = strclone(str.offset(base as isize));\n        len = strlen(s);\n        while len != 0 &&\n                  !strchr(chars,\n                          *s.offset(len.wrapping_sub(1 as std::os::raw::c_int as\n                                                         std::os::raw::c_ulong) as\n                                        isize) as std::os::raw::c_int).is_null() {\n            len = len.wrapping_sub(1)\n        }\n        *s.offset(len as isize) = 0 as std::os::raw::c_int as std::os::raw::c_char;\n        r = lil_alloc_string(s);\n        free(s as *mut std::os::raw::c_void);\n    }\n    return r;\n}",
    "calls": [
      {
        "caller": "DefId(0:234 ~ c2rust_out[3c70]::lil::fnc_ltrim)",
        "span": "lil.rs:4396:5: 4403:77 (#0)",
        "source": "return real_trim(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                     if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n                         b\" \\x0c\\n\\r\\t\\x0b\\x00\" as *const u8 as\n                             *const std::os::raw::c_char\n                     } else {\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }, 1 as std::os::raw::c_int, 0 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:235 ~ c2rust_out[3c70]::lil::fnc_rtrim)",
        "span": "lil.rs:4408:5: 4415:77 (#0)",
        "source": "return real_trim(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                     if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n                         b\" \\x0c\\n\\r\\t\\x0b\\x00\" as *const u8 as\n                             *const std::os::raw::c_char\n                     } else {\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }, 0 as std::os::raw::c_int, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:233 ~ c2rust_out[3c70]::lil::fnc_trim)",
        "span": "lil.rs:4384:5: 4391:77 (#0)",
        "source": "return real_trim(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                     if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n                         b\" \\x0c\\n\\r\\t\\x0b\\x00\" as *const u8 as\n                             *const std::os::raw::c_char\n                     } else {\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }, 1 as std::os::raw::c_int, 1 as std::os::raw::c_int);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:205 ~ c2rust_out[3c70]::lil::fnc_trim)",
    "span": "lil.rs:4381:1: 4392:2 (#0)",
    "pieces": [
      "lil.rs:4381:1: 4392:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "unsafe extern \"C\" fn fnc_trim(mut lil: lil_t, mut argc: size_t,\n                              mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc == 0 { return 0 as lil_value_t }\n    return real_trim(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                     if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n                         b\" \\x0c\\n\\r\\t\\x0b\\x00\" as *const u8 as\n                             *const std::os::raw::c_char\n                     } else {\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }, 1 as std::os::raw::c_int, 1 as std::os::raw::c_int);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:117 ~ c2rust_out[3c70]::lil::lil_error)",
    "span": "lil.rs:1617:1: 1625:2 (#0)",
    "pieces": [
      "lil.rs:1617:1: 1625:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "pub unsafe extern \"C\" fn lil_error(mut lil: lil_t,\n                                   mut msg: *mut *const std::os::raw::c_char,\n                                   mut pos: *mut size_t) -> std::os::raw::c_int {\n    if (*lil).error == 0 { return 0 as std::os::raw::c_int }\n    *msg = (*lil).err_msg;\n    *pos = (*lil).err_head;\n    (*lil).error = 0 as std::os::raw::c_int;\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:95 ~ c2rust_out[3c70]::lil::lil_register)",
    "span": "lil.rs:871:1: 879:2 (#0)",
    "pieces": [
      "lil.rs:871:1: 879:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "pub unsafe extern \"C\" fn lil_register(mut lil: lil_t,\n                                      mut name: *const std::os::raw::c_char,\n                                      mut proc_0: lil_func_proc_t)\n -> std::os::raw::c_int {\n    let mut cmd: lil_func_t = add_func(lil, name);\n    if cmd.is_null() { return 0 as std::os::raw::c_int }\n    (*cmd).proc_0 = proc_0;\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4758:5: 4758:101 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"rtrim\\0\").unwrap().as_ptr(), Some(fnc_rtrim));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4769:5: 4769:105 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"catcher\\0\").unwrap().as_ptr(), Some(fnc_catcher));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4761:5: 4761:103 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"repstr\\0\").unwrap().as_ptr(), Some(fnc_repstr));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4767:5: 4767:99 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"lmap\\0\").unwrap().as_ptr(), Some(fnc_lmap));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4722:1: 4722:73 (#0)",
        "source": "lil_register(lil, \"downeval\".as_ptr() as *const i8, Some(fnc_downeval));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4750:5: 4750:99 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"char\\0\").unwrap().as_ptr(), Some(fnc_char));"
      },
      {
        "caller": "DefId(0:389 ~ c2rust_out[3c70]::main::repl)",
        "span": "main.rs:259:5: 263:48 (#0)",
        "source": "lil_register(lil, b\"readline\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_readline as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4753:5: 4753:103 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"substr\\0\").unwrap().as_ptr(), Some(fnc_substr));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4749:5: 4749:97 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"for\\0\").unwrap().as_ptr(), Some(fnc_for));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4719:1: 4719:65 (#0)",
        "source": "lil_register(lil, \"eval\".as_ptr() as *const i8, Some(fnc_eval));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4712:1: 4712:69 (#0)",
        "source": "lil_register(lil, \"rename\".as_ptr() as *const i8, Some(fnc_rename));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4729:1: 4729:65 (#0)",
        "source": "lil_register(lil, \"list\".as_ptr() as *const i8, Some(fnc_list));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4762:5: 4762:101 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"split\\0\").unwrap().as_ptr(), Some(fnc_split));"
      },
      {
        "caller": "DefId(0:389 ~ c2rust_out[3c70]::main::repl)",
        "span": "main.rs:254:5: 258:48 (#0)",
        "source": "lil_register(lil, b\"system\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_system as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4731:1: 4731:67 (#0)",
        "source": "lil_register(lil, \"slice\".as_ptr() as *const i8, Some(fnc_slice));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4736:1: 4736:69 (#0)",
        "source": "lil_register(lil, \"result\".as_ptr() as *const i8, Some(fnc_result));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4768:5: 4768:99 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"rand\\0\").unwrap().as_ptr(), Some(fnc_rand));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4721:1: 4721:69 (#0)",
        "source": "lil_register(lil, \"upeval\".as_ptr() as *const i8, Some(fnc_upeval));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4718:1: 4718:67 (#0)",
        "source": "lil_register(lil, \"print\".as_ptr() as *const i8, Some(fnc_print));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4738:1: 4738:63 (#0)",
        "source": "lil_register(lil, \"inc\".as_ptr() as *const i8, Some(fnc_inc));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4747:5: 4747:95 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"if\\0\").unwrap().as_ptr(), Some(fnc_if));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4755:5: 4755:103 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"length\\0\").unwrap().as_ptr(), Some(fnc_length));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4714:1: 4714:67 (#0)",
        "source": "lil_register(lil, \"quote\".as_ptr() as *const i8, Some(fnc_quote));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4739:1: 4739:63 (#0)",
        "source": "lil_register(lil, \"dec\".as_ptr() as *const i8, Some(fnc_dec));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4720:1: 4720:71 (#0)",
        "source": "lil_register(lil, \"topeval\".as_ptr() as *const i8, Some(fnc_topeval));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4748:5: 4748:101 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"while\\0\").unwrap().as_ptr(), Some(fnc_while));"
      },
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:323:5: 327:48 (#0)",
        "source": "lil_register(lil, b\"system\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_system as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4746:5: 4746:101 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"store\\0\").unwrap().as_ptr(), Some(fnc_store));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4716:1: 4716:67 (#0)",
        "source": "lil_register(lil, \"local\".as_ptr() as *const i8, Some(fnc_local));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4711:1: 4711:65 (#0)",
        "source": "lil_register(lil, \"func\".as_ptr() as *const i8, Some(fnc_func));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4725:1: 4725:67 (#0)",
        "source": "lil_register(lil, \"count\".as_ptr() as *const i8, Some(fnc_count));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4713:1: 4713:77 (#0)",
        "source": "lil_register(lil, \"unusedname\".as_ptr() as *const i8, Some(fnc_unusedname));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4732:1: 4732:67 (#0)",
        "source": "lil_register(lil, \"subst\".as_ptr() as *const i8, Some(fnc_subst));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4752:5: 4752:103 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"codeat\\0\").unwrap().as_ptr(), Some(fnc_codeat));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4757:5: 4757:101 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"ltrim\\0\").unwrap().as_ptr(), Some(fnc_ltrim));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4717:1: 4717:67 (#0)",
        "source": "lil_register(lil, \"write\".as_ptr() as *const i8, Some(fnc_write));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4730:1: 4730:69 (#0)",
        "source": "lil_register(lil, \"append\".as_ptr() as *const i8, Some(fnc_append));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4764:5: 4764:101 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"error\\0\").unwrap().as_ptr(), Some(fnc_error));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4763:5: 4763:97 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"try\\0\").unwrap().as_ptr(), Some(fnc_try));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4751:5: 4751:103 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"charat\\0\").unwrap().as_ptr(), Some(fnc_charat));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4726:1: 4726:67 (#0)",
        "source": "lil_register(lil, \"index\".as_ptr() as *const i8, Some(fnc_index));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4765:5: 4765:99 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"exit\\0\").unwrap().as_ptr(), Some(fnc_exit));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4745:5: 4745:99 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"read\\0\").unwrap().as_ptr(), Some(fnc_read));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4734:1: 4734:71 (#0)",
        "source": "lil_register(lil, \"foreach\".as_ptr() as *const i8, Some(fnc_foreach));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4759:5: 4759:103 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"strcmp\\0\").unwrap().as_ptr(), Some(fnc_strcmp));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4760:5: 4760:101 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"streq\\0\").unwrap().as_ptr(), Some(fnc_streq));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4733:1: 4733:69 (#0)",
        "source": "lil_register(lil, \"concat\".as_ptr() as *const i8, Some(fnc_concat));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4766:5: 4766:103 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"source\\0\").unwrap().as_ptr(), Some(fnc_source));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4737:1: 4737:65 (#0)",
        "source": "lil_register(lil, \"expr\".as_ptr() as *const i8, Some(fnc_expr));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4724:1: 4724:73 (#0)",
        "source": "lil_register(lil, \"jaileval\".as_ptr() as *const i8, Some(fnc_jaileval));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4710:1: 4710:71 (#0)",
        "source": "lil_register(lil, \"reflect\".as_ptr() as *const i8, Some(fnc_reflect));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4727:1: 4727:71 (#0)",
        "source": "lil_register(lil, \"indexof\".as_ptr() as *const i8, Some(fnc_indexof));"
      },
      {
        "caller": "DefId(0:389 ~ c2rust_out[3c70]::main::repl)",
        "span": "main.rs:249:5: 253:48 (#0)",
        "source": "lil_register(lil, b\"writechar\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_writechar as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));"
      },
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:318:5: 322:48 (#0)",
        "source": "lil_register(lil, b\"writechar\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_writechar as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4754:5: 4754:103 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"strpos\\0\").unwrap().as_ptr(), Some(fnc_strpos));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4770:5: 4770:101 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"watch\\0\").unwrap().as_ptr(), Some(fnc_watch));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4728:1: 4728:69 (#0)",
        "source": "lil_register(lil, \"filter\".as_ptr() as *const i8, Some(fnc_filter));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4756:5: 4756:99 (#0)",
        "source": "lil_register(lil_ref, CStr::from_bytes_with_nul(b\"trim\\0\").unwrap().as_ptr(), Some(fnc_trim));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4715:1: 4715:63 (#0)",
        "source": "lil_register(lil, \"set\".as_ptr() as *const i8, Some(fnc_set));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4723:1: 4723:71 (#0)",
        "source": "lil_register(lil, \"enveval\".as_ptr() as *const i8, Some(fnc_enveval));"
      },
      {
        "caller": "DefId(0:248 ~ c2rust_out[3c70]::lil::register_stdcmds)",
        "span": "lil.rs:4735:1: 4735:69 (#0)",
        "source": "lil_register(lil, \"return\".as_ptr() as *const i8, Some(fnc_return));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:154 ~ c2rust_out[3c70]::lil::lil_freemem)",
    "span": "lil.rs:3186:1: 3190:2 (#0)",
    "pieces": [
      "lil.rs:3186:1: 3190:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "pub unsafe extern \"C\" fn lil_freemem(mut ptr: *mut std::os::raw::c_void) {\n    free(ptr);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:90 ~ c2rust_out[3c70]::lil::lil_find_local_var)",
    "span": "lil.rs:785:1: 790:2 (#0)",
    "pieces": [
      "lil.rs:785:1: 790:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "unsafe extern \"C\" fn lil_find_local_var(mut lil: lil_t, mut env: lil_env_t,\n                                        mut name: *const std::os::raw::c_char)\n -> lil_var_t {\n    return hm_get(&mut (*env).varmap, name) as lil_var_t;\n}",
    "calls": [
      {
        "caller": "DefId(0:119 ~ c2rust_out[3c70]::lil::lil_find_var)",
        "span": "lil.rs:794:5: 794:63 (#0)",
        "source": "let mut r: lil_var_t = lil_find_local_var(lil, env, name);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:91 ~ c2rust_out[3c70]::lil::lil_find_var)",
    "span": "lil.rs:791:1: 800:2 (#0)",
    "pieces": [
      "lil.rs:791:1: 800:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 10,
    "source": "unsafe extern \"C\" fn lil_find_var(mut lil: lil_t, mut env: lil_env_t,\n                                  mut name: *const std::os::raw::c_char)\n -> lil_var_t {\n    let mut r: lil_var_t = lil_find_local_var(lil, env, name);\n    return if !r.is_null() {\n               r\n           } else if env == (*lil).rootenv {\n               0 as lil_var_t\n           } else { lil_find_var(lil, (*lil).rootenv, name) };\n}",
    "calls": [
      {
        "caller": "DefId(0:125 ~ c2rust_out[3c70]::lil::lil_set_var)",
        "span": "lil.rs:891:9: 891:63 (#0)",
        "source": "let mut var: lil_var_t = lil_find_var(lil, env, name);"
      },
      {
        "caller": "DefId(0:119 ~ c2rust_out[3c70]::lil::lil_find_var)",
        "span": "lil.rs:799:19: 799:62 (#0)",
        "source": "{ lil_find_var(lil, (*lil).rootenv, name) }"
      },
      {
        "caller": "DefId(0:127 ~ c2rust_out[3c70]::lil::lil_get_var_or)",
        "span": "lil.rs:973:5: 973:66 (#0)",
        "source": "let mut var: lil_var_t = lil_find_var(lil, (*lil).env, name);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:98 ~ c2rust_out[3c70]::lil::lil_get_var_or)",
    "span": "lil.rs:969:1: 992:2 (#0)",
    "pieces": [
      "lil.rs:969:1: 992:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 24,
    "source": "pub unsafe extern \"C\" fn lil_get_var_or(mut lil: lil_t,\n                                        mut name: *const std::os::raw::c_char,\n                                        mut defvalue: lil_value_t)\n -> lil_value_t {\n    let mut var: lil_var_t = lil_find_var(lil, (*lil).env, name);\n    let mut retval: lil_value_t =\n        if !var.is_null() { (*var).v } else { defvalue };\n    if (*lil).callback[7 as std::os::raw::c_int as usize].is_some() &&\n           (var.is_null() || (*var).env == (*lil).rootenv) {\n        let mut proc_0: lil_getvar_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_getvar_callback_proc_t>((*lil).callback[7\n                                                                                    as\n                                                                                    std::os::raw::c_int\n                                                                                    as\n                                                                                    usize]);\n        let mut newretval: lil_value_t = retval;\n        if proc_0.expect(\"non-null function pointer\")(lil, name,\n                                                      &mut newretval) != 0 {\n            retval = newretval\n        }\n    }\n    return retval;\n}",
    "calls": [
      {
        "caller": "DefId(0:126 ~ c2rust_out[3c70]::lil::lil_get_var)",
        "span": "lil.rs:962:5: 965:6 (#0)",
        "source": "unsafe {\n        let empty_value = (*lil).empty; // Assuming empty is a valid value of type lil_value_t\n        lil_get_var_or(lil, name, empty_value)\n    }"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:97 ~ c2rust_out[3c70]::lil::lil_get_var)",
    "span": "lil.rs:961:1: 966:2 (#0)",
    "pieces": [
      "lil.rs:961:1: 966:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn lil_get_var(mut lil: lil_t,\n                                     mut name: *const std::os::raw::c_char)\n -> lil_value_t {\n    return lil_get_var_or(lil, name, (*lil).empty);\n}",
    "calls": [
      {
        "caller": "DefId(0:214 ~ c2rust_out[3c70]::lil::real_inc)",
        "span": "lil.rs:4016:5: 4016:57 (#0)",
        "source": "let mut pv: lil_value_t = lil_get_var(lil, varname);"
      },
      {
        "caller": "DefId(0:204 ~ c2rust_out[3c70]::lil::fnc_append)",
        "span": "lil.rs:3806:5: 3806:62 (#0)",
        "source": "list = lil_subst_to_list(lil, lil_get_var(lil, varname));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:114 ~ c2rust_out[3c70]::lil::lil_callback)",
    "span": "lil.rs:1587:1: 1591:2 (#0)",
    "pieces": [
      "lil.rs:1587:1: 1591:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn lil_callback(mut lil: lil_t, mut cb: std::os::raw::c_int,\n                                      mut proc_0: lil_callback_proc_t) {\n    if cb < 0 as std::os::raw::c_int || cb > 8 as std::os::raw::c_int { return }\n    (*lil).callback[cb as usize] = proc_0;\n}",
    "calls": [
      {
        "caller": "DefId(0:389 ~ c2rust_out[3c70]::main::repl)",
        "span": "main.rs:266:5: 277:86 (#0)",
        "source": "lil_callback(lil, 0 as std::os::raw::c_int,\n                 ::std::mem::transmute::<Option<unsafe extern \"C\" fn(_: lil_t,\n                                                                     _:\n                                                                         lil_value_t)\n                                                    -> ()>,\n                                         lil_callback_proc_t>(Some(do_exit as\n                                                                       unsafe extern \"C\" fn(_:\n                                                                                                lil_t,\n                                                                                            _:\n                                                                                                lil_value_t)\n                                                                           ->\n                                                                               ())));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:60 ~ c2rust_out[3c70]::lil::isascii)",
    "span": "lil.rs:356:2: 358:2 (#0)",
    "pieces": [
      "lil.rs:356:2: 358:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "extern \"C\" fn isascii(mut _c: std::os::raw::c_int) -> std::os::raw::c_int {\n    return (_c & !(0x7f as std::os::raw::c_int) == 0 as std::os::raw::c_int) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:165 ~ c2rust_out[3c70]::lil::fnc_eval)",
    "span": "lil.rs:3551:1: 3572:2 (#0)",
    "pieces": [
      "lil.rs:3551:1: 3572:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 22,
    "source": "unsafe extern \"C\" fn fnc_eval(mut lil: lil_t, mut argc: size_t,\n                              mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc == 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n        return lil_parse_value(lil, *argv.offset(0 as std::os::raw::c_int as isize),\n                               0 as std::os::raw::c_int)\n    }\n    if argc > 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n        let mut val: lil_value_t = alloc_value(0 as *const std::os::raw::c_char);\n        let mut r: lil_value_t = 0 as *mut _lil_value_t;\n        let mut i: size_t = 0;\n        i = 0 as std::os::raw::c_int as size_t;\n        while i < argc {\n            if i != 0 { lil_append_char(val, ' ' as i32 as std::os::raw::c_char); }\n            lil_append_val(val, *argv.offset(i as isize));\n            i = i.wrapping_add(1)\n        }\n        r = lil_parse_value(lil, val, 0 as std::os::raw::c_int);\n        lil_free_value(val);\n        return r\n    }\n    return 0 as lil_value_t;\n}",
    "calls": [
      {
        "caller": "DefId(0:195 ~ c2rust_out[3c70]::lil::fnc_upeval)",
        "span": "lil.rs:3593:5: 3593:35 (#0)",
        "source": "r = fnc_eval(lil, argc, argv);"
      },
      {
        "caller": "DefId(0:196 ~ c2rust_out[3c70]::lil::fnc_downeval)",
        "span": "lil.rs:3606:5: 3606:35 (#0)",
        "source": "r = fnc_eval(lil, argc, argv);"
      },
      {
        "caller": "DefId(0:195 ~ c2rust_out[3c70]::lil::fnc_upeval)",
        "span": "lil.rs:3590:34: 3590:70 (#0)",
        "source": "{ return fnc_eval(lil, argc, argv) }"
      },
      {
        "caller": "DefId(0:196 ~ c2rust_out[3c70]::lil::fnc_downeval)",
        "span": "lil.rs:3603:26: 3603:62 (#0)",
        "source": "{ return fnc_eval(lil, argc, argv) }"
      },
      {
        "caller": "DefId(0:194 ~ c2rust_out[3c70]::lil::fnc_topeval)",
        "span": "lil.rs:3580:5: 3580:35 (#0)",
        "source": "r = fnc_eval(lil, argc, argv);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:168 ~ c2rust_out[3c70]::lil::fnc_downeval)",
    "span": "lil.rs:3598:1: 3610:2 (#0)",
    "pieces": [
      "lil.rs:3598:1: 3610:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 13,
    "source": "unsafe extern \"C\" fn fnc_downeval(mut lil: lil_t, mut argc: size_t,\n                                  mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut upenv: lil_env_t = (*lil).env;\n    let mut downenv: lil_env_t = (*lil).downenv;\n    if downenv.is_null() { return fnc_eval(lil, argc, argv) }\n    (*lil).downenv = 0 as lil_env_t;\n    (*lil).env = downenv;\n    r = fnc_eval(lil, argc, argv);\n    (*lil).downenv = downenv;\n    (*lil).env = upenv;\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:83 ~ c2rust_out[3c70]::lil::lil_list_append)",
    "span": "lil.rs:663:1: 686:2 (#0)",
    "pieces": [
      "lil.rs:663:1: 686:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 24,
    "source": "pub unsafe extern \"C\" fn lil_list_append(mut list: lil_list_t,\n                                         mut val: lil_value_t) {\n    if (*list).c == (*list).cap {\n        let mut cap: size_t =\n            if (*list).cap != 0 {\n                (*list).cap.wrapping_add((*list).cap.wrapping_div(2 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      std::os::raw::c_ulong))\n            } else { 32 as std::os::raw::c_int as std::os::raw::c_ulong };\n        let mut nv: *mut lil_value_t =\n            realloc((*list).v as *mut std::os::raw::c_void,\n                    (::std::mem::size_of::<lil_value_t>() as\n                         std::os::raw::c_ulong).wrapping_mul(cap)) as\n                *mut lil_value_t;\n        if nv.is_null() { return }\n        (*list).cap = cap;\n        (*list).v = nv\n    }\n    let fresh5 = (*list).c;\n    (*list).c = (*list).c.wrapping_add(1);\n    let ref mut fresh6 = *(*list).v.offset(fresh5 as isize);\n    *fresh6 = val;\n}",
    "calls": [
      {
        "caller": "DefId(0:239 ~ c2rust_out[3c70]::lil::fnc_split)",
        "span": "lil.rs:4521:5: 4521:32 (#0)",
        "source": "lil_list_append(list, val);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:211 ~ c2rust_out[3c70]::lil::fnc_split)",
    "span": "lil.rs:4494:1: 4525:2 (#0)",
    "pieces": [
      "lil.rs:4494:1: 4525:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 32,
    "source": "unsafe extern \"C\" fn fnc_split(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    let mut sep: *const std::os::raw::c_char =\n        b\" \\x00\" as *const u8 as *const std::os::raw::c_char;\n    let mut i: size_t = 0;\n    let mut val: lil_value_t = 0 as *mut _lil_value_t;\n    let mut str: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    if argc == 0 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if argc > 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n        sep = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));\n        if sep.is_null() || *sep.offset(0 as std::os::raw::c_int as isize) == 0 {\n            return lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n        }\n    }\n    val = lil_alloc_string(b\"\\x00\" as *const u8 as *const std::os::raw::c_char);\n    str = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));\n    list = lil_alloc_list();\n    i = 0 as std::os::raw::c_int as size_t;\n    while *str.offset(i as isize) != 0 {\n        if !strchr(sep, *str.offset(i as isize) as std::os::raw::c_int).is_null() {\n            lil_list_append(list, val);\n            val =\n                lil_alloc_string(b\"\\x00\" as *const u8 as *const std::os::raw::c_char)\n        } else { lil_append_char(val, *str.offset(i as isize)); }\n        i = i.wrapping_add(1)\n    }\n    lil_list_append(list, val);\n    val = lil_list_to_value(list, 1 as std::os::raw::c_int);\n    lil_free_list(list);\n    return val;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:201 ~ c2rust_out[3c70]::lil::fnc_substr)",
    "span": "lil.rs:4265:1: 4294:2 (#0)",
    "pieces": [
      "lil.rs:4265:1: 4294:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 30,
    "source": "unsafe extern \"C\" fn fnc_substr(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut str: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut start: size_t = 0;\n    let mut end: size_t = 0;\n    let mut i: size_t = 0;\n    let mut slen: size_t = 0;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    str = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));\n    if *str.offset(0 as std::os::raw::c_int as isize) == 0 { return 0 as lil_value_t }\n    slen = strlen(str);\n    start =\n        atoll(lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize))) as\n            size_t;\n    end =\n        if argc > 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n            atoll(lil_to_string(*argv.offset(2 as std::os::raw::c_int as isize))) as\n                size_t\n        } else { slen };\n    if end > slen { end = slen }\n    if start >= end { return 0 as lil_value_t }\n    r = lil_alloc_string(b\"\\x00\" as *const u8 as *const std::os::raw::c_char);\n    i = start;\n    while i < end {\n        lil_append_char(r, *str.offset(i as isize));\n        i = i.wrapping_add(1)\n    }\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:68 ~ c2rust_out[3c70]::lil::hm_init)",
    "span": "lil.rs:430:1: 433:2 (#0)",
    "pieces": [
      "lil.rs:430:1: 433:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "unsafe extern \"C\" fn hm_init(mut hm: *mut hashmap_t) {\n    memset(hm as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,\n           ::std::mem::size_of::<hashmap_t>() as std::os::raw::c_ulong);\n}",
    "calls": [
      {
        "caller": "DefId(0:130 ~ c2rust_out[3c70]::lil::lil_new)",
        "span": "lil.rs:1017:5: 1017:33 (#0)",
        "source": "hm_init(&mut (*lil).cmdmap);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:105 ~ c2rust_out[3c70]::lil::get_bracketpart)",
    "span": "lil.rs:1119:1: 1155:2 (#0)",
    "pieces": [
      "lil.rs:1119:1: 1155:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 27,
    "source": "unsafe extern \"C\" fn get_bracketpart(mut lil: lil_t) -> lil_value_t {\n    let mut cnt: size_t = 1 as std::os::raw::c_int as size_t;\n    let mut val: lil_value_t = 0 as *mut _lil_value_t;\n    let mut cmd: lil_value_t = alloc_value(0 as *const std::os::raw::c_char);\n    (*lil).head = (*lil).head.wrapping_add(1);\n    while (*lil).head < (*lil).clen {\n        if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n               '[' as i32 {\n            (*lil).head = (*lil).head.wrapping_add(1);\n            cnt = cnt.wrapping_add(1);\n            lil_append_char(cmd, '[' as i32 as std::os::raw::c_char);\n        } else if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                      ']' as i32 {\n            (*lil).head = (*lil).head.wrapping_add(1);\n            cnt = cnt.wrapping_sub(1);\n            if cnt == 0 as std::os::raw::c_int as std::os::raw::c_ulong { break ; }\n            lil_append_char(cmd, ']' as i32 as std::os::raw::c_char);\n        } else {\n            let fresh16 = (*lil).head;\n            (*lil).head = (*lil).head.wrapping_add(1);\n            lil_append_char(cmd, *(*lil).code.offset(fresh16 as isize));\n        }\n    }\n    val = lil_parse_value(lil, cmd, 0 as std::os::raw::c_int);\n    lil_free_value(cmd);\n    return val;\n}",
    "calls": [
      {
        "caller": "DefId(0:136 ~ c2rust_out[3c70]::lil::next_word)",
        "span": "lil.rs:1202:5: 1202:36 (#0)",
        "source": "let val = get_bracketpart(lil);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:79 ~ c2rust_out[3c70]::lil::lil_append_val)",
    "span": "lil.rs:604:1: 632:2 (#0)",
    "pieces": [
      "lil.rs:604:1: 632:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 18,
    "source": "pub unsafe extern \"C\" fn lil_append_val(mut val: lil_value_t,\n                                        mut v: lil_value_t) -> std::os::raw::c_int {\n    let mut new: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    if v.is_null() || (*v).l == 0 { return 1 as std::os::raw::c_int }\n    new =\n        realloc((*val).d as *mut std::os::raw::c_void,\n                (*val).l.wrapping_add((*v).l).wrapping_add(1 as std::os::raw::c_int as\n                                                               std::os::raw::c_ulong))\n            as *mut std::os::raw::c_char;\n    if new.is_null() { return 0 as std::os::raw::c_int }\n    memcpy(new.offset((*val).l as isize) as *mut std::os::raw::c_void,\n           (*v).d as *const std::os::raw::c_void,\n           (*v).l.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong));\n    (*val).d = new;\n    (*val).l =\n        ((*val).l as std::os::raw::c_ulong).wrapping_add((*v).l) as size_t as size_t;\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:135 ~ c2rust_out[3c70]::lil::get_dollarpart)",
        "span": "lil.rs:1164:5: 1164:44 (#0)",
        "source": "let result = lil_append_val(tmp, name);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:106 ~ c2rust_out[3c70]::lil::get_dollarpart)",
    "span": "lil.rs:1157:1: 1169:2 (#0)",
    "pieces": [
      "lil.rs:1157:1: 1169:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 13,
    "source": "unsafe extern \"C\" fn get_dollarpart(mut lil: lil_t) -> lil_value_t {\n    let mut val: lil_value_t = 0 as *mut _lil_value_t;\n    let mut name: lil_value_t = 0 as *mut _lil_value_t;\n    let mut tmp: lil_value_t = 0 as *mut _lil_value_t;\n    (*lil).head = (*lil).head.wrapping_add(1);\n    name = next_word(lil);\n    tmp = alloc_value((*lil).dollarprefix);\n    lil_append_val(tmp, name);\n    lil_free_value(name);\n    val = lil_parse_value(lil, tmp, 0 as std::os::raw::c_int);\n    lil_free_value(tmp);\n    return val;\n}",
    "calls": [
      {
        "caller": "DefId(0:136 ~ c2rust_out[3c70]::lil::next_word)",
        "span": "lil.rs:1175:8: 1177:6 (#0)",
        "source": "{\n        val = get_dollarpart(lil)\n    }"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:107 ~ c2rust_out[3c70]::lil::next_word)",
    "span": "lil.rs:1170:1: 1293:2 (#0)",
    "pieces": [
      "lil.rs:1170:1: 1293:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 124,
    "source": "unsafe extern \"C\" fn next_word(mut lil: lil_t) -> lil_value_t {\n    let mut val: lil_value_t = 0 as *mut _lil_value_t;\n    let mut start: size_t = 0;\n    skip_spaces(lil);\n    if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int == '$' as i32\n       {\n        val = get_dollarpart(lil)\n    } else if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                  '{' as i32 {\n        let mut cnt: size_t = 1 as std::os::raw::c_int as size_t;\n        (*lil).head = (*lil).head.wrapping_add(1);\n        val = alloc_value(0 as *const std::os::raw::c_char);\n        while (*lil).head < (*lil).clen {\n            if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                   '{' as i32 {\n                (*lil).head = (*lil).head.wrapping_add(1);\n                cnt = cnt.wrapping_add(1);\n                lil_append_char(val, '{' as i32 as std::os::raw::c_char);\n            } else if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int\n                          == '}' as i32 {\n                (*lil).head = (*lil).head.wrapping_add(1);\n                cnt = cnt.wrapping_sub(1);\n                if cnt == 0 as std::os::raw::c_int as std::os::raw::c_ulong { break ; }\n                lil_append_char(val, '}' as i32 as std::os::raw::c_char);\n            } else {\n                let fresh17 = (*lil).head;\n                (*lil).head = (*lil).head.wrapping_add(1);\n                lil_append_char(val, *(*lil).code.offset(fresh17 as isize));\n            }\n        }\n    } else if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                  '[' as i32 {\n        val = get_bracketpart(lil)\n    } else if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                  '\\\"' as i32 ||\n                  *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                      '\\'' as i32 {\n        let fresh18 = (*lil).head;\n        (*lil).head = (*lil).head.wrapping_add(1);\n        let mut sc: std::os::raw::c_char = *(*lil).code.offset(fresh18 as isize);\n        val = alloc_value(0 as *const std::os::raw::c_char);\n        while (*lil).head < (*lil).clen {\n            if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                   '[' as i32 ||\n                   *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                       '$' as i32 {\n                let mut tmp: lil_value_t =\n                    if *(*lil).code.offset((*lil).head as isize) as\n                           std::os::raw::c_int == '$' as i32 {\n                        get_dollarpart(lil)\n                    } else { get_bracketpart(lil) };\n                lil_append_val(val, tmp);\n                lil_free_value(tmp);\n                (*lil).head = (*lil).head.wrapping_sub(1)\n                /* avoid skipping the char below */\n            } else if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int\n                          == '\\\\' as i32 {\n                (*lil).head = (*lil).head.wrapping_add(1);\n                match *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int\n                    {\n                    98 => {\n                        lil_append_char(val, '\\u{8}' as i32 as std::os::raw::c_char);\n                    }\n                    116 => {\n                        lil_append_char(val, '\\t' as i32 as std::os::raw::c_char);\n                    }\n                    110 => {\n                        lil_append_char(val, '\\n' as i32 as std::os::raw::c_char);\n                    }\n                    118 => {\n                        lil_append_char(val, '\\u{b}' as i32 as std::os::raw::c_char);\n                    }\n                    102 => {\n                        lil_append_char(val, '\\u{c}' as i32 as std::os::raw::c_char);\n                    }\n                    114 => {\n                        lil_append_char(val, '\\r' as i32 as std::os::raw::c_char);\n                    }\n                    48 => {\n                        lil_append_char(val,\n                                        0 as std::os::raw::c_int as std::os::raw::c_char);\n                    }\n                    97 => {\n                        lil_append_char(val, '\\u{7}' as i32 as std::os::raw::c_char);\n                    }\n                    99 => {\n                        lil_append_char(val, '}' as i32 as std::os::raw::c_char);\n                    }\n                    111 => {\n                        lil_append_char(val, '{' as i32 as std::os::raw::c_char);\n                    }\n                    _ => {\n                        lil_append_char(val,\n                                        *(*lil).code.offset((*lil).head as\n                                                                isize));\n                    }\n                }\n            } else if *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int\n                          == sc as std::os::raw::c_int {\n                (*lil).head = (*lil).head.wrapping_add(1);\n                break ;\n            } else {\n                lil_append_char(val,\n                                *(*lil).code.offset((*lil).head as isize));\n            }\n            (*lil).head = (*lil).head.wrapping_add(1)\n        }\n    } else {\n        start = (*lil).head;\n        while (*lil).head < (*lil).clen &&\n                  isspace(*(*lil).code.offset((*lil).head as isize) as\n                              std::os::raw::c_int) == 0 &&\n                  islilspecial(*(*lil).code.offset((*lil).head as isize)) == 0\n              {\n            (*lil).head = (*lil).head.wrapping_add(1)\n        }\n        val =\n            alloc_value_len((*lil).code.offset(start as isize),\n                            (*lil).head.wrapping_sub(start))\n    }\n    return if !val.is_null() {\n               val\n           } else { alloc_value(0 as *const std::os::raw::c_char) };\n}",
    "calls": [
      {
        "caller": "DefId(0:135 ~ c2rust_out[3c70]::lil::get_dollarpart)",
        "span": "lil.rs:1162:5: 1162:27 (#0)",
        "source": "name = next_word(lil);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:85 ~ c2rust_out[3c70]::lil::lil_list_get)",
    "span": "lil.rs:692:1: 697:2 (#0)",
    "pieces": [
      "lil.rs:692:1: 697:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn lil_list_get(mut list: lil_list_t, mut index: size_t)\n -> lil_value_t {\n    return if index >= (*list).c {\n               0 as lil_value_t\n           } else { *(*list).v.offset(index as isize) };\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:142 ~ c2rust_out[3c70]::lil::lil_alloc_string_len)",
    "span": "lil.rs:2947:1: 2955:2 (#0)",
    "pieces": [
      "lil.rs:2947:1: 2955:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn lil_alloc_string_len(mut str: *const std::os::raw::c_char,\n                                              mut len: size_t)\n -> lil_value_t {\n    return alloc_value_len(str, len);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:183 ~ c2rust_out[3c70]::lil::fnc_return)",
    "span": "lil.rs:3965:1: 3979:2 (#0)",
    "pieces": [
      "lil.rs:3965:1: 3979:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 15,
    "source": "unsafe extern \"C\" fn fnc_return(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    (*(*lil).env).breakrun = 1 as std::os::raw::c_int;\n    lil_free_value((*(*lil).env).retval);\n    (*(*lil).env).retval =\n        if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n            0 as lil_value_t\n        } else { lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize)) };\n    (*(*lil).env).retval_set = 1 as std::os::raw::c_int;\n    return if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n               0 as lil_value_t\n           } else {\n               lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n           };\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:214 ~ c2rust_out[3c70]::lil::fnc_exit)",
    "span": "lil.rs:4553:1: 4576:2 (#0)",
    "pieces": [
      "lil.rs:4553:1: 4576:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 24,
    "source": "unsafe extern \"C\" fn fnc_exit(mut lil: lil_t, mut argc: size_t,\n                              mut argv: *mut lil_value_t) -> lil_value_t {\n    if (*lil).callback[0 as std::os::raw::c_int as usize].is_some() {\n        let mut proc_0: lil_exit_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_exit_callback_proc_t>((*lil).callback[0\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  usize]);\n        proc_0.expect(\"non-null function pointer\")(lil,\n                                                   if argc >\n                                                          0 as std::os::raw::c_int as\n                                                              std::os::raw::c_ulong {\n                                                       *argv.offset(0 as\n                                                                        std::os::raw::c_int\n                                                                        as\n                                                                        isize)\n                                                   } else {\n                                                       0 as lil_value_t\n                                                   });\n    }\n    return 0 as lil_value_t;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:206 ~ c2rust_out[3c70]::lil::fnc_ltrim)",
    "span": "lil.rs:4393:1: 4404:2 (#0)",
    "pieces": [
      "lil.rs:4393:1: 4404:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "unsafe extern \"C\" fn fnc_ltrim(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc == 0 { return 0 as lil_value_t }\n    return real_trim(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                     if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n                         b\" \\x0c\\n\\r\\t\\x0b\\x00\" as *const u8 as\n                             *const std::os::raw::c_char\n                     } else {\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }, 1 as std::os::raw::c_int, 0 as std::os::raw::c_int);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:61 ~ c2rust_out[3c70]::lil::__istype)",
    "span": "lil.rs:361:1: 368:2 (#0)",
    "pieces": [
      "lil.rs:361:1: 368:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 7,
    "source": "unsafe extern \"C\" fn __istype(mut _c: __darwin_ct_rune_t,\n                              mut _f: std::os::raw::c_ulong) -> std::os::raw::c_int {\n    return if isascii(_c) != 0 {\n               (_DefaultRuneLocale.__runetype[_c as usize] as std::os::raw::c_ulong &\n                    _f != 0) as std::os::raw::c_int\n           } else { (__maskrune(_c, _f) != 0) as std::os::raw::c_int };\n}",
    "calls": [
      {
        "caller": "DefId(0:92 ~ c2rust_out[3c70]::lil::isspace)",
        "span": "lil.rs:404:31: 406:2 (#0)",
        "source": "{\n    __istype(c, 0x4000u64)\n}"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:189 ~ c2rust_out[3c70]::lil::fnc_read)",
    "span": "lil.rs:4049:1: 4090:2 (#0)",
    "pieces": [
      "lil.rs:4049:1: 4090:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 42,
    "source": "unsafe extern \"C\" fn fnc_read(mut lil: lil_t, mut argc: size_t,\n                              mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut f: *mut FILE = 0 as *mut FILE;\n    let mut size: size_t = 0;\n    let mut buffer: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if (*lil).callback[2 as std::os::raw::c_int as usize].is_some() {\n        let mut proc_0: lil_read_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_read_callback_proc_t>((*lil).callback[2\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  usize]);\n        buffer =\n            proc_0.expect(\"non-null function pointer\")(lil,\n                                                       lil_to_string(*argv.offset(0\n                                                                                      as\n                                                                                      std::os::raw::c_int\n                                                                                      as\n                                                                                      isize)))\n    } else {\n        f =\n            fopen(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                  b\"rb\\x00\" as *const u8 as *const std::os::raw::c_char);\n        if f.is_null() { return 0 as lil_value_t }\n        fseek(f, 0 as std::os::raw::c_int as std::os::raw::c_long, 2 as std::os::raw::c_int);\n        size = ftell(f) as size_t;\n        fseek(f, 0 as std::os::raw::c_int as std::os::raw::c_long, 0 as std::os::raw::c_int);\n        buffer =\n            malloc(size.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong)) as\n                *mut std::os::raw::c_char;\n        fread(buffer as *mut std::os::raw::c_void, 1 as std::os::raw::c_int as std::os::raw::c_ulong,\n              size, f);\n        *buffer.offset(size as isize) = 0 as std::os::raw::c_int as std::os::raw::c_char;\n        fclose(f);\n    }\n    r = lil_alloc_string(buffer);\n    free(buffer as *mut std::os::raw::c_void);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:94 ~ c2rust_out[3c70]::lil::del_func)",
    "span": "lil.rs:844:1: 869:2 (#0)",
    "pieces": [
      "lil.rs:844:1: 869:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 26,
    "source": "unsafe extern \"C\" fn del_func(mut lil: lil_t, mut cmd: lil_func_t) {\n    let mut i: size_t = 0;\n    let mut index: size_t = (*lil).cmds;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < (*lil).cmds {\n        if *(*lil).cmd.offset(i as isize) == cmd {\n            index = i;\n            break ;\n        } else { i = i.wrapping_add(1) }\n    }\n    if index == (*lil).cmds { return }\n    hm_put(&mut (*lil).cmdmap, (*cmd).name, 0 as *mut std::os::raw::c_void);\n    if !(*cmd).argnames.is_null() { lil_free_list((*cmd).argnames); }\n    lil_free_value((*cmd).code);\n    free((*cmd).name as *mut std::os::raw::c_void);\n    free(cmd as *mut std::os::raw::c_void);\n    (*lil).cmds = (*lil).cmds.wrapping_sub(1);\n    i = index;\n    while i < (*lil).cmds {\n        let ref mut fresh9 = *(*lil).cmd.offset(i as isize);\n        *fresh9 =\n            *(*lil).cmd.offset(i.wrapping_add(1 as std::os::raw::c_int as\n                                                  std::os::raw::c_ulong) as isize);\n        i = i.wrapping_add(1)\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:186 ~ c2rust_out[3c70]::lil::fnc_rename)",
        "span": "lil.rs:3461:14: 3461:34 (#0)",
        "source": "del_func(lil, func);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:116 ~ c2rust_out[3c70]::lil::lil_set_error_at)",
    "span": "lil.rs:1605:1: 1615:2 (#0)",
    "pieces": [
      "lil.rs:1605:1: 1615:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 11,
    "source": "pub unsafe extern \"C\" fn lil_set_error_at(mut lil: lil_t, mut pos: size_t,\n                                          mut msg: *const std::os::raw::c_char) {\n    if (*lil).error != 0 { return }\n    free((*lil).err_msg as *mut std::os::raw::c_void);\n    (*lil).error = 1 as std::os::raw::c_int;\n    (*lil).err_head = pos;\n    (*lil).err_msg =\n        strclone(if !msg.is_null() {\n                     msg\n                 } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char });\n}",
    "calls": [
      {
        "caller": "DefId(0:186 ~ c2rust_out[3c70]::lil::fnc_rename)",
        "span": "lil.rs:3451:9: 3451:49 (#0)",
        "source": "lil_set_error_at(lil, (*lil).head, msg);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:158 ~ c2rust_out[3c70]::lil::fnc_rename)",
    "span": "lil.rs:3433:1: 3463:2 (#0)",
    "pieces": [
      "lil.rs:3433:1: 3463:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 31,
    "source": "unsafe extern \"C\" fn fnc_rename(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut func: lil_func_t = 0 as *mut _lil_func_t;\n    let mut oldname: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    let mut newname: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    oldname = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));\n    newname = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));\n    func = find_cmd(lil, oldname);\n    if func.is_null() {\n        let mut msg: *mut std::os::raw::c_char =\n            malloc((24 as std::os::raw::c_int as\n                        std::os::raw::c_ulong).wrapping_add(strlen(oldname))) as\n                *mut std::os::raw::c_char;\n        sprintf(msg,\n                b\"unknown function \\'%s\\'\\x00\" as *const u8 as\n                    *const std::os::raw::c_char, oldname);\n        lil_set_error_at(lil, (*lil).head, msg);\n        free(msg as *mut std::os::raw::c_void);\n        return 0 as lil_value_t\n    }\n    r = lil_alloc_string((*func).name);\n    if *newname.offset(0 as std::os::raw::c_int as isize) != 0 {\n        hm_put(&mut (*lil).cmdmap, oldname, 0 as *mut std::os::raw::c_void);\n        hm_put(&mut (*lil).cmdmap, newname, func as *mut std::os::raw::c_void);\n        free((*func).name as *mut std::os::raw::c_void);\n        (*func).name = strclone(newname)\n    } else { del_func(lil, func); }\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:192 ~ c2rust_out[3c70]::lil::fnc_while)",
    "span": "lil.rs:4166:1: 4201:2 (#0)",
    "pieces": [
      "lil.rs:4166:1: 4201:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 36,
    "source": "unsafe extern \"C\" fn fnc_while(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut val: lil_value_t = 0 as *mut _lil_value_t;\n    let mut r: lil_value_t = 0 as lil_value_t;\n    let mut base: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut not: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut v: std::os::raw::c_int = 0;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if strcmp(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n              b\"not\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        not = 1 as std::os::raw::c_int;\n        base = not\n    }\n    if argc < (base as size_t).wrapping_add(2 as std::os::raw::c_int as std::os::raw::c_ulong)\n       {\n        return 0 as lil_value_t\n    }\n    while (*lil).error == 0 && (*(*lil).env).breakrun == 0 {\n        val = lil_eval_expr(lil, *argv.offset(base as isize));\n        if val.is_null() || (*lil).error != 0 { return 0 as lil_value_t }\n        v = lil_to_boolean(val);\n        if not != 0 { v = (v == 0) as std::os::raw::c_int }\n        if v == 0 {\n            lil_free_value(val);\n            break ;\n        } else {\n            if !r.is_null() { lil_free_value(r); }\n            r =\n                lil_parse_value(lil,\n                                *argv.offset((base + 1 as std::os::raw::c_int) as\n                                                 isize), 0 as std::os::raw::c_int);\n            lil_free_value(val);\n        }\n    }\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:76 ~ c2rust_out[3c70]::lil::lil_append_char)",
    "span": "lil.rs:559:1: 573:2 (#0)",
    "pieces": [
      "lil.rs:559:1: 573:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 15,
    "source": "pub unsafe extern \"C\" fn lil_append_char(mut val: lil_value_t,\n                                         mut ch: std::os::raw::c_char)\n -> std::os::raw::c_int {\n    let mut new: *mut std::os::raw::c_char =\n        realloc((*val).d as *mut std::os::raw::c_void,\n                (*val).l.wrapping_add(2 as std::os::raw::c_int as std::os::raw::c_ulong)) as\n            *mut std::os::raw::c_char;\n    if new.is_null() { return 0 as std::os::raw::c_int }\n    let fresh4 = (*val).l;\n    (*val).l = (*val).l.wrapping_add(1);\n    *new.offset(fresh4 as isize) = ch;\n    *new.offset((*val).l as isize) = 0 as std::os::raw::c_int as std::os::raw::c_char;\n    (*val).d = new;\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:215 ~ c2rust_out[3c70]::lil::fnc_source)",
    "span": "lil.rs:4577:1: 4633:2 (#0)",
    "pieces": [
      "lil.rs:4577:1: 4633:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 57,
    "source": "unsafe extern \"C\" fn fnc_source(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut f: *mut FILE = 0 as *mut FILE;\n    let mut size: size_t = 0;\n    let mut buffer: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if (*lil).callback[4 as std::os::raw::c_int as usize].is_some() {\n        let mut proc_0: lil_source_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_source_callback_proc_t>((*lil).callback[4\n                                                                                    as\n                                                                                    std::os::raw::c_int\n                                                                                    as\n                                                                                    usize]);\n        buffer =\n            proc_0.expect(\"non-null function pointer\")(lil,\n                                                       lil_to_string(*argv.offset(0\n                                                                                      as\n                                                                                      std::os::raw::c_int\n                                                                                      as\n                                                                                      isize)))\n    } else if (*lil).callback[2 as std::os::raw::c_int as usize].is_some() {\n        let mut proc_1: lil_read_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_read_callback_proc_t>((*lil).callback[2\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  usize]);\n        buffer =\n            proc_1.expect(\"non-null function pointer\")(lil,\n                                                       lil_to_string(*argv.offset(0\n                                                                                      as\n                                                                                      std::os::raw::c_int\n                                                                                      as\n                                                                                      isize)))\n    } else {\n        f =\n            fopen(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                  b\"rb\\x00\" as *const u8 as *const std::os::raw::c_char);\n        if f.is_null() { return 0 as lil_value_t }\n        fseek(f, 0 as std::os::raw::c_int as std::os::raw::c_long, 2 as std::os::raw::c_int);\n        size = ftell(f) as size_t;\n        fseek(f, 0 as std::os::raw::c_int as std::os::raw::c_long, 0 as std::os::raw::c_int);\n        buffer =\n            malloc(size.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong)) as\n                *mut std::os::raw::c_char;\n        fread(buffer as *mut std::os::raw::c_void, 1 as std::os::raw::c_int as std::os::raw::c_ulong,\n              size, f);\n        *buffer.offset(size as isize) = 0 as std::os::raw::c_int as std::os::raw::c_char;\n        fclose(f);\n    }\n    r = lil_parse(lil, buffer, 0 as std::os::raw::c_int as size_t, 0 as std::os::raw::c_int);\n    free(buffer as *mut std::os::raw::c_void);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:102 ~ c2rust_out[3c70]::lil::islilspecial)",
    "span": "lil.rs:1021:2: 1026:2 (#0)",
    "pieces": [
      "lil.rs:1021:2: 1026:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "extern \"C\" fn islilspecial(mut ch: std::os::raw::c_char) -> std::os::raw::c_int {\n    return (ch as std::os::raw::c_int == '$' as i32 || ch as std::os::raw::c_int == '{' as i32\n                || ch as std::os::raw::c_int == '}' as i32 ||\n                ch as std::os::raw::c_int == '[' as i32 ||\n                ch as std::os::raw::c_int == ']' as i32 ||\n                ch as std::os::raw::c_int == '\\\"' as i32 ||\n                ch as std::os::raw::c_int == '\\'' as i32 ||\n                ch as std::os::raw::c_int == ';' as i32) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:69 ~ c2rust_out[3c70]::lil::hm_destroy)",
    "span": "lil.rs:434:1: 445:2 (#0)",
    "pieces": [
      "lil.rs:434:1: 445:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 15,
    "source": "unsafe extern \"C\" fn hm_destroy(mut hm: *mut hashmap_t) {\n    let mut i: size_t = 0;\n    let mut j: size_t = 0;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < 256 as std::os::raw::c_int as std::os::raw::c_ulong {\n        j = 0 as std::os::raw::c_int as size_t;\n        while j < (*hm).cell[i as usize].c {\n            free((*(*hm).cell[i as usize].e.offset(j as isize)).k as\n                     *mut std::os::raw::c_void);\n            j = j.wrapping_add(1)\n        }\n        free((*hm).cell[i as usize].e as *mut std::os::raw::c_void);\n        i = i.wrapping_add(1)\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:177 ~ c2rust_out[3c70]::lil::lil_free)",
        "span": "lil.rs:2997:5: 2997:36 (#0)",
        "source": "hm_destroy(&mut (*lil).cmdmap);"
      },
      {
        "caller": "DefId(0:116 ~ c2rust_out[3c70]::lil::lil_free_env)",
        "span": "lil.rs:773:5: 773:36 (#0)",
        "source": "hm_destroy(&mut (*env).varmap);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:159 ~ c2rust_out[3c70]::lil::fnc_unusedname)",
    "span": "lil.rs:3464:1: 3473:2 (#0)",
    "pieces": [
      "lil.rs:3464:1: 3473:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "unsafe extern \"C\" fn fnc_unusedname(mut lil: lil_t, mut argc: size_t,\n                                    mut argv: *mut lil_value_t)\n -> lil_value_t {\n    return lil_unused_name(lil,\n                           if argc > 0 as std::os::raw::c_int as std::os::raw::c_ulong {\n                               lil_to_string(*argv.offset(0 as std::os::raw::c_int as\n                                                              isize))\n                           } else {\n                               b\"unusedname\\x00\" as *const u8 as\n                                   *const std::os::raw::c_char\n                           });\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:181 ~ c2rust_out[3c70]::lil::fnc_concat)",
    "span": "lil.rs:3909:1: 3927:2 (#0)",
    "pieces": [
      "lil.rs:3909:1: 3927:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 19,
    "source": "unsafe extern \"C\" fn fnc_concat(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut tmp: lil_value_t = 0 as *mut _lil_value_t;\n    let mut i: size_t = 0;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    r = lil_alloc_string(b\"\\x00\" as *const u8 as *const std::os::raw::c_char);\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < argc {\n        list = lil_subst_to_list(lil, *argv.offset(i as isize));\n        tmp = lil_list_to_value(list, 1 as std::os::raw::c_int);\n        lil_free_list(list);\n        lil_append_val(r, tmp);\n        lil_free_value(tmp);\n        i = i.wrapping_add(1)\n    }\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:99 ~ c2rust_out[3c70]::lil::lil_push_env)",
    "span": "lil.rs:994:1: 998:2 (#0)",
    "pieces": [
      "lil.rs:994:1: 998:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn lil_push_env(mut lil: lil_t) -> lil_env_t {\n    let mut env: lil_env_t = lil_alloc_env((*lil).env);\n    (*lil).env = env;\n    return env;\n}",
    "calls": [
      {
        "caller": "DefId(0:197 ~ c2rust_out[3c70]::lil::fnc_enveval)",
        "span": "lil.rs:3645:5: 3645:23 (#0)",
        "source": "lil_push_env(lil);"
      },
      {
        "caller": "DefId(0:142 ~ c2rust_out[3c70]::lil::lil_call)",
        "span": "lil.rs:1542:13: 1542:31 (#0)",
        "source": "lil_push_env(lil);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:78 ~ c2rust_out[3c70]::lil::lil_append_string)",
    "span": "lil.rs:598:1: 602:2 (#0)",
    "pieces": [
      "lil.rs:598:1: 602:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn lil_append_string(mut val: lil_value_t,\n                                           mut s: *const std::os::raw::c_char)\n -> std::os::raw::c_int {\n    return lil_append_string_len(val, s, strlen(s));\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:166 ~ c2rust_out[3c70]::lil::fnc_topeval)",
    "span": "lil.rs:3573:1: 3584:2 (#0)",
    "pieces": [
      "lil.rs:3573:1: 3584:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "unsafe extern \"C\" fn fnc_topeval(mut lil: lil_t, mut argc: size_t,\n                                 mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut thisenv: lil_env_t = (*lil).env;\n    let mut thisdownenv: lil_env_t = (*lil).downenv;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    (*lil).env = (*lil).rootenv;\n    (*lil).downenv = thisenv;\n    r = fnc_eval(lil, argc, argv);\n    (*lil).downenv = thisdownenv;\n    (*lil).env = thisenv;\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:96 ~ c2rust_out[3c70]::lil::lil_set_var)",
    "span": "lil.rs:881:1: 959:2 (#0)",
    "pieces": [
      "lil.rs:881:1: 959:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 79,
    "source": "pub unsafe extern \"C\" fn lil_set_var(mut lil: lil_t,\n                                     mut name: *const std::os::raw::c_char,\n                                     mut val: lil_value_t,\n                                     mut local: std::os::raw::c_int) -> lil_var_t {\n    let mut nvar: *mut lil_var_t = 0 as *mut lil_var_t;\n    let mut env: lil_env_t =\n        if local == 0 as std::os::raw::c_int { (*lil).rootenv } else { (*lil).env };\n    let mut freeval: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    if *name.offset(0 as std::os::raw::c_int as isize) == 0 { return 0 as lil_var_t }\n    if local != 2 as std::os::raw::c_int {\n        let mut var: lil_var_t = lil_find_var(lil, env, name);\n        if local == 3 as std::os::raw::c_int && !var.is_null() &&\n               (*var).env == (*lil).rootenv && (*var).env != env {\n            var = 0 as lil_var_t\n        }\n        if (var.is_null() && env == (*lil).rootenv ||\n                !var.is_null() && (*var).env == (*lil).rootenv) &&\n               (*lil).callback[6 as std::os::raw::c_int as usize].is_some() {\n            let mut proc_0: lil_setvar_callback_proc_t =\n                ::std::mem::transmute::<lil_callback_proc_t,\n                                        lil_setvar_callback_proc_t>((*lil).callback[6\n                                                                                        as\n                                                                                        std::os::raw::c_int\n                                                                                        as\n                                                                                        usize]);\n            let mut newval: lil_value_t = val;\n            let mut r: std::os::raw::c_int =\n                proc_0.expect(\"non-null function pointer\")(lil, name,\n                                                           &mut newval);\n            if r < 0 as std::os::raw::c_int { return 0 as lil_var_t }\n            if r != 0 { val = newval; freeval = 1 as std::os::raw::c_int }\n        }\n        if !var.is_null() {\n            lil_free_value((*var).v);\n            (*var).v = if freeval != 0 { val } else { lil_clone_value(val) };\n            if !(*var).w.is_null() {\n                let mut save_env: lil_env_t = 0 as *mut _lil_env_t;\n                save_env = (*lil).env;\n                (*lil).env = (*var).env;\n                lil_free_value(lil_parse(lil, (*var).w,\n                                         0 as std::os::raw::c_int as size_t,\n                                         1 as std::os::raw::c_int));\n                (*lil).env = save_env\n            }\n            return var\n        }\n    }\n    nvar =\n        realloc((*env).var as *mut std::os::raw::c_void,\n                (::std::mem::size_of::<lil_var_t>() as\n                     std::os::raw::c_ulong).wrapping_mul((*env).vars.wrapping_add(1 as\n                                                                              std::os::raw::c_int\n                                                                              as\n                                                                              std::os::raw::c_ulong)))\n            as *mut lil_var_t;\n    if nvar.is_null() {\n        /* TODO: report memory error */\n        return 0 as lil_var_t\n    }\n    (*env).var = nvar;\n    let ref mut fresh10 = *nvar.offset((*env).vars as isize);\n    *fresh10 =\n        calloc(1 as std::os::raw::c_int as std::os::raw::c_ulong,\n               ::std::mem::size_of::<_lil_var_t>() as std::os::raw::c_ulong) as\n            lil_var_t;\n    let ref mut fresh11 = (**nvar.offset((*env).vars as isize)).n;\n    *fresh11 = strclone(name);\n    let ref mut fresh12 = (**nvar.offset((*env).vars as isize)).w;\n    *fresh12 = 0 as *mut std::os::raw::c_char;\n    let ref mut fresh13 = (**nvar.offset((*env).vars as isize)).env;\n    *fresh13 = env;\n    let ref mut fresh14 = (**nvar.offset((*env).vars as isize)).v;\n    *fresh14 = if freeval != 0 { val } else { lil_clone_value(val) };\n    hm_put(&mut (*env).varmap, name,\n           *nvar.offset((*env).vars as isize) as *mut std::os::raw::c_void);\n    let fresh15 = (*env).vars;\n    (*env).vars = (*env).vars.wrapping_add(1);\n    return *nvar.offset(fresh15 as isize);\n}",
    "calls": [
      {
        "caller": "DefId(0:204 ~ c2rust_out[3c70]::lil::fnc_append)",
        "span": "lil.rs:3814:5: 3814:42 (#0)",
        "source": "lil_set_var(lil, varname, r, access);"
      },
      {
        "caller": "DefId(0:142 ~ c2rust_out[3c70]::lil::lil_call)",
        "span": "lil.rs:1561:17: 1563:64 (#0)",
        "source": "lil_set_var(lil,\n                            b\"args\\x00\" as *const u8 as *const std::os::raw::c_char,\n                            argsval, 2 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:214 ~ c2rust_out[3c70]::lil::real_inc)",
        "span": "lil.rs:4023:5: 4023:61 (#0)",
        "source": "lil_set_var(lil, varname, pv, 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:335:5: 336:43 (#0)",
        "source": "lil_set_var(lil, b\"argv\\x00\" as *const u8 as *const std::os::raw::c_char, args,\n                0 as std::os::raw::c_int);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:103 ~ c2rust_out[3c70]::lil::ateol)",
    "span": "lil.rs:1028:1: 1036:2 (#0)",
    "pieces": [
      "lil.rs:1028:1: 1036:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "unsafe extern \"C\" fn ateol(mut lil: lil_t) -> std::os::raw::c_int {\n    return ((*lil).ignoreeol == 0 &&\n                (*(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int ==\n                     '\\n' as i32 ||\n                     *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int\n                         == '\\r' as i32 ||\n                     *(*lil).code.offset((*lil).head as isize) as std::os::raw::c_int\n                         == ';' as i32)) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:89 ~ c2rust_out[3c70]::lil::lil_free_env)",
    "span": "lil.rs:769:1: 784:2 (#0)",
    "pieces": [
      "lil.rs:769:1: 784:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 16,
    "source": "pub unsafe extern \"C\" fn lil_free_env(mut env: lil_env_t) {\n    let mut i: size_t = 0;\n    if env.is_null() { return }\n    lil_free_value((*env).retval);\n    hm_destroy(&mut (*env).varmap);\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < (*env).vars {\n        free((**(*env).var.offset(i as isize)).n as *mut std::os::raw::c_void);\n        lil_free_value((**(*env).var.offset(i as isize)).v);\n        free((**(*env).var.offset(i as isize)).w as *mut std::os::raw::c_void);\n        free(*(*env).var.offset(i as isize) as *mut std::os::raw::c_void);\n        i = i.wrapping_add(1)\n    }\n    free((*env).var as *mut std::os::raw::c_void);\n    free(env as *mut std::os::raw::c_void);\n}",
    "calls": [
      {
        "caller": "DefId(0:129 ~ c2rust_out[3c70]::lil::lil_pop_env)",
        "span": "lil.rs:1003:9: 1003:34 (#0)",
        "source": "lil_free_env((*lil).env);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:156 ~ c2rust_out[3c70]::lil::fnc_reflect)",
    "span": "lil.rs:3206:1: 3392:2 (#0)",
    "pieces": [
      "lil.rs:3206:1: 3208:4 (#0)",
      "lil.rs:3356:1: 3356:4 (#0)",
      "lil.rs:3392:1: 3392:2 (#0)"
    ],
    "sub_chunks": [
      0,
      1
    ],
    "num_lines": 5,
    "source": "unsafe extern \"C\" fn fnc_reflect(mut lil: lil_t, mut argc: size_t,\n                                 mut argv: *mut lil_value_t) -> lil_value_t {\n   <<chunk 0>>   <<chunk 1>>}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": [
      {
        "chunk_id": 0,
        "span": "lil.rs:3208:5: 3355:6 (#0)",
        "pieces": [
          "lil.rs:3208:5: 3355:6 (#0)"
        ],
        "num_lines": 148,
        "source": "let mut func: lil_func_t = 0 as *mut _lil_func_t;\n    let mut type_0: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    let mut i: size_t = 0;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    if argc == 0 { return 0 as lil_value_t }\n    type_0 = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));\n    if strcmp(type_0, b\"version\\x00\" as *const u8 as *const std::os::raw::c_char) == 0\n       {\n        return lil_alloc_string(b\"0.1\\x00\" as *const u8 as\n                                    *const std::os::raw::c_char)\n    }\n    if strcmp(type_0, b\"args\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n            return 0 as lil_value_t\n        }\n        func =\n            find_cmd(lil,\n                     lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));\n        if func.is_null() || (*func).argnames.is_null() {\n            return 0 as lil_value_t\n        }\n        return lil_list_to_value((*func).argnames, 1 as std::os::raw::c_int)\n    }\n    if strcmp(type_0, b\"body\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n            return 0 as lil_value_t\n        }\n        func =\n            find_cmd(lil,\n                     lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));\n        if func.is_null() || (*func).proc_0.is_some() {\n            return 0 as lil_value_t\n        }\n        return lil_clone_value((*func).code)\n    }\n    if strcmp(type_0, b\"func-count\\x00\" as *const u8 as *const std::os::raw::c_char)\n           == 0 {\n        return lil_alloc_integer((*lil).cmds as lilint_t)\n    }\n    if strcmp(type_0, b\"funcs\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        let mut funcs: lil_list_t = lil_alloc_list();\n        i = 0 as std::os::raw::c_int as size_t;\n        while i < (*lil).cmds {\n            lil_list_append(funcs,\n                            lil_alloc_string((**(*lil).cmd.offset(i as\n                                                                      isize)).name));\n            i = i.wrapping_add(1)\n        }\n        r = lil_list_to_value(funcs, 1 as std::os::raw::c_int);\n        lil_free_list(funcs);\n        return r\n    }\n    if strcmp(type_0, b\"vars\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        let mut vars: lil_list_t = lil_alloc_list();\n        let mut env: lil_env_t = (*lil).env;\n        while !env.is_null() {\n            i = 0 as std::os::raw::c_int as size_t;\n            while i < (*env).vars {\n                lil_list_append(vars,\n                                lil_alloc_string((**(*env).var.offset(i as\n                                                                          isize)).n));\n                i = i.wrapping_add(1)\n            }\n            env = (*env).parent\n        }\n        r = lil_list_to_value(vars, 1 as std::os::raw::c_int);\n        lil_free_list(vars);\n        return r\n    }\n    if strcmp(type_0, b\"globals\\x00\" as *const u8 as *const std::os::raw::c_char) == 0\n       {\n        let mut vars_0: lil_list_t = lil_alloc_list();\n        i = 0 as std::os::raw::c_int as size_t;\n        while i < (*(*lil).rootenv).vars {\n            lil_list_append(vars_0,\n                            lil_alloc_string((**(*(*lil).rootenv).var.offset(i\n                                                                                 as\n                                                                                 isize)).n));\n            i = i.wrapping_add(1)\n        }\n        r = lil_list_to_value(vars_0, 1 as std::os::raw::c_int);\n        lil_free_list(vars_0);\n        return r\n    }\n    if strcmp(type_0, b\"has-func\\x00\" as *const u8 as *const std::os::raw::c_char) ==\n           0 {\n        let mut target: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n        if argc == 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n            return 0 as lil_value_t\n        }\n        target = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));\n        return if hm_has(&mut (*lil).cmdmap, target) != 0 {\n                   lil_alloc_string(b\"1\\x00\" as *const u8 as\n                                        *const std::os::raw::c_char)\n               } else { 0 as lil_value_t }\n    }\n    if strcmp(type_0, b\"has-var\\x00\" as *const u8 as *const std::os::raw::c_char) == 0\n       {\n        let mut target_0: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n        let mut env_0: lil_env_t = (*lil).env;\n        if argc == 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n            return 0 as lil_value_t\n        }\n        target_0 = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));\n        while !env_0.is_null() {\n            if hm_has(&mut (*env_0).varmap, target_0) != 0 {\n                return lil_alloc_string(b\"1\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char)\n            }\n            env_0 = (*env_0).parent\n        }\n        return 0 as lil_value_t\n    }\n    if strcmp(type_0, b\"has-global\\x00\" as *const u8 as *const std::os::raw::c_char)\n           == 0 {\n        let mut target_1: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n        if argc == 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n            return 0 as lil_value_t\n        }\n        target_1 = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));\n        i = 0 as std::os::raw::c_int as size_t;\n        while i < (*(*lil).rootenv).vars {\n            if strcmp(target_1,\n                      (**(*(*lil).rootenv).var.offset(i as isize)).n) == 0 {\n                return lil_alloc_string(b\"1\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char)\n            }\n            i = i.wrapping_add(1)\n        }\n        return 0 as lil_value_t\n    }\n    if strcmp(type_0, b\"error\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        return if !(*lil).err_msg.is_null() {\n                   lil_alloc_string((*lil).err_msg)\n               } else { 0 as lil_value_t }\n    }\n    if strcmp(type_0,\n              b\"dollar-prefix\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        let mut r_0: lil_value_t = 0 as *mut _lil_value_t;\n        if argc == 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n            return lil_alloc_string((*lil).dollarprefix)\n        }\n        r_0 = lil_alloc_string((*lil).dollarprefix);\n        free((*lil).dollarprefix as *mut std::os::raw::c_void);\n        (*lil).dollarprefix =\n            strclone(lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));\n        return r_0\n    }",
        "sub_chunks": [],
        "live_in": [
          "mut lil: *mut lil::_lil_t",
          "mut argc: u64",
          "mut argv: *mut *mut lil::_lil_value_t"
        ],
        "live_out": [
          "mut lil: *mut lil::_lil_t",
          "mut argc: u64",
          "mut argv: *mut *mut lil::_lil_value_t",
          "mut func: *mut lil::_lil_func_t",
          "mut type_0: *const i8",
          "mut i: u64",
          "mut r: *mut lil::_lil_value_t",
          "mut r_0: *mut lil::_lil_value_t"
        ]
      },
      {
        "chunk_id": 1,
        "span": "lil.rs:3356:5: 3390:25 (#0)",
        "pieces": [
          "lil.rs:3356:5: 3390:25 (#0)"
        ],
        "num_lines": 29,
        "source": "if strcmp(type_0, b\"this\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        let mut env_1: lil_env_t = (*lil).env;\n        while env_1 != (*lil).rootenv && (*env_1).catcher_for.is_null() &&\n                  (*env_1).func.is_null() {\n            env_1 = (*env_1).parent\n        }\n        if !(*env_1).catcher_for.is_null() {\n            return lil_alloc_string((*lil).catcher)\n        }\n        if env_1 == (*lil).rootenv {\n            return lil_alloc_string((*lil).rootcode)\n        }\n        return if !(*env_1).func.is_null() {\n                   (*(*env_1).func).code\n               } else { 0 as lil_value_t }\n    }\n    if strcmp(type_0, b\"name\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        let mut env_2: lil_env_t = (*lil).env;\n        while env_2 != (*lil).rootenv && (*env_2).catcher_for.is_null() &&\n                  (*env_2).func.is_null() {\n            env_2 = (*env_2).parent\n        }\n        if !(*env_2).catcher_for.is_null() { return (*env_2).catcher_for }\n        if env_2 == (*lil).rootenv { return 0 as lil_value_t }\n        return if !(*env_2).func.is_null() {\n                   lil_alloc_string((*(*env_2).func).name)\n               } else { 0 as lil_value_t }\n    }\n    return 0 as lil_value_t;",
        "sub_chunks": [],
        "live_in": [
          "mut lil: *mut lil::_lil_t",
          "mut func: *mut lil::_lil_func_t",
          "mut type_0: *const i8"
        ],
        "live_out": [
          "mut lil: *mut lil::_lil_t",
          "mut func: *mut lil::_lil_func_t",
          "mut type_0: *const i8"
        ]
      }
    ]
  },
  {
    "func_defid": "DefId(0:177 ~ c2rust_out[3c70]::lil::fnc_slice)",
    "span": "lil.rs:3817:1: 3851:2 (#0)",
    "pieces": [
      "lil.rs:3817:1: 3851:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 35,
    "source": "unsafe extern \"C\" fn fnc_slice(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    let mut slice: lil_list_t = 0 as *mut _lil_list_t;\n    let mut i: size_t = 0;\n    let mut from: lilint_t = 0;\n    let mut to: lilint_t = 0;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n        return lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n    }\n    from = lil_to_integer(*argv.offset(1 as std::os::raw::c_int as isize));\n    if from < 0 as std::os::raw::c_int as std::os::raw::c_longlong {\n        from = 0 as std::os::raw::c_int as lilint_t\n    }\n    list = lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));\n    to =\n        if argc > 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n            lil_to_integer(*argv.offset(2 as std::os::raw::c_int as isize))\n        } else { (*list).c as lilint_t };\n    if to > (*list).c as lilint_t { to = (*list).c as lilint_t }\n    if to < from { to = from }\n    slice = lil_alloc_list();\n    i = from as size_t;\n    while i < to as size_t {\n        lil_list_append(slice,\n                        lil_clone_value(*(*list).v.offset(i as isize)));\n        i = i.wrapping_add(1)\n    }\n    lil_free_list(list);\n    r = lil_list_to_value(slice, 1 as std::os::raw::c_int);\n    lil_free_list(slice);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:138 ~ c2rust_out[3c70]::lil::lil_to_double)",
    "span": "lil.rs:2912:1: 2915:2 (#0)",
    "pieces": [
      "lil.rs:2912:1: 2915:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn lil_to_double(mut val: lil_value_t)\n -> std::os::raw::c_double {\n    return atof(lil_to_string(val));\n}",
    "calls": [
      {
        "caller": "DefId(0:216 ~ c2rust_out[3c70]::lil::fnc_dec)",
        "span": "lil.rs:4040:39: 4042:6 (#0)",
        "source": "{\n        lil_to_double(*argv.offset(1))\n    }"
      },
      {
        "caller": "DefId(0:214 ~ c2rust_out[3c70]::lil::real_inc)",
        "span": "lil.rs:4017:5: 4017:90 (#0)",
        "source": "let mut dv: std::os::raw::c_double = lil_to_double(pv) + v as std::os::raw::c_double;"
      },
      {
        "caller": "DefId(0:215 ~ c2rust_out[3c70]::lil::fnc_inc)",
        "span": "lil.rs:4031:81: 4033:22 (#0)",
        "source": "{\n                        lil_to_double(*argv.offset(1 as std::os::raw::c_int as isize))\n                    }"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:186 ~ c2rust_out[3c70]::lil::real_inc)",
    "span": "lil.rs:4013:1: 4025:2 (#0)",
    "pieces": [
      "lil.rs:4013:1: 4025:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 11,
    "source": "unsafe extern \"C\" fn real_inc(mut lil: lil_t,\n                              mut varname: *const std::os::raw::c_char,\n                              mut v: std::os::raw::c_float) -> lil_value_t {\n    let mut pv: lil_value_t = lil_get_var(lil, varname);\n    let mut dv: std::os::raw::c_double = lil_to_double(pv) + v as std::os::raw::c_double;\n    if fmod(dv, 1 as std::os::raw::c_int as std::os::raw::c_double) != 0. {\n        pv = lil_alloc_double(dv)\n    } else { pv = lil_alloc_integer(dv as lilint_t) }\n    lil_set_var(lil, varname, pv, 1 as std::os::raw::c_int);\n    return pv;\n}",
    "calls": [
      {
        "caller": "DefId(0:215 ~ c2rust_out[3c70]::lil::fnc_inc)",
        "span": "lil.rs:4029:5: 4034:48 (#0)",
        "source": "return real_inc(lil,\n                    lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                    if argc > 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n                        lil_to_double(*argv.offset(1 as std::os::raw::c_int as isize))\n                    } else { 1 as std::os::raw::c_int as std::os::raw::c_double } as\n                        std::os::raw::c_float);"
      },
      {
        "caller": "DefId(0:216 ~ c2rust_out[3c70]::lil::fnc_dec)",
        "span": "lil.rs:4046:5: 4046:73 (#0)",
        "source": "return real_inc(lil, lil_to_string(*arg0), -decrement_value as f32);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:209 ~ c2rust_out[3c70]::lil::fnc_streq)",
    "span": "lil.rs:4426:1: 4438:2 (#0)",
    "pieces": [
      "lil.rs:4426:1: 4438:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 15,
    "source": "unsafe extern \"C\" fn fnc_streq(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    return lil_alloc_integer(if strcmp(lil_to_string(*argv.offset(0 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      isize)),\n                                       lil_to_string(*argv.offset(1 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      isize)))\n                                    != 0 {\n                                 0 as std::os::raw::c_int\n                             } else { 1 as std::os::raw::c_int } as lilint_t);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:351 ~ c2rust_out[3c70]::main::do_system)",
    "span": "main.rs:149:1: 171:2 (#0)",
    "pieces": [
      "main.rs:149:1: 171:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 68,
    "source": "unsafe extern \"C\" fn do_system(mut argc: size_t,\n                               mut argv: *mut *mut std::os::raw::c_char)\n -> *mut std::os::raw::c_char {\n    let mut cmd: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    let mut cmdlen: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut i: size_t = 0;\n    let mut p: *mut FILE = 0 as *mut FILE;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < argc {\n        let mut len: size_t = strlen(*argv.offset(i as isize));\n        if i != 0 as std::os::raw::c_int as std::os::raw::c_ulong {\n            cmd =\n                realloc(cmd as *mut std::os::raw::c_void,\n                        (cmdlen + 1 as std::os::raw::c_int) as std::os::raw::c_ulong) as\n                    *mut std::os::raw::c_char;\n            let fresh0 = cmdlen;\n            cmdlen = cmdlen + 1;\n            *cmd.offset(fresh0 as isize) = ' ' as i32 as std::os::raw::c_char\n        }\n        cmd =\n            realloc(cmd as *mut std::os::raw::c_void,\n                    (cmdlen as std::os::raw::c_ulong).wrapping_add(len)) as\n                *mut std::os::raw::c_char;\n        memcpy(cmd.offset(cmdlen as isize) as *mut std::os::raw::c_void,\n               *argv.offset(i as isize) as *const std::os::raw::c_void, len);\n        cmdlen =\n            (cmdlen as std::os::raw::c_ulong).wrapping_add(len) as std::os::raw::c_int as\n                std::os::raw::c_int;\n        i = i.wrapping_add(1)\n    }\n    cmd =\n        realloc(cmd as *mut std::os::raw::c_void,\n                (cmdlen + 1 as std::os::raw::c_int) as std::os::raw::c_ulong) as\n            *mut std::os::raw::c_char;\n    *cmd.offset(cmdlen as isize) = 0 as std::os::raw::c_int as std::os::raw::c_char;\n    p = popen(cmd, b\"r\\x00\" as *const u8 as *const std::os::raw::c_char);\n    free(cmd as *mut std::os::raw::c_void);\n    if !p.is_null() {\n        let mut retval: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n        let mut size: size_t = 0 as std::os::raw::c_int as size_t;\n        let mut buff: [std::os::raw::c_char; 1024] = [0; 1024];\n        let mut bytes: ssize_t = 0;\n        loop  {\n            bytes =\n                fread(buff.as_mut_ptr() as *mut std::os::raw::c_void,\n                      1 as std::os::raw::c_int as std::os::raw::c_ulong,\n                      1024 as std::os::raw::c_int as std::os::raw::c_ulong, p) as ssize_t;\n            if !(bytes != 0) { break ; }\n            retval =\n                realloc(retval as *mut std::os::raw::c_void,\n                        size.wrapping_add(bytes as std::os::raw::c_ulong)) as\n                    *mut std::os::raw::c_char;\n            memcpy(retval.offset(size as isize) as *mut std::os::raw::c_void,\n                   buff.as_mut_ptr() as *const std::os::raw::c_void,\n                   bytes as std::os::raw::c_ulong);\n            size =\n                (size as std::os::raw::c_ulong).wrapping_add(bytes as std::os::raw::c_ulong)\n                    as size_t as size_t\n        }\n        retval =\n            realloc(retval as *mut std::os::raw::c_void,\n                    size.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong)) as\n                *mut std::os::raw::c_char;\n        *retval.offset(size as isize) = 0 as std::os::raw::c_int as std::os::raw::c_char;\n        pclose(p);\n        return retval\n    } else { return 0 as *mut std::os::raw::c_char };\n}",
    "calls": [
      {
        "caller": "DefId(0:387 ~ c2rust_out[3c70]::main::fnc_system)",
        "span": "main.rs:203:5: 203:80 (#0)",
        "source": "let rv = do_system(argc as usize, sargv as *mut *mut std::os::raw::c_char);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "main.rs:99:1: 99:31 (#0)",
        "source": "pub use crate::lil::__int64_t;"
      },
      {
        "span": "main.rs:82:1: 82:34 (#0)",
        "source": "pub use crate::lil::lil_callback;"
      },
      {
        "span": "main.rs:92:1: 92:33 (#0)",
        "source": "pub use crate::lil::lil_set_var;"
      },
      {
        "span": "main.rs:103:1: 103:28 (#0)",
        "source": "pub use crate::lil::size_t;"
      },
      {
        "span": "main.rs:6:1: 6:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "main.rs:104:1: 104:29 (#0)",
        "source": "pub use crate::lil::int64_t;"
      },
      {
        "span": "main.rs:96:1: 96:28 (#0)",
        "source": "pub use crate::lil::_lil_t;"
      },
      {
        "span": "main.rs:112:1: 112:29 (#0)",
        "source": "pub use crate::lil::__sFILE;"
      },
      {
        "span": "main.rs:114:1: 114:30 (#0)",
        "source": "pub use crate::lil::lilint_t;"
      },
      {
        "span": "main.rs:118:1: 118:27 (#0)",
        "source": "pub use crate::lil::lil_t;"
      },
      {
        "span": "main.rs:116:1: 116:31 (#0)",
        "source": "pub use crate::lil::lil_var_t;"
      },
      {
        "span": "main.rs:85:1: 85:35 (#0)",
        "source": "pub use crate::lil::lil_free_list;"
      },
      {
        "span": "main.rs:89:1: 89:29 (#0)",
        "source": "pub use crate::lil::lil_new;"
      },
      {
        "span": "main.rs:98:1: 98:32 (#0)",
        "source": "pub use crate::lil::_lil_var_t;"
      },
      {
        "span": "main.rs:79:1: 79:30 (#0)",
        "source": "pub use crate::lil::__sFILEX;"
      },
      {
        "span": "main.rs:91:1: 91:34 (#0)",
        "source": "pub use crate::lil::lil_register;"
      },
      {
        "span": "main.rs:97:1: 97:34 (#0)",
        "source": "pub use crate::lil::_lil_value_t;"
      },
      {
        "span": "main.rs:100:1: 100:37 (#0)",
        "source": "pub use crate::lil::__darwin_size_t;"
      },
      {
        "span": "main.rs:102:1: 102:36 (#0)",
        "source": "pub use crate::lil::__darwin_off_t;"
      },
      {
        "span": "main.rs:109:1: 109:28 (#0)",
        "source": "pub use crate::lil::__sbuf;"
      },
      {
        "span": "main.rs:83:1: 83:31 (#0)",
        "source": "pub use crate::lil::lil_error;"
      },
      {
        "span": "main.rs:94:1: 94:35 (#0)",
        "source": "pub use crate::lil::lil_to_string;"
      },
      {
        "span": "main.rs:106:1: 106:28 (#0)",
        "source": "pub use crate::lil::fpos_t;"
      },
      {
        "span": "main.rs:87:1: 87:37 (#0)",
        "source": "pub use crate::lil::lil_list_append;"
      },
      {
        "span": "main.rs:117:1: 117:32 (#0)",
        "source": "pub use crate::lil::lil_list_t;"
      },
      {
        "span": "main.rs:95:1: 95:33 (#0)",
        "source": "pub use crate::lil::_lil_list_t;"
      },
      {
        "span": "main.rs:4:1: 4:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "main.rs:113:1: 113:26 (#0)",
        "source": "pub use crate::lil::FILE;"
      },
      {
        "span": "main.rs:84:1: 84:30 (#0)",
        "source": "pub use crate::lil::lil_free;"
      },
      {
        "span": "main.rs:90:1: 90:31 (#0)",
        "source": "pub use crate::lil::lil_parse;"
      },
      {
        "span": "main.rs:93:1: 93:36 (#0)",
        "source": "pub use crate::lil::lil_to_integer;"
      },
      {
        "span": "main.rs:119:1: 119:37 (#0)",
        "source": "pub use crate::lil::lil_func_proc_t;"
      },
      {
        "span": "main.rs:88:1: 88:39 (#0)",
        "source": "pub use crate::lil::lil_list_to_value;"
      },
      {
        "span": "main.rs:115:1: 115:33 (#0)",
        "source": "pub use crate::lil::lil_value_t;"
      },
      {
        "span": "main.rs:81:1: 81:38 (#0)",
        "source": "pub use crate::lil::lil_alloc_string;"
      },
      {
        "span": "main.rs:86:1: 86:36 (#0)",
        "source": "pub use crate::lil::lil_free_value;"
      },
      {
        "span": "main.rs:120:1: 120:41 (#0)",
        "source": "pub use crate::lil::lil_callback_proc_t;"
      },
      {
        "span": "main.rs:80:1: 80:36 (#0)",
        "source": "pub use crate::lil::lil_alloc_list;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:174 ~ c2rust_out[3c70]::lil::fnc_index)",
    "span": "lil.rs:3755:1: 3768:2 (#0)",
    "pieces": [
      "lil.rs:3755:1: 3768:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 14,
    "source": "unsafe extern \"C\" fn fnc_index(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    let mut index: size_t = 0;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    list = lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));\n    index = lil_to_integer(*argv.offset(1 as std::os::raw::c_int as isize)) as size_t;\n    if index >= (*list).c {\n        r = 0 as lil_value_t\n    } else { r = lil_clone_value(*(*list).v.offset(index as isize)) }\n    lil_free_list(list);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:64 ~ c2rust_out[3c70]::lil::ispunct)",
    "span": "lil.rs:392:1: 399:2 (#0)",
    "pieces": [
      "lil.rs:392:1: 399:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "pub unsafe extern \"C\" fn ispunct(mut _c: std::os::raw::c_int) -> std::os::raw::c_int {\n    return __istype(_c, 0x2000 as std::os::raw::c_long as std::os::raw::c_ulong);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:160 ~ c2rust_out[3c70]::lil::fnc_quote)",
    "span": "lil.rs:3474:1: 3487:2 (#0)",
    "pieces": [
      "lil.rs:3474:1: 3487:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 14,
    "source": "unsafe extern \"C\" fn fnc_quote(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut i: size_t = 0;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    r = alloc_value(0 as *const std::os::raw::c_char);\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < argc {\n        if i != 0 { lil_append_char(r, ' ' as i32 as std::os::raw::c_char); }\n        lil_append_val(r, *argv.offset(i as isize));\n        i = i.wrapping_add(1)\n    }\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:161 ~ c2rust_out[3c70]::lil::fnc_set)",
    "span": "lil.rs:3488:1: 3519:2 (#0)",
    "pieces": [
      "lil.rs:3488:1: 3519:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 32,
    "source": "unsafe extern \"C\" fn fnc_set(mut lil: lil_t, mut argc: size_t,\n                             mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut i: size_t = 0 as std::os::raw::c_int as size_t;\n    let mut var: lil_var_t = 0 as lil_var_t;\n    let mut access: std::os::raw::c_int = 1 as std::os::raw::c_int;\n    if argc == 0 { return 0 as lil_value_t }\n    if strcmp(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n              b\"global\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        i = 1 as std::os::raw::c_int as size_t;\n        access = 0 as std::os::raw::c_int\n    }\n    while i < argc {\n        if argc == i.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong) {\n            return lil_clone_value(lil_get_var(lil,\n                                               lil_to_string(*argv.offset(i as\n                                                                              isize))))\n        }\n        var =\n            lil_set_var(lil, lil_to_string(*argv.offset(i as isize)),\n                        *argv.offset(i.wrapping_add(1 as std::os::raw::c_int as\n                                                        std::os::raw::c_ulong) as\n                                         isize), access);\n        i =\n            (i as\n                 std::os::raw::c_ulong).wrapping_add(2 as std::os::raw::c_int as\n                                                 std::os::raw::c_ulong) as size_t as\n                size_t\n    }\n    return if !var.is_null() {\n               lil_clone_value((*var).v)\n           } else { 0 as lil_value_t };\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:350 ~ c2rust_out[3c70]::main::do_exit)",
    "span": "main.rs:145:1: 148:2 (#0)",
    "pieces": [
      "main.rs:145:1: 148:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "unsafe extern \"C\" fn do_exit(mut lil: lil_t, mut val: lil_value_t) {\n    running = 0 as std::os::raw::c_int;\n    exit_code = lil_to_integer(val) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [
      {
        "span": "main.rs:144:1: 144:70 (#0)",
        "source": "static mut exit_code: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "main.rs:143:1: 143:68 (#0)",
        "source": "static mut running: std::os::raw::c_int = 1 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "main.rs:113:1: 113:26 (#0)",
        "source": "pub use crate::lil::FILE;"
      },
      {
        "span": "main.rs:99:1: 99:31 (#0)",
        "source": "pub use crate::lil::__int64_t;"
      },
      {
        "span": "main.rs:115:1: 115:33 (#0)",
        "source": "pub use crate::lil::lil_value_t;"
      },
      {
        "span": "main.rs:94:1: 94:35 (#0)",
        "source": "pub use crate::lil::lil_to_string;"
      },
      {
        "span": "main.rs:109:1: 109:28 (#0)",
        "source": "pub use crate::lil::__sbuf;"
      },
      {
        "span": "main.rs:83:1: 83:31 (#0)",
        "source": "pub use crate::lil::lil_error;"
      },
      {
        "span": "main.rs:90:1: 90:31 (#0)",
        "source": "pub use crate::lil::lil_parse;"
      },
      {
        "span": "main.rs:118:1: 118:27 (#0)",
        "source": "pub use crate::lil::lil_t;"
      },
      {
        "span": "main.rs:120:1: 120:41 (#0)",
        "source": "pub use crate::lil::lil_callback_proc_t;"
      },
      {
        "span": "main.rs:98:1: 98:32 (#0)",
        "source": "pub use crate::lil::_lil_var_t;"
      },
      {
        "span": "main.rs:119:1: 119:37 (#0)",
        "source": "pub use crate::lil::lil_func_proc_t;"
      },
      {
        "span": "main.rs:4:1: 4:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "main.rs:116:1: 116:31 (#0)",
        "source": "pub use crate::lil::lil_var_t;"
      },
      {
        "span": "main.rs:106:1: 106:28 (#0)",
        "source": "pub use crate::lil::fpos_t;"
      },
      {
        "span": "main.rs:92:1: 92:33 (#0)",
        "source": "pub use crate::lil::lil_set_var;"
      },
      {
        "span": "main.rs:93:1: 93:36 (#0)",
        "source": "pub use crate::lil::lil_to_integer;"
      },
      {
        "span": "main.rs:114:1: 114:30 (#0)",
        "source": "pub use crate::lil::lilint_t;"
      },
      {
        "span": "main.rs:117:1: 117:32 (#0)",
        "source": "pub use crate::lil::lil_list_t;"
      },
      {
        "span": "main.rs:80:1: 80:36 (#0)",
        "source": "pub use crate::lil::lil_alloc_list;"
      },
      {
        "span": "main.rs:85:1: 85:35 (#0)",
        "source": "pub use crate::lil::lil_free_list;"
      },
      {
        "span": "main.rs:86:1: 86:36 (#0)",
        "source": "pub use crate::lil::lil_free_value;"
      },
      {
        "span": "main.rs:102:1: 102:36 (#0)",
        "source": "pub use crate::lil::__darwin_off_t;"
      },
      {
        "span": "main.rs:81:1: 81:38 (#0)",
        "source": "pub use crate::lil::lil_alloc_string;"
      },
      {
        "span": "main.rs:6:1: 6:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "main.rs:87:1: 87:37 (#0)",
        "source": "pub use crate::lil::lil_list_append;"
      },
      {
        "span": "main.rs:84:1: 84:30 (#0)",
        "source": "pub use crate::lil::lil_free;"
      },
      {
        "span": "main.rs:97:1: 97:34 (#0)",
        "source": "pub use crate::lil::_lil_value_t;"
      },
      {
        "span": "main.rs:91:1: 91:34 (#0)",
        "source": "pub use crate::lil::lil_register;"
      },
      {
        "span": "main.rs:96:1: 96:28 (#0)",
        "source": "pub use crate::lil::_lil_t;"
      },
      {
        "span": "main.rs:79:1: 79:30 (#0)",
        "source": "pub use crate::lil::__sFILEX;"
      },
      {
        "span": "main.rs:100:1: 100:37 (#0)",
        "source": "pub use crate::lil::__darwin_size_t;"
      },
      {
        "span": "main.rs:82:1: 82:34 (#0)",
        "source": "pub use crate::lil::lil_callback;"
      },
      {
        "span": "main.rs:88:1: 88:39 (#0)",
        "source": "pub use crate::lil::lil_list_to_value;"
      },
      {
        "span": "main.rs:103:1: 103:28 (#0)",
        "source": "pub use crate::lil::size_t;"
      },
      {
        "span": "main.rs:104:1: 104:29 (#0)",
        "source": "pub use crate::lil::int64_t;"
      },
      {
        "span": "main.rs:89:1: 89:29 (#0)",
        "source": "pub use crate::lil::lil_new;"
      },
      {
        "span": "main.rs:112:1: 112:29 (#0)",
        "source": "pub use crate::lil::__sFILE;"
      },
      {
        "span": "main.rs:95:1: 95:33 (#0)",
        "source": "pub use crate::lil::_lil_list_t;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:149 ~ c2rust_out[3c70]::lil::lil_free)",
    "span": "lil.rs:2977:1: 3002:2 (#0)",
    "pieces": [
      "lil.rs:2977:1: 3002:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 26,
    "source": "pub unsafe extern \"C\" fn lil_free(mut lil: lil_t) {\n    let mut i: size_t = 0;\n    if lil.is_null() { return }\n    free((*lil).err_msg as *mut std::os::raw::c_void);\n    lil_free_value((*lil).empty);\n    while !(*lil).env.is_null() {\n        let mut next: lil_env_t = (*(*lil).env).parent;\n        lil_free_env((*lil).env);\n        (*lil).env = next\n    }\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < (*lil).cmds {\n        if !(**(*lil).cmd.offset(i as isize)).argnames.is_null() {\n            lil_free_list((**(*lil).cmd.offset(i as isize)).argnames);\n        }\n        lil_free_value((**(*lil).cmd.offset(i as isize)).code);\n        free((**(*lil).cmd.offset(i as isize)).name as *mut std::os::raw::c_void);\n        free(*(*lil).cmd.offset(i as isize) as *mut std::os::raw::c_void);\n        i = i.wrapping_add(1)\n    }\n    hm_destroy(&mut (*lil).cmdmap);\n    free((*lil).cmd as *mut std::os::raw::c_void);\n    free((*lil).dollarprefix as *mut std::os::raw::c_void);\n    free((*lil).catcher as *mut std::os::raw::c_void);\n    free(lil as *mut std::os::raw::c_void);\n}",
    "calls": [
      {
        "caller": "DefId(0:389 ~ c2rust_out[3c70]::main::repl)",
        "span": "main.rs:302:5: 302:19 (#0)",
        "source": "lil_free(lil);"
      },
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:354:5: 354:19 (#0)",
        "source": "lil_free(lil);"
      },
      {
        "caller": "DefId(0:198 ~ c2rust_out[3c70]::lil::fnc_jaileval)",
        "span": "lil.rs:3739:5: 3739:22 (#0)",
        "source": "lil_free(sublil);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:220 ~ c2rust_out[3c70]::lil::register_stdcmds)",
    "span": "lil.rs:4707:1: 4775:2 (#0)",
    "pieces": [
      "lil.rs:4707:1: 4708:4 (#0)",
      "lil.rs:4741:1: 4741:4 (#0)",
      "lil.rs:4775:1: 4775:2 (#0)"
    ],
    "sub_chunks": [
      0,
      1
    ],
    "num_lines": 4,
    "source": "unsafe extern \"C\" fn register_stdcmds(mut lil: lil_t) {\n   <<chunk 0>>   <<chunk 1>>}",
    "calls": [
      {
        "caller": "DefId(0:130 ~ c2rust_out[3c70]::lil::lil_new)",
        "span": "lil.rs:1018:5: 1018:27 (#0)",
        "source": "register_stdcmds(lil);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": [
      {
        "chunk_id": 0,
        "span": "lil.rs:4708:5: 4739:63 (#0)",
        "pieces": [
          "lil.rs:4708:5: 4739:63 (#0)"
        ],
        "num_lines": 150,
        "source": "lil_register(lil, b\"reflect\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_reflect as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"func\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_func as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"rename\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_rename as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"unusedname\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_unusedname as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"quote\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_quote as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"set\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_set as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"local\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_local as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"write\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_write as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"print\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_print as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"eval\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_eval as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"topeval\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_topeval as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"upeval\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_upeval as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"downeval\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_downeval as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"enveval\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_enveval as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"jaileval\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_jaileval as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"count\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_count as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"index\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_index as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"indexof\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_indexof as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"filter\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_filter as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"list\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_list as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"append\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_append as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"slice\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_slice as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"subst\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_subst as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"concat\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_concat as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"foreach\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_foreach as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"return\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_return as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"result\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_result as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"expr\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_expr as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"inc\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_inc as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"dec\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_dec as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));",
        "sub_chunks": [],
        "live_in": [
          "mut lil: *mut lil::_lil_t"
        ],
        "live_out": [
          "mut lil: *mut lil::_lil_t",
          "lil: &mut lil::_lil_t"
        ]
      },
      {
        "chunk_id": 1,
        "span": "lil.rs:4741:5: 4773:2 (#0)",
        "pieces": [
          "lil.rs:4741:5: 4773:2 (#0)"
        ],
        "num_lines": 131,
        "source": "lil_register(lil, b\"read\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_read as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"store\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_store as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"if\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_if as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"while\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_while as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"for\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_for as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"char\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_char as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"charat\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_charat as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"codeat\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_codeat as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"substr\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_substr as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"strpos\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_strpos as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"length\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_length as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"trim\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_trim as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"ltrim\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_ltrim as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"rtrim\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_rtrim as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"strcmp\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_strcmp as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"streq\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_streq as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"repstr\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_repstr as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"split\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_split as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"try\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_try as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"error\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_error as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"exit\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_exit as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"source\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_source as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"lmap\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_lmap as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"rand\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_rand as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"catcher\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_catcher as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"watch\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_watch as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    (*lil).syscmds = (*lil).cmds;",
        "sub_chunks": [],
        "live_in": [
          "mut lil: *mut lil::_lil_t",
          "lil: &mut lil::_lil_t"
        ],
        "live_out": [
          "mut lil: *mut lil::_lil_t"
        ]
      }
    ]
  },
  {
    "func_defid": "DefId(0:101 ~ c2rust_out[3c70]::lil::lil_new)",
    "span": "lil.rs:1008:1: 1020:2 (#0)",
    "pieces": [
      "lil.rs:1008:1: 1020:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 13,
    "source": "pub unsafe extern \"C\" fn lil_new() -> lil_t {\n    let mut lil: lil_t =\n        calloc(1 as std::os::raw::c_int as std::os::raw::c_ulong,\n               ::std::mem::size_of::<_lil_t>() as std::os::raw::c_ulong) as lil_t;\n    (*lil).env = lil_alloc_env(0 as lil_env_t);\n    (*lil).rootenv = (*lil).env;\n    (*lil).empty = alloc_value(0 as *const std::os::raw::c_char);\n    (*lil).dollarprefix =\n        strclone(b\"set \\x00\" as *const u8 as *const std::os::raw::c_char);\n    hm_init(&mut (*lil).cmdmap);\n    register_stdcmds(lil);\n    return lil;\n}",
    "calls": [
      {
        "caller": "DefId(0:389 ~ c2rust_out[3c70]::main::repl)",
        "span": "main.rs:248:5: 248:36 (#0)",
        "source": "let mut lil: lil_t = lil_new();"
      },
      {
        "caller": "DefId(0:198 ~ c2rust_out[3c70]::lil::fnc_jaileval)",
        "span": "lil.rs:3725:5: 3725:24 (#0)",
        "source": "sublil = lil_new();"
      },
      {
        "caller": "DefId(0:392 ~ c2rust_out[3c70]::main::nonint)",
        "span": "main.rs:308:5: 308:36 (#0)",
        "source": "let mut lil: lil_t = lil_new();"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:357 ~ c2rust_out[3c70]::main::repl)",
    "span": "main.rs:246:1: 304:2 (#0)",
    "pieces": [
      "main.rs:246:1: 304:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 59,
    "source": "unsafe extern \"C\" fn repl() -> std::os::raw::c_int {\n    let mut buffer: [std::os::raw::c_char; 16384] = [0; 16384];\n    let mut lil: lil_t = lil_new();\n    lil_register(lil, b\"writechar\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_writechar as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"system\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_system as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"readline\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_readline as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    printf(b\"Little Interpreted Language Interactive Shell\\n\\x00\" as *const u8\n               as *const std::os::raw::c_char);\n    lil_callback(lil, 0 as std::os::raw::c_int,\n                 ::std::mem::transmute::<Option<unsafe extern \"C\" fn(_: lil_t,\n                                                                     _:\n                                                                         lil_value_t)\n                                                    -> ()>,\n                                         lil_callback_proc_t>(Some(do_exit as\n                                                                       unsafe extern \"C\" fn(_:\n                                                                                                lil_t,\n                                                                                            _:\n                                                                                                lil_value_t)\n                                                                           ->\n                                                                               ())));\n    while running != 0 {\n        let mut result: lil_value_t = 0 as *mut _lil_value_t;\n        let mut strres: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n        let mut err_msg: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n        let mut pos: size_t = 0;\n        buffer[0 as std::os::raw::c_int as usize] = 0 as std::os::raw::c_int as std::os::raw::c_char;\n        printf(b\"# \\x00\" as *const u8 as *const std::os::raw::c_char);\n        if fgets(buffer.as_mut_ptr(), 16384 as std::os::raw::c_int,\n                 __stdinp).is_null() {\n            break ;\n        }\n        result =\n            lil_parse(lil, buffer.as_mut_ptr(), 0 as std::os::raw::c_int as size_t,\n                      0 as std::os::raw::c_int);\n        strres = lil_to_string(result);\n        if *strres.offset(0 as std::os::raw::c_int as isize) != 0 {\n            printf(b\"%s\\n\\x00\" as *const u8 as *const std::os::raw::c_char, strres);\n        }\n        lil_free_value(result);\n        if lil_error(lil, &mut err_msg, &mut pos) != 0 {\n            printf(b\"error at %i: %s\\n\\x00\" as *const u8 as\n                       *const std::os::raw::c_char, pos as std::os::raw::c_int, err_msg);\n        }\n    }\n    lil_free(lil);\n    return exit_code;\n}",
    "calls": [
      {
        "caller": "DefId(0:393 ~ c2rust_out[3c70]::main::main_0)",
        "span": "main.rs:359:16: 359:33 (#0)",
        "source": "unsafe { repl() }"
      }
    ],
    "globals": [
      {
        "span": "main.rs:144:1: 144:70 (#0)",
        "source": "static mut exit_code: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "main.rs:80:1: 80:36 (#0)",
        "source": "pub use crate::lil::lil_alloc_list;"
      },
      {
        "span": "main.rs:83:1: 83:31 (#0)",
        "source": "pub use crate::lil::lil_error;"
      },
      {
        "span": "main.rs:93:1: 93:36 (#0)",
        "source": "pub use crate::lil::lil_to_integer;"
      },
      {
        "span": "main.rs:89:1: 89:29 (#0)",
        "source": "pub use crate::lil::lil_new;"
      },
      {
        "span": "main.rs:98:1: 98:32 (#0)",
        "source": "pub use crate::lil::_lil_var_t;"
      },
      {
        "span": "main.rs:104:1: 104:29 (#0)",
        "source": "pub use crate::lil::int64_t;"
      },
      {
        "span": "main.rs:109:1: 109:28 (#0)",
        "source": "pub use crate::lil::__sbuf;"
      },
      {
        "span": "main.rs:4:1: 4:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "main.rs:113:1: 113:26 (#0)",
        "source": "pub use crate::lil::FILE;"
      },
      {
        "span": "main.rs:84:1: 84:30 (#0)",
        "source": "pub use crate::lil::lil_free;"
      },
      {
        "span": "main.rs:82:1: 82:34 (#0)",
        "source": "pub use crate::lil::lil_callback;"
      },
      {
        "span": "main.rs:6:1: 6:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "main.rs:94:1: 94:35 (#0)",
        "source": "pub use crate::lil::lil_to_string;"
      },
      {
        "span": "main.rs:86:1: 86:36 (#0)",
        "source": "pub use crate::lil::lil_free_value;"
      },
      {
        "span": "main.rs:100:1: 100:37 (#0)",
        "source": "pub use crate::lil::__darwin_size_t;"
      },
      {
        "span": "main.rs:79:1: 79:30 (#0)",
        "source": "pub use crate::lil::__sFILEX;"
      },
      {
        "span": "main.rs:103:1: 103:28 (#0)",
        "source": "pub use crate::lil::size_t;"
      },
      {
        "span": "main.rs:115:1: 115:33 (#0)",
        "source": "pub use crate::lil::lil_value_t;"
      },
      {
        "span": "main.rs:116:1: 116:31 (#0)",
        "source": "pub use crate::lil::lil_var_t;"
      },
      {
        "span": "main.rs:119:1: 119:37 (#0)",
        "source": "pub use crate::lil::lil_func_proc_t;"
      },
      {
        "span": "main.rs:81:1: 81:38 (#0)",
        "source": "pub use crate::lil::lil_alloc_string;"
      },
      {
        "span": "main.rs:85:1: 85:35 (#0)",
        "source": "pub use crate::lil::lil_free_list;"
      },
      {
        "span": "main.rs:112:1: 112:29 (#0)",
        "source": "pub use crate::lil::__sFILE;"
      },
      {
        "span": "main.rs:90:1: 90:31 (#0)",
        "source": "pub use crate::lil::lil_parse;"
      },
      {
        "span": "main.rs:114:1: 114:30 (#0)",
        "source": "pub use crate::lil::lilint_t;"
      },
      {
        "span": "main.rs:118:1: 118:27 (#0)",
        "source": "pub use crate::lil::lil_t;"
      },
      {
        "span": "main.rs:97:1: 97:34 (#0)",
        "source": "pub use crate::lil::_lil_value_t;"
      },
      {
        "span": "main.rs:95:1: 95:33 (#0)",
        "source": "pub use crate::lil::_lil_list_t;"
      },
      {
        "span": "main.rs:120:1: 120:41 (#0)",
        "source": "pub use crate::lil::lil_callback_proc_t;"
      },
      {
        "span": "main.rs:92:1: 92:33 (#0)",
        "source": "pub use crate::lil::lil_set_var;"
      },
      {
        "span": "main.rs:87:1: 87:37 (#0)",
        "source": "pub use crate::lil::lil_list_append;"
      },
      {
        "span": "main.rs:88:1: 88:39 (#0)",
        "source": "pub use crate::lil::lil_list_to_value;"
      },
      {
        "span": "main.rs:91:1: 91:34 (#0)",
        "source": "pub use crate::lil::lil_register;"
      },
      {
        "span": "main.rs:106:1: 106:28 (#0)",
        "source": "pub use crate::lil::fpos_t;"
      },
      {
        "span": "main.rs:117:1: 117:32 (#0)",
        "source": "pub use crate::lil::lil_list_t;"
      },
      {
        "span": "main.rs:96:1: 96:28 (#0)",
        "source": "pub use crate::lil::_lil_t;"
      },
      {
        "span": "main.rs:99:1: 99:31 (#0)",
        "source": "pub use crate::lil::__int64_t;"
      },
      {
        "span": "main.rs:102:1: 102:36 (#0)",
        "source": "pub use crate::lil::__darwin_off_t;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:355 ~ c2rust_out[3c70]::main::fnc_system)",
    "span": "main.rs:182:1: 210:2 (#0)",
    "pieces": [
      "main.rs:182:1: 210:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 29,
    "source": "unsafe extern \"C\" fn fnc_system(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut sargv: *mut *const std::os::raw::c_char =\n        malloc((::std::mem::size_of::<*mut std::os::raw::c_char>() as\n                    std::os::raw::c_ulong).wrapping_mul(argc.wrapping_add(1 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      std::os::raw::c_ulong)))\n            as *mut *const std::os::raw::c_char;\n    let mut r: lil_value_t = 0 as lil_value_t;\n    let mut rv: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    let mut i: size_t = 0;\n    if argc == 0 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < argc {\n        let ref mut fresh1 = *sargv.offset(i as isize);\n        *fresh1 = lil_to_string(*argv.offset(i as isize));\n        i = i.wrapping_add(1)\n    }\n    let ref mut fresh2 = *sargv.offset(argc as isize);\n    *fresh2 = 0 as *const std::os::raw::c_char;\n    rv = do_system(argc, sargv as *mut *mut std::os::raw::c_char);\n    if !rv.is_null() {\n        r = lil_alloc_string(rv);\n        free(rv as *mut std::os::raw::c_void);\n    }\n    free(sargv as *mut std::os::raw::c_void);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "main.rs:87:1: 87:37 (#0)",
        "source": "pub use crate::lil::lil_list_append;"
      },
      {
        "span": "main.rs:84:1: 84:30 (#0)",
        "source": "pub use crate::lil::lil_free;"
      },
      {
        "span": "main.rs:95:1: 95:33 (#0)",
        "source": "pub use crate::lil::_lil_list_t;"
      },
      {
        "span": "main.rs:83:1: 83:31 (#0)",
        "source": "pub use crate::lil::lil_error;"
      },
      {
        "span": "main.rs:92:1: 92:33 (#0)",
        "source": "pub use crate::lil::lil_set_var;"
      },
      {
        "span": "main.rs:81:1: 81:38 (#0)",
        "source": "pub use crate::lil::lil_alloc_string;"
      },
      {
        "span": "main.rs:100:1: 100:37 (#0)",
        "source": "pub use crate::lil::__darwin_size_t;"
      },
      {
        "span": "main.rs:117:1: 117:32 (#0)",
        "source": "pub use crate::lil::lil_list_t;"
      },
      {
        "span": "main.rs:120:1: 120:41 (#0)",
        "source": "pub use crate::lil::lil_callback_proc_t;"
      },
      {
        "span": "main.rs:94:1: 94:35 (#0)",
        "source": "pub use crate::lil::lil_to_string;"
      },
      {
        "span": "main.rs:82:1: 82:34 (#0)",
        "source": "pub use crate::lil::lil_callback;"
      },
      {
        "span": "main.rs:6:1: 6:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "main.rs:114:1: 114:30 (#0)",
        "source": "pub use crate::lil::lilint_t;"
      },
      {
        "span": "main.rs:86:1: 86:36 (#0)",
        "source": "pub use crate::lil::lil_free_value;"
      },
      {
        "span": "main.rs:89:1: 89:29 (#0)",
        "source": "pub use crate::lil::lil_new;"
      },
      {
        "span": "main.rs:91:1: 91:34 (#0)",
        "source": "pub use crate::lil::lil_register;"
      },
      {
        "span": "main.rs:93:1: 93:36 (#0)",
        "source": "pub use crate::lil::lil_to_integer;"
      },
      {
        "span": "main.rs:97:1: 97:34 (#0)",
        "source": "pub use crate::lil::_lil_value_t;"
      },
      {
        "span": "main.rs:98:1: 98:32 (#0)",
        "source": "pub use crate::lil::_lil_var_t;"
      },
      {
        "span": "main.rs:85:1: 85:35 (#0)",
        "source": "pub use crate::lil::lil_free_list;"
      },
      {
        "span": "main.rs:104:1: 104:29 (#0)",
        "source": "pub use crate::lil::int64_t;"
      },
      {
        "span": "main.rs:88:1: 88:39 (#0)",
        "source": "pub use crate::lil::lil_list_to_value;"
      },
      {
        "span": "main.rs:79:1: 79:30 (#0)",
        "source": "pub use crate::lil::__sFILEX;"
      },
      {
        "span": "main.rs:106:1: 106:28 (#0)",
        "source": "pub use crate::lil::fpos_t;"
      },
      {
        "span": "main.rs:112:1: 112:29 (#0)",
        "source": "pub use crate::lil::__sFILE;"
      },
      {
        "span": "main.rs:113:1: 113:26 (#0)",
        "source": "pub use crate::lil::FILE;"
      },
      {
        "span": "main.rs:118:1: 118:27 (#0)",
        "source": "pub use crate::lil::lil_t;"
      },
      {
        "span": "main.rs:116:1: 116:31 (#0)",
        "source": "pub use crate::lil::lil_var_t;"
      },
      {
        "span": "main.rs:115:1: 115:33 (#0)",
        "source": "pub use crate::lil::lil_value_t;"
      },
      {
        "span": "main.rs:80:1: 80:36 (#0)",
        "source": "pub use crate::lil::lil_alloc_list;"
      },
      {
        "span": "main.rs:96:1: 96:28 (#0)",
        "source": "pub use crate::lil::_lil_t;"
      },
      {
        "span": "main.rs:99:1: 99:31 (#0)",
        "source": "pub use crate::lil::__int64_t;"
      },
      {
        "span": "main.rs:119:1: 119:37 (#0)",
        "source": "pub use crate::lil::lil_func_proc_t;"
      },
      {
        "span": "main.rs:4:1: 4:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "main.rs:102:1: 102:36 (#0)",
        "source": "pub use crate::lil::__darwin_off_t;"
      },
      {
        "span": "main.rs:103:1: 103:28 (#0)",
        "source": "pub use crate::lil::size_t;"
      },
      {
        "span": "main.rs:109:1: 109:28 (#0)",
        "source": "pub use crate::lil::__sbuf;"
      },
      {
        "span": "main.rs:90:1: 90:31 (#0)",
        "source": "pub use crate::lil::lil_parse;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:184 ~ c2rust_out[3c70]::lil::fnc_result)",
    "span": "lil.rs:3980:1: 3991:2 (#0)",
    "pieces": [
      "lil.rs:3980:1: 3991:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "unsafe extern \"C\" fn fnc_result(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc > 0 as std::os::raw::c_int as std::os::raw::c_ulong {\n        lil_free_value((*(*lil).env).retval);\n        (*(*lil).env).retval =\n            lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize));\n        (*(*lil).env).retval_set = 1 as std::os::raw::c_int\n    }\n    return if (*(*lil).env).retval_set != 0 {\n               lil_clone_value((*(*lil).env).retval)\n           } else { 0 as lil_value_t };\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:100 ~ c2rust_out[3c70]::lil::lil_pop_env)",
    "span": "lil.rs:1000:1: 1006:2 (#0)",
    "pieces": [
      "lil.rs:1000:1: 1006:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 7,
    "source": "pub unsafe extern \"C\" fn lil_pop_env(mut lil: lil_t) {\n    if !(*(*lil).env).parent.is_null() {\n        let mut next: lil_env_t = (*(*lil).env).parent;\n        lil_free_env((*lil).env);\n        (*lil).env = next\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:142 ~ c2rust_out[3c70]::lil::lil_call)",
        "span": "lil.rs:1581:13: 1581:30 (#0)",
        "source": "lil_pop_env(lil);"
      },
      {
        "caller": "DefId(0:197 ~ c2rust_out[3c70]::lil::fnc_enveval)",
        "span": "lil.rs:3686:5: 3686:22 (#0)",
        "source": "lil_pop_env(lil);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:203 ~ c2rust_out[3c70]::lil::fnc_length)",
    "span": "lil.rs:4323:1: 4341:2 (#0)",
    "pieces": [
      "lil.rs:4323:1: 4341:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "unsafe extern \"C\" fn fnc_length(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut i: size_t = 0;\n    let mut total: size_t = 0 as std::os::raw::c_int as size_t;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < argc {\n        if i != 0 { total = total.wrapping_add(1) }\n        total =\n            (total as\n                 std::os::raw::c_ulong).wrapping_add(strlen(lil_to_string(*argv.offset(i\n                                                                                   as\n                                                                                   isize))))\n                as size_t as size_t;\n        i = i.wrapping_add(1)\n    }\n    return lil_alloc_integer(total as lilint_t);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:180 ~ c2rust_out[3c70]::lil::fnc_subst)",
    "span": "lil.rs:3904:1: 3907:2 (#0)",
    "pieces": [
      "lil.rs:3904:1: 3907:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "unsafe extern \"C\" fn fnc_subst(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    return lil_subst_to_value(lil, *argv.offset(0 as std::os::raw::c_int as isize));\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:207 ~ c2rust_out[3c70]::lil::fnc_rtrim)",
    "span": "lil.rs:4405:1: 4416:2 (#0)",
    "pieces": [
      "lil.rs:4405:1: 4416:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "unsafe extern \"C\" fn fnc_rtrim(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc == 0 { return 0 as lil_value_t }\n    return real_trim(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                     if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n                         b\" \\x0c\\n\\r\\t\\x0b\\x00\" as *const u8 as\n                             *const std::os::raw::c_char\n                     } else {\n                         lil_to_string(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     }, 0 as std::os::raw::c_int, 1 as std::os::raw::c_int);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:360 ~ c2rust_out[3c70]::main::nonint)",
    "span": "main.rs:305:1: 356:2 (#0)",
    "pieces": [
      "main.rs:305:1: 356:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 52,
    "source": "unsafe extern \"C\" fn nonint(mut argc: std::os::raw::c_int,\n                            mut argv: *mut *const std::os::raw::c_char)\n -> std::os::raw::c_int {\n    let mut lil: lil_t = lil_new();\n    let mut filename: *const std::os::raw::c_char =\n        *argv.offset(1 as std::os::raw::c_int as isize);\n    let mut err_msg: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    let mut pos: size_t = 0;\n    let mut arglist: lil_list_t = lil_alloc_list();\n    let mut args: lil_value_t = 0 as *mut _lil_value_t;\n    let mut result: lil_value_t = 0 as *mut _lil_value_t;\n    let mut tmpcode: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    let mut i: std::os::raw::c_int = 0;\n    lil_register(lil, b\"writechar\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_writechar as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    lil_register(lil, b\"system\\x00\" as *const u8 as *const std::os::raw::c_char,\n                 Some(fnc_system as\n                          unsafe extern \"C\" fn(_: lil_t, _: size_t,\n                                               _: *mut lil_value_t)\n                              -> lil_value_t));\n    i = 2 as std::os::raw::c_int;\n    while i < argc {\n        lil_list_append(arglist, lil_alloc_string(*argv.offset(i as isize)));\n        i += 1\n    }\n    args = lil_list_to_value(arglist, 1 as std::os::raw::c_int);\n    lil_free_list(arglist);\n    lil_set_var(lil, b\"argv\\x00\" as *const u8 as *const std::os::raw::c_char, args,\n                0 as std::os::raw::c_int);\n    lil_free_value(args);\n    tmpcode =\n        malloc(strlen(filename).wrapping_add(256 as std::os::raw::c_int as\n                                                 std::os::raw::c_ulong)) as\n            *mut std::os::raw::c_char;\n    sprintf(tmpcode,\n            b\"set __lilmain:code__ [read {%s}]\\nif [streq $__lilmain:code__ \\'\\'] {print There is no code in the file or the file does not exist} {eval $__lilmain:code__}\\n\\x00\"\n                as *const u8 as *const std::os::raw::c_char, filename);\n    result =\n        lil_parse(lil, tmpcode, 0 as std::os::raw::c_int as size_t, 1 as std::os::raw::c_int);\n    free(tmpcode as *mut std::os::raw::c_void);\n    lil_free_value(result);\n    if lil_error(lil, &mut err_msg, &mut pos) != 0 {\n        fprintf(__stderrp,\n                b\"lil: error at %i: %s\\n\\x00\" as *const u8 as\n                    *const std::os::raw::c_char, pos as std::os::raw::c_int, err_msg);\n    }\n    lil_free(lil);\n    return exit_code;\n}",
    "calls": [
      {
        "caller": "DefId(0:393 ~ c2rust_out[3c70]::main::main_0)",
        "span": "main.rs:364:16: 364:94 (#0)",
        "source": "unsafe { nonint(argc, argv_ptr.as_ptr() as *mut *const std::os::raw::c_char) }"
      }
    ],
    "globals": [
      {
        "span": "main.rs:144:1: 144:70 (#0)",
        "source": "static mut exit_code: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "main.rs:106:1: 106:28 (#0)",
        "source": "pub use crate::lil::fpos_t;"
      },
      {
        "span": "main.rs:114:1: 114:30 (#0)",
        "source": "pub use crate::lil::lilint_t;"
      },
      {
        "span": "main.rs:120:1: 120:41 (#0)",
        "source": "pub use crate::lil::lil_callback_proc_t;"
      },
      {
        "span": "main.rs:93:1: 93:36 (#0)",
        "source": "pub use crate::lil::lil_to_integer;"
      },
      {
        "span": "main.rs:102:1: 102:36 (#0)",
        "source": "pub use crate::lil::__darwin_off_t;"
      },
      {
        "span": "main.rs:79:1: 79:30 (#0)",
        "source": "pub use crate::lil::__sFILEX;"
      },
      {
        "span": "main.rs:94:1: 94:35 (#0)",
        "source": "pub use crate::lil::lil_to_string;"
      },
      {
        "span": "main.rs:86:1: 86:36 (#0)",
        "source": "pub use crate::lil::lil_free_value;"
      },
      {
        "span": "main.rs:82:1: 82:34 (#0)",
        "source": "pub use crate::lil::lil_callback;"
      },
      {
        "span": "main.rs:97:1: 97:34 (#0)",
        "source": "pub use crate::lil::_lil_value_t;"
      },
      {
        "span": "main.rs:91:1: 91:34 (#0)",
        "source": "pub use crate::lil::lil_register;"
      },
      {
        "span": "main.rs:103:1: 103:28 (#0)",
        "source": "pub use crate::lil::size_t;"
      },
      {
        "span": "main.rs:104:1: 104:29 (#0)",
        "source": "pub use crate::lil::int64_t;"
      },
      {
        "span": "main.rs:117:1: 117:32 (#0)",
        "source": "pub use crate::lil::lil_list_t;"
      },
      {
        "span": "main.rs:95:1: 95:33 (#0)",
        "source": "pub use crate::lil::_lil_list_t;"
      },
      {
        "span": "main.rs:90:1: 90:31 (#0)",
        "source": "pub use crate::lil::lil_parse;"
      },
      {
        "span": "main.rs:96:1: 96:28 (#0)",
        "source": "pub use crate::lil::_lil_t;"
      },
      {
        "span": "main.rs:88:1: 88:39 (#0)",
        "source": "pub use crate::lil::lil_list_to_value;"
      },
      {
        "span": "main.rs:81:1: 81:38 (#0)",
        "source": "pub use crate::lil::lil_alloc_string;"
      },
      {
        "span": "main.rs:100:1: 100:37 (#0)",
        "source": "pub use crate::lil::__darwin_size_t;"
      },
      {
        "span": "main.rs:6:1: 6:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "main.rs:98:1: 98:32 (#0)",
        "source": "pub use crate::lil::_lil_var_t;"
      },
      {
        "span": "main.rs:99:1: 99:31 (#0)",
        "source": "pub use crate::lil::__int64_t;"
      },
      {
        "span": "main.rs:112:1: 112:29 (#0)",
        "source": "pub use crate::lil::__sFILE;"
      },
      {
        "span": "main.rs:84:1: 84:30 (#0)",
        "source": "pub use crate::lil::lil_free;"
      },
      {
        "span": "main.rs:80:1: 80:36 (#0)",
        "source": "pub use crate::lil::lil_alloc_list;"
      },
      {
        "span": "main.rs:92:1: 92:33 (#0)",
        "source": "pub use crate::lil::lil_set_var;"
      },
      {
        "span": "main.rs:116:1: 116:31 (#0)",
        "source": "pub use crate::lil::lil_var_t;"
      },
      {
        "span": "main.rs:4:1: 4:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "main.rs:85:1: 85:35 (#0)",
        "source": "pub use crate::lil::lil_free_list;"
      },
      {
        "span": "main.rs:109:1: 109:28 (#0)",
        "source": "pub use crate::lil::__sbuf;"
      },
      {
        "span": "main.rs:89:1: 89:29 (#0)",
        "source": "pub use crate::lil::lil_new;"
      },
      {
        "span": "main.rs:118:1: 118:27 (#0)",
        "source": "pub use crate::lil::lil_t;"
      },
      {
        "span": "main.rs:87:1: 87:37 (#0)",
        "source": "pub use crate::lil::lil_list_append;"
      },
      {
        "span": "main.rs:83:1: 83:31 (#0)",
        "source": "pub use crate::lil::lil_error;"
      },
      {
        "span": "main.rs:119:1: 119:37 (#0)",
        "source": "pub use crate::lil::lil_func_proc_t;"
      },
      {
        "span": "main.rs:115:1: 115:33 (#0)",
        "source": "pub use crate::lil::lil_value_t;"
      },
      {
        "span": "main.rs:113:1: 113:26 (#0)",
        "source": "pub use crate::lil::FILE;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:361 ~ c2rust_out[3c70]::main::main_0)",
    "span": "main.rs:357:1: 366:2 (#0)",
    "pieces": [
      "main.rs:357:1: 366:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "unsafe fn main_0(mut argc: std::os::raw::c_int, mut argv: *mut *const std::os::raw::c_char)\n -> std::os::raw::c_int {\n    if argc < 2 as std::os::raw::c_int {\n        return repl()\n    } else { return nonint(argc, argv) };\n}",
    "calls": [
      {
        "caller": "DefId(0:395 ~ c2rust_out[3c70]::main::main)",
        "span": "main.rs:383:5: 383:80 (#0)",
        "source": "let result = main_0((args.len() - 1) as std::os::raw::c_int, args.clone());"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "main.rs:80:1: 80:36 (#0)",
        "source": "pub use crate::lil::lil_alloc_list;"
      },
      {
        "span": "main.rs:85:1: 85:35 (#0)",
        "source": "pub use crate::lil::lil_free_list;"
      },
      {
        "span": "main.rs:96:1: 96:28 (#0)",
        "source": "pub use crate::lil::_lil_t;"
      },
      {
        "span": "main.rs:99:1: 99:31 (#0)",
        "source": "pub use crate::lil::__int64_t;"
      },
      {
        "span": "main.rs:84:1: 84:30 (#0)",
        "source": "pub use crate::lil::lil_free;"
      },
      {
        "span": "main.rs:91:1: 91:34 (#0)",
        "source": "pub use crate::lil::lil_register;"
      },
      {
        "span": "main.rs:113:1: 113:26 (#0)",
        "source": "pub use crate::lil::FILE;"
      },
      {
        "span": "main.rs:116:1: 116:31 (#0)",
        "source": "pub use crate::lil::lil_var_t;"
      },
      {
        "span": "main.rs:92:1: 92:33 (#0)",
        "source": "pub use crate::lil::lil_set_var;"
      },
      {
        "span": "main.rs:95:1: 95:33 (#0)",
        "source": "pub use crate::lil::_lil_list_t;"
      },
      {
        "span": "main.rs:104:1: 104:29 (#0)",
        "source": "pub use crate::lil::int64_t;"
      },
      {
        "span": "main.rs:79:1: 79:30 (#0)",
        "source": "pub use crate::lil::__sFILEX;"
      },
      {
        "span": "main.rs:109:1: 109:28 (#0)",
        "source": "pub use crate::lil::__sbuf;"
      },
      {
        "span": "main.rs:114:1: 114:30 (#0)",
        "source": "pub use crate::lil::lilint_t;"
      },
      {
        "span": "main.rs:90:1: 90:31 (#0)",
        "source": "pub use crate::lil::lil_parse;"
      },
      {
        "span": "main.rs:87:1: 87:37 (#0)",
        "source": "pub use crate::lil::lil_list_append;"
      },
      {
        "span": "main.rs:93:1: 93:36 (#0)",
        "source": "pub use crate::lil::lil_to_integer;"
      },
      {
        "span": "main.rs:112:1: 112:29 (#0)",
        "source": "pub use crate::lil::__sFILE;"
      },
      {
        "span": "main.rs:106:1: 106:28 (#0)",
        "source": "pub use crate::lil::fpos_t;"
      },
      {
        "span": "main.rs:117:1: 117:32 (#0)",
        "source": "pub use crate::lil::lil_list_t;"
      },
      {
        "span": "main.rs:81:1: 81:38 (#0)",
        "source": "pub use crate::lil::lil_alloc_string;"
      },
      {
        "span": "main.rs:115:1: 115:33 (#0)",
        "source": "pub use crate::lil::lil_value_t;"
      },
      {
        "span": "main.rs:120:1: 120:41 (#0)",
        "source": "pub use crate::lil::lil_callback_proc_t;"
      },
      {
        "span": "main.rs:83:1: 83:31 (#0)",
        "source": "pub use crate::lil::lil_error;"
      },
      {
        "span": "main.rs:86:1: 86:36 (#0)",
        "source": "pub use crate::lil::lil_free_value;"
      },
      {
        "span": "main.rs:82:1: 82:34 (#0)",
        "source": "pub use crate::lil::lil_callback;"
      },
      {
        "span": "main.rs:89:1: 89:29 (#0)",
        "source": "pub use crate::lil::lil_new;"
      },
      {
        "span": "main.rs:100:1: 100:37 (#0)",
        "source": "pub use crate::lil::__darwin_size_t;"
      },
      {
        "span": "main.rs:118:1: 118:27 (#0)",
        "source": "pub use crate::lil::lil_t;"
      },
      {
        "span": "main.rs:6:1: 6:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "main.rs:97:1: 97:34 (#0)",
        "source": "pub use crate::lil::_lil_value_t;"
      },
      {
        "span": "main.rs:103:1: 103:28 (#0)",
        "source": "pub use crate::lil::size_t;"
      },
      {
        "span": "main.rs:94:1: 94:35 (#0)",
        "source": "pub use crate::lil::lil_to_string;"
      },
      {
        "span": "main.rs:98:1: 98:32 (#0)",
        "source": "pub use crate::lil::_lil_var_t;"
      },
      {
        "span": "main.rs:88:1: 88:39 (#0)",
        "source": "pub use crate::lil::lil_list_to_value;"
      },
      {
        "span": "main.rs:119:1: 119:37 (#0)",
        "source": "pub use crate::lil::lil_func_proc_t;"
      },
      {
        "span": "main.rs:102:1: 102:36 (#0)",
        "source": "pub use crate::lil::__darwin_off_t;"
      },
      {
        "span": "main.rs:4:1: 4:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:362 ~ c2rust_out[3c70]::main::main)",
    "span": "main.rs:368:1: 385:2 (#0)",
    "pieces": [
      "main.rs:368:1: 385:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "pub fn main() {\n    let mut args: Vec<*mut std::os::raw::c_char> = Vec::new();\n    for arg in ::std::env::args() {\n        args.push(::std::ffi::CString::new(arg).expect(\"Failed to convert argument into CString.\").into_raw());\n    };\n    args.push(::std::ptr::null_mut());\n    unsafe {\n        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,\n                                    args.as_mut_ptr() as\n                                        *mut *const std::os::raw::c_char) as i32)\n    }\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "main.rs:92:1: 92:33 (#0)",
        "source": "pub use crate::lil::lil_set_var;"
      },
      {
        "span": "main.rs:90:1: 90:31 (#0)",
        "source": "pub use crate::lil::lil_parse;"
      },
      {
        "span": "main.rs:104:1: 104:29 (#0)",
        "source": "pub use crate::lil::int64_t;"
      },
      {
        "span": "main.rs:83:1: 83:31 (#0)",
        "source": "pub use crate::lil::lil_error;"
      },
      {
        "span": "main.rs:109:1: 109:28 (#0)",
        "source": "pub use crate::lil::__sbuf;"
      },
      {
        "span": "main.rs:113:1: 113:26 (#0)",
        "source": "pub use crate::lil::FILE;"
      },
      {
        "span": "main.rs:119:1: 119:37 (#0)",
        "source": "pub use crate::lil::lil_func_proc_t;"
      },
      {
        "span": "main.rs:88:1: 88:39 (#0)",
        "source": "pub use crate::lil::lil_list_to_value;"
      },
      {
        "span": "main.rs:106:1: 106:28 (#0)",
        "source": "pub use crate::lil::fpos_t;"
      },
      {
        "span": "main.rs:84:1: 84:30 (#0)",
        "source": "pub use crate::lil::lil_free;"
      },
      {
        "span": "main.rs:95:1: 95:33 (#0)",
        "source": "pub use crate::lil::_lil_list_t;"
      },
      {
        "span": "main.rs:79:1: 79:30 (#0)",
        "source": "pub use crate::lil::__sFILEX;"
      },
      {
        "span": "main.rs:100:1: 100:37 (#0)",
        "source": "pub use crate::lil::__darwin_size_t;"
      },
      {
        "span": "main.rs:114:1: 114:30 (#0)",
        "source": "pub use crate::lil::lilint_t;"
      },
      {
        "span": "main.rs:99:1: 99:31 (#0)",
        "source": "pub use crate::lil::__int64_t;"
      },
      {
        "span": "main.rs:85:1: 85:35 (#0)",
        "source": "pub use crate::lil::lil_free_list;"
      },
      {
        "span": "main.rs:94:1: 94:35 (#0)",
        "source": "pub use crate::lil::lil_to_string;"
      },
      {
        "span": "main.rs:86:1: 86:36 (#0)",
        "source": "pub use crate::lil::lil_free_value;"
      },
      {
        "span": "main.rs:80:1: 80:36 (#0)",
        "source": "pub use crate::lil::lil_alloc_list;"
      },
      {
        "span": "main.rs:81:1: 81:38 (#0)",
        "source": "pub use crate::lil::lil_alloc_string;"
      },
      {
        "span": "main.rs:82:1: 82:34 (#0)",
        "source": "pub use crate::lil::lil_callback;"
      },
      {
        "span": "main.rs:98:1: 98:32 (#0)",
        "source": "pub use crate::lil::_lil_var_t;"
      },
      {
        "span": "main.rs:102:1: 102:36 (#0)",
        "source": "pub use crate::lil::__darwin_off_t;"
      },
      {
        "span": "main.rs:97:1: 97:34 (#0)",
        "source": "pub use crate::lil::_lil_value_t;"
      },
      {
        "span": "main.rs:4:1: 4:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "main.rs:87:1: 87:37 (#0)",
        "source": "pub use crate::lil::lil_list_append;"
      },
      {
        "span": "main.rs:103:1: 103:28 (#0)",
        "source": "pub use crate::lil::size_t;"
      },
      {
        "span": "main.rs:89:1: 89:29 (#0)",
        "source": "pub use crate::lil::lil_new;"
      },
      {
        "span": "main.rs:93:1: 93:36 (#0)",
        "source": "pub use crate::lil::lil_to_integer;"
      },
      {
        "span": "main.rs:91:1: 91:34 (#0)",
        "source": "pub use crate::lil::lil_register;"
      },
      {
        "span": "main.rs:115:1: 115:33 (#0)",
        "source": "pub use crate::lil::lil_value_t;"
      },
      {
        "span": "main.rs:117:1: 117:32 (#0)",
        "source": "pub use crate::lil::lil_list_t;"
      },
      {
        "span": "main.rs:118:1: 118:27 (#0)",
        "source": "pub use crate::lil::lil_t;"
      },
      {
        "span": "main.rs:120:1: 120:41 (#0)",
        "source": "pub use crate::lil::lil_callback_proc_t;"
      },
      {
        "span": "main.rs:6:1: 6:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "main.rs:96:1: 96:28 (#0)",
        "source": "pub use crate::lil::_lil_t;"
      },
      {
        "span": "main.rs:116:1: 116:31 (#0)",
        "source": "pub use crate::lil::lil_var_t;"
      },
      {
        "span": "main.rs:112:1: 112:29 (#0)",
        "source": "pub use crate::lil::__sFILE;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:65 ~ c2rust_out[3c70]::lil::isspace)",
    "span": "lil.rs:404:1: 406:2 (#0)",
    "pieces": [
      "lil.rs:404:1: 406:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "pub unsafe extern \"C\" fn isspace(mut _c: std::os::raw::c_int) -> std::os::raw::c_int {\n    return __istype(_c, 0x4000 as std::os::raw::c_long as std::os::raw::c_ulong);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:179 ~ c2rust_out[3c70]::lil::fnc_list)",
    "span": "lil.rs:3890:1: 3903:2 (#0)",
    "pieces": [
      "lil.rs:3890:1: 3903:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 14,
    "source": "unsafe extern \"C\" fn fnc_list(mut lil: lil_t, mut argc: size_t,\n                              mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = lil_alloc_list();\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut i: size_t = 0;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < argc {\n        lil_list_append(list, lil_clone_value(*argv.offset(i as isize)));\n        i = i.wrapping_add(1)\n    }\n    r = lil_list_to_value(list, 1 as std::os::raw::c_int);\n    lil_free_list(list);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:182 ~ c2rust_out[3c70]::lil::fnc_foreach)",
    "span": "lil.rs:3928:1: 3964:2 (#0)",
    "pieces": [
      "lil.rs:3928:1: 3964:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 37,
    "source": "unsafe extern \"C\" fn fnc_foreach(mut lil: lil_t, mut argc: size_t,\n                                 mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    let mut rlist: lil_list_t = 0 as *mut _lil_list_t;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut i: size_t = 0;\n    let mut listidx: size_t = 0 as std::os::raw::c_int as size_t;\n    let mut codeidx: size_t = 1 as std::os::raw::c_int as size_t;\n    let mut varname: *const std::os::raw::c_char =\n        b\"i\\x00\" as *const u8 as *const std::os::raw::c_char;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if argc >= 3 as std::os::raw::c_int as std::os::raw::c_ulong {\n        varname = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));\n        listidx = 1 as std::os::raw::c_int as size_t;\n        codeidx = 2 as std::os::raw::c_int as size_t\n    }\n    rlist = lil_alloc_list();\n    list = lil_subst_to_list(lil, *argv.offset(listidx as isize));\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < (*list).c {\n        let mut rv: lil_value_t = 0 as *mut _lil_value_t;\n        lil_set_var(lil, varname, *(*list).v.offset(i as isize),\n                    3 as std::os::raw::c_int);\n        rv =\n            lil_parse_value(lil, *argv.offset(codeidx as isize),\n                            0 as std::os::raw::c_int);\n        if (*rv).l != 0 {\n            lil_list_append(rlist, rv);\n        } else { lil_free_value(rv); }\n        if (*(*lil).env).breakrun != 0 || (*lil).error != 0 { break ; }\n        i = i.wrapping_add(1)\n    }\n    r = lil_list_to_value(rlist, 1 as std::os::raw::c_int);\n    lil_free_list(list);\n    lil_free_list(rlist);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:200 ~ c2rust_out[3c70]::lil::fnc_codeat)",
    "span": "lil.rs:4253:1: 4264:2 (#0)",
    "pieces": [
      "lil.rs:4253:1: 4264:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 10,
    "source": "unsafe extern \"C\" fn fnc_codeat(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut index: size_t = 0;\n    let mut str: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    str = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));\n    index = lil_to_integer(*argv.offset(1 as std::os::raw::c_int as isize)) as size_t;\n    if index >= strlen(str) { return 0 as lil_value_t }\n    return lil_alloc_integer(*str.offset(index as isize) as lilint_t);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:152 ~ c2rust_out[3c70]::lil::fnc_embed_write)",
    "span": "lil.rs:3012:1: 3026:2 (#0)",
    "pieces": [
      "lil.rs:3012:1: 3026:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 15,
    "source": "unsafe extern \"C\" fn fnc_embed_write(mut lil: lil_t,\n                                     mut msg: *const std::os::raw::c_char) {\n    let mut len: size_t =\n        strlen(msg).wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong);\n    (*lil).embed =\n        realloc((*lil).embed as *mut std::os::raw::c_void,\n                (*lil).embedlen.wrapping_add(len)) as *mut std::os::raw::c_char;\n    memcpy((*lil).embed.offset((*lil).embedlen as isize) as *mut std::os::raw::c_void,\n           msg as *const std::os::raw::c_void, len);\n    (*lil).embedlen =\n        ((*lil).embedlen as\n             std::os::raw::c_ulong).wrapping_add(len.wrapping_sub(1 as std::os::raw::c_int as\n                                                              std::os::raw::c_ulong))\n            as size_t as size_t;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:113 ~ c2rust_out[3c70]::lil::lil_call)",
    "span": "lil.rs:1529:1: 1585:2 (#0)",
    "pieces": [
      "lil.rs:1529:1: 1585:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 57,
    "source": "pub unsafe extern \"C\" fn lil_call(mut lil: lil_t,\n                                  mut funcname: *const std::os::raw::c_char,\n                                  mut argc: size_t,\n                                  mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut cmd: lil_func_t = find_cmd(lil, funcname);\n    let mut r: lil_value_t = 0 as lil_value_t;\n    if !cmd.is_null() {\n        if (*cmd).proc_0.is_some() {\n            r =\n                (*cmd).proc_0.expect(\"non-null function pointer\")(lil, argc,\n                                                                  argv)\n        } else {\n            let mut i: size_t = 0;\n            lil_push_env(lil);\n            (*(*lil).env).func = cmd;\n            if (*(*cmd).argnames).c == 1 as std::os::raw::c_int as std::os::raw::c_ulong &&\n                   strcmp(lil_to_string(*(*(*cmd).argnames).v.offset(0 as\n                                                                         std::os::raw::c_int\n                                                                         as\n                                                                         isize)),\n                          b\"args\\x00\" as *const u8 as *const std::os::raw::c_char) ==\n                       0 {\n                let mut args: lil_list_t = lil_alloc_list();\n                let mut argsval: lil_value_t = 0 as *mut _lil_value_t;\n                i = 0 as std::os::raw::c_int as size_t;\n                while i < argc {\n                    lil_list_append(args,\n                                    lil_clone_value(*argv.offset(i as\n                                                                     isize)));\n                    i = i.wrapping_add(1)\n                }\n                argsval = lil_list_to_value(args, 0 as std::os::raw::c_int);\n                lil_set_var(lil,\n                            b\"args\\x00\" as *const u8 as *const std::os::raw::c_char,\n                            argsval, 2 as std::os::raw::c_int);\n                lil_free_value(argsval);\n                lil_free_list(args);\n            } else {\n                i = 0 as std::os::raw::c_int as size_t;\n                while i < (*(*cmd).argnames).c {\n                    lil_set_var(lil,\n                                lil_to_string(*(*(*cmd).argnames).v.offset(i\n                                                                               as\n                                                                               isize)),\n                                if i < argc {\n                                    *argv.offset(i as isize)\n                                } else { 0 as lil_value_t },\n                                2 as std::os::raw::c_int);\n                    i = i.wrapping_add(1)\n                }\n            }\n            r = lil_parse_value(lil, (*cmd).code, 1 as std::os::raw::c_int);\n            lil_pop_env(lil);\n        }\n    }\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:153 ~ c2rust_out[3c70]::lil::lil_embedded)",
    "span": "lil.rs:3028:1: 3184:2 (#0)",
    "pieces": [
      "lil.rs:3028:1: 3032:4 (#0)",
      "lil.rs:3056:1: 3056:4 (#0)",
      "lil.rs:3135:1: 3135:4 (#0)",
      "lil.rs:3184:1: 3184:2 (#0)"
    ],
    "sub_chunks": [
      0,
      1,
      2
    ],
    "num_lines": 8,
    "source": "pub unsafe extern \"C\" fn lil_embedded(mut lil: lil_t,\n                                      mut code: *const std::os::raw::c_char,\n                                      mut flags: std::os::raw::c_uint)\n -> *mut std::os::raw::c_char {\n   <<chunk 0>>   <<chunk 1>>   <<chunk 2>>}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": [
      {
        "chunk_id": 0,
        "span": "lil.rs:3032:5: 3055:58 (#0)",
        "pieces": [
          "lil.rs:3032:5: 3055:58 (#0)"
        ],
        "num_lines": 24,
        "source": "let mut prev_embed: *mut std::os::raw::c_char = (*lil).embed;\n    let mut prev_embedlen: size_t = (*lil).embedlen;\n    let mut prev_write: lil_callback_proc_t =\n        (*lil).callback[1 as std::os::raw::c_int as usize];\n    let mut lilcode: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    let mut lilcodelen: size_t = 0 as std::os::raw::c_int as size_t;\n    let mut cont: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    let mut contlen: size_t = 0 as std::os::raw::c_int as size_t;\n    let mut head: size_t = 0 as std::os::raw::c_int as size_t;\n    let mut codelen: size_t = strlen(code);\n    let mut result: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    (*lil).callback[1 as std::os::raw::c_int as usize] =\n        ::std::mem::transmute::<Option<unsafe extern \"C\" fn(_: lil_t,\n                                                            _:\n                                                                *const std::os::raw::c_char)\n                                           -> ()>,\n                                lil_callback_proc_t>(Some(fnc_embed_write as\n                                                              unsafe extern \"C\" fn(_:\n                                                                                       lil_t,\n                                                                                   _:\n                                                                                       *const std::os::raw::c_char)\n                                                                  -> ()));\n    (*lil).embed = 0 as *mut std::os::raw::c_char;\n    (*lil).embedlen = 0 as std::os::raw::c_int as size_t;",
        "sub_chunks": [],
        "live_in": [
          "mut lil: *mut lil::_lil_t",
          "mut code: *const i8"
        ],
        "live_out": [
          "mut lil: *mut lil::_lil_t",
          "mut code: *const i8",
          "mut prev_embed: *mut i8",
          "mut prev_embedlen: u64",
          "mut prev_write: std::option::Option<unsafe extern \"C\" fn()>",
          "mut lilcode: *mut i8",
          "mut lilcodelen: u64",
          "mut cont: *mut i8",
          "mut contlen: u64",
          "mut head: u64",
          "mut codelen: u64",
          "mut result: *mut i8"
        ]
      },
      {
        "chunk_id": 1,
        "span": "lil.rs:3056:5: 3133:2 (#0)",
        "pieces": [
          "lil.rs:3056:5: 3133:2 (#0)"
        ],
        "num_lines": 146,
        "source": "while head < codelen {\n        if head < codelen.wrapping_sub(4 as std::os::raw::c_int as std::os::raw::c_ulong) &&\n               *code.offset(head as isize) as std::os::raw::c_int == '<' as i32 &&\n               *code.offset(head.wrapping_add(1 as std::os::raw::c_int as\n                                                  std::os::raw::c_ulong) as isize) as\n                   std::os::raw::c_int == '?' as i32 &&\n               *code.offset(head.wrapping_add(2 as std::os::raw::c_int as\n                                                  std::os::raw::c_ulong) as isize) as\n                   std::os::raw::c_int == 'l' as i32 &&\n               *code.offset(head.wrapping_add(3 as std::os::raw::c_int as\n                                                  std::os::raw::c_ulong) as isize) as\n                   std::os::raw::c_int == 'i' as i32 &&\n               *code.offset(head.wrapping_add(4 as std::os::raw::c_int as\n                                                  std::os::raw::c_ulong) as isize) as\n                   std::os::raw::c_int == 'l' as i32 {\n            head =\n                (head as\n                     std::os::raw::c_ulong).wrapping_add(5 as std::os::raw::c_int as\n                                                     std::os::raw::c_ulong) as size_t\n                    as size_t;\n            if contlen != 0 {\n                lilcode =\n                    realloc(lilcode as *mut std::os::raw::c_void,\n                            lilcodelen.wrapping_add(contlen).wrapping_add(10\n                                                                              as\n                                                                              std::os::raw::c_int\n                                                                              as\n                                                                              std::os::raw::c_ulong))\n                        as *mut std::os::raw::c_char;\n                memcpy(lilcode.offset(lilcodelen as isize) as\n                           *mut std::os::raw::c_void,\n                       b\"\\nwrite {\\x00\" as *const u8 as *const std::os::raw::c_char as\n                           *const std::os::raw::c_void,\n                       8 as std::os::raw::c_int as std::os::raw::c_ulong);\n                memcpy(lilcode.offset(lilcodelen as\n                                          isize).offset(8 as std::os::raw::c_int as\n                                                            isize) as\n                           *mut std::os::raw::c_void, cont as *const std::os::raw::c_void,\n                       contlen);\n                *lilcode.offset(lilcodelen.wrapping_add(contlen).wrapping_add(8\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  std::os::raw::c_ulong)\n                                    as isize) = '}' as i32 as std::os::raw::c_char;\n                *lilcode.offset(lilcodelen.wrapping_add(contlen).wrapping_add(9\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  std::os::raw::c_ulong)\n                                    as isize) = '\\n' as i32 as std::os::raw::c_char;\n                lilcodelen =\n                    (lilcodelen as\n                         std::os::raw::c_ulong).wrapping_add(contlen.wrapping_add(10\n                                                                              as\n                                                                              std::os::raw::c_int\n                                                                              as\n                                                                              std::os::raw::c_ulong))\n                        as size_t as size_t;\n                free(cont as *mut std::os::raw::c_void);\n                cont = 0 as *mut std::os::raw::c_char;\n                contlen = 0 as std::os::raw::c_int as size_t\n            }\n            while head < codelen {\n                if head <\n                       codelen.wrapping_sub(1 as std::os::raw::c_int as std::os::raw::c_ulong)\n                       &&\n                       *code.offset(head as isize) as std::os::raw::c_int ==\n                           '?' as i32 &&\n                       *code.offset(head.wrapping_add(1 as std::os::raw::c_int as\n                                                          std::os::raw::c_ulong) as\n                                        isize) as std::os::raw::c_int == '>' as i32 {\n                    head =\n                        (head as\n                             std::os::raw::c_ulong).wrapping_add(2 as std::os::raw::c_int as\n                                                             std::os::raw::c_ulong) as\n                            size_t as size_t;\n                    break ;\n                } else {\n                    lilcode =\n                        realloc(lilcode as *mut std::os::raw::c_void,\n                                lilcodelen.wrapping_add(1 as std::os::raw::c_int as\n                                                            std::os::raw::c_ulong)) as\n                            *mut std::os::raw::c_char;\n                    let fresh20 = head;\n                    head = head.wrapping_add(1);\n                    let fresh21 = lilcodelen;\n                    lilcodelen = lilcodelen.wrapping_add(1);\n                    *lilcode.offset(fresh21 as isize) =\n                        *code.offset(fresh20 as isize)\n                }\n            }\n            lilcode =\n                realloc(lilcode as *mut std::os::raw::c_void,\n                        lilcodelen.wrapping_add(1 as std::os::raw::c_int as\n                                                    std::os::raw::c_ulong)) as\n                    *mut std::os::raw::c_char;\n            let fresh22 = lilcodelen;\n            lilcodelen = lilcodelen.wrapping_add(1);\n            *lilcode.offset(fresh22 as isize) = '\\n' as i32 as std::os::raw::c_char\n        } else if *code.offset(head as isize) as std::os::raw::c_int == '{' as i32 ||\n                      *code.offset(head as isize) as std::os::raw::c_int == '}' as i32\n         {\n            cont =\n                realloc(cont as *mut std::os::raw::c_void,\n                        contlen.wrapping_add(6 as std::os::raw::c_int as\n                                                 std::os::raw::c_ulong)) as\n                    *mut std::os::raw::c_char;\n            let fresh23 = contlen;\n            contlen = contlen.wrapping_add(1);\n            *cont.offset(fresh23 as isize) = '}' as i32 as std::os::raw::c_char;\n            let fresh24 = contlen;\n            contlen = contlen.wrapping_add(1);\n            *cont.offset(fresh24 as isize) = '\\\"' as i32 as std::os::raw::c_char;\n            let fresh25 = contlen;\n            contlen = contlen.wrapping_add(1);\n            *cont.offset(fresh25 as isize) = '\\\\' as i32 as std::os::raw::c_char;\n            if *code.offset(head as isize) as std::os::raw::c_int == '{' as i32 {\n                let fresh26 = contlen;\n                contlen = contlen.wrapping_add(1);\n                *cont.offset(fresh26 as isize) = 'o' as i32 as std::os::raw::c_char\n            } else {\n                let fresh27 = contlen;\n                contlen = contlen.wrapping_add(1);\n                *cont.offset(fresh27 as isize) = 'c' as i32 as std::os::raw::c_char\n            }\n            let fresh28 = contlen;\n            contlen = contlen.wrapping_add(1);\n            *cont.offset(fresh28 as isize) = '\\\"' as i32 as std::os::raw::c_char;\n            let fresh29 = contlen;\n            contlen = contlen.wrapping_add(1);\n            *cont.offset(fresh29 as isize) = '{' as i32 as std::os::raw::c_char;\n            head = head.wrapping_add(1)\n        } else {\n            cont =\n                realloc(cont as *mut std::os::raw::c_void,\n                        contlen.wrapping_add(1 as std::os::raw::c_int as\n                                                 std::os::raw::c_ulong)) as\n                    *mut std::os::raw::c_char;\n            let fresh30 = head;\n            head = head.wrapping_add(1);\n            let fresh31 = contlen;\n            contlen = contlen.wrapping_add(1);\n            *cont.offset(fresh31 as isize) = *code.offset(fresh30 as isize)\n        }\n    }",
        "sub_chunks": [],
        "live_in": [
          "mut code: *const i8",
          "mut lilcode: *mut i8",
          "mut lilcodelen: u64",
          "mut cont: *mut i8",
          "mut contlen: u64",
          "mut head: u64",
          "mut codelen: u64"
        ],
        "live_out": [
          "mut code: *const i8",
          "mut lilcode: *mut i8",
          "mut lilcodelen: u64",
          "mut cont: *mut i8",
          "mut contlen: u64",
          "mut head: u64",
          "mut codelen: u64"
        ]
      },
      {
        "chunk_id": 2,
        "span": "lil.rs:3135:5: 3183:19 (#0)",
        "pieces": [
          "lil.rs:3135:5: 3183:19 (#0)"
        ],
        "num_lines": 49,
        "source": "if contlen != 0 {\n        lilcode =\n            realloc(lilcode as *mut std::os::raw::c_void,\n                    lilcodelen.wrapping_add(contlen).wrapping_add(10 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      std::os::raw::c_ulong))\n                as *mut std::os::raw::c_char;\n        memcpy(lilcode.offset(lilcodelen as isize) as *mut std::os::raw::c_void,\n               b\"\\nwrite {\\x00\" as *const u8 as *const std::os::raw::c_char as\n                   *const std::os::raw::c_void, 8 as std::os::raw::c_int as std::os::raw::c_ulong);\n        memcpy(lilcode.offset(lilcodelen as\n                                  isize).offset(8 as std::os::raw::c_int as isize) as\n                   *mut std::os::raw::c_void, cont as *const std::os::raw::c_void, contlen);\n        *lilcode.offset(lilcodelen.wrapping_add(contlen).wrapping_add(8 as\n                                                                          std::os::raw::c_int\n                                                                          as\n                                                                          std::os::raw::c_ulong)\n                            as isize) = '}' as i32 as std::os::raw::c_char;\n        *lilcode.offset(lilcodelen.wrapping_add(contlen).wrapping_add(9 as\n                                                                          std::os::raw::c_int\n                                                                          as\n                                                                          std::os::raw::c_ulong)\n                            as isize) = '\\n' as i32 as std::os::raw::c_char;\n        lilcodelen =\n            (lilcodelen as\n                 std::os::raw::c_ulong).wrapping_add(contlen.wrapping_add(10 as\n                                                                      std::os::raw::c_int\n                                                                      as\n                                                                      std::os::raw::c_ulong))\n                as size_t as size_t;\n        free(cont as *mut std::os::raw::c_void);\n    }\n    lilcode =\n        realloc(lilcode as *mut std::os::raw::c_void,\n                lilcodelen.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong)) as\n            *mut std::os::raw::c_char;\n    *lilcode.offset(lilcodelen as isize) = 0 as std::os::raw::c_int as std::os::raw::c_char;\n    lil_free_value(lil_parse(lil, lilcode, 0 as std::os::raw::c_int as size_t,\n                             1 as std::os::raw::c_int));\n    free(lilcode as *mut std::os::raw::c_void);\n    result =\n        if !(*lil).embed.is_null() {\n            (*lil).embed\n        } else { strclone(b\"\\x00\" as *const u8 as *const std::os::raw::c_char) };\n    (*lil).embed = prev_embed;\n    (*lil).embedlen = prev_embedlen;\n    (*lil).callback[1 as std::os::raw::c_int as usize] = prev_write;\n    return result;",
        "sub_chunks": [],
        "live_in": [
          "mut lil: *mut lil::_lil_t",
          "mut prev_embed: *mut i8",
          "mut prev_embedlen: u64",
          "mut prev_write: std::option::Option<unsafe extern \"C\" fn()>",
          "mut lilcode: *mut i8",
          "mut lilcodelen: u64",
          "mut cont: *mut i8",
          "mut contlen: u64",
          "mut result: *mut i8"
        ],
        "live_out": [
          "mut lil: *mut lil::_lil_t"
        ]
      }
    ]
  },
  {
    "func_defid": "DefId(0:354 ~ c2rust_out[3c70]::main::fnc_writechar)",
    "span": "main.rs:173:1: 180:2 (#0)",
    "pieces": [
      "main.rs:173:1: 180:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "unsafe extern \"C\" fn fnc_writechar(mut lil: lil_t, mut argc: size_t,\n                                   mut argv: *mut lil_value_t)\n -> lil_value_t {\n    if argc == 0 { return 0 as lil_value_t }\n    printf(b\"%c\\x00\" as *const u8 as *const std::os::raw::c_char,\n           lil_to_integer(*argv.offset(0 as std::os::raw::c_int as isize)) as\n               std::os::raw::c_char as std::os::raw::c_int);\n    return 0 as lil_value_t;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "main.rs:82:1: 82:34 (#0)",
        "source": "pub use crate::lil::lil_callback;"
      },
      {
        "span": "main.rs:81:1: 81:38 (#0)",
        "source": "pub use crate::lil::lil_alloc_string;"
      },
      {
        "span": "main.rs:103:1: 103:28 (#0)",
        "source": "pub use crate::lil::size_t;"
      },
      {
        "span": "main.rs:115:1: 115:33 (#0)",
        "source": "pub use crate::lil::lil_value_t;"
      },
      {
        "span": "main.rs:118:1: 118:27 (#0)",
        "source": "pub use crate::lil::lil_t;"
      },
      {
        "span": "main.rs:80:1: 80:36 (#0)",
        "source": "pub use crate::lil::lil_alloc_list;"
      },
      {
        "span": "main.rs:97:1: 97:34 (#0)",
        "source": "pub use crate::lil::_lil_value_t;"
      },
      {
        "span": "main.rs:96:1: 96:28 (#0)",
        "source": "pub use crate::lil::_lil_t;"
      },
      {
        "span": "main.rs:94:1: 94:35 (#0)",
        "source": "pub use crate::lil::lil_to_string;"
      },
      {
        "span": "main.rs:100:1: 100:37 (#0)",
        "source": "pub use crate::lil::__darwin_size_t;"
      },
      {
        "span": "main.rs:85:1: 85:35 (#0)",
        "source": "pub use crate::lil::lil_free_list;"
      },
      {
        "span": "main.rs:99:1: 99:31 (#0)",
        "source": "pub use crate::lil::__int64_t;"
      },
      {
        "span": "main.rs:86:1: 86:36 (#0)",
        "source": "pub use crate::lil::lil_free_value;"
      },
      {
        "span": "main.rs:4:1: 4:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "main.rs:102:1: 102:36 (#0)",
        "source": "pub use crate::lil::__darwin_off_t;"
      },
      {
        "span": "main.rs:95:1: 95:33 (#0)",
        "source": "pub use crate::lil::_lil_list_t;"
      },
      {
        "span": "main.rs:79:1: 79:30 (#0)",
        "source": "pub use crate::lil::__sFILEX;"
      },
      {
        "span": "main.rs:104:1: 104:29 (#0)",
        "source": "pub use crate::lil::int64_t;"
      },
      {
        "span": "main.rs:117:1: 117:32 (#0)",
        "source": "pub use crate::lil::lil_list_t;"
      },
      {
        "span": "main.rs:84:1: 84:30 (#0)",
        "source": "pub use crate::lil::lil_free;"
      },
      {
        "span": "main.rs:6:1: 6:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "main.rs:90:1: 90:31 (#0)",
        "source": "pub use crate::lil::lil_parse;"
      },
      {
        "span": "main.rs:88:1: 88:39 (#0)",
        "source": "pub use crate::lil::lil_list_to_value;"
      },
      {
        "span": "main.rs:91:1: 91:34 (#0)",
        "source": "pub use crate::lil::lil_register;"
      },
      {
        "span": "main.rs:89:1: 89:29 (#0)",
        "source": "pub use crate::lil::lil_new;"
      },
      {
        "span": "main.rs:106:1: 106:28 (#0)",
        "source": "pub use crate::lil::fpos_t;"
      },
      {
        "span": "main.rs:98:1: 98:32 (#0)",
        "source": "pub use crate::lil::_lil_var_t;"
      },
      {
        "span": "main.rs:109:1: 109:28 (#0)",
        "source": "pub use crate::lil::__sbuf;"
      },
      {
        "span": "main.rs:87:1: 87:37 (#0)",
        "source": "pub use crate::lil::lil_list_append;"
      },
      {
        "span": "main.rs:92:1: 92:33 (#0)",
        "source": "pub use crate::lil::lil_set_var;"
      },
      {
        "span": "main.rs:112:1: 112:29 (#0)",
        "source": "pub use crate::lil::__sFILE;"
      },
      {
        "span": "main.rs:114:1: 114:30 (#0)",
        "source": "pub use crate::lil::lilint_t;"
      },
      {
        "span": "main.rs:119:1: 119:37 (#0)",
        "source": "pub use crate::lil::lil_func_proc_t;"
      },
      {
        "span": "main.rs:83:1: 83:31 (#0)",
        "source": "pub use crate::lil::lil_error;"
      },
      {
        "span": "main.rs:93:1: 93:36 (#0)",
        "source": "pub use crate::lil::lil_to_integer;"
      },
      {
        "span": "main.rs:116:1: 116:31 (#0)",
        "source": "pub use crate::lil::lil_var_t;"
      },
      {
        "span": "main.rs:120:1: 120:41 (#0)",
        "source": "pub use crate::lil::lil_callback_proc_t;"
      },
      {
        "span": "main.rs:113:1: 113:26 (#0)",
        "source": "pub use crate::lil::FILE;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:193 ~ c2rust_out[3c70]::lil::fnc_for)",
    "span": "lil.rs:4202:1: 4229:2 (#0)",
    "pieces": [
      "lil.rs:4202:1: 4229:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 28,
    "source": "unsafe extern \"C\" fn fnc_for(mut lil: lil_t, mut argc: size_t,\n                             mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut val: lil_value_t = 0 as *mut _lil_value_t;\n    let mut r: lil_value_t = 0 as lil_value_t;\n    if argc < 4 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    lil_free_value(lil_parse_value(lil,\n                                   *argv.offset(0 as std::os::raw::c_int as isize),\n                                   0 as std::os::raw::c_int));\n    while (*lil).error == 0 && (*(*lil).env).breakrun == 0 {\n        val = lil_eval_expr(lil, *argv.offset(1 as std::os::raw::c_int as isize));\n        if val.is_null() || (*lil).error != 0 { return 0 as lil_value_t }\n        if lil_to_boolean(val) == 0 {\n            lil_free_value(val);\n            break ;\n        } else {\n            if !r.is_null() { lil_free_value(r); }\n            r =\n                lil_parse_value(lil, *argv.offset(3 as std::os::raw::c_int as isize),\n                                0 as std::os::raw::c_int);\n            lil_free_value(val);\n            lil_free_value(lil_parse_value(lil,\n                                           *argv.offset(2 as std::os::raw::c_int as\n                                                            isize),\n                                           0 as std::os::raw::c_int));\n        }\n    }\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:118 ~ c2rust_out[3c70]::lil::ee_invalidpunct)",
    "span": "lil.rs:1626:1: 1631:2 (#0)",
    "pieces": [
      "lil.rs:1626:1: 1631:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "unsafe extern \"C\" fn ee_invalidpunct(mut ch: std::os::raw::c_int) -> std::os::raw::c_int {\n    return (ispunct(ch) != 0 && ch != '!' as i32 && ch != '~' as i32 &&\n                ch != '(' as i32 && ch != ')' as i32 && ch != '-' as i32 &&\n                ch != '+' as i32) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:175 ~ c2rust_out[3c70]::lil::fnc_indexof)",
    "span": "lil.rs:3769:1: 3785:2 (#0)",
    "pieces": [
      "lil.rs:3769:1: 3785:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 19,
    "source": "unsafe extern \"C\" fn fnc_indexof(mut lil: lil_t, mut argc: size_t,\n                                 mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    let mut index: size_t = 0;\n    let mut r: lil_value_t = 0 as lil_value_t;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    list = lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));\n    index = 0 as std::os::raw::c_int as size_t;\n    while index < (*list).c {\n        if strcmp(lil_to_string(*(*list).v.offset(index as isize)),\n                  lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize))) == 0\n           {\n            r = lil_alloc_integer(index as lilint_t);\n            break ;\n        } else { index = index.wrapping_add(1) }\n    }\n    lil_free_list(list);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:216 ~ c2rust_out[3c70]::lil::fnc_lmap)",
    "span": "lil.rs:4634:1: 4651:2 (#0)",
    "pieces": [
      "lil.rs:4634:1: 4651:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 18,
    "source": "unsafe extern \"C\" fn fnc_lmap(mut lil: lil_t, mut argc: size_t,\n                              mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    let mut i: size_t = 0;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    list = lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));\n    i = 1 as std::os::raw::c_int as size_t;\n    while i < argc {\n        lil_set_var(lil, lil_to_string(*argv.offset(i as isize)),\n                    lil_list_get(list,\n                                 i.wrapping_sub(1 as std::os::raw::c_int as\n                                                    std::os::raw::c_ulong)),\n                    1 as std::os::raw::c_int);\n        i = i.wrapping_add(1)\n    }\n    lil_free_list(list);\n    return 0 as lil_value_t;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:170 ~ c2rust_out[3c70]::lil::fnc_jaileval)",
    "span": "lil.rs:3711:1: 3741:2 (#0)",
    "pieces": [
      "lil.rs:3711:1: 3741:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 31,
    "source": "unsafe extern \"C\" fn fnc_jaileval(mut lil: lil_t, mut argc: size_t,\n                                  mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut i: size_t = 0;\n    let mut sublil: lil_t = 0 as *mut _lil_t;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut base: size_t = 0 as std::os::raw::c_int as size_t;\n    if argc == 0 { return 0 as lil_value_t }\n    if strcmp(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n              b\"clean\\x00\" as *const u8 as *const std::os::raw::c_char) == 0 {\n        base = 1 as std::os::raw::c_int as size_t;\n        if argc == 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n            return 0 as lil_value_t\n        }\n    }\n    sublil = lil_new();\n    if base != 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n        i = (*lil).syscmds;\n        while i < (*lil).cmds {\n            let mut fnc: lil_func_t = *(*lil).cmd.offset(i as isize);\n            if !(*fnc).proc_0.is_none() {\n                lil_register(sublil, (*fnc).name, (*fnc).proc_0);\n            }\n            i = i.wrapping_add(1)\n        }\n    }\n    r =\n        lil_parse_value(sublil, *argv.offset(base as isize),\n                        1 as std::os::raw::c_int);\n    lil_free(sublil);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:197 ~ c2rust_out[3c70]::lil::fnc_charat)",
    "span": "lil.rs:4240:1: 4252:2 (#0)",
    "pieces": [
      "lil.rs:4240:1: 4252:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 13,
    "source": "unsafe extern \"C\" fn fnc_charat(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut index: size_t = 0;\n    let mut chstr: [std::os::raw::c_char; 2] = [0; 2];\n    let mut str: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    str = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));\n    index = lil_to_integer(*argv.offset(1 as std::os::raw::c_int as isize)) as size_t;\n    if index >= strlen(str) { return 0 as lil_value_t }\n    chstr[0 as std::os::raw::c_int as usize] = *str.offset(index as isize);\n    chstr[1 as std::os::raw::c_int as usize] = 0 as std::os::raw::c_int as std::os::raw::c_char;\n    return lil_alloc_string(chstr.as_mut_ptr());\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:62 ~ c2rust_out[3c70]::lil::__isctype)",
    "span": "lil.rs:371:1: 380:2 (#0)",
    "pieces": [
      "lil.rs:371:1: 380:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 10,
    "source": "unsafe extern \"C\" fn __isctype(mut _c: __darwin_ct_rune_t,\n                               mut _f: std::os::raw::c_ulong) -> __darwin_ct_rune_t {\n    return if _c < 0 as std::os::raw::c_int ||\n                  _c >= (1 as std::os::raw::c_int) << 8 as std::os::raw::c_int {\n               0 as std::os::raw::c_int\n           } else {\n               (_DefaultRuneLocale.__runetype[_c as usize] as std::os::raw::c_ulong &\n                    _f != 0) as std::os::raw::c_int\n           };\n}",
    "calls": [
      {
        "caller": "DefId(0:90 ~ c2rust_out[3c70]::lil::isdigit)",
        "span": "lil.rs:386:5: 386:32 (#0)",
        "source": "return __isctype(c, 0x400);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:86 ~ c2rust_out[3c70]::lil::needs_escape)",
    "span": "lil.rs:698:1: 711:2 (#0)",
    "pieces": [
      "lil.rs:698:1: 711:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 16,
    "source": "unsafe extern \"C\" fn needs_escape(mut str: *const std::os::raw::c_char)\n -> std::os::raw::c_int {\n    let mut i: size_t = 0;\n    if str.is_null() || *str.offset(0 as std::os::raw::c_int as isize) == 0 {\n        return 1 as std::os::raw::c_int\n    }\n    i = 0 as std::os::raw::c_int as size_t;\n    while *str.offset(i as isize) != 0 {\n        if ispunct(*str.offset(i as isize) as std::os::raw::c_int) != 0 ||\n               isspace(*str.offset(i as isize) as std::os::raw::c_int) != 0 {\n            return 1 as std::os::raw::c_int\n        }\n        i = i.wrapping_add(1)\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:212 ~ c2rust_out[3c70]::lil::fnc_try)",
    "span": "lil.rs:4526:1: 4544:2 (#0)",
    "pieces": [
      "lil.rs:4526:1: 4544:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 19,
    "source": "unsafe extern \"C\" fn fnc_try(mut lil: lil_t, mut argc: size_t,\n                             mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if (*lil).error != 0 { return 0 as lil_value_t }\n    r =\n        lil_parse_value(lil, *argv.offset(0 as std::os::raw::c_int as isize),\n                        0 as std::os::raw::c_int);\n    if (*lil).error != 0 {\n        (*lil).error = 0 as std::os::raw::c_int;\n        lil_free_value(r);\n        if argc > 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n            r =\n                lil_parse_value(lil, *argv.offset(1 as std::os::raw::c_int as isize),\n                                0 as std::os::raw::c_int)\n        } else { r = 0 as lil_value_t }\n    }\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:219 ~ c2rust_out[3c70]::lil::fnc_watch)",
    "span": "lil.rs:4673:1: 4706:2 (#0)",
    "pieces": [
      "lil.rs:4673:1: 4706:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 34,
    "source": "unsafe extern \"C\" fn fnc_watch(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut i: size_t = 0;\n    let mut wcode: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    wcode =\n        lil_to_string(*argv.offset(argc.wrapping_sub(1 as std::os::raw::c_int as\n                                                         std::os::raw::c_ulong) as\n                                       isize));\n    i = 0 as std::os::raw::c_int as size_t;\n    while i.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong) < argc {\n        let mut vname: *const std::os::raw::c_char =\n            lil_to_string(*argv.offset(i as isize));\n        let mut v: lil_var_t = 0 as *mut _lil_var_t;\n        if !(*vname.offset(0 as std::os::raw::c_int as isize) == 0) {\n            v =\n                lil_find_var(lil, (*lil).env,\n                             lil_to_string(*argv.offset(i as isize)));\n            if v.is_null() {\n                v =\n                    lil_set_var(lil, vname, 0 as lil_value_t,\n                                2 as std::os::raw::c_int)\n            }\n            free((*v).w as *mut std::os::raw::c_void);\n            (*v).w =\n                if *wcode.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int !=\n                       0 {\n                    strclone(wcode)\n                } else { 0 as *mut std::os::raw::c_char }\n        }\n        i = i.wrapping_add(1)\n    }\n    return 0 as lil_value_t;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:63 ~ c2rust_out[3c70]::lil::isdigit)",
    "span": "lil.rs:385:1: 387:2 (#0)",
    "pieces": [
      "lil.rs:385:1: 387:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "pub unsafe extern \"C\" fn isdigit(mut _c: std::os::raw::c_int) -> std::os::raw::c_int {\n    return __isctype(_c, 0x400 as std::os::raw::c_long as std::os::raw::c_ulong);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:178 ~ c2rust_out[3c70]::lil::fnc_filter)",
    "span": "lil.rs:3852:1: 3889:2 (#0)",
    "pieces": [
      "lil.rs:3852:1: 3889:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 38,
    "source": "unsafe extern \"C\" fn fnc_filter(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    let mut filtered: lil_list_t = 0 as *mut _lil_list_t;\n    let mut i: size_t = 0;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut varname: *const std::os::raw::c_char =\n        b\"x\\x00\" as *const u8 as *const std::os::raw::c_char;\n    let mut base: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n        return lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n    }\n    if argc > 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n        base = 1 as std::os::raw::c_int;\n        varname = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize))\n    }\n    list = lil_subst_to_list(lil, *argv.offset(base as isize));\n    filtered = lil_alloc_list();\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < (*list).c && (*(*lil).env).breakrun == 0 {\n        lil_set_var(lil, varname, *(*list).v.offset(i as isize),\n                    3 as std::os::raw::c_int);\n        r =\n            lil_eval_expr(lil,\n                          *argv.offset((base + 1 as std::os::raw::c_int) as isize));\n        if lil_to_boolean(r) != 0 {\n            lil_list_append(filtered,\n                            lil_clone_value(*(*list).v.offset(i as isize)));\n        }\n        lil_free_value(r);\n        i = i.wrapping_add(1)\n    }\n    lil_free_list(list);\n    r = lil_list_to_value(filtered, 1 as std::os::raw::c_int);\n    lil_free_list(filtered);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:84 ~ c2rust_out[3c70]::lil::lil_list_size)",
    "span": "lil.rs:688:1: 690:2 (#0)",
    "pieces": [
      "lil.rs:688:1: 690:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "pub unsafe extern \"C\" fn lil_list_size(mut list: lil_list_t) -> size_t {\n    return (*list).c;\n}",
    "calls": [
      {
        "caller": "DefId(0:197 ~ c2rust_out[3c70]::lil::fnc_enveval)",
        "span": "lil.rs:3660:13: 3664:41 (#0)",
        "source": "varvalues =\n                realloc(varvalues as *mut std::os::raw::c_void,\n                        (::std::mem::size_of::<lil_value_t>() as\n                             std::os::raw::c_ulong).wrapping_mul(lil_list_size(outvars)))\n                    as *mut lil_value_t;"
      },
      {
        "caller": "DefId(0:197 ~ c2rust_out[3c70]::lil::fnc_enveval)",
        "span": "lil.rs:3625:9: 3628:34 (#0)",
        "source": "varvalues =\n            malloc((::std::mem::size_of::<lil_value_t>() as\n                        std::os::raw::c_ulong).wrapping_mul(lil_list_size(invars))) as\n                *mut lil_value_t;"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:167 ~ c2rust_out[3c70]::lil::fnc_upeval)",
    "span": "lil.rs:3585:1: 3597:2 (#0)",
    "pieces": [
      "lil.rs:3585:1: 3597:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 13,
    "source": "unsafe extern \"C\" fn fnc_upeval(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut thisenv: lil_env_t = (*lil).env;\n    let mut thisdownenv: lil_env_t = (*lil).downenv;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    if (*lil).rootenv == thisenv { return fnc_eval(lil, argc, argv) }\n    (*lil).env = (*thisenv).parent;\n    (*lil).downenv = thisenv;\n    r = fnc_eval(lil, argc, argv);\n    (*lil).env = thisenv;\n    (*lil).downenv = thisdownenv;\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:194 ~ c2rust_out[3c70]::lil::fnc_char)",
    "span": "lil.rs:4230:1: 4239:2 (#0)",
    "pieces": [
      "lil.rs:4230:1: 4239:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 10,
    "source": "unsafe extern \"C\" fn fnc_char(mut lil: lil_t, mut argc: size_t,\n                              mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut s: [std::os::raw::c_char; 2] = [0; 2];\n    if argc == 0 { return 0 as lil_value_t }\n    s[0 as std::os::raw::c_int as usize] =\n        lil_to_integer(*argv.offset(0 as std::os::raw::c_int as isize)) as\n            std::os::raw::c_char;\n    s[1 as std::os::raw::c_int as usize] = 0 as std::os::raw::c_int as std::os::raw::c_char;\n    return lil_alloc_string(s.as_mut_ptr());\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:169 ~ c2rust_out[3c70]::lil::fnc_enveval)",
    "span": "lil.rs:3611:1: 3710:2 (#0)",
    "pieces": [
      "lil.rs:3611:1: 3710:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 100,
    "source": "unsafe extern \"C\" fn fnc_enveval(mut lil: lil_t, mut argc: size_t,\n                                 mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut invars: lil_list_t = 0 as lil_list_t;\n    let mut outvars: lil_list_t = 0 as lil_list_t;\n    let mut varvalues: *mut lil_value_t = 0 as *mut lil_value_t;\n    let mut codeindex: std::os::raw::c_int = 0;\n    let mut i: size_t = 0;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if argc == 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n        codeindex = 0 as std::os::raw::c_int\n    } else if argc >= 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n        invars =\n            lil_subst_to_list(lil, *argv.offset(0 as std::os::raw::c_int as isize));\n        varvalues =\n            malloc((::std::mem::size_of::<lil_value_t>() as\n                        std::os::raw::c_ulong).wrapping_mul(lil_list_size(invars))) as\n                *mut lil_value_t;\n        i = 0 as std::os::raw::c_int as size_t;\n        while i < lil_list_size(invars) {\n            let ref mut fresh32 = *varvalues.offset(i as isize);\n            *fresh32 =\n                lil_clone_value(lil_get_var(lil,\n                                            lil_to_string(lil_list_get(invars,\n                                                                       i))));\n            i = i.wrapping_add(1)\n        }\n        if argc > 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n            codeindex = 2 as std::os::raw::c_int;\n            outvars =\n                lil_subst_to_list(lil,\n                                  *argv.offset(1 as std::os::raw::c_int as isize))\n        } else { codeindex = 1 as std::os::raw::c_int }\n    }\n    lil_push_env(lil);\n    if !invars.is_null() {\n        i = 0 as std::os::raw::c_int as size_t;\n        while i < lil_list_size(invars) {\n            lil_set_var(lil, lil_to_string(lil_list_get(invars, i)),\n                        *varvalues.offset(i as isize), 2 as std::os::raw::c_int);\n            lil_free_value(*varvalues.offset(i as isize));\n            i = i.wrapping_add(1)\n        }\n    }\n    r =\n        lil_parse_value(lil, *argv.offset(codeindex as isize),\n                        0 as std::os::raw::c_int);\n    if !invars.is_null() || !outvars.is_null() {\n        if !outvars.is_null() {\n            varvalues =\n                realloc(varvalues as *mut std::os::raw::c_void,\n                        (::std::mem::size_of::<lil_value_t>() as\n                             std::os::raw::c_ulong).wrapping_mul(lil_list_size(outvars)))\n                    as *mut lil_value_t;\n            i = 0 as std::os::raw::c_int as size_t;\n            while i < lil_list_size(outvars) {\n                let ref mut fresh33 = *varvalues.offset(i as isize);\n                *fresh33 =\n                    lil_clone_value(lil_get_var(lil,\n                                                lil_to_string(lil_list_get(outvars,\n                                                                           i))));\n                i = i.wrapping_add(1)\n            }\n        } else {\n            i = 0 as std::os::raw::c_int as size_t;\n            while i < lil_list_size(invars) {\n                let ref mut fresh34 = *varvalues.offset(i as isize);\n                *fresh34 =\n                    lil_clone_value(lil_get_var(lil,\n                                                lil_to_string(lil_list_get(invars,\n                                                                           i))));\n                i = i.wrapping_add(1)\n            }\n        }\n    }\n    lil_pop_env(lil);\n    if !invars.is_null() {\n        if !outvars.is_null() {\n            i = 0 as std::os::raw::c_int as size_t;\n            while i < lil_list_size(outvars) {\n                lil_set_var(lil, lil_to_string(lil_list_get(outvars, i)),\n                            *varvalues.offset(i as isize), 1 as std::os::raw::c_int);\n                lil_free_value(*varvalues.offset(i as isize));\n                i = i.wrapping_add(1)\n            }\n        } else {\n            i = 0 as std::os::raw::c_int as size_t;\n            while i < lil_list_size(invars) {\n                lil_set_var(lil, lil_to_string(lil_list_get(invars, i)),\n                            *varvalues.offset(i as isize), 1 as std::os::raw::c_int);\n                lil_free_value(*varvalues.offset(i as isize));\n                i = i.wrapping_add(1)\n            }\n        }\n        lil_free_list(invars);\n        if !outvars.is_null() { lil_free_list(outvars); }\n        free(varvalues as *mut std::os::raw::c_void);\n    }\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:210 ~ c2rust_out[3c70]::lil::fnc_repstr)",
    "span": "lil.rs:4439:1: 4493:2 (#0)",
    "pieces": [
      "lil.rs:4439:1: 4493:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 55,
    "source": "unsafe extern \"C\" fn fnc_repstr(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut from: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    let mut to: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    let mut src: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    let mut sub: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    let mut idx: size_t = 0;\n    let mut fromlen: size_t = 0;\n    let mut tolen: size_t = 0;\n    let mut srclen: size_t = 0;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if argc < 3 as std::os::raw::c_int as std::os::raw::c_ulong {\n        return lil_clone_value(*argv.offset(0 as std::os::raw::c_int as isize))\n    }\n    from = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));\n    to = lil_to_string(*argv.offset(2 as std::os::raw::c_int as isize));\n    if *from.offset(0 as std::os::raw::c_int as isize) == 0 {\n        return 0 as lil_value_t\n    }\n    src = strclone(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)));\n    srclen = strlen(src);\n    fromlen = strlen(from);\n    tolen = strlen(to);\n    loop  {\n        sub = strstr(src, from);\n        if sub.is_null() { break ; }\n        let mut newsrc: *mut std::os::raw::c_char =\n            malloc(srclen.wrapping_sub(fromlen).wrapping_add(tolen).wrapping_add(1\n                                                                                     as\n                                                                                     std::os::raw::c_int\n                                                                                     as\n                                                                                     std::os::raw::c_ulong))\n                as *mut std::os::raw::c_char;\n        idx = sub.offset_from(src) as std::os::raw::c_long as size_t;\n        if idx != 0 {\n            memcpy(newsrc as *mut std::os::raw::c_void, src as *const std::os::raw::c_void,\n                   idx);\n        }\n        memcpy(newsrc.offset(idx as isize) as *mut std::os::raw::c_void,\n               to as *const std::os::raw::c_void, tolen);\n        memcpy(newsrc.offset(idx as isize).offset(tolen as isize) as\n                   *mut std::os::raw::c_void,\n               src.offset(idx as isize).offset(fromlen as isize) as\n                   *const std::os::raw::c_void,\n               srclen.wrapping_sub(idx).wrapping_sub(fromlen));\n        srclen = srclen.wrapping_sub(fromlen).wrapping_add(tolen);\n        free(src as *mut std::os::raw::c_void);\n        src = newsrc;\n        *src.offset(srclen as isize) = 0 as std::os::raw::c_int as std::os::raw::c_char\n    }\n    r = lil_alloc_string(src);\n    free(src as *mut std::os::raw::c_void);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:176 ~ c2rust_out[3c70]::lil::fnc_append)",
    "span": "lil.rs:3787:1: 3816:2 (#0)",
    "pieces": [
      "lil.rs:3787:1: 3816:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 30,
    "source": "unsafe extern \"C\" fn fnc_append(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut list: lil_list_t = 0 as *mut _lil_list_t;\n    let mut r: lil_value_t = 0 as *mut _lil_value_t;\n    let mut i: size_t = 0;\n    let mut base: size_t = 1 as std::os::raw::c_int as size_t;\n    let mut access: std::os::raw::c_int = 1 as std::os::raw::c_int;\n    let mut varname: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    varname = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));\n    if strcmp(varname, b\"global\\x00\" as *const u8 as *const std::os::raw::c_char) == 0\n       {\n        if argc < 3 as std::os::raw::c_int as std::os::raw::c_ulong {\n            return 0 as lil_value_t\n        }\n        varname = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));\n        base = 2 as std::os::raw::c_int as size_t;\n        access = 0 as std::os::raw::c_int\n    }\n    list = lil_subst_to_list(lil, lil_get_var(lil, varname));\n    i = base;\n    while i < argc {\n        lil_list_append(list, lil_clone_value(*argv.offset(i as isize)));\n        i = i.wrapping_add(1)\n    }\n    r = lil_list_to_value(list, 1 as std::os::raw::c_int);\n    lil_free_list(list);\n    lil_set_var(lil, varname, r, access);\n    return r;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:162 ~ c2rust_out[3c70]::lil::fnc_local)",
    "span": "lil.rs:3520:1: 3529:2 (#0)",
    "pieces": [
      "lil.rs:3520:1: 3529:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 14,
    "source": "unsafe extern \"C\" fn fnc_local(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut i: size_t = 0;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < argc {\n        let mut varname: *const std::os::raw::c_char =\n            lil_to_string(*argv.offset(i as isize));\n        if lil_find_local_var(lil, (*lil).env, varname).is_null() {\n            lil_set_var(lil, varname, (*lil).empty, 2 as std::os::raw::c_int);\n        }\n        i = i.wrapping_add(1)\n    }\n    return 0 as lil_value_t;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:150 ~ c2rust_out[3c70]::lil::lil_set_data)",
    "span": "lil.rs:3004:1: 3007:2 (#0)",
    "pieces": [
      "lil.rs:3004:1: 3007:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn lil_set_data(mut lil: lil_t,\n                                      mut data: *mut std::os::raw::c_void) {\n    (*lil).data = data;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:188 ~ c2rust_out[3c70]::lil::fnc_dec)",
    "span": "lil.rs:4036:1: 4047:2 (#0)",
    "pieces": [
      "lil.rs:4036:1: 4047:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 11,
    "source": "unsafe extern \"C\" fn fnc_dec(mut lil: lil_t, mut argc: size_t,\n                             mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    return real_inc(lil,\n                    lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                    -if argc > 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n                         lil_to_double(*argv.offset(1 as std::os::raw::c_int as\n                                                        isize))\n                     } else { 1 as std::os::raw::c_int as std::os::raw::c_double } as\n                        std::os::raw::c_float);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:190 ~ c2rust_out[3c70]::lil::fnc_store)",
    "span": "lil.rs:4091:1: 4126:2 (#0)",
    "pieces": [
      "lil.rs:4091:1: 4126:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 36,
    "source": "unsafe extern \"C\" fn fnc_store(mut lil: lil_t, mut argc: size_t,\n                               mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut f: *mut FILE = 0 as *mut FILE;\n    let mut buffer: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    if (*lil).callback[3 as std::os::raw::c_int as usize].is_some() {\n        let mut proc_0: lil_store_callback_proc_t =\n            ::std::mem::transmute::<lil_callback_proc_t,\n                                    lil_store_callback_proc_t>((*lil).callback[3\n                                                                                   as\n                                                                                   std::os::raw::c_int\n                                                                                   as\n                                                                                   usize]);\n        proc_0.expect(\"non-null function pointer\")(lil,\n                                                   lil_to_string(*argv.offset(0\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  isize)),\n                                                   lil_to_string(*argv.offset(1\n                                                                                  as\n                                                                                  std::os::raw::c_int\n                                                                                  as\n                                                                                  isize)));\n    } else {\n        f =\n            fopen(lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                  b\"wb\\x00\" as *const u8 as *const std::os::raw::c_char);\n        if f.is_null() { return 0 as lil_value_t }\n        buffer = lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize));\n        fwrite(buffer as *const std::os::raw::c_void,\n               1 as std::os::raw::c_int as std::os::raw::c_ulong, strlen(buffer), f);\n        fclose(f);\n    }\n    return lil_clone_value(*argv.offset(1 as std::os::raw::c_int as isize));\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:217 ~ c2rust_out[3c70]::lil::fnc_rand)",
    "span": "lil.rs:4652:1: 4656:2 (#0)",
    "pieces": [
      "lil.rs:4652:1: 4656:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "unsafe extern \"C\" fn fnc_rand(mut lil: lil_t, mut argc: size_t,\n                              mut argv: *mut lil_value_t) -> lil_value_t {\n    return lil_alloc_double(rand() as std::os::raw::c_double /\n                                0x7fffffff as std::os::raw::c_int as std::os::raw::c_double);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:356 ~ c2rust_out[3c70]::main::fnc_readline)",
    "span": "main.rs:211:1: 245:2 (#0)",
    "pieces": [
      "main.rs:211:1: 245:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 35,
    "source": "unsafe extern \"C\" fn fnc_readline(mut lil: lil_t, mut argc: size_t,\n                                  mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut len: size_t = 0 as std::os::raw::c_int as size_t;\n    let mut size: size_t = 64 as std::os::raw::c_int as size_t;\n    let mut buffer: *mut std::os::raw::c_char = malloc(size) as *mut std::os::raw::c_char;\n    let mut ch: std::os::raw::c_schar = 0;\n    let mut retval: lil_value_t = 0 as *mut _lil_value_t;\n    loop  {\n        ch = fgetc(__stdinp) as std::os::raw::c_schar;\n        if ch as std::os::raw::c_int == -(1 as std::os::raw::c_int) { break ; }\n        if ch as std::os::raw::c_int == '\\r' as i32 { continue ; }\n        if ch as std::os::raw::c_int == '\\n' as i32 { break ; }\n        if len < size {\n            size =\n                (size as\n                     std::os::raw::c_ulong).wrapping_add(64 as std::os::raw::c_int as\n                                                     std::os::raw::c_ulong) as size_t\n                    as size_t;\n            buffer =\n                realloc(buffer as *mut std::os::raw::c_void, size) as\n                    *mut std::os::raw::c_char\n        }\n        let fresh3 = len;\n        len = len.wrapping_add(1);\n        *buffer.offset(fresh3 as isize) = ch as std::os::raw::c_char\n    }\n    buffer =\n        realloc(buffer as *mut std::os::raw::c_void,\n                len.wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong)) as\n            *mut std::os::raw::c_char;\n    *buffer.offset(len as isize) = 0 as std::os::raw::c_int as std::os::raw::c_char;\n    retval = lil_alloc_string(buffer);\n    free(buffer as *mut std::os::raw::c_void);\n    return retval;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "main.rs:79:1: 79:30 (#0)",
        "source": "pub use crate::lil::__sFILEX;"
      },
      {
        "span": "main.rs:106:1: 106:28 (#0)",
        "source": "pub use crate::lil::fpos_t;"
      },
      {
        "span": "main.rs:112:1: 112:29 (#0)",
        "source": "pub use crate::lil::__sFILE;"
      },
      {
        "span": "main.rs:86:1: 86:36 (#0)",
        "source": "pub use crate::lil::lil_free_value;"
      },
      {
        "span": "main.rs:80:1: 80:36 (#0)",
        "source": "pub use crate::lil::lil_alloc_list;"
      },
      {
        "span": "main.rs:93:1: 93:36 (#0)",
        "source": "pub use crate::lil::lil_to_integer;"
      },
      {
        "span": "main.rs:99:1: 99:31 (#0)",
        "source": "pub use crate::lil::__int64_t;"
      },
      {
        "span": "main.rs:98:1: 98:32 (#0)",
        "source": "pub use crate::lil::_lil_var_t;"
      },
      {
        "span": "main.rs:117:1: 117:32 (#0)",
        "source": "pub use crate::lil::lil_list_t;"
      },
      {
        "span": "main.rs:97:1: 97:34 (#0)",
        "source": "pub use crate::lil::_lil_value_t;"
      },
      {
        "span": "main.rs:118:1: 118:27 (#0)",
        "source": "pub use crate::lil::lil_t;"
      },
      {
        "span": "main.rs:109:1: 109:28 (#0)",
        "source": "pub use crate::lil::__sbuf;"
      },
      {
        "span": "main.rs:87:1: 87:37 (#0)",
        "source": "pub use crate::lil::lil_list_append;"
      },
      {
        "span": "main.rs:92:1: 92:33 (#0)",
        "source": "pub use crate::lil::lil_set_var;"
      },
      {
        "span": "main.rs:88:1: 88:39 (#0)",
        "source": "pub use crate::lil::lil_list_to_value;"
      },
      {
        "span": "main.rs:102:1: 102:36 (#0)",
        "source": "pub use crate::lil::__darwin_off_t;"
      },
      {
        "span": "main.rs:114:1: 114:30 (#0)",
        "source": "pub use crate::lil::lilint_t;"
      },
      {
        "span": "main.rs:115:1: 115:33 (#0)",
        "source": "pub use crate::lil::lil_value_t;"
      },
      {
        "span": "main.rs:82:1: 82:34 (#0)",
        "source": "pub use crate::lil::lil_callback;"
      },
      {
        "span": "main.rs:91:1: 91:34 (#0)",
        "source": "pub use crate::lil::lil_register;"
      },
      {
        "span": "main.rs:103:1: 103:28 (#0)",
        "source": "pub use crate::lil::size_t;"
      },
      {
        "span": "main.rs:120:1: 120:41 (#0)",
        "source": "pub use crate::lil::lil_callback_proc_t;"
      },
      {
        "span": "main.rs:4:1: 4:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "main.rs:83:1: 83:31 (#0)",
        "source": "pub use crate::lil::lil_error;"
      },
      {
        "span": "main.rs:84:1: 84:30 (#0)",
        "source": "pub use crate::lil::lil_free;"
      },
      {
        "span": "main.rs:113:1: 113:26 (#0)",
        "source": "pub use crate::lil::FILE;"
      },
      {
        "span": "main.rs:116:1: 116:31 (#0)",
        "source": "pub use crate::lil::lil_var_t;"
      },
      {
        "span": "main.rs:94:1: 94:35 (#0)",
        "source": "pub use crate::lil::lil_to_string;"
      },
      {
        "span": "main.rs:119:1: 119:37 (#0)",
        "source": "pub use crate::lil::lil_func_proc_t;"
      },
      {
        "span": "main.rs:6:1: 6:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "main.rs:104:1: 104:29 (#0)",
        "source": "pub use crate::lil::int64_t;"
      },
      {
        "span": "main.rs:90:1: 90:31 (#0)",
        "source": "pub use crate::lil::lil_parse;"
      },
      {
        "span": "main.rs:85:1: 85:35 (#0)",
        "source": "pub use crate::lil::lil_free_list;"
      },
      {
        "span": "main.rs:81:1: 81:38 (#0)",
        "source": "pub use crate::lil::lil_alloc_string;"
      },
      {
        "span": "main.rs:100:1: 100:37 (#0)",
        "source": "pub use crate::lil::__darwin_size_t;"
      },
      {
        "span": "main.rs:89:1: 89:29 (#0)",
        "source": "pub use crate::lil::lil_new;"
      },
      {
        "span": "main.rs:96:1: 96:28 (#0)",
        "source": "pub use crate::lil::_lil_t;"
      },
      {
        "span": "main.rs:95:1: 95:33 (#0)",
        "source": "pub use crate::lil::_lil_list_t;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:151 ~ c2rust_out[3c70]::lil::lil_get_data)",
    "span": "lil.rs:3009:1: 3011:2 (#0)",
    "pieces": [
      "lil.rs:3009:1: 3011:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "pub unsafe extern \"C\" fn lil_get_data(mut lil: lil_t) -> *mut std::os::raw::c_void {\n    return (*lil).data;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:72 ~ c2rust_out[3c70]::lil::hm_has)",
    "span": "lil.rs:488:1: 501:2 (#0)",
    "pieces": [
      "lil.rs:488:1: 501:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 16,
    "source": "unsafe extern \"C\" fn hm_has(mut hm: *mut hashmap_t,\n                            mut key: *const std::os::raw::c_char) -> std::os::raw::c_int {\n    let mut cell: *mut hashcell_t =\n        (*hm).cell.as_mut_ptr().offset((hm_hash(key) &\n                                            0xff as std::os::raw::c_int as\n                                                std::os::raw::c_ulong) as isize);\n    let mut i: size_t = 0;\n    i = 0 as std::os::raw::c_int as size_t;\n    while i < (*cell).c {\n        if strcmp(key, (*(*cell).e.offset(i as isize)).k) == 0 {\n            return 1 as std::os::raw::c_int\n        }\n        i = i.wrapping_add(1)\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:202 ~ c2rust_out[3c70]::lil::fnc_strpos)",
    "span": "lil.rs:4295:1: 4322:2 (#0)",
    "pieces": [
      "lil.rs:4295:1: 4322:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 26,
    "source": "unsafe extern \"C\" fn fnc_strpos(mut lil: lil_t, mut argc: size_t,\n                                mut argv: *mut lil_value_t) -> lil_value_t {\n    let mut hay: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    let mut str: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    let mut min: size_t = 0 as std::os::raw::c_int as size_t;\n    if argc < 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n        return lil_alloc_integer(-(1 as std::os::raw::c_int) as lilint_t)\n    }\n    hay = lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize));\n    if argc > 2 as std::os::raw::c_int as std::os::raw::c_ulong {\n        min =\n            atoll(lil_to_string(*argv.offset(2 as std::os::raw::c_int as isize))) as\n                size_t;\n        if min >= strlen(hay) {\n            return lil_alloc_integer(-(1 as std::os::raw::c_int) as lilint_t)\n        }\n    }\n    str =\n        strstr(hay.offset(min as isize),\n               lil_to_string(*argv.offset(1 as std::os::raw::c_int as isize)));\n    if str.is_null() {\n        return lil_alloc_integer(-(1 as std::os::raw::c_int) as lilint_t)\n    }\n    return lil_alloc_integer(str.offset_from(hay) as std::os::raw::c_long as\n                                 lilint_t);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      },
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:187 ~ c2rust_out[3c70]::lil::fnc_inc)",
    "span": "lil.rs:4026:1: 4035:2 (#0)",
    "pieces": [
      "lil.rs:4026:1: 4035:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 10,
    "source": "unsafe extern \"C\" fn fnc_inc(mut lil: lil_t, mut argc: size_t,\n                             mut argv: *mut lil_value_t) -> lil_value_t {\n    if argc < 1 as std::os::raw::c_int as std::os::raw::c_ulong { return 0 as lil_value_t }\n    return real_inc(lil,\n                    lil_to_string(*argv.offset(0 as std::os::raw::c_int as isize)),\n                    if argc > 1 as std::os::raw::c_int as std::os::raw::c_ulong {\n                        lil_to_double(*argv.offset(1 as std::os::raw::c_int as isize))\n                    } else { 1 as std::os::raw::c_int as std::os::raw::c_double } as\n                        std::os::raw::c_float);\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "lil.rs:60:1: 60:16 (#0)",
        "source": "use std::slice;"
      },
      {
        "span": "lil.rs:45:1: 45:25 (#0)",
        "source": "use std::os::raw::c_int;"
      },
      {
        "span": "lil.rs:51:1: 51:19 (#0)",
        "source": "use std::any::Any;"
      },
      {
        "span": "lil.rs:49:1: 49:26 (#0)",
        "source": "use std::os::raw::c_char;"
      },
      {
        "span": "lil.rs:47:1: 47:15 (#0)",
        "source": "use std::char;"
      },
      {
        "span": "lil.rs:53:1: 53:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "lil.rs:58:1: 58:27 (#0)",
        "source": "use std::convert::TryInto;"
      },
      {
        "span": "lil.rs:55:1: 55:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "lil.rs:57:1: 57:20 (#0)",
        "source": "use std::ffi::CStr;"
      }
    ],
    "chunks": []
  }
]