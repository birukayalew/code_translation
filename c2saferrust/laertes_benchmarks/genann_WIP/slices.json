[
  {
    "func_defid": "DefId(0:162 ~ c2rust_out[3c70]::genann::genann_randomize)",
    "span": "genann.rs:222:1: 233:2 (#0)",
    "pieces": [
      "genann.rs:222:1: 233:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "pub unsafe extern \"C\" fn genann_randomize(mut ann: *mut genann) {\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < (*ann).total_weights {\n        let mut r: std::os::raw::c_double =\n            rand() as std::os::raw::c_double /\n                0x7fffffff as std::os::raw::c_int as std::os::raw::c_double;\n        /* Sets weights from -0.5 to 0.5. */\n        *(*ann).weight.offset(i as isize) = r - 0.5f64;\n        i += 1\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:65:13: 65:35 (#0)",
        "source": "genann_randomize(ann);"
      },
      {
        "caller": "DefId(0:284 ~ c2rust_out[3c70]::test::train_or)",
        "span": "test.rs:313:9: 313:31 (#0)",
        "source": "genann_randomize(ann);"
      },
      {
        "caller": "DefId(0:195 ~ c2rust_out[3c70]::genann::genann_init)",
        "span": "genann.rs:157:5: 157:27 (#0)",
        "source": "genann_randomize(ret);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      },
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:151 ~ c2rust_out[3c70]::genann::genann_act_sigmoid_cached)",
    "span": "genann.rs:59:1: 90:2 (#0)",
    "pieces": [
      "genann.rs:59:1: 90:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 32,
    "source": "pub unsafe extern \"C\" fn genann_act_sigmoid_cached(mut a: std::os::raw::c_double)\n -> std::os::raw::c_double {\n    /* If you're optimizing for memory usage, just\n     * delete this entire function and replace references\n     * of genann_act_sigmoid_cached to genann_act_sigmoid\n     */\n    let min: std::os::raw::c_double = -15.0f64;\n    let max: std::os::raw::c_double = 15.0f64;\n    static mut interval: std::os::raw::c_double = 0.;\n    static mut initialized: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    static mut lookup: [std::os::raw::c_double; 4096] = [0.; 4096];\n    /* Calculate entire lookup table on first run. */\n    if initialized == 0 {\n        interval = (max - min) / 4096 as std::os::raw::c_int as std::os::raw::c_double;\n        let mut i: std::os::raw::c_int = 0;\n        i = 0 as std::os::raw::c_int;\n        while i < 4096 as std::os::raw::c_int {\n            lookup[i as usize] =\n                genann_act_sigmoid(min + interval * i as std::os::raw::c_double);\n            i += 1\n        }\n        /* This is down here to make this thread safe. */\n        initialized = 1 as std::os::raw::c_int\n    }\n    let mut i_0: std::os::raw::c_int = 0;\n    i_0 = ((a - min) / interval + 0.5f64) as std::os::raw::c_int;\n    if i_0 <= 0 as std::os::raw::c_int { return lookup[0 as std::os::raw::c_int as usize] }\n    if i_0 >= 4096 as std::os::raw::c_int {\n        return lookup[(4096 as std::os::raw::c_int - 1 as std::os::raw::c_int) as usize]\n    }\n    return lookup[i_0 as usize];\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      },
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:163 ~ c2rust_out[3c70]::genann::genann_free)",
    "span": "genann.rs:235:1: 241:2 (#0)",
    "pieces": [
      "genann.rs:235:1: 241:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn genann_free(mut ann: *mut genann) {\n    /* The weight, output, and delta pointers go to the same buffer. */\n    free(ann as *mut std::os::raw::c_void);\n}",
    "calls": [
      {
        "caller": "DefId(0:293 ~ c2rust_out[3c70]::test::copy)",
        "span": "test.rs:507:9: 507:29 (#0)",
        "source": "genann_free(second);"
      },
      {
        "caller": "DefId(0:279 ~ c2rust_out[3c70]::test::backprop)",
        "span": "test.rs:237:9: 237:26 (#0)",
        "source": "genann_free(ann);"
      },
      {
        "caller": "DefId(0:293 ~ c2rust_out[3c70]::test::copy)",
        "span": "test.rs:506:9: 506:28 (#0)",
        "source": "genann_free(first);"
      },
      {
        "caller": "DefId(0:284 ~ c2rust_out[3c70]::test::train_or)",
        "span": "test.rs:349:9: 349:26 (#0)",
        "source": "genann_free(ann);"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:92:13: 92:31 (#0)",
        "source": "genann_free(save);"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:94:18: 94:35 (#0)",
        "source": "genann_free(ann);"
      },
      {
        "caller": "DefId(0:288 ~ c2rust_out[3c70]::test::train_xor)",
        "span": "test.rs:389:9: 389:26 (#0)",
        "source": "genann_free(ann);"
      },
      {
        "caller": "DefId(0:280 ~ c2rust_out[3c70]::test::train_and)",
        "span": "test.rs:290:9: 290:26 (#0)",
        "source": "genann_free(ann);"
      },
      {
        "caller": "DefId(0:84 ~ c2rust_out[3c70]::example3::main_0)",
        "span": "example3.rs:107:5: 107:32 (#0)",
        "source": "unsafe { genann_free(ann) }"
      },
      {
        "caller": "DefId(0:292 ~ c2rust_out[3c70]::test::persist)",
        "span": "test.rs:459:5: 459:25 (#0)",
        "source": "genann_free(second);"
      },
      {
        "caller": "DefId(0:275 ~ c2rust_out[3c70]::test::xor)",
        "span": "test.rs:217:9: 217:26 (#0)",
        "source": "genann_free(ann);"
      },
      {
        "caller": "DefId(0:149 ~ c2rust_out[3c70]::example4::main_0)",
        "span": "example4.rs:173:5: 173:32 (#0)",
        "source": "unsafe { genann_free(ann) }"
      },
      {
        "caller": "DefId(0:19 ~ c2rust_out[3c70]::example1::main_0)",
        "span": "example1.rs:67:9: 67:26 (#0)",
        "source": "genann_free(ann);"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:120:5: 120:22 (#0)",
        "source": "genann_free(ann);"
      },
      {
        "caller": "DefId(0:274 ~ c2rust_out[3c70]::test::basic)",
        "span": "test.rs:167:9: 167:26 (#0)",
        "source": "genann_free(ann);"
      },
      {
        "caller": "DefId(0:292 ~ c2rust_out[3c70]::test::persist)",
        "span": "test.rs:458:5: 458:24 (#0)",
        "source": "genann_free(first);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      },
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:159 ~ c2rust_out[3c70]::genann::genann_init)",
    "span": "genann.rs:102:1: 165:2 (#0)",
    "pieces": [
      "genann.rs:102:1: 165:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 64,
    "source": "pub unsafe extern \"C\" fn genann_init(mut inputs: std::os::raw::c_int,\n                                     mut hidden_layers: std::os::raw::c_int,\n                                     mut hidden: std::os::raw::c_int,\n                                     mut outputs: std::os::raw::c_int)\n -> *mut genann {\n    if hidden_layers < 0 as std::os::raw::c_int { return 0 as *mut genann }\n    if inputs < 1 as std::os::raw::c_int { return 0 as *mut genann }\n    if outputs < 1 as std::os::raw::c_int { return 0 as *mut genann }\n    if hidden_layers > 0 as std::os::raw::c_int && hidden < 1 as std::os::raw::c_int {\n        return 0 as *mut genann\n    }\n    let hidden_weights: std::os::raw::c_int =\n        if hidden_layers != 0 {\n            ((inputs + 1 as std::os::raw::c_int) * hidden) +\n                (hidden_layers - 1 as std::os::raw::c_int) *\n                    (hidden + 1 as std::os::raw::c_int) * hidden\n        } else { 0 as std::os::raw::c_int };\n    let output_weights: std::os::raw::c_int =\n        (if hidden_layers != 0 {\n             (hidden) + 1 as std::os::raw::c_int\n         } else { (inputs) + 1 as std::os::raw::c_int }) * outputs;\n    let total_weights: std::os::raw::c_int = hidden_weights + output_weights;\n    let total_neurons: std::os::raw::c_int =\n        inputs + hidden * hidden_layers + outputs;\n    /* Allocate extra size for weights, outputs, and deltas. */\n    let size: std::os::raw::c_int =\n        (::std::mem::size_of::<genann>() as\n             std::os::raw::c_ulong).wrapping_add((::std::mem::size_of::<std::os::raw::c_double>()\n                                              as\n                                              std::os::raw::c_ulong).wrapping_mul((total_weights\n                                                                               +\n                                                                               total_neurons\n                                                                               +\n                                                                               (total_neurons\n                                                                                    -\n                                                                                    inputs))\n                                                                              as\n                                                                              std::os::raw::c_ulong))\n            as std::os::raw::c_int;\n    let mut ret: *mut genann = malloc(size as std::os::raw::c_ulong) as *mut genann;\n    if ret.is_null() { return 0 as *mut genann }\n    (*ret).inputs = inputs;\n    (*ret).hidden_layers = hidden_layers;\n    (*ret).hidden = hidden;\n    (*ret).outputs = outputs;\n    (*ret).total_weights = total_weights;\n    (*ret).total_neurons = total_neurons;\n    /* Set pointers. */\n    (*ret).weight =\n        (ret as\n             *mut std::os::raw::c_char).offset(::std::mem::size_of::<genann>() as\n                                           std::os::raw::c_ulong as isize) as\n            *mut std::os::raw::c_double;\n    (*ret).output = (*ret).weight.offset((*ret).total_weights as isize);\n    (*ret).delta = (*ret).output.offset((*ret).total_neurons as isize);\n    genann_randomize(ret);\n    (*ret).activation_hidden =\n        Some(genann_act_sigmoid_cached as\n                 unsafe extern \"C\" fn(_: std::os::raw::c_double) -> std::os::raw::c_double);\n    (*ret).activation_output =\n        Some(genann_act_sigmoid_cached as\n                 unsafe extern \"C\" fn(_: std::os::raw::c_double) -> std::os::raw::c_double);\n    return ret;\n}",
    "calls": [
      {
        "caller": "DefId(0:275 ~ c2rust_out[3c70]::test::xor)",
        "span": "test.rs:174:9: 174:47 (#0)",
        "source": "let mut ann = genann_init(2, 1, 2, 1);"
      },
      {
        "caller": "DefId(0:284 ~ c2rust_out[3c70]::test::train_or)",
        "span": "test.rs:312:9: 312:39 (#0)",
        "source": "ann = genann_init(2, 0, 0, 1);"
      },
      {
        "caller": "DefId(0:293 ~ c2rust_out[3c70]::test::copy)",
        "span": "test.rs:464:9: 464:50 (#0)",
        "source": "let first = genann_init(1000, 5, 50, 10);"
      },
      {
        "caller": "DefId(0:196 ~ c2rust_out[3c70]::genann::genann_read)",
        "span": "genann.rs:184:5: 185:61 (#0)",
        "source": "let mut ann: *mut genann =\n        genann_init(inputs, hidden_layers, hidden, outputs);"
      },
      {
        "caller": "DefId(0:292 ~ c2rust_out[3c70]::test::persist)",
        "span": "test.rs:395:5: 397:48 (#0)",
        "source": "let mut first: *mut genann =\n        genann_init(1000 as std::os::raw::c_int, 5 as std::os::raw::c_int, 50 as std::os::raw::c_int,\n                    10 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:288 ~ c2rust_out[3c70]::test::train_xor)",
        "span": "test.rs:369:9: 369:47 (#0)",
        "source": "let mut ann = genann_init(2, 1, 2, 1);"
      },
      {
        "caller": "DefId(0:19 ~ c2rust_out[3c70]::example1::main_0)",
        "span": "example1.rs:54:9: 54:39 (#0)",
        "source": "ann = genann_init(2, 1, 2, 1);"
      },
      {
        "caller": "DefId(0:280 ~ c2rust_out[3c70]::test::train_and)",
        "span": "test.rs:256:15: 256:49 (#0)",
        "source": "unsafe { genann_init(2, 0, 0, 1) }"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:55:5: 57:47 (#0)",
        "source": "let mut ann: *mut genann =\n        genann_init(2 as std::os::raw::c_int, 1 as std::os::raw::c_int, 2 as std::os::raw::c_int,\n                    1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:279 ~ c2rust_out[3c70]::test::backprop)",
        "span": "test.rs:224:9: 224:47 (#0)",
        "source": "let mut ann = genann_init(1, 0, 0, 1);"
      },
      {
        "caller": "DefId(0:149 ~ c2rust_out[3c70]::example4::main_0)",
        "span": "example4.rs:135:19: 135:53 (#0)",
        "source": "unsafe { genann_init(4, 1, 4, 3) }"
      },
      {
        "caller": "DefId(0:274 ~ c2rust_out[3c70]::test::basic)",
        "span": "test.rs:109:9: 109:47 (#0)",
        "source": "let mut ann = genann_init(1, 0, 0, 1);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      },
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:124 ~ c2rust_out[3c70]::example4::load_data)",
    "span": "example4.rs:86:1: 125:2 (#0)",
    "pieces": [
      "example4.rs:86:1: 125:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 89,
    "source": "pub unsafe extern \"C\" fn load_data() {\n    /* Load the iris data-set. */\n    let mut in_0: *mut FILE =\n        fopen(b\"example/iris.data\\x00\" as *const u8 as *const std::os::raw::c_char,\n              b\"r\\x00\" as *const u8 as *const std::os::raw::c_char);\n    if in_0.is_null() {\n        printf(b\"Could not open file: %s\\n\\x00\" as *const u8 as\n                   *const std::os::raw::c_char, iris_data);\n        exit(1 as std::os::raw::c_int);\n    }\n    /* Loop through the data to get a count. */\n    let mut line: [std::os::raw::c_char; 1024] = [0; 1024];\n    while feof(in_0) == 0 &&\n              !fgets(line.as_mut_ptr(), 1024 as std::os::raw::c_int, in_0).is_null() {\n        samples += 1\n    }\n    fseek(in_0, 0 as std::os::raw::c_int as std::os::raw::c_long, 0 as std::os::raw::c_int);\n    printf(b\"Loading %d data points from %s\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, samples, iris_data);\n    /* Allocate memory for input and output data. */\n    input =\n        malloc((::std::mem::size_of::<std::os::raw::c_double>() as\n                    std::os::raw::c_ulong).wrapping_mul(samples as\n                                                    std::os::raw::c_ulong).wrapping_mul(4\n                                                                                    as\n                                                                                    std::os::raw::c_int\n                                                                                    as\n                                                                                    std::os::raw::c_ulong))\n            as *mut std::os::raw::c_double;\n    class =\n        malloc((::std::mem::size_of::<std::os::raw::c_double>() as\n                    std::os::raw::c_ulong).wrapping_mul(samples as\n                                                    std::os::raw::c_ulong).wrapping_mul(3\n                                                                                    as\n                                                                                    std::os::raw::c_int\n                                                                                    as\n                                                                                    std::os::raw::c_ulong))\n            as *mut std::os::raw::c_double;\n    /* Read the file into our arrays. */\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < samples {\n        let mut p: *mut std::os::raw::c_double =\n            input.offset((i * 4 as std::os::raw::c_int) as isize);\n        let mut c: *mut std::os::raw::c_double =\n            class.offset((i * 3 as std::os::raw::c_int) as isize);\n        let ref mut fresh0 = *c.offset(2 as std::os::raw::c_int as isize);\n        *fresh0 = 0.0f64;\n        let ref mut fresh1 = *c.offset(1 as std::os::raw::c_int as isize);\n        *fresh1 = *fresh0;\n        *c.offset(0 as std::os::raw::c_int as isize) = *fresh1;\n        if fgets(line.as_mut_ptr(), 1024 as std::os::raw::c_int, in_0).is_null() {\n            perror(b\"fgets\\x00\" as *const u8 as *const std::os::raw::c_char);\n            exit(1 as std::os::raw::c_int);\n        }\n        let mut split: *mut std::os::raw::c_char =\n            strtok(line.as_mut_ptr(),\n                   b\",\\x00\" as *const u8 as *const std::os::raw::c_char);\n        j = 0 as std::os::raw::c_int;\n        while j < 4 as std::os::raw::c_int {\n            *p.offset(j as isize) = atof(split);\n            split =\n                strtok(0 as *mut std::os::raw::c_char,\n                       b\",\\x00\" as *const u8 as *const std::os::raw::c_char);\n            j += 1\n        }\n        *split.offset(strlen(split).wrapping_sub(1 as std::os::raw::c_int as\n                                                     std::os::raw::c_ulong) as isize)\n            = 0 as std::os::raw::c_int as std::os::raw::c_char;\n        if strcmp(split, class_names[0 as std::os::raw::c_int as usize]) ==\n               0 as std::os::raw::c_int {\n            *c.offset(0 as std::os::raw::c_int as isize) = 1.0f64\n        } else if strcmp(split, class_names[1 as std::os::raw::c_int as usize]) ==\n                      0 as std::os::raw::c_int {\n            *c.offset(1 as std::os::raw::c_int as isize) = 1.0f64\n        } else if strcmp(split, class_names[2 as std::os::raw::c_int as usize]) ==\n                      0 as std::os::raw::c_int {\n            *c.offset(2 as std::os::raw::c_int as isize) = 1.0f64\n        } else {\n            printf(b\"Unknown class %s.\\n\\x00\" as *const u8 as\n                       *const std::os::raw::c_char, split);\n            exit(1 as std::os::raw::c_int);\n        }\n        i += 1\n        /* printf(\"Data point %d is %f %f %f %f  ->   %f %f %f\\n\", i, p[0], p[1], p[2], p[3], c[0], c[1], c[2]); */\n    }\n    fclose(in_0);\n}",
    "calls": [
      {
        "caller": "DefId(0:149 ~ c2rust_out[3c70]::example4::main_0)",
        "span": "example4.rs:132:5: 132:17 (#0)",
        "source": "load_data();"
      }
    ],
    "globals": [
      {
        "span": "example4.rs:73:1: 74:71 (#0)",
        "source": "pub static mut input: *mut std::os::raw::c_double =\n    0 as *const std::os::raw::c_double as *mut std::os::raw::c_double;"
      },
      {
        "span": "example4.rs:79:1: 79:49 (#0)",
        "source": "pub static mut samples: std::os::raw::c_int = 0;"
      },
      {
        "span": "example4.rs:76:1: 77:71 (#0)",
        "source": "pub static mut class: *mut std::os::raw::c_double =\n    0 as *const std::os::raw::c_double as *mut std::os::raw::c_double;"
      }
    ],
    "imports": [
      {
        "span": "example4.rs:6:21: 6:28 (#0)",
        "source": "BufRead"
      },
      {
        "span": "example4.rs:6:1: 6:30 (#0)",
        "source": "use std::io::{self, BufRead};"
      },
      {
        "span": "example4.rs:48:1: 48:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "example4.rs:51:1: 51:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "example4.rs:49:1: 49:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "example4.rs:6:15: 6:19 (#0)",
        "source": "self"
      },
      {
        "span": "example4.rs:47:1: 47:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "example4.rs:5:1: 5:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "example4.rs:50:1: 50:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "example4.rs:4:1: 4:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:127 ~ c2rust_out[3c70]::example4::main_0)",
    "span": "example4.rs:127:1: 175:2 (#0)",
    "pieces": [
      "example4.rs:127:1: 175:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 73,
    "source": "unsafe fn main_0(mut argc: std::os::raw::c_int, mut argv: *mut *mut std::os::raw::c_char)\n -> std::os::raw::c_int {\n    printf(b\"GENANN example 4.\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n    printf(b\"Train an ANN on the IRIS dataset using backpropagation.\\n\\x00\" as\n               *const u8 as *const std::os::raw::c_char);\n    /* Load the data from file. */\n    load_data();\n    /* 4 inputs.\n     * 1 hidden layer(s) of 4 neurons.\n     * 3 outputs (1 per class)\n     */\n    let mut ann: *mut genann =\n        genann_init(4 as std::os::raw::c_int, 1 as std::os::raw::c_int, 4 as std::os::raw::c_int,\n                    3 as std::os::raw::c_int);\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    let mut loops: std::os::raw::c_int = 5000 as std::os::raw::c_int;\n    /* Train the network with backpropagation. */\n    printf(b\"Training for %d loops over data.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, loops);\n    i = 0 as std::os::raw::c_int;\n    while i < loops {\n        j = 0 as std::os::raw::c_int;\n        while j < samples {\n            genann_train(ann, input.offset((j * 4 as std::os::raw::c_int) as isize),\n                         class.offset((j * 3 as std::os::raw::c_int) as isize),\n                         0.01f64);\n            j += 1\n        }\n        i += 1\n        /* printf(\"%1.2f \", xor_score(ann)); */\n    }\n    let mut correct: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    j = 0 as std::os::raw::c_int;\n    while j < samples {\n        let mut guess: *const std::os::raw::c_double =\n            genann_run(ann, input.offset((j * 4 as std::os::raw::c_int) as isize));\n        if *class.offset((j * 3 as std::os::raw::c_int + 0 as std::os::raw::c_int) as isize)\n               == 1.0f64 {\n            if *guess.offset(0 as std::os::raw::c_int as isize) >\n                   *guess.offset(1 as std::os::raw::c_int as isize) &&\n                   *guess.offset(0 as std::os::raw::c_int as isize) >\n                       *guess.offset(2 as std::os::raw::c_int as isize) {\n                correct += 1\n            }\n        } else if *class.offset((j * 3 as std::os::raw::c_int + 1 as std::os::raw::c_int) as\n                                    isize) == 1.0f64 {\n            if *guess.offset(1 as std::os::raw::c_int as isize) >\n                   *guess.offset(0 as std::os::raw::c_int as isize) &&\n                   *guess.offset(1 as std::os::raw::c_int as isize) >\n                       *guess.offset(2 as std::os::raw::c_int as isize) {\n                correct += 1\n            }\n        } else if *class.offset((j * 3 as std::os::raw::c_int + 2 as std::os::raw::c_int) as\n                                    isize) == 1.0f64 {\n            if *guess.offset(2 as std::os::raw::c_int as isize) >\n                   *guess.offset(0 as std::os::raw::c_int as isize) &&\n                   *guess.offset(2 as std::os::raw::c_int as isize) >\n                       *guess.offset(1 as std::os::raw::c_int as isize) {\n                correct += 1\n            }\n        } else {\n            printf(b\"Logic error.\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n            exit(1 as std::os::raw::c_int);\n        }\n        j += 1\n    }\n    printf(b\"%d/%d correct (%0.1f%%).\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, correct, samples,\n           correct as std::os::raw::c_double / samples as std::os::raw::c_double * 100.0f64);\n    genann_free(ann);\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:150 ~ c2rust_out[3c70]::example4::main)",
        "span": "example4.rs:177:15: 194:2 (#0)",
        "source": "{\n    let args: Vec<String> = ::std::env::args().collect();\n    let argc = args.len() as std::os::raw::c_int;\n\n    // Convert Vec<String> to Vec<CString>\n    let argv: Vec<CString> = args.iter()\n        .map(|arg| CString::new(arg.clone()).expect(\"Failed to convert argument into CString.\"))\n        .collect();\n\n    // Create a vector of raw pointers for the C function\n    let argv_ptr: Vec<*mut std::os::raw::c_char> = argv.iter()\n        .map(|cstr| cstr.as_ptr() as *mut std::os::raw::c_char)\n        .chain(std::iter::once(std::ptr::null_mut()))\n        .collect();\n\n    // Call the C function with the original Vec<String>\n    ::std::process::exit(main_0(argc, args) as i32)\n}"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "example4.rs:4:1: 4:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "example4.rs:5:1: 5:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "example4.rs:6:1: 6:30 (#0)",
        "source": "use std::io::{self, BufRead};"
      },
      {
        "span": "example4.rs:50:1: 50:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "example4.rs:48:1: 48:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "example4.rs:6:21: 6:28 (#0)",
        "source": "BufRead"
      },
      {
        "span": "example4.rs:49:1: 49:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "example4.rs:47:1: 47:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "example4.rs:51:1: 51:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "example4.rs:6:15: 6:19 (#0)",
        "source": "self"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:157 ~ c2rust_out[3c70]::genann::genann_act_threshold)",
    "span": "genann.rs:92:1: 94:2 (#0)",
    "pieces": [
      "genann.rs:92:1: 94:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub extern \"C\" fn genann_act_threshold(mut a: std::os::raw::c_double)\n -> std::os::raw::c_double {\n    return (a > 0 as std::os::raw::c_int as std::os::raw::c_double) as std::os::raw::c_int as\n               std::os::raw::c_double;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      },
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:158 ~ c2rust_out[3c70]::genann::genann_act_linear)",
    "span": "genann.rs:97:1: 99:2 (#0)",
    "pieces": [
      "genann.rs:97:1: 99:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn genann_act_linear(mut a: std::os::raw::c_double)\n -> std::os::raw::c_double {\n    return a;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      },
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:164 ~ c2rust_out[3c70]::genann::genann_run)",
    "span": "genann.rs:244:1: 334:2 (#0)",
    "pieces": [
      "genann.rs:244:1: 334:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 91,
    "source": "pub unsafe extern \"C\" fn genann_run(mut ann: *const genann,\n                                    mut inputs: *const std::os::raw::c_double)\n -> *const std::os::raw::c_double {\n    let mut w: *const std::os::raw::c_double = (*ann).weight;\n    let mut o: *mut std::os::raw::c_double =\n        (*ann).output.offset((*ann).inputs as isize);\n    let mut i: *const std::os::raw::c_double = (*ann).output;\n    /* Copy the inputs to the scratch area, where we also store each neuron's\n     * output, for consistency. This way the first layer isn't a special case. */\n    memcpy((*ann).output as *mut std::os::raw::c_void, inputs as *const std::os::raw::c_void,\n           (::std::mem::size_of::<std::os::raw::c_double>() as\n                std::os::raw::c_ulong).wrapping_mul((*ann).inputs as std::os::raw::c_ulong));\n    let mut h: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    let mut k: std::os::raw::c_int = 0;\n    let act: genann_actfun = (*ann).activation_hidden;\n    let acto: genann_actfun = (*ann).activation_output;\n    /* Figure hidden layers, if any. */\n    h = 0 as std::os::raw::c_int;\n    while h < (*ann).hidden_layers {\n        j = 0 as std::os::raw::c_int;\n        while j < (*ann).hidden {\n            let fresh0 = w;\n            w = w.offset(1);\n            let mut sum: std::os::raw::c_double = *fresh0 * -1.0f64;\n            k = 0 as std::os::raw::c_int;\n            while k <\n                      (if h == 0 as std::os::raw::c_int {\n                           (*ann).inputs\n                       } else { (*ann).hidden }) {\n                let fresh1 = w;\n                w = w.offset(1);\n                sum += *fresh1 * *i.offset(k as isize);\n                k += 1\n            }\n            let fresh2 = o;\n            o = o.offset(1);\n            *fresh2 = act.expect(\"non-null function pointer\")(sum);\n            j += 1\n        }\n        i =\n            i.offset(if h == 0 as std::os::raw::c_int {\n                         (*ann).inputs\n                     } else { (*ann).hidden } as isize);\n        h += 1\n    }\n    let mut ret: *const std::os::raw::c_double = o;\n    /* Figure output layer. */\n    j = 0 as std::os::raw::c_int;\n    while j < (*ann).outputs {\n        let fresh3 = w;\n        w = w.offset(1);\n        let mut sum_0: std::os::raw::c_double = *fresh3 * -1.0f64;\n        k = 0 as std::os::raw::c_int;\n        while k <\n                  (if (*ann).hidden_layers != 0 {\n                       (*ann).hidden\n                   } else { (*ann).inputs }) {\n            let fresh4 = w;\n            w = w.offset(1);\n            sum_0 += *fresh4 * *i.offset(k as isize);\n            k += 1\n        }\n        let fresh5 = o;\n        o = o.offset(1);\n        *fresh5 = acto.expect(\"non-null function pointer\")(sum_0);\n        j += 1\n    }\n    /* Sanity check that we used all weights and wrote all outputs. */\n    if !(w.offset_from((*ann).weight) as std::os::raw::c_long ==\n             (*ann).total_weights as std::os::raw::c_long) as std::os::raw::c_int as\n           std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 11],\n                                               &[std::os::raw::c_char; 11]>(b\"genann_run\\x00\")).as_ptr(),\n                     b\"genann.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                     225 as std::os::raw::c_int,\n                     b\"w - ann->weight == ann->total_weights\\x00\" as *const u8\n                         as *const std::os::raw::c_char);\n    } else { };\n    if !(o.offset_from((*ann).output) as std::os::raw::c_long ==\n             (*ann).total_neurons as std::os::raw::c_long) as std::os::raw::c_int as\n           std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 11],\n                                               &[std::os::raw::c_char; 11]>(b\"genann_run\\x00\")).as_ptr(),\n                     b\"genann.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                     226 as std::os::raw::c_int,\n                     b\"o - ann->output == ann->total_neurons\\x00\" as *const u8\n                         as *const std::os::raw::c_char);\n    } else { };\n    return ret;\n}",
    "calls": [
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:105:5: 109:81 (#0)",
        "source": "printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[1 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[1 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[1 as std::os::raw::c_int as usize].as_ptr()));"
      },
      {
        "caller": "DefId(0:205 ~ c2rust_out[3c70]::genann::genann_train)",
        "span": "genann.rs:342:5: 342:29 (#0)",
        "source": "genann_run(ann, inputs);"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:100:5: 104:81 (#0)",
        "source": "printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[0 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[0 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[0 as std::os::raw::c_int as usize].as_ptr()));"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:81:9: 83:72 (#0)",
        "source": "err +=\n            pow(*genann_run(ann, input[1 as std::os::raw::c_int as usize].as_ptr()) -\n                    output[1 as std::os::raw::c_int as usize], 2.0f64);"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:84:9: 86:72 (#0)",
        "source": "err +=\n            pow(*genann_run(ann, input[2 as std::os::raw::c_int as usize].as_ptr()) -\n                    output[2 as std::os::raw::c_int as usize], 2.0f64);"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:87:9: 89:72 (#0)",
        "source": "err +=\n            pow(*genann_run(ann, input[3 as std::os::raw::c_int as usize].as_ptr()) -\n                    output[3 as std::os::raw::c_int as usize], 2.0f64);"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:78:9: 80:72 (#0)",
        "source": "err +=\n            pow(*genann_run(ann, input[0 as std::os::raw::c_int as usize].as_ptr()) -\n                    output[0 as std::os::raw::c_int as usize], 2.0f64);"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:110:5: 114:81 (#0)",
        "source": "printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[2 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[2 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[2 as std::os::raw::c_int as usize].as_ptr()));"
      },
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:115:5: 119:81 (#0)",
        "source": "printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[3 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[3 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[3 as std::os::raw::c_int as usize].as_ptr()));"
      },
      {
        "caller": "DefId(0:279 ~ c2rust_out[3c70]::test::backprop)",
        "span": "test.rs:228:9: 228:50 (#0)",
        "source": "let first_try = *genann_run(ann, &input);"
      },
      {
        "caller": "DefId(0:279 ~ c2rust_out[3c70]::test::backprop)",
        "span": "test.rs:230:9: 230:51 (#0)",
        "source": "let second_try = *genann_run(ann, &input);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      },
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:161 ~ c2rust_out[3c70]::genann::genann_copy)",
    "span": "genann.rs:203:1: 219:2 (#0)",
    "pieces": [
      "genann.rs:203:1: 219:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 29,
    "source": "pub unsafe extern \"C\" fn genann_copy(mut ann: *const genann) -> *mut genann {\n    let size: std::os::raw::c_int =\n        (::std::mem::size_of::<genann>() as\n             std::os::raw::c_ulong).wrapping_add((::std::mem::size_of::<std::os::raw::c_double>()\n                                              as\n                                              std::os::raw::c_ulong).wrapping_mul(((*ann).total_weights\n                                                                               +\n                                                                               (*ann).total_neurons\n                                                                               +\n                                                                               ((*ann).total_neurons\n                                                                                    -\n                                                                                    (*ann).inputs))\n                                                                              as\n                                                                              std::os::raw::c_ulong))\n            as std::os::raw::c_int;\n    let mut ret: *mut genann = malloc(size as std::os::raw::c_ulong) as *mut genann;\n    if ret.is_null() { return 0 as *mut genann }\n    memcpy(ret as *mut std::os::raw::c_void, ann as *const std::os::raw::c_void,\n           size as std::os::raw::c_ulong);\n    /* Set pointers. */\n    (*ret).weight =\n        (ret as\n             *mut std::os::raw::c_char).offset(::std::mem::size_of::<genann>() as\n                                           std::os::raw::c_ulong as isize) as\n            *mut std::os::raw::c_double;\n    (*ret).output = (*ret).weight.offset((*ret).total_weights as isize);\n    (*ret).delta = (*ret).output.offset((*ret).total_neurons as isize);\n    return ret;\n}",
    "calls": [
      {
        "caller": "DefId(0:49 ~ c2rust_out[3c70]::example2::main_0)",
        "span": "example2.rs:67:9: 67:56 (#0)",
        "source": "let mut save: *mut genann = genann_copy(&*ann);"
      },
      {
        "caller": "DefId(0:293 ~ c2rust_out[3c70]::test::copy)",
        "span": "test.rs:466:9: 466:45 (#0)",
        "source": "let second = genann_copy(first_ref);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      },
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      },
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:46 ~ c2rust_out[3c70]::example2::main_0)",
    "span": "example2.rs:31:1: 122:2 (#0)",
    "pieces": [
      "example2.rs:31:1: 122:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 92,
    "source": "unsafe fn main_0(mut argc: std::os::raw::c_int, mut argv: *mut *mut std::os::raw::c_char)\n -> std::os::raw::c_int {\n    printf(b\"GENANN example 2.\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n    printf(b\"Train a small ANN to the XOR function using random search.\\n\\x00\"\n               as *const u8 as *const std::os::raw::c_char);\n    /* Input and expected out data for the XOR function. */\n    let input: [[std::os::raw::c_double; 2]; 4] =\n        [[0 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [0 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double]];\n    let output: [std::os::raw::c_double; 4] =\n        [0 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double,\n         0 as std::os::raw::c_int as std::os::raw::c_double];\n    let mut i: std::os::raw::c_int = 0;\n    /* New network with 2 inputs,\n     * 1 hidden layer of 2 neurons,\n     * and 1 output. */\n    let mut ann: *mut genann =\n        genann_init(2 as std::os::raw::c_int, 1 as std::os::raw::c_int, 2 as std::os::raw::c_int,\n                    1 as std::os::raw::c_int);\n    let mut err: std::os::raw::c_double = 0.;\n    let mut last_err: std::os::raw::c_double = 1000 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut count: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    loop  {\n        count += 1;\n        if count % 1000 as std::os::raw::c_int == 0 as std::os::raw::c_int {\n            /* We're stuck, start over. */\n            genann_randomize(ann);\n        }\n        let mut save: *mut genann = genann_copy(ann);\n        /* Take a random guess at the ANN weights. */\n        i = 0 as std::os::raw::c_int;\n        while i < (*ann).total_weights {\n            *(*ann).weight.offset(i as isize) +=\n                rand() as std::os::raw::c_double /\n                    0x7fffffff as std::os::raw::c_int as std::os::raw::c_double - 0.5f64;\n            i += 1\n        }\n        /* See how we did. */\n        err = 0 as std::os::raw::c_int as std::os::raw::c_double;\n        err +=\n            pow(*genann_run(ann, input[0 as std::os::raw::c_int as usize].as_ptr()) -\n                    output[0 as std::os::raw::c_int as usize], 2.0f64);\n        err +=\n            pow(*genann_run(ann, input[1 as std::os::raw::c_int as usize].as_ptr()) -\n                    output[1 as std::os::raw::c_int as usize], 2.0f64);\n        err +=\n            pow(*genann_run(ann, input[2 as std::os::raw::c_int as usize].as_ptr()) -\n                    output[2 as std::os::raw::c_int as usize], 2.0f64);\n        err +=\n            pow(*genann_run(ann, input[3 as std::os::raw::c_int as usize].as_ptr()) -\n                    output[3 as std::os::raw::c_int as usize], 2.0f64);\n        /* Keep these weights if they're an improvement. */\n        if err < last_err {\n            genann_free(save);\n            last_err = err\n        } else { genann_free(ann); ann = save }\n        if !(err > 0.01f64) { break ; }\n    }\n    printf(b\"Finished in %d loops.\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n           count);\n    /* Run the network and see what it predicts. */\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[0 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[0 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[0 as std::os::raw::c_int as usize].as_ptr()));\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[1 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[1 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[1 as std::os::raw::c_int as usize].as_ptr()));\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[2 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[2 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[2 as std::os::raw::c_int as usize].as_ptr()));\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[3 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[3 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[3 as std::os::raw::c_int as usize].as_ptr()));\n    genann_free(ann);\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:53 ~ c2rust_out[3c70]::example2::main)",
        "span": "example2.rs:142:9: 142:83 (#0)",
        "source": "::std::process::exit(main_0(arg_count - 1, raw_args.as_mut_ptr()) as i32);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "example2.rs:26:1: 26:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "example2.rs:22:1: 22:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "example2.rs:23:1: 23:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "example2.rs:2:1: 2:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "example2.rs:24:1: 24:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "example2.rs:25:1: 25:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:249 ~ c2rust_out[3c70]::test::sigmoid)",
    "span": "test.rs:512:1: 529:2 (#0)",
    "pieces": [
      "test.rs:512:1: 529:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 18,
    "source": "pub unsafe extern \"C\" fn sigmoid() {\n    let mut i: std::os::raw::c_double = -(20 as std::os::raw::c_int) as std::os::raw::c_double;\n    let max: std::os::raw::c_double = 20 as std::os::raw::c_int as std::os::raw::c_double;\n    let d: std::os::raw::c_double = 0.0001f64;\n    while i < max {\n        ltests += 1;\n        if fabs(genann_act_sigmoid(i) - genann_act_sigmoid_cached(i)) >\n               0.001f64 {\n            lfails += 1;\n            printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as\n                       *const std::os::raw::c_char,\n                   b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   251 as std::os::raw::c_int, genann_act_sigmoid(i),\n                   genann_act_sigmoid_cached(i));\n        }\n        i += d\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:295 ~ c2rust_out[3c70]::test::main_0)",
        "span": "test.rs:604:1: 604:11 (#0)",
        "source": "sigmoid();"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:248 ~ c2rust_out[3c70]::test::copy)",
    "span": "test.rs:462:1: 509:2 (#0)",
    "pieces": [
      "test.rs:462:1: 509:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 60,
    "source": "pub unsafe extern \"C\" fn copy() {\n    let mut first: *mut genann =\n        genann_init(1000 as std::os::raw::c_int, 5 as std::os::raw::c_int, 50 as std::os::raw::c_int,\n                    10 as std::os::raw::c_int);\n    let mut second: *mut genann = genann_copy(first);\n    ltests += 1;\n    if (*first).inputs != (*second).inputs {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               229 as std::os::raw::c_int, (*first).inputs, (*second).inputs);\n    }\n    ltests += 1;\n    if (*first).hidden_layers != (*second).hidden_layers {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               230 as std::os::raw::c_int, (*first).hidden_layers,\n               (*second).hidden_layers);\n    }\n    ltests += 1;\n    if (*first).hidden != (*second).hidden {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               231 as std::os::raw::c_int, (*first).hidden, (*second).hidden);\n    }\n    ltests += 1;\n    if (*first).outputs != (*second).outputs {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               232 as std::os::raw::c_int, (*first).outputs, (*second).outputs);\n    }\n    ltests += 1;\n    if (*first).total_weights != (*second).total_weights {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               233 as std::os::raw::c_int, (*first).total_weights,\n               (*second).total_weights);\n    }\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < (*first).total_weights {\n        ltests += 1;\n        if fabs(*(*first).weight.offset(i as isize) -\n                    *(*second).weight.offset(i as isize)) > 0.001f64 {\n            lfails += 1;\n            printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as\n                       *const std::os::raw::c_char,\n                   b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   237 as std::os::raw::c_int, *(*first).weight.offset(i as isize),\n                   *(*second).weight.offset(i as isize));\n        }\n        i += 1\n    }\n    genann_free(first);\n    genann_free(second);\n}",
    "calls": [
      {
        "caller": "DefId(0:295 ~ c2rust_out[3c70]::test::main_0)",
        "span": "test.rs:596:1: 596:8 (#0)",
        "source": "copy();"
      }
    ],
    "globals": [
      {
        "span": "test.rs:80:1: 80:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "test.rs:81:1: 81:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:160 ~ c2rust_out[3c70]::genann::genann_read)",
    "span": "genann.rs:167:1: 201:2 (#0)",
    "pieces": [
      "genann.rs:167:1: 201:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 35,
    "source": "pub unsafe extern \"C\" fn genann_read(mut in_0: *mut FILE) -> *mut genann {\n    let mut inputs: std::os::raw::c_int = 0;\n    let mut hidden_layers: std::os::raw::c_int = 0;\n    let mut hidden: std::os::raw::c_int = 0;\n    let mut outputs: std::os::raw::c_int = 0;\n    let mut rc: std::os::raw::c_int = 0;\n    *__error() = 0 as std::os::raw::c_int;\n    rc =\n        fscanf(in_0, b\"%d %d %d %d\\x00\" as *const u8 as *const std::os::raw::c_char,\n               &mut inputs as *mut std::os::raw::c_int,\n               &mut hidden_layers as *mut std::os::raw::c_int,\n               &mut hidden as *mut std::os::raw::c_int,\n               &mut outputs as *mut std::os::raw::c_int);\n    if rc < 4 as std::os::raw::c_int || *__error() != 0 as std::os::raw::c_int {\n        perror(b\"fscanf\\x00\" as *const u8 as *const std::os::raw::c_char);\n        return 0 as *mut genann\n    }\n    let mut ann: *mut genann =\n        genann_init(inputs, hidden_layers, hidden, outputs);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < (*ann).total_weights {\n        *__error() = 0 as std::os::raw::c_int;\n        rc =\n            fscanf(in_0, b\" %le\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   (*ann).weight.offset(i as isize));\n        if rc < 1 as std::os::raw::c_int || *__error() != 0 as std::os::raw::c_int {\n            perror(b\"fscanf\\x00\" as *const u8 as *const std::os::raw::c_char);\n            genann_free(ann);\n            return 0 as *mut genann\n        }\n        i += 1\n    }\n    return ann;\n}",
    "calls": [
      {
        "caller": "DefId(0:292 ~ c2rust_out[3c70]::test::persist)",
        "span": "test.rs:406:5: 406:53 (#0)",
        "source": "let mut second: *mut genann = genann_read(in_0);"
      },
      {
        "caller": "DefId(0:84 ~ c2rust_out[3c70]::example3::main_0)",
        "span": "example3.rs:85:15: 85:44 (#0)",
        "source": "unsafe { genann_read(saved) }"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      },
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:172 ~ c2rust_out[3c70]::genann::genann_write)",
    "span": "genann.rs:538:1: 543:2 (#0)",
    "pieces": [
      "genann.rs:538:1: 543:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 13,
    "source": "pub unsafe extern \"C\" fn genann_write(mut ann: *const genann,\n                                      mut out: *mut FILE) {\n    fprintf(out, b\"%d %d %d %d\\x00\" as *const u8 as *const std::os::raw::c_char,\n            (*ann).inputs, (*ann).hidden_layers, (*ann).hidden,\n            (*ann).outputs);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < (*ann).total_weights {\n        fprintf(out, b\" %.20e\\x00\" as *const u8 as *const std::os::raw::c_char,\n                *(*ann).weight.offset(i as isize));\n        i += 1\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:292 ~ c2rust_out[3c70]::test::persist)",
        "span": "test.rs:401:5: 401:91 (#0)",
        "source": "genann_write(&*first, &mut *(out as *mut std::os::raw::c_void as *mut std::fs::File));"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      },
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      },
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:247 ~ c2rust_out[3c70]::test::persist)",
    "span": "test.rs:394:1: 460:2 (#0)",
    "pieces": [
      "test.rs:394:1: 460:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 67,
    "source": "pub unsafe extern \"C\" fn persist() {\n    let mut first: *mut genann =\n        genann_init(1000 as std::os::raw::c_int, 5 as std::os::raw::c_int, 50 as std::os::raw::c_int,\n                    10 as std::os::raw::c_int);\n    let mut out: *mut FILE =\n        fopen(b\"persist.txt\\x00\" as *const u8 as *const std::os::raw::c_char,\n              b\"w\\x00\" as *const u8 as *const std::os::raw::c_char);\n    genann_write(first, out);\n    fclose(out);\n    let mut in_0: *mut FILE =\n        fopen(b\"persist.txt\\x00\" as *const u8 as *const std::os::raw::c_char,\n              b\"r\\x00\" as *const u8 as *const std::os::raw::c_char);\n    let mut second: *mut genann = genann_read(in_0);\n    fclose(out);\n    ltests += 1;\n    if (*first).inputs != (*second).inputs {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               208 as std::os::raw::c_int, (*first).inputs, (*second).inputs);\n    }\n    ltests += 1;\n    if (*first).hidden_layers != (*second).hidden_layers {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               209 as std::os::raw::c_int, (*first).hidden_layers,\n               (*second).hidden_layers);\n    }\n    ltests += 1;\n    if (*first).hidden != (*second).hidden {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               210 as std::os::raw::c_int, (*first).hidden, (*second).hidden);\n    }\n    ltests += 1;\n    if (*first).outputs != (*second).outputs {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               211 as std::os::raw::c_int, (*first).outputs, (*second).outputs);\n    }\n    ltests += 1;\n    if (*first).total_weights != (*second).total_weights {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               212 as std::os::raw::c_int, (*first).total_weights,\n               (*second).total_weights);\n    }\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < (*first).total_weights {\n        ltests += 1;\n        if !(*(*first).weight.offset(i as isize) ==\n                 *(*second).weight.offset(i as isize)) {\n            lfails += 1;\n            printf(b\"%s:%d error \\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   216 as std::os::raw::c_int);\n        }\n        i += 1\n    }\n    genann_free(first);\n    genann_free(second);\n}",
    "calls": [
      {
        "caller": "DefId(0:295 ~ c2rust_out[3c70]::test::main_0)",
        "span": "test.rs:588:1: 588:11 (#0)",
        "source": "persist();"
      }
    ],
    "globals": [
      {
        "span": "test.rs:80:1: 80:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "test.rs:81:1: 81:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:243 ~ c2rust_out[3c70]::test::train_xor)",
    "span": "test.rs:354:1: 391:2 (#0)",
    "pieces": [
      "test.rs:354:1: 391:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 85,
    "source": "pub unsafe extern \"C\" fn train_xor() {\n    let mut input: [[std::os::raw::c_double; 2]; 4] =\n        [[0 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [0 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double]];\n    let mut output: [std::os::raw::c_double; 4] =\n        [0 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double,\n         0 as std::os::raw::c_int as std::os::raw::c_double];\n    let mut ann: *mut genann =\n        genann_init(2 as std::os::raw::c_int, 1 as std::os::raw::c_int, 2 as std::os::raw::c_int,\n                    1 as std::os::raw::c_int);\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < 500 as std::os::raw::c_int {\n        j = 0 as std::os::raw::c_int;\n        while j < 4 as std::os::raw::c_int {\n            genann_train(ann, input[j as usize].as_mut_ptr(),\n                         output.as_mut_ptr().offset(j as isize),\n                         3 as std::os::raw::c_int as std::os::raw::c_double);\n            j += 1\n        }\n        i += 1\n        /* printf(\"%1.2f \", xor_score(ann)); */\n    }\n    (*ann).activation_output =\n        Some(genann_act_threshold as\n                 unsafe extern \"C\" fn(_: std::os::raw::c_double) -> std::os::raw::c_double);\n    ltests += 1;\n    if fabs(output[0 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[0 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               186 as std::os::raw::c_int, output[0 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[0 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[1 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[1 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               187 as std::os::raw::c_int, output[1 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[1 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[2 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[2 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               188 as std::os::raw::c_int, output[2 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[2 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[3 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[3 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               189 as std::os::raw::c_int, output[3 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[3 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    genann_free(ann);\n}",
    "calls": [
      {
        "caller": "DefId(0:295 ~ c2rust_out[3c70]::test::main_0)",
        "span": "test.rs:580:1: 580:13 (#0)",
        "source": "train_xor();"
      }
    ],
    "globals": [
      {
        "span": "test.rs:81:1: 81:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:239 ~ c2rust_out[3c70]::test::train_or)",
    "span": "test.rs:295:1: 351:2 (#0)",
    "pieces": [
      "test.rs:295:1: 351:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 84,
    "source": "pub unsafe extern \"C\" fn train_or() {\n    let mut input: [[std::os::raw::c_double; 2]; 4] =\n        [[0 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [0 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double]];\n    let mut output: [std::os::raw::c_double; 4] =\n        [0 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double];\n    let mut ann: *mut genann =\n        genann_init(2 as std::os::raw::c_int, 0 as std::os::raw::c_int, 0 as std::os::raw::c_int,\n                    1 as std::os::raw::c_int);\n    genann_randomize(ann);\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < 50 as std::os::raw::c_int {\n        j = 0 as std::os::raw::c_int;\n        while j < 4 as std::os::raw::c_int {\n            genann_train(ann, input[j as usize].as_mut_ptr(),\n                         output.as_mut_ptr().offset(j as isize), 0.8f64);\n            j += 1\n        }\n        i += 1\n    }\n    (*ann).activation_output =\n        Some(genann_act_threshold as\n                 unsafe extern \"C\" fn(_: std::os::raw::c_double) -> std::os::raw::c_double);\n    ltests += 1;\n    if fabs(output[0 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[0 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               160 as std::os::raw::c_int, output[0 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[0 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[1 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[1 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               161 as std::os::raw::c_int, output[1 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[1 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[2 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[2 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               162 as std::os::raw::c_int, output[2 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[2 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[3 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[3 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               163 as std::os::raw::c_int, output[3 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[3 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    genann_free(ann);\n}",
    "calls": [
      {
        "caller": "DefId(0:295 ~ c2rust_out[3c70]::test::main_0)",
        "span": "test.rs:572:1: 572:12 (#0)",
        "source": "train_or();"
      }
    ],
    "globals": [
      {
        "span": "test.rs:81:1: 81:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "test.rs:80:1: 80:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:235 ~ c2rust_out[3c70]::test::train_and)",
    "span": "test.rs:242:1: 292:2 (#0)",
    "pieces": [
      "test.rs:242:1: 292:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 83,
    "source": "pub unsafe extern \"C\" fn train_and() {\n    let mut input: [[std::os::raw::c_double; 2]; 4] =\n        [[0 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [0 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double]];\n    let mut output: [std::os::raw::c_double; 4] =\n        [0 as std::os::raw::c_int as std::os::raw::c_double,\n         0 as std::os::raw::c_int as std::os::raw::c_double,\n         0 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double];\n    let mut ann: *mut genann =\n        genann_init(2 as std::os::raw::c_int, 0 as std::os::raw::c_int, 0 as std::os::raw::c_int,\n                    1 as std::os::raw::c_int);\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < 50 as std::os::raw::c_int {\n        j = 0 as std::os::raw::c_int;\n        while j < 4 as std::os::raw::c_int {\n            genann_train(ann, input[j as usize].as_mut_ptr(),\n                         output.as_mut_ptr().offset(j as isize), 0.8f64);\n            j += 1\n        }\n        i += 1\n    }\n    (*ann).activation_output =\n        Some(genann_act_threshold as\n                 unsafe extern \"C\" fn(_: std::os::raw::c_double) -> std::os::raw::c_double);\n    ltests += 1;\n    if fabs(output[0 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[0 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               135 as std::os::raw::c_int, output[0 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[0 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[1 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[1 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               136 as std::os::raw::c_int, output[1 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[1 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[2 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[2 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               137 as std::os::raw::c_int, output[2 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[2 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[3 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[3 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               138 as std::os::raw::c_int, output[3 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[3 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    genann_free(ann);\n}",
    "calls": [
      {
        "caller": "DefId(0:295 ~ c2rust_out[3c70]::test::main_0)",
        "span": "test.rs:564:1: 564:13 (#0)",
        "source": "train_and();"
      }
    ],
    "globals": [
      {
        "span": "test.rs:81:1: 81:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:169 ~ c2rust_out[3c70]::genann::genann_train)",
    "span": "genann.rs:336:1: 536:2 (#0)",
    "pieces": [
      "genann.rs:336:1: 342:4 (#0)",
      "genann.rs:491:1: 491:4 (#0)",
      "genann.rs:536:1: 536:2 (#0)"
    ],
    "sub_chunks": [
      0,
      1
    ],
    "num_lines": 9,
    "source": "pub unsafe extern \"C\" fn genann_train(mut ann: *const genann,\n                                      mut inputs: *const std::os::raw::c_double,\n                                      mut desired_outputs:\n                                          *const std::os::raw::c_double,\n                                      mut learning_rate: std::os::raw::c_double) {\n    /* To begin with, we must run the network forward. */\n   <<chunk 0>>   <<chunk 1>>}",
    "calls": [
      {
        "caller": "DefId(0:279 ~ c2rust_out[3c70]::test::backprop)",
        "span": "test.rs:229:9: 229:49 (#0)",
        "source": "genann_train(ann, &input, &output, 0.5);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      },
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      }
    ],
    "chunks": [
      {
        "chunk_id": 0,
        "span": "genann.rs:342:5: 490:57 (#0)",
        "pieces": [
          "genann.rs:342:5: 490:57 (#0)"
        ],
        "num_lines": 149,
        "source": "genann_run(ann, inputs);\n    let mut h: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    let mut k: std::os::raw::c_int = 0;\n    /* First set the output layer deltas. */\n    let mut o: *const std::os::raw::c_double =\n        (*ann).output.offset((*ann).inputs as\n                                 isize).offset(((*ann).hidden *\n                                                    (*ann).hidden_layers) as\n                                                   isize); /* First output. */\n    let mut d: *mut std::os::raw::c_double =\n        (*ann).delta.offset(((*ann).hidden * (*ann).hidden_layers) as\n                                isize); /* First delta. */\n    let mut t: *const std::os::raw::c_double =\n        desired_outputs; /* First desired output. */\n    if (*ann).activation_output ==\n           Some(genann_act_linear as\n                    unsafe extern \"C\" fn(_: std::os::raw::c_double) -> std::os::raw::c_double)\n       {\n        j = 0 as std::os::raw::c_int;\n        while j < (*ann).outputs {\n            let fresh6 = t;\n            t = t.offset(1);\n            let fresh7 = o;\n            o = o.offset(1);\n            let fresh8 = d;\n            d = d.offset(1);\n            *fresh8 = *fresh6 - *fresh7;\n            j += 1\n        }\n    } else {\n        j = 0 as std::os::raw::c_int;\n        while j < (*ann).outputs {\n            let fresh9 = d;\n            d = d.offset(1);\n            *fresh9 = (*t - *o) * *o * (1.0f64 - *o);\n            o = o.offset(1);\n            t = t.offset(1);\n            j += 1\n        }\n    }\n    /* Set output layer deltas. */\n    /* Set hidden layer deltas, start on last layer and work backwards. */\n    /* Note that loop is skipped in the case of hidden_layers == 0. */\n    h = (*ann).hidden_layers - 1 as std::os::raw::c_int;\n    while h >= 0 as std::os::raw::c_int {\n        /* Find first output and delta in this layer. */\n        let mut o_0: *const std::os::raw::c_double =\n            (*ann).output.offset((*ann).inputs as\n                                     isize).offset((h * (*ann).hidden) as\n                                                       isize);\n        let mut d_0: *mut std::os::raw::c_double =\n            (*ann).delta.offset((h * (*ann).hidden) as isize);\n        /* Find first delta in following layer (which may be hidden or output). */\n        let dd: *const std::os::raw::c_double =\n            (*ann).delta.offset(((h + 1 as std::os::raw::c_int) * (*ann).hidden) as\n                                    isize);\n        /* Find first weight in following layer (which may be hidden or output). */\n        let ww: *const std::os::raw::c_double =\n            (*ann).weight.offset((((*ann).inputs + 1 as std::os::raw::c_int) *\n                                      (*ann).hidden) as\n                                     isize).offset((((*ann).hidden +\n                                                         1 as std::os::raw::c_int) *\n                                                        (*ann).hidden * h) as\n                                                       isize);\n        j = 0 as std::os::raw::c_int;\n        while j < (*ann).hidden {\n            let mut delta: std::os::raw::c_double =\n                0 as std::os::raw::c_int as std::os::raw::c_double;\n            k = 0 as std::os::raw::c_int;\n            while k <\n                      (if h == (*ann).hidden_layers - 1 as std::os::raw::c_int {\n                           (*ann).outputs\n                       } else { (*ann).hidden }) {\n                let forward_delta: std::os::raw::c_double = *dd.offset(k as isize);\n                let windex: std::os::raw::c_int =\n                    k * ((*ann).hidden + 1 as std::os::raw::c_int) +\n                        (j + 1 as std::os::raw::c_int);\n                let forward_weight: std::os::raw::c_double =\n                    *ww.offset(windex as isize);\n                delta += forward_delta * forward_weight;\n                k += 1\n            }\n            *d_0 = *o_0 * (1.0f64 - *o_0) * delta;\n            d_0 = d_0.offset(1);\n            o_0 = o_0.offset(1);\n            j += 1\n        }\n        h -= 1\n    }\n    /* Train the outputs. */\n    /* Find first output delta. */\n    let mut d_1: *const std::os::raw::c_double =\n        (*ann).delta.offset(((*ann).hidden * (*ann).hidden_layers) as\n                                isize); /* First output delta. */\n    let mut w: *mut std::os::raw::c_double =\n        (*ann).weight.offset((if (*ann).hidden_layers != 0 {\n                                  (((*ann).inputs + 1 as std::os::raw::c_int) *\n                                       (*ann).hidden) +\n                                      ((*ann).hidden + 1 as std::os::raw::c_int) *\n                                          (*ann).hidden *\n                                          ((*ann).hidden_layers -\n                                               1 as std::os::raw::c_int)\n                              } else { 0 as std::os::raw::c_int }) as isize);\n    let i: *const std::os::raw::c_double =\n        (*ann).output.offset((if (*ann).hidden_layers != 0 {\n                                  ((*ann).inputs) +\n                                      (*ann).hidden *\n                                          ((*ann).hidden_layers -\n                                               1 as std::os::raw::c_int)\n                              } else { 0 as std::os::raw::c_int }) as isize);\n    j = 0 as std::os::raw::c_int;\n    while j < (*ann).outputs {\n        k = 0 as std::os::raw::c_int;\n        while k <\n                  (if (*ann).hidden_layers != 0 {\n                       (*ann).hidden\n                   } else { (*ann).inputs }) + 1 as std::os::raw::c_int {\n            if k == 0 as std::os::raw::c_int {\n                let fresh10 = w;\n                w = w.offset(1);\n                *fresh10 += *d_1 * learning_rate * -1.0f64\n            } else {\n                let fresh11 = w;\n                w = w.offset(1);\n                *fresh11 +=\n                    *d_1 * learning_rate *\n                        *i.offset((k - 1 as std::os::raw::c_int) as isize)\n            }\n            k += 1\n        }\n        d_1 = d_1.offset(1);\n        j += 1\n    }\n    if !(w.offset_from((*ann).weight) as std::os::raw::c_long ==\n             (*ann).total_weights as std::os::raw::c_long) as std::os::raw::c_int as\n           std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 13],\n                                               &[std::os::raw::c_char; 13]>(b\"genann_train\\x00\")).as_ptr(),\n                     b\"genann.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                     318 as std::os::raw::c_int,\n                     b\"w - ann->weight == ann->total_weights\\x00\" as *const u8\n                         as *const std::os::raw::c_char);\n    } else { };\n    /* Find first weight to first output delta. */\n    /* Find first output in previous layer. */\n    /* Set output layer weights. */\n    /* Train the hidden layers. */\n    h = (*ann).hidden_layers - 1 as std::os::raw::c_int;",
        "sub_chunks": [],
        "live_in": [
          "mut ann: *const example1::genann",
          "mut inputs: *const f64",
          "mut desired_outputs: *const f64",
          "mut learning_rate: f64"
        ],
        "live_out": [
          "mut ann: *const example1::genann",
          "mut inputs: *const f64",
          "mut desired_outputs: *const f64",
          "mut learning_rate: f64",
          "mut h: i32",
          "mut j: i32",
          "mut k: i32",
          "mut o: *const f64",
          "mut d: *mut f64",
          "mut t: *const f64",
          "mut d_1: *const f64",
          "mut w: *mut f64",
          "i: *const f64"
        ]
      },
      {
        "chunk_id": 1,
        "span": "genann.rs:491:5: 535:7 (#0)",
        "pieces": [
          "genann.rs:491:5: 535:7 (#0)"
        ],
        "num_lines": 45,
        "source": "while h >= 0 as std::os::raw::c_int {\n        /* Find first delta in this layer. */\n        let mut d_2: *const std::os::raw::c_double =\n            (*ann).delta.offset((h * (*ann).hidden) as isize);\n        /* Find first input to this layer. */\n        let mut i_0: *const std::os::raw::c_double =\n            (*ann).output.offset((if h != 0 {\n                                      ((*ann).inputs) +\n                                          (*ann).hidden *\n                                              (h - 1 as std::os::raw::c_int)\n                                  } else { 0 as std::os::raw::c_int }) as isize);\n        /* Find first weight to this layer. */\n        let mut w_0: *mut std::os::raw::c_double =\n            (*ann).weight.offset((if h != 0 {\n                                      (((*ann).inputs + 1 as std::os::raw::c_int) *\n                                           (*ann).hidden) +\n                                          ((*ann).hidden + 1 as std::os::raw::c_int) *\n                                              (*ann).hidden *\n                                              (h - 1 as std::os::raw::c_int)\n                                  } else { 0 as std::os::raw::c_int }) as isize);\n        j = 0 as std::os::raw::c_int;\n        while j < (*ann).hidden {\n            k = 0 as std::os::raw::c_int;\n            while k <\n                      (if h == 0 as std::os::raw::c_int {\n                           (*ann).inputs\n                       } else { (*ann).hidden }) + 1 as std::os::raw::c_int {\n                if k == 0 as std::os::raw::c_int {\n                    let fresh12 = w_0;\n                    w_0 = w_0.offset(1);\n                    *fresh12 += *d_2 * learning_rate * -1.0f64\n                } else {\n                    let fresh13 = w_0;\n                    w_0 = w_0.offset(1);\n                    *fresh13 +=\n                        *d_2 * learning_rate *\n                            *i_0.offset((k - 1 as std::os::raw::c_int) as isize)\n                }\n                k += 1\n            }\n            d_2 = d_2.offset(1);\n            j += 1\n        }\n        h -= 1\n    };",
        "sub_chunks": [],
        "live_in": [
          "mut ann: *const example1::genann",
          "mut inputs: *const f64",
          "mut learning_rate: f64",
          "mut h: i32",
          "mut j: i32",
          "mut k: i32"
        ],
        "live_out": [
          "mut ann: *const example1::genann",
          "mut inputs: *const f64",
          "mut learning_rate: f64"
        ]
      }
    ]
  },
  {
    "func_defid": "DefId(0:234 ~ c2rust_out[3c70]::test::backprop)",
    "span": "test.rs:222:1: 239:2 (#0)",
    "pieces": [
      "test.rs:222:1: 239:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 20,
    "source": "pub unsafe extern \"C\" fn backprop() {\n    let mut ann: *mut genann =\n        genann_init(1 as std::os::raw::c_int, 0 as std::os::raw::c_int, 0 as std::os::raw::c_int,\n                    1 as std::os::raw::c_int);\n    let mut input: std::os::raw::c_double = 0.;\n    let mut output: std::os::raw::c_double = 0.;\n    input = 0.5f64;\n    output = 1 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut first_try: std::os::raw::c_double = *genann_run(ann, &mut input);\n    genann_train(ann, &mut input, &mut output, 0.5f64);\n    let mut second_try: std::os::raw::c_double = *genann_run(ann, &mut input);\n    ltests += 1;\n    if !(fabs(first_try - output) > fabs(second_try - output)) {\n        lfails += 1;\n        printf(b\"%s:%d error \\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               114 as std::os::raw::c_int);\n    }\n    genann_free(ann);\n}",
    "calls": [
      {
        "caller": "DefId(0:295 ~ c2rust_out[3c70]::test::main_0)",
        "span": "test.rs:556:1: 556:12 (#0)",
        "source": "backprop();"
      }
    ],
    "globals": [
      {
        "span": "test.rs:81:1: 81:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "test.rs:80:1: 80:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:230 ~ c2rust_out[3c70]::test::xor)",
    "span": "test.rs:172:1: 219:2 (#0)",
    "pieces": [
      "test.rs:172:1: 219:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 100,
    "source": "pub unsafe extern \"C\" fn xor() {\n    let mut ann: *mut genann =\n        genann_init(2 as std::os::raw::c_int, 1 as std::os::raw::c_int, 2 as std::os::raw::c_int,\n                    1 as std::os::raw::c_int);\n    (*ann).activation_hidden =\n        Some(genann_act_threshold as\n                 unsafe extern \"C\" fn(_: std::os::raw::c_double) -> std::os::raw::c_double);\n    (*ann).activation_output =\n        Some(genann_act_threshold as\n                 unsafe extern \"C\" fn(_: std::os::raw::c_double) -> std::os::raw::c_double);\n    ltests += 1;\n    if (*ann).total_weights != 9 as std::os::raw::c_int {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               74 as std::os::raw::c_int, (*ann).total_weights, 9 as std::os::raw::c_int);\n    }\n    /* First hidden. */\n    *(*ann).weight.offset(0 as std::os::raw::c_int as isize) = 0.5f64;\n    *(*ann).weight.offset(1 as std::os::raw::c_int as isize) =\n        1 as std::os::raw::c_int as std::os::raw::c_double;\n    *(*ann).weight.offset(2 as std::os::raw::c_int as isize) =\n        1 as std::os::raw::c_int as std::os::raw::c_double;\n    /* Second hidden. */\n    *(*ann).weight.offset(3 as std::os::raw::c_int as isize) =\n        1 as std::os::raw::c_int as std::os::raw::c_double;\n    *(*ann).weight.offset(4 as std::os::raw::c_int as isize) =\n        1 as std::os::raw::c_int as std::os::raw::c_double;\n    *(*ann).weight.offset(5 as std::os::raw::c_int as isize) =\n        1 as std::os::raw::c_int as std::os::raw::c_double;\n    /* Output. */\n    *(*ann).weight.offset(6 as std::os::raw::c_int as isize) = 0.5f64;\n    *(*ann).weight.offset(7 as std::os::raw::c_int as isize) =\n        1 as std::os::raw::c_int as std::os::raw::c_double;\n    *(*ann).weight.offset(8 as std::os::raw::c_int as isize) =\n        -(1 as std::os::raw::c_int) as std::os::raw::c_double;\n    let mut input: [[std::os::raw::c_double; 2]; 4] =\n        [[0 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [0 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double]];\n    let mut output: [std::os::raw::c_double; 4] =\n        [0 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double,\n         0 as std::os::raw::c_int as std::os::raw::c_double];\n    ltests += 1;\n    if fabs(output[0 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[0 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               95 as std::os::raw::c_int, output[0 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[0 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[1 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[1 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               96 as std::os::raw::c_int, output[1 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[1 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[2 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[2 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               97 as std::os::raw::c_int, output[2 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[2 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    ltests += 1;\n    if fabs(output[3 as std::os::raw::c_int as usize] -\n                *genann_run(ann,\n                            input[3 as std::os::raw::c_int as usize].as_mut_ptr())) >\n           0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               98 as std::os::raw::c_int, output[3 as std::os::raw::c_int as usize],\n               *genann_run(ann,\n                           input[3 as std::os::raw::c_int as usize].as_mut_ptr()));\n    }\n    genann_free(ann);\n}",
    "calls": [
      {
        "caller": "DefId(0:295 ~ c2rust_out[3c70]::test::main_0)",
        "span": "test.rs:548:1: 548:7 (#0)",
        "source": "xor();"
      }
    ],
    "globals": [
      {
        "span": "test.rs:80:1: 80:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "test.rs:81:1: 81:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:229 ~ c2rust_out[3c70]::test::basic)",
    "span": "test.rs:107:1: 169:2 (#0)",
    "pieces": [
      "test.rs:107:1: 169:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 74,
    "source": "pub unsafe extern \"C\" fn basic() {\n    let mut ann: *mut genann =\n        genann_init(1 as std::os::raw::c_int, 0 as std::os::raw::c_int, 0 as std::os::raw::c_int,\n                    1 as std::os::raw::c_int);\n    ltests += 1;\n    if (*ann).total_weights != 2 as std::os::raw::c_int {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               37 as std::os::raw::c_int, (*ann).total_weights, 2 as std::os::raw::c_int);\n    }\n    let mut a: std::os::raw::c_double = 0.;\n    a = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    *(*ann).weight.offset(0 as std::os::raw::c_int as isize) =\n        0 as std::os::raw::c_int as std::os::raw::c_double;\n    *(*ann).weight.offset(1 as std::os::raw::c_int as isize) =\n        0 as std::os::raw::c_int as std::os::raw::c_double;\n    ltests += 1;\n    if fabs(0.5f64 - *genann_run(ann, &mut a)) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               44 as std::os::raw::c_int, 0.5f64, *genann_run(ann, &mut a));\n    }\n    a = 1 as std::os::raw::c_int as std::os::raw::c_double;\n    ltests += 1;\n    if fabs(0.5f64 - *genann_run(ann, &mut a)) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               47 as std::os::raw::c_int, 0.5f64, *genann_run(ann, &mut a));\n    }\n    a = 11 as std::os::raw::c_int as std::os::raw::c_double;\n    ltests += 1;\n    if fabs(0.5f64 - *genann_run(ann, &mut a)) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               50 as std::os::raw::c_int, 0.5f64, *genann_run(ann, &mut a));\n    }\n    a = 1 as std::os::raw::c_int as std::os::raw::c_double;\n    *(*ann).weight.offset(0 as std::os::raw::c_int as isize) =\n        1 as std::os::raw::c_int as std::os::raw::c_double;\n    *(*ann).weight.offset(1 as std::os::raw::c_int as isize) =\n        1 as std::os::raw::c_int as std::os::raw::c_double;\n    ltests += 1;\n    if fabs(0.5f64 - *genann_run(ann, &mut a)) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               55 as std::os::raw::c_int, 0.5f64, *genann_run(ann, &mut a));\n    }\n    a = 10 as std::os::raw::c_int as std::os::raw::c_double;\n    *(*ann).weight.offset(0 as std::os::raw::c_int as isize) =\n        1 as std::os::raw::c_int as std::os::raw::c_double;\n    *(*ann).weight.offset(1 as std::os::raw::c_int as isize) =\n        1 as std::os::raw::c_int as std::os::raw::c_double;\n    ltests += 1;\n    if fabs(1.0f64 - *genann_run(ann, &mut a)) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               60 as std::os::raw::c_int, 1.0f64, *genann_run(ann, &mut a));\n    }\n    a = -(10 as std::os::raw::c_int) as std::os::raw::c_double;\n    ltests += 1;\n    if fabs(0.0f64 - *genann_run(ann, &mut a)) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"test.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               63 as std::os::raw::c_int, 0.0f64, *genann_run(ann, &mut a));\n    }\n    genann_free(ann);\n}",
    "calls": [
      {
        "caller": "DefId(0:295 ~ c2rust_out[3c70]::test::main_0)",
        "span": "test.rs:540:1: 540:9 (#0)",
        "source": "basic();"
      }
    ],
    "globals": [
      {
        "span": "test.rs:81:1: 81:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "test.rs:80:1: 80:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:250 ~ c2rust_out[3c70]::test::main_0)",
    "span": "test.rs:531:1: 616:2 (#0)",
    "pieces": [
      "test.rs:531:1: 533:4 (#0)",
      "test.rs:608:1: 616:2 (#0)"
    ],
    "sub_chunks": [
      0
    ],
    "num_lines": 12,
    "source": "unsafe fn main_0(mut argc: std::os::raw::c_int, mut argv: *mut *mut std::os::raw::c_char)\n -> std::os::raw::c_int {\n   <<chunk 0>>    if lfails == 0 as std::os::raw::c_int {\n        printf(b\"ALL TESTS PASSED (%d/%d)\\n\\x00\" as *const u8 as\n                   *const std::os::raw::c_char, ltests, ltests);\n    } else {\n        printf(b\"SOME TESTS FAILED (%d/%d)\\n\\x00\" as *const u8 as\n                   *const std::os::raw::c_char, ltests - lfails, ltests);\n    }\n    return (lfails != 0 as std::os::raw::c_int) as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:299 ~ c2rust_out[3c70]::test::main)",
        "span": "test.rs:631:5: 633:6 (#0)",
        "source": "unsafe {\n        ::std::process::exit(main_0(argc, argv_ptr_mut) as i32)\n    }"
      }
    ],
    "globals": [
      {
        "span": "test.rs:81:1: 81:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "test.rs:80:1: 80:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      }
    ],
    "chunks": [
      {
        "chunk_id": 0,
        "span": "test.rs:533:5: 606:41 (#0)",
        "pieces": [
          "test.rs:533:5: 606:41 (#0)"
        ],
        "num_lines": 145,
        "source": "printf(b\"GENANN TEST SUITE\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n    srand(100 as std::os::raw::c_int as std::os::raw::c_uint);\n    let ts: std::os::raw::c_int = ltests;\n    let fs: std::os::raw::c_int = lfails;\n    let start: clock_t = clock();\n    printf(b\"\\t%-14s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"basic\\x00\" as *const u8 as *const std::os::raw::c_char);\n    basic();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts - (lfails - fs), lfails - fs,\n           clock().wrapping_sub(start).wrapping_mul(1000 as std::os::raw::c_int as\n                                                        std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                        as\n                                                                                        std::os::raw::c_int\n                                                                                        as\n                                                                                        std::os::raw::c_ulong)\n               as std::os::raw::c_int);\n    let ts_0: std::os::raw::c_int = ltests;\n    let fs_0: std::os::raw::c_int = lfails;\n    let start_0: clock_t = clock();\n    printf(b\"\\t%-14s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"xor\\x00\" as *const u8 as *const std::os::raw::c_char);\n    xor();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts_0 - (lfails - fs_0),\n           lfails - fs_0,\n           clock().wrapping_sub(start_0).wrapping_mul(1000 as std::os::raw::c_int as\n                                                          std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                          as\n                                                                                          std::os::raw::c_int\n                                                                                          as\n                                                                                          std::os::raw::c_ulong)\n               as std::os::raw::c_int);\n    let ts_1: std::os::raw::c_int = ltests;\n    let fs_1: std::os::raw::c_int = lfails;\n    let start_1: clock_t = clock();\n    printf(b\"\\t%-14s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"backprop\\x00\" as *const u8 as *const std::os::raw::c_char);\n    backprop();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts_1 - (lfails - fs_1),\n           lfails - fs_1,\n           clock().wrapping_sub(start_1).wrapping_mul(1000 as std::os::raw::c_int as\n                                                          std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                          as\n                                                                                          std::os::raw::c_int\n                                                                                          as\n                                                                                          std::os::raw::c_ulong)\n               as std::os::raw::c_int);\n    let ts_2: std::os::raw::c_int = ltests;\n    let fs_2: std::os::raw::c_int = lfails;\n    let start_2: clock_t = clock();\n    printf(b\"\\t%-14s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"train and\\x00\" as *const u8 as *const std::os::raw::c_char);\n    train_and();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts_2 - (lfails - fs_2),\n           lfails - fs_2,\n           clock().wrapping_sub(start_2).wrapping_mul(1000 as std::os::raw::c_int as\n                                                          std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                          as\n                                                                                          std::os::raw::c_int\n                                                                                          as\n                                                                                          std::os::raw::c_ulong)\n               as std::os::raw::c_int);\n    let ts_3: std::os::raw::c_int = ltests;\n    let fs_3: std::os::raw::c_int = lfails;\n    let start_3: clock_t = clock();\n    printf(b\"\\t%-14s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"train or\\x00\" as *const u8 as *const std::os::raw::c_char);\n    train_or();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts_3 - (lfails - fs_3),\n           lfails - fs_3,\n           clock().wrapping_sub(start_3).wrapping_mul(1000 as std::os::raw::c_int as\n                                                          std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                          as\n                                                                                          std::os::raw::c_int\n                                                                                          as\n                                                                                          std::os::raw::c_ulong)\n               as std::os::raw::c_int);\n    let ts_4: std::os::raw::c_int = ltests;\n    let fs_4: std::os::raw::c_int = lfails;\n    let start_4: clock_t = clock();\n    printf(b\"\\t%-14s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"train xor\\x00\" as *const u8 as *const std::os::raw::c_char);\n    train_xor();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts_4 - (lfails - fs_4),\n           lfails - fs_4,\n           clock().wrapping_sub(start_4).wrapping_mul(1000 as std::os::raw::c_int as\n                                                          std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                          as\n                                                                                          std::os::raw::c_int\n                                                                                          as\n                                                                                          std::os::raw::c_ulong)\n               as std::os::raw::c_int);\n    let ts_5: std::os::raw::c_int = ltests;\n    let fs_5: std::os::raw::c_int = lfails;\n    let start_5: clock_t = clock();\n    printf(b\"\\t%-14s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"persist\\x00\" as *const u8 as *const std::os::raw::c_char);\n    persist();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts_5 - (lfails - fs_5),\n           lfails - fs_5,\n           clock().wrapping_sub(start_5).wrapping_mul(1000 as std::os::raw::c_int as\n                                                          std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                          as\n                                                                                          std::os::raw::c_int\n                                                                                          as\n                                                                                          std::os::raw::c_ulong)\n               as std::os::raw::c_int);\n    let ts_6: std::os::raw::c_int = ltests;\n    let fs_6: std::os::raw::c_int = lfails;\n    let start_6: clock_t = clock();\n    printf(b\"\\t%-14s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"copy\\x00\" as *const u8 as *const std::os::raw::c_char);\n    copy();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts_6 - (lfails - fs_6),\n           lfails - fs_6,\n           clock().wrapping_sub(start_6).wrapping_mul(1000 as std::os::raw::c_int as\n                                                          std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                          as\n                                                                                          std::os::raw::c_int\n                                                                                          as\n                                                                                          std::os::raw::c_ulong)\n               as std::os::raw::c_int);\n    let ts_7: std::os::raw::c_int = ltests;\n    let fs_7: std::os::raw::c_int = lfails;\n    let start_7: clock_t = clock();\n    printf(b\"\\t%-14s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"sigmoid\\x00\" as *const u8 as *const std::os::raw::c_char);\n    sigmoid();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts_7 - (lfails - fs_7),\n           lfails - fs_7,\n           clock().wrapping_sub(start_7).wrapping_mul(1000 as std::os::raw::c_int as\n                                                          std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                          as\n                                                                                          std::os::raw::c_int\n                                                                                          as\n                                                                                          std::os::raw::c_ulong)\n               as std::os::raw::c_int);",
        "sub_chunks": [],
        "live_in": [
          "ts: i32",
          "fs: i32",
          "start: std::time::Instant"
        ],
        "live_out": [
          "ts: i32",
          "fs: i32",
          "start: std::time::Instant",
          "ts_0: i32",
          "fs_0: i32",
          "start_0: std::time::Instant",
          "ts_1: i32",
          "fs_1: i32",
          "start_1: std::time::Instant",
          "ts_2: i32",
          "fs_2: i32",
          "start_2: std::time::Instant",
          "ts_3: i32",
          "fs_3: i32",
          "start_3: std::time::Instant",
          "ts_4: i32",
          "fs_4: i32",
          "start_4: std::time::Instant",
          "ts_5: i32",
          "fs_5: i32",
          "start_5: std::time::Instant",
          "ts_6: i32",
          "fs_6: i32",
          "start_6: std::time::Instant",
          "ts_7: i32",
          "fs_7: i32",
          "start_7: std::time::Instant"
        ]
      }
    ]
  },
  {
    "func_defid": "DefId(0:251 ~ c2rust_out[3c70]::test::main)",
    "span": "test.rs:617:1: 634:2 (#0)",
    "pieces": [
      "test.rs:617:1: 634:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "pub fn main() {\n    let mut args: Vec<*mut std::os::raw::c_char> = Vec::new();\n    for arg in ::std::env::args() {\n        args.push(::std::ffi::CString::new(arg).expect(\"Failed to convert argument into CString.\").into_raw());\n    };\n    args.push(::std::ptr::null_mut());\n    unsafe {\n        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,\n                                    args.as_mut_ptr() as\n                                        *mut *mut std::os::raw::c_char) as i32)\n    }\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "test.rs:55:1: 55:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "test.rs:9:1: 9:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "test.rs:62:1: 62:37 (#0)",
        "source": "pub use crate::genann::genann_write;"
      },
      {
        "span": "test.rs:53:1: 53:50 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid_cached;"
      },
      {
        "span": "test.rs:60:1: 60:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "test.rs:52:1: 52:43 (#0)",
        "source": "pub use crate::genann::genann_act_sigmoid;"
      },
      {
        "span": "test.rs:57:1: 57:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "test.rs:59:1: 59:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "test.rs:58:1: 58:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "test.rs:54:1: 54:45 (#0)",
        "source": "pub use crate::genann::genann_act_threshold;"
      },
      {
        "span": "test.rs:56:1: 56:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "test.rs:61:1: 61:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "test.rs:13:1: 13:14 (#0)",
        "source": "use std::ptr;"
      },
      {
        "span": "test.rs:63:1: 63:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "test.rs:11:1: 11:18 (#0)",
        "source": "use std::println;"
      },
      {
        "span": "test.rs:533:5: 533:28 (#0)",
        "source": "use std::time::Instant;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:19 ~ c2rust_out[3c70]::example1::main_0)",
    "span": "example1.rs:38:1: 71:2 (#0)",
    "pieces": [
      "example1.rs:38:1: 71:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 68,
    "source": "unsafe fn main_0(mut argc: std::os::raw::c_int, mut argv: *mut *mut std::os::raw::c_char)\n -> std::os::raw::c_int {\n    printf(b\"GENANN example 1.\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n    printf(b\"Train a small ANN to the XOR function using backpropagation.\\n\\x00\"\n               as *const u8 as *const std::os::raw::c_char);\n    /* Input and expected out data for the XOR function. */\n    let input: [[std::os::raw::c_double; 2]; 4] =\n        [[0 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [0 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double]];\n    let output: [std::os::raw::c_double; 4] =\n        [0 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double,\n         1 as std::os::raw::c_int as std::os::raw::c_double,\n         0 as std::os::raw::c_int as std::os::raw::c_double];\n    let mut i: std::os::raw::c_int = 0;\n    /* New network with 2 inputs,\n     * 1 hidden layer of 2 neurons,\n     * and 1 output. */\n    let mut ann: *mut genann =\n        genann_init(2 as std::os::raw::c_int, 1 as std::os::raw::c_int, 2 as std::os::raw::c_int,\n                    1 as std::os::raw::c_int);\n    /* Train on the four labeled data points many times. */\n    i = 0 as std::os::raw::c_int;\n    while i < 300 as std::os::raw::c_int {\n        genann_train(ann, input[0 as std::os::raw::c_int as usize].as_ptr(),\n                     output.as_ptr().offset(0 as std::os::raw::c_int as isize),\n                     3 as std::os::raw::c_int as std::os::raw::c_double);\n        genann_train(ann, input[1 as std::os::raw::c_int as usize].as_ptr(),\n                     output.as_ptr().offset(1 as std::os::raw::c_int as isize),\n                     3 as std::os::raw::c_int as std::os::raw::c_double);\n        genann_train(ann, input[2 as std::os::raw::c_int as usize].as_ptr(),\n                     output.as_ptr().offset(2 as std::os::raw::c_int as isize),\n                     3 as std::os::raw::c_int as std::os::raw::c_double);\n        genann_train(ann, input[3 as std::os::raw::c_int as usize].as_ptr(),\n                     output.as_ptr().offset(3 as std::os::raw::c_int as isize),\n                     3 as std::os::raw::c_int as std::os::raw::c_double);\n        i += 1\n    }\n    /* Run the network and see what it predicts. */\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[0 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[0 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[0 as std::os::raw::c_int as usize].as_ptr()));\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[1 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[1 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[1 as std::os::raw::c_int as usize].as_ptr()));\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[2 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[2 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[2 as std::os::raw::c_int as usize].as_ptr()));\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[3 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[3 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[3 as std::os::raw::c_int as usize].as_ptr()));\n    genann_free(ann);\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:23 ~ c2rust_out[3c70]::example1::main)",
        "span": "example1.rs:78:5: 78:62 (#0)",
        "source": "::std::process::exit(main_0(arg_count - 1, args) as i32);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "example1.rs:16:1: 16:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "example1.rs:18:1: 18:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "example1.rs:19:1: 19:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "example1.rs:17:1: 17:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:23 ~ c2rust_out[3c70]::example1::main)",
    "span": "example1.rs:73:1: 79:2 (#0)",
    "pieces": [
      "example1.rs:73:1: 79:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "pub fn main() {\n    let mut args: Vec<*mut std::os::raw::c_char> = Vec::new();\n    for arg in ::std::env::args() {\n        args.push(::std::ffi::CString::new(arg).expect(\"Failed to convert argument into CString.\").into_raw());\n    };\n    args.push(::std::ptr::null_mut());\n    unsafe {\n        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,\n                                    args.as_mut_ptr() as\n                                        *mut *mut std::os::raw::c_char) as i32)\n    }\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "example1.rs:19:1: 19:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "example1.rs:18:1: 18:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "example1.rs:16:1: 16:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "example1.rs:17:1: 17:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:150 ~ c2rust_out[3c70]::genann::genann_act_sigmoid)",
    "span": "genann.rs:52:1: 56:2 (#0)",
    "pieces": [
      "genann.rs:52:1: 56:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn genann_act_sigmoid(mut a: std::os::raw::c_double)\n -> std::os::raw::c_double {\n    if a < -45.0f64 { return 0 as std::os::raw::c_int as std::os::raw::c_double }\n    if a > 45.0f64 { return 1 as std::os::raw::c_int as std::os::raw::c_double }\n    return 1.0f64 / (1 as std::os::raw::c_int as std::os::raw::c_double + exp(-a));\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "genann.rs:7:1: 7:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "genann.rs:10:1: 10:16 (#0)",
        "source": "use std::alloc;"
      },
      {
        "span": "genann.rs:5:1: 5:14 (#0)",
        "source": "use std::f64;"
      },
      {
        "span": "genann.rs:8:1: 8:20 (#0)",
        "source": "use std::io::Write;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:50 ~ c2rust_out[3c70]::example2::main)",
    "span": "example2.rs:123:1: 144:2 (#0)",
    "pieces": [
      "example2.rs:123:1: 144:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "pub fn main() {\n    let mut args: Vec<*mut std::os::raw::c_char> = Vec::new();\n    for arg in ::std::env::args() {\n        args.push(::std::ffi::CString::new(arg).expect(\"Failed to convert argument into CString.\").into_raw());\n    };\n    args.push(::std::ptr::null_mut());\n    unsafe {\n        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,\n                                    args.as_mut_ptr() as\n                                        *mut *mut std::os::raw::c_char) as i32)\n    }\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "example2.rs:24:1: 24:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "example2.rs:25:1: 25:41 (#0)",
        "source": "pub use crate::genann::genann_randomize;"
      },
      {
        "span": "example2.rs:23:1: 23:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "example2.rs:22:1: 22:36 (#0)",
        "source": "pub use crate::genann::genann_copy;"
      },
      {
        "span": "example2.rs:2:1: 2:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "example2.rs:26:1: 26:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:76 ~ c2rust_out[3c70]::example3::main_0)",
    "span": "example3.rs:73:1: 109:2 (#0)",
    "pieces": [
      "example3.rs:73:1: 109:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 53,
    "source": "unsafe fn main_0(mut argc: std::os::raw::c_int, mut argv: *mut *mut std::os::raw::c_char)\n -> std::os::raw::c_int {\n    printf(b\"GENANN example 3.\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n    printf(b\"Load a saved ANN to solve the XOR function.\\n\\x00\" as *const u8\n               as *const std::os::raw::c_char);\n    let mut saved: *mut FILE =\n        fopen(save_name, b\"r\\x00\" as *const u8 as *const std::os::raw::c_char);\n    if saved.is_null() {\n        printf(b\"Couldn\\'t open file: %s\\n\\x00\" as *const u8 as\n                   *const std::os::raw::c_char, save_name);\n        exit(1 as std::os::raw::c_int);\n    }\n    let mut ann: *mut genann = genann_read(saved);\n    fclose(saved);\n    if ann.is_null() {\n        printf(b\"Error loading ANN from file: %s.\\x00\" as *const u8 as\n                   *const std::os::raw::c_char, save_name);\n        exit(1 as std::os::raw::c_int);\n    }\n    /* Input data for the XOR function. */\n    let input: [[std::os::raw::c_double; 2]; 4] =\n        [[0 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [0 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          0 as std::os::raw::c_int as std::os::raw::c_double],\n         [1 as std::os::raw::c_int as std::os::raw::c_double,\n          1 as std::os::raw::c_int as std::os::raw::c_double]];\n    /* Run the network and see what it predicts. */\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[0 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[0 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[0 as std::os::raw::c_int as usize].as_ptr()));\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[1 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[1 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[1 as std::os::raw::c_int as usize].as_ptr()));\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[2 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[2 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[2 as std::os::raw::c_int as usize].as_ptr()));\n    printf(b\"Output for [%1.f, %1.f] is %1.f.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char,\n           input[3 as std::os::raw::c_int as usize][0 as std::os::raw::c_int as usize],\n           input[3 as std::os::raw::c_int as usize][1 as std::os::raw::c_int as usize],\n           *genann_run(ann, input[3 as std::os::raw::c_int as usize].as_ptr()));\n    genann_free(ann);\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:87 ~ c2rust_out[3c70]::example3::main)",
        "span": "example3.rs:124:5: 124:62 (#0)",
        "source": "::std::process::exit(main_0(arg_count, raw_ptrs) as i32);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "example3.rs:25:1: 25:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "example3.rs:24:1: 24:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "example3.rs:22:1: 22:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "example3.rs:23:1: 23:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      },
      {
        "span": "example3.rs:3:1: 3:23 (#0)",
        "source": "use std::ffi::CString;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:79 ~ c2rust_out[3c70]::example3::main)",
    "span": "example3.rs:111:1: 125:2 (#0)",
    "pieces": [
      "example3.rs:111:1: 125:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "pub fn main() {\n    let mut args: Vec<*mut std::os::raw::c_char> = Vec::new();\n    for arg in ::std::env::args() {\n        args.push(::std::ffi::CString::new(arg).expect(\"Failed to convert argument into CString.\").into_raw());\n    };\n    args.push(::std::ptr::null_mut());\n    unsafe {\n        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,\n                                    args.as_mut_ptr() as\n                                        *mut *mut std::os::raw::c_char) as i32)\n    }\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "example3.rs:24:1: 24:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "example3.rs:22:1: 22:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "example3.rs:25:1: 25:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "example3.rs:3:1: 3:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "example3.rs:23:1: 23:36 (#0)",
        "source": "pub use crate::genann::genann_read;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:128 ~ c2rust_out[3c70]::example4::main)",
    "span": "example4.rs:177:1: 194:2 (#0)",
    "pieces": [
      "example4.rs:177:1: 194:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "pub fn main() {\n    let mut args: Vec<*mut std::os::raw::c_char> = Vec::new();\n    for arg in ::std::env::args() {\n        args.push(::std::ffi::CString::new(arg).expect(\"Failed to convert argument into CString.\").into_raw());\n    };\n    args.push(::std::ptr::null_mut());\n    unsafe {\n        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,\n                                    args.as_mut_ptr() as\n                                        *mut *mut std::os::raw::c_char) as i32)\n    }\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "example4.rs:47:1: 47:36 (#0)",
        "source": "pub use crate::genann::genann_free;"
      },
      {
        "span": "example4.rs:5:1: 5:19 (#0)",
        "source": "use std::fs::File;"
      },
      {
        "span": "example4.rs:49:1: 49:35 (#0)",
        "source": "pub use crate::genann::genann_run;"
      },
      {
        "span": "example4.rs:6:21: 6:28 (#0)",
        "source": "BufRead"
      },
      {
        "span": "example4.rs:48:1: 48:36 (#0)",
        "source": "pub use crate::genann::genann_init;"
      },
      {
        "span": "example4.rs:4:1: 4:23 (#0)",
        "source": "use std::ffi::CString;"
      },
      {
        "span": "example4.rs:6:15: 6:19 (#0)",
        "source": "self"
      },
      {
        "span": "example4.rs:50:1: 50:37 (#0)",
        "source": "pub use crate::genann::genann_train;"
      },
      {
        "span": "example4.rs:51:1: 51:33 (#0)",
        "source": "pub use crate::genann::__sFILEX;"
      },
      {
        "span": "example4.rs:6:1: 6:30 (#0)",
        "source": "use std::io::{self, BufRead};"
      }
    ],
    "chunks": []
  }
]