test.rs:74:1: 83:2
pub unsafe extern "C" fn strdup(mut str: *const std::os::raw::c_char)
 -> *mut std::os::raw::c_char {
    let mut n: std::os::raw::c_int =
        strlen(str).wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong) as
            std::os::raw::c_int;
    let mut dup: *mut std::os::raw::c_char =
        malloc(n as std::os::raw::c_ulong) as *mut std::os::raw::c_char;
    if !dup.is_null() { strcpy(dup, str); }
    return dup;
}
test.rs:287:1: 408:2
pub unsafe extern "C" fn url_parse(mut url: *mut std::os::raw::c_char)
 -> *mut url_data_t {
    let mut data: *mut url_data_t =
        malloc(::std::mem::size_of::<url_data_t>() as std::os::raw::c_ulong) as
            *mut url_data_t;
    if data.is_null() { return 0 as *mut url_data_t }
    (*data).href = url;
    let mut tmp: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut tmp_url: *mut std::os::raw::c_char = strdup(url);
    let mut is_ssh: bool = 0 as std::os::raw::c_int != 0;
    let mut protocol: *mut std::os::raw::c_char = url_get_protocol(tmp_url);
    if protocol.is_null() { return 0 as *mut url_data_t }
    let mut protocol_len: std::os::raw::c_int =
        strlen(protocol) as std::os::raw::c_int + 3 as std::os::raw::c_int;
    (*data).protocol = protocol;
    is_ssh = url_is_ssh(protocol);
    let mut auth: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    let mut auth_len: std::os::raw::c_int = 0 as std::os::raw::c_int;
    tmp = strstr(tmp_url, b"@\x00" as *const u8 as *const std::os::raw::c_char);
    if !tmp.is_null() {
        auth =
            get_part(tmp_url,
                     b"%[^@]\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len);
        auth_len = strlen(auth) as std::os::raw::c_int;
        if !auth.is_null() { auth_len += 1 }
    }
    (*data).auth = auth;
    let mut hostname: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    hostname =
        if is_ssh as std::os::raw::c_int != 0 {
            get_part(tmp_url,
                     b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len)
        } else {
            get_part(tmp_url,
                     b"%[^/]\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len)
        };
    if hostname.is_null() { return 0 as *mut url_data_t }
    let mut hostname_len: std::os::raw::c_int = strlen(hostname) as std::os::raw::c_int;
    let mut tmp_hostname: *mut std::os::raw::c_char = strdup(hostname);
    (*data).hostname = hostname;
    let mut host: *mut std::os::raw::c_char =
        malloc(strlen(tmp_hostname).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                     as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    sscanf(tmp_hostname, b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char,
           host);
    if host.is_null() { return 0 as *mut url_data_t }
    let mut host_len: std::os::raw::c_int = strlen(host) as std::os::raw::c_int;
    (*data).host = host;
    let mut tmp_path: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    tmp_path =
        if is_ssh as std::os::raw::c_int != 0 {
            get_part(tmp_url, b":%s\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len + hostname_len)
        } else {
            get_part(tmp_url, b"/%s\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len + hostname_len)
        };
    let mut path: *mut std::os::raw::c_char =
        malloc(strlen(tmp_path).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                 as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    if path.is_null() { return 0 as *mut url_data_t }
    let mut fmt: *mut std::os::raw::c_char =
        if is_ssh as std::os::raw::c_int != 0 {
            b"%s\x00" as *const u8 as *const std::os::raw::c_char
        } else { b"/%s\x00" as *const u8 as *const std::os::raw::c_char } as
            *mut std::os::raw::c_char;
    sprintf(path, fmt, tmp_path);
    (*data).path = path;
    free(tmp_path as *mut std::os::raw::c_void);
    let mut pathname: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if pathname.is_null() { return 0 as *mut url_data_t }
    strcat(pathname, b"\x00" as *const u8 as *const std::os::raw::c_char);
    tmp_path = strdup(path);
    sscanf(tmp_path, b"%[^? | ^#]\x00" as *const u8 as *const std::os::raw::c_char,
           pathname);
    let mut pathname_len: std::os::raw::c_int = strlen(pathname) as std::os::raw::c_int;
    (*data).pathname = pathname;
    let mut search: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<*mut std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if search.is_null() { return 0 as *mut url_data_t }
    let mut tmp_path = strff(tmp_path, pathname_len);
    strcat(search, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(tmp_path, b"%[^#]\x00" as *const u8 as *const std::os::raw::c_char,
           search);
    (*data).search = search;
    let mut search_len: std::os::raw::c_int = strlen(search) as std::os::raw::c_int;
    free(tmp_path as *mut std::os::raw::c_void);
    let mut query: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if query.is_null() { return 0 as *mut url_data_t }
    sscanf(search, b"?%s\x00" as *const u8 as *const std::os::raw::c_char, query);
    (*data).query = query;
    let mut hash: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if hash.is_null() { return 0 as *mut url_data_t }
    let mut tmp_path = strff(path, pathname_len + search_len);
    strcat(hash, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(tmp_path, b"%s\x00" as *const u8 as *const std::os::raw::c_char, hash);
    (*data).hash = hash;
    free(tmp_path as *mut std::os::raw::c_void);
    let mut port: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if port.is_null() { return 0 as *mut url_data_t }
    let mut tmp_hostname = strff(hostname, host_len + 1);
    sscanf(tmp_hostname, b"%s\x00" as *const u8 as *const std::os::raw::c_char, port);
    (*data).port = port;
    free(tmp_hostname as *mut std::os::raw::c_void);
    return data;
}
test.rs:410:17: 410:71
unsafe { std::slice::from_raw_parts(ptr, n as usize) }
test.rs:411:17: 411:58
unsafe { CStr::from_ptr(slice.as_ptr()) }
test.rs:417:1: 428:2
pub unsafe extern "C" fn url_get_protocol(mut url: *mut std::os::raw::c_char)
 -> *mut std::os::raw::c_char {
    let mut protocol: *mut std::os::raw::c_char =
        malloc((16 as std::os::raw::c_int as
                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                    as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    if protocol.is_null() { return 0 as *mut std::os::raw::c_char }
    sscanf(url, b"%[^://]\x00" as *const u8 as *const std::os::raw::c_char, protocol);
    if url_is_protocol(protocol) { return protocol }
    return 0 as *mut std::os::raw::c_char;
}
test.rs:430:1: 443:2
pub unsafe extern "C" fn url_is_protocol(mut str: *mut std::os::raw::c_char) -> bool {
    let mut count: std::os::raw::c_int =
        (::std::mem::size_of::<[*mut std::os::raw::c_char; 177]>() as
             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<*mut std::os::raw::c_char>()
                                             as std::os::raw::c_ulong) as std::os::raw::c_int;
    let mut i: std::os::raw::c_int = 0 as std::os::raw::c_int;
    while i < count {
        if 0 as std::os::raw::c_int == strcmp(URL_SCHEMES[i as usize], str) {
            return 1 as std::os::raw::c_int != 0
        }
        i += 1
    }
    return 0 as std::os::raw::c_int != 0;
}
test.rs:444:1: 474:2
unsafe extern "C" fn get_part(mut url: *mut std::os::raw::c_char,
                              mut format: *const std::os::raw::c_char,
                              mut l: std::os::raw::c_int) -> *mut std::os::raw::c_char {
    let mut has: bool = 0 as std::os::raw::c_int != 0;
    let mut tmp: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    let mut tmp_url: *mut std::os::raw::c_char = strdup(url);
    let mut fmt_url: *mut std::os::raw::c_char = strdup(url);
    let mut ret: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if tmp.is_null() || tmp_url.is_null() || fmt_url.is_null() ||
           ret.is_null() {
        return 0 as *mut std::os::raw::c_char
    }
    strcpy(tmp, b"\x00" as *const u8 as *const std::os::raw::c_char);
    strcpy(fmt_url, b"\x00" as *const u8 as *const std::os::raw::c_char);
    let mut fmt_url = strff(fmt_url, l);
    sscanf(fmt_url, format, tmp);
    if 0 as std::os::raw::c_int != strcmp(tmp, tmp_url) {
        has = 1 as std::os::raw::c_int != 0;
        ret = strdup(tmp)
    }
    let fmt_url_slice = std::slice::from_raw_parts_mut(fmt_url, l as usize);
fmt_url = strrwd(fmt_url_slice).as_mut_ptr();
    free(tmp as *mut std::os::raw::c_void);
    free(tmp_url as *mut std::os::raw::c_void);
    free(fmt_url as *mut std::os::raw::c_void);
    return if has as std::os::raw::c_int != 0 { ret } else { 0 as *mut std::os::raw::c_char };
}
test.rs:485:17: 485:47
unsafe { CStr::from_ptr(str) }
test.rs:492:5: 498:6
unsafe {
        let protocol = url_get_protocol(url);
        if protocol.is_null() { return std::ptr::null_mut(); }
        
        let l = strlen(protocol) + 3;
        get_part(url, b"%[^@]\x00" as *const u8 as *const std::os::raw::c_char, l as std::os::raw::c_int)
    }
test.rs:503:5: 532:6
unsafe {
        let mut l: i32 = 3;
        let protocol = url_get_protocol(url);
        let tmp_protocol = CStr::from_ptr(protocol).to_owned();
        let auth = url_get_auth(url);
        
        if protocol.is_null() {
            return std::ptr::null_mut();
        }
        
        if !auth.is_null() {
            l += CStr::from_ptr(auth).to_bytes().len() as i32 + 1;
        }
        
        if !auth.is_null() {
            free(auth as *mut std::os::raw::c_void);
        }
        
        l += CStr::from_ptr(protocol).to_bytes().len() as i32;
        free(protocol as *mut std::os::raw::c_void);
        
        let hostname = if url_is_ssh(tmp_protocol.as_ptr() as *mut std::os::raw::c_char) {
            get_part(url, b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char, l)
        } else {
            get_part(url, b"%[^/]\x00" as *const u8 as *const std::os::raw::c_char, l)
        };
        
        free(tmp_protocol.as_ptr() as *mut std::os::raw::c_void);
        hostname
    }
test.rs:542:20: 542:69
unsafe { CStr::from_ptr(hostname).to_str().ok() }
test.rs:549:13: 549:67
unsafe { free(hostname as *mut std::os::raw::c_void) }
test.rs:554:5: 554:59
unsafe { free(hostname as *mut std::os::raw::c_void) }
test.rs:559:1: 570:2
pub unsafe extern "C" fn url_get_pathname(mut url: *mut std::os::raw::c_char)
 -> *mut std::os::raw::c_char {
    let mut path: *mut std::os::raw::c_char = url_get_path(url);
    let mut pathname: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if path.is_null() || pathname.is_null() { return 0 as *mut std::os::raw::c_char }
    strcat(pathname, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(path, b"%[^?]\x00" as *const u8 as *const std::os::raw::c_char, pathname);
    free(path as *mut std::os::raw::c_void);
    return pathname;
}
test.rs:572:1: 606:2
pub unsafe extern "C" fn url_get_path(mut url: *mut std::os::raw::c_char)
 -> *mut std::os::raw::c_char {
    let mut l: std::os::raw::c_int = 3 as std::os::raw::c_int;
    let mut tmp_path: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut protocol: *mut std::os::raw::c_char = url_get_protocol(url);
    let auth = url_get_auth(url);
    let hostname: *mut std::os::raw::c_char = url_get_hostname(url);
    if protocol.is_null() || hostname.is_null() {
        return 0 as *mut std::os::raw::c_char
    }
    let mut is_ssh: bool = url_is_ssh(protocol);
    l += strlen(protocol) as std::os::raw::c_int + strlen(hostname) as std::os::raw::c_int;
    if !auth.is_null() { l += strlen(auth) as std::os::raw::c_int + 1 as std::os::raw::c_int }
    tmp_path =
        if is_ssh as std::os::raw::c_int != 0 {
            get_part(url, b":%s\x00" as *const u8 as *const std::os::raw::c_char, l)
        } else {
            get_part(url, b"/%s\x00" as *const u8 as *const std::os::raw::c_char, l)
        };
    let mut fmt: *mut std::os::raw::c_char =
        if is_ssh as std::os::raw::c_int != 0 {
            b"%s\x00" as *const u8 as *const std::os::raw::c_char
        } else { b"/%s\x00" as *const u8 as *const std::os::raw::c_char } as
            *mut std::os::raw::c_char;
    let mut path: *mut std::os::raw::c_char =
        malloc(strlen(tmp_path).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                 as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    sprintf(path, fmt, tmp_path);
    if !auth.is_null() { free(auth as *mut std::os::raw::c_void); }
    free(protocol as *mut std::os::raw::c_void);
    free(hostname as *mut std::os::raw::c_void);
    free(tmp_path as *mut std::os::raw::c_void);
    return path;
}
test.rs:609:16: 609:44
unsafe { url_get_path(url) }
test.rs:610:20: 610:52
unsafe { url_get_pathname(url) }
test.rs:616:24: 616:60
unsafe { strlen(pathname) as usize }
test.rs:617:20: 617:63
unsafe { strff(path, pathname_len as i32) }
test.rs:618:18: 618:136
unsafe { malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as *mut std::os::raw::c_char }
test.rs:624:5: 634:6
unsafe {
        *search = 0; // Initialize search to an empty string
        sscanf(tmp_path, b"%[^#]\x00" as *const u8 as *const std::os::raw::c_char, search);
        
        // Convert tmp_path to a mutable slice
        let tmp_path_slice = std::slice::from_raw_parts_mut(tmp_path as *mut std::os::raw::c_char, pathname_len);
        strrwd(tmp_path_slice); // Call strrwd with the mutable slice

        free(path as *mut std::os::raw::c_void);
        free(pathname as *mut std::os::raw::c_void);
    }
test.rs:646:17: 646:50
unsafe { CStr::from_ptr(search) }
test.rs:649:5: 651:6
unsafe {
        free(search as *mut std::os::raw::c_void);
    }
test.rs:659:5: 686:6
unsafe {
        let hash: *mut std::os::raw::c_char =
            malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
                *mut std::os::raw::c_char;
        if hash.is_null() { return std::ptr::null_mut() }
        
        let path = url_get_path(url);
        if path.is_null() { return std::ptr::null_mut() }
        
        let pathname = url_get_pathname(url);
        if pathname.is_null() { return std::ptr::null_mut() }
        
        let search = url_get_search(url);
        let pathname_len = strlen(pathname) as std::os::raw::c_int;
        let search_len = if !search.is_null() { strlen(search) as std::os::raw::c_int } else { 0 };
        
        let tmp_path = strff(path, pathname_len + search_len);
        strcat(hash, b"\x00" as *const u8 as *const std::os::raw::c_char);
        sscanf(tmp_path, b"%s\x00" as *const u8 as *const std::os::raw::c_char, hash);
        
        free(tmp_path as *mut std::os::raw::c_void);
        free(pathname as *mut std::os::raw::c_void);
        free(path as *mut std::os::raw::c_void);
        
        if !search.is_null() { free(search as *mut std::os::raw::c_void); }
        
        return hash;
    }
test.rs:698:24: 698:90
unsafe { CStr::from_ptr(hostname).to_string_lossy().into_owned() }
test.rs:699:20: 699:82
unsafe { CStr::from_ptr(host).to_string_lossy().into_owned() }
test.rs:707:5: 710:6
unsafe {
        free(hostname as *mut std::os::raw::c_void);
        free(host as *mut std::os::raw::c_void);
    }
test.rs:719:5: 747:6
unsafe {
        if !(*data).auth.is_null() {
            drop(Box::from_raw((*data).auth));
        }
        if !(*data).protocol.is_null() {
            drop(Box::from_raw((*data).protocol));
        }
        if !(*data).hostname.is_null() {
            drop(Box::from_raw((*data).hostname));
        }
        if !(*data).host.is_null() {
            drop(Box::from_raw((*data).host));
        }
        if !(*data).pathname.is_null() {
            drop(Box::from_raw((*data).pathname));
        }
        if !(*data).path.is_null() {
            drop(Box::from_raw((*data).path));
        }
        if !(*data).hash.is_null() {
            drop(Box::from_raw((*data).hash));
        }
        if !(*data).search.is_null() {
            drop(Box::from_raw((*data).search));
        }
        if !(*data).query.is_null() {
            drop(Box::from_raw((*data).query));
        }
    }
test.rs:753:24: 753:92
unsafe { url_parse(c_string.as_ptr() as *mut std::os::raw::c_char) }
test.rs:754:20: 754:45
unsafe { &*url_data_ptr }
test.rs:761:35: 761:99
unsafe { std::ffi::CStr::from_ptr(data.href).to_string_lossy() }
test.rs:762:39: 762:107
unsafe { std::ffi::CStr::from_ptr(data.protocol).to_string_lossy() }
test.rs:763:35: 763:99
unsafe { std::ffi::CStr::from_ptr(data.host).to_string_lossy() }
test.rs:764:35: 764:99
unsafe { std::ffi::CStr::from_ptr(data.auth).to_string_lossy() }
test.rs:765:39: 765:107
unsafe { std::ffi::CStr::from_ptr(data.hostname).to_string_lossy() }
test.rs:766:39: 766:107
unsafe { std::ffi::CStr::from_ptr(data.pathname).to_string_lossy() }
test.rs:767:37: 767:103
unsafe { std::ffi::CStr::from_ptr(data.search).to_string_lossy() }
test.rs:768:35: 768:99
unsafe { std::ffi::CStr::from_ptr(data.path).to_string_lossy() }
test.rs:769:35: 769:99
unsafe { std::ffi::CStr::from_ptr(data.hash).to_string_lossy() }
test.rs:770:36: 770:101
unsafe { std::ffi::CStr::from_ptr(data.query).to_string_lossy() }
test.rs:771:35: 771:99
unsafe { std::ffi::CStr::from_ptr(data.port).to_string_lossy() }
test.rs:774:1: 1084:2
unsafe fn main_0() -> std::os::raw::c_int {
    //url_inspect("https://google.com/search?q=github");
    let mut gh_url: *mut std::os::raw::c_char =
        b"git://git@github.com:jwerle/url.h.git\x00" as *const u8 as
            *const std::os::raw::c_char as *mut std::os::raw::c_char;
    let mut url: *mut std::os::raw::c_char =
        b"http://user:pass@subdomain.host.com:8080/p/a/t/h?query=string#hash\x00"
            as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char;
    let mut parsed: *mut url_data_t = url_parse(url);
    let mut gh_parsed: *mut url_data_t = url_parse(gh_url);
    if parsed.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     15 as std::os::raw::c_int,
                     b"parsed\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if gh_parsed.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     16 as std::os::raw::c_int,
                     b"gh_parsed\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    let parsed_ref = unsafe { &*parsed };
url_data_inspect(parsed_ref);
    let gh_parsed_ref = unsafe { &*gh_parsed };
url_data_inspect(gh_parsed_ref);
    if (*parsed).href.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     21 as std::os::raw::c_int,
                     b"parsed->href\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).auth.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     22 as std::os::raw::c_int,
                     b"parsed->auth\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).protocol.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     23 as std::os::raw::c_int,
                     b"parsed->protocol\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*parsed).port.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     24 as std::os::raw::c_int,
                     b"parsed->port\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).hostname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     25 as std::os::raw::c_int,
                     b"parsed->hostname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*parsed).host.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     26 as std::os::raw::c_int,
                     b"parsed->host\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).pathname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     27 as std::os::raw::c_int,
                     b"parsed->pathname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*parsed).path.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     28 as std::os::raw::c_int,
                     b"parsed->path\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).hash.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     29 as std::os::raw::c_int,
                     b"parsed->hash\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).search.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     30 as std::os::raw::c_int,
                     b"parsed->search\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*parsed).query.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     31 as std::os::raw::c_int,
                     b"parsed->query\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).href.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     33 as std::os::raw::c_int,
                     b"gh_parsed->href\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).protocol.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     34 as std::os::raw::c_int,
                     b"gh_parsed->protocol\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).host.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     35 as std::os::raw::c_int,
                     b"gh_parsed->host\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).auth.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     36 as std::os::raw::c_int,
                     b"gh_parsed->auth\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).hostname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     37 as std::os::raw::c_int,
                     b"gh_parsed->hostname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).pathname.is_null() {
    panic!("gh_parsed->pathname is null");
}

if (*gh_parsed).path.is_null() {
    panic!("gh_parsed->path is null");
}

let protocols = ["http", "https", "git", "ssh", "sftp", "ftp", "javascript"];
for &protocol in &protocols {
    if !url_is_protocol(protocol.as_ptr() as *mut std::os::raw::c_char) {
        panic!("url_is_protocol(\"{}\") failed", protocol);
    }
}

let protocol = url_get_protocol(url);
if unsafe { CStr::from_ptr(protocol).to_string_lossy() } != "http" {
    panic!("Expected protocol to be \"http\", found \"{}\"", unsafe { CStr::from_ptr(protocol).to_string_lossy() });
}

let auth = url_get_auth(url);
if unsafe { CStr::from_ptr(auth).to_string_lossy() } != "user:pass" {
    panic!("Expected auth to be \"user:pass\", found \"{}\"", unsafe { CStr::from_ptr(auth).to_string_lossy() });
}

let hostname: *mut std::os::raw::c_char = url_get_hostname(url);
if unsafe { CStr::from_ptr(hostname).to_string_lossy() } != "subdomain.host.com:8080" {
    panic!("Expected hostname to be \"subdomain.host.com:8080\", found \"{}\"", unsafe { CStr::from_ptr(hostname).to_string_lossy() });
}

let host = unsafe { url_get_host(url) };
if unsafe { CStr::from_ptr(host).to_string_lossy() } != "subdomain.host.com" {
    panic!("Expected host to be \"subdomain.host.com\", found \"{}\"", unsafe { CStr::from_ptr(host).to_string_lossy() });
}

let pathname = url_get_pathname(url);
if unsafe { CStr::from_ptr(pathname).to_string_lossy() } != "/p/a/t/h" {
    panic!("Expected pathname to be \"/p/a/t/h\", found \"{}\"", unsafe { CStr::from_ptr(pathname).to_string_lossy() });
}

    if !(0 as std::os::raw::c_int ==
             strcmp(b"/p/a/t/h?query=string#hash\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_path(url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     54 as std::os::raw::c_int,
                     b"0 == strcmp(\"/p/a/t/h?query=string#hash\", url_get_path(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"?query=string\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_search(url))) as std::os::raw::c_int as std::os::raw::c_long != 0
       {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     55 as std::os::raw::c_int,
                     b"0 == strcmp(\"?query=string\", url_get_search(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"query=string\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_query(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     56 as std::os::raw::c_int,
                     b"0 == strcmp(\"query=string\", url_get_query(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"#hash\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_hash(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     57 as std::os::raw::c_int,
                     b"0 == strcmp(\"#hash\", url_get_hash(url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"8080\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_port(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     58 as std::os::raw::c_int,
                     b"0 == strcmp(\"8080\", url_get_port(url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"git\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_protocol(gh_url))) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     60 as std::os::raw::c_int,
                     b"0 == strcmp(\"git\", url_get_protocol(gh_url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"github.com\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_host(gh_url))) as std::os::raw::c_int as std::os::raw::c_long != 0
       {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     61 as std::os::raw::c_int,
                     b"0 == strcmp(\"github.com\", url_get_host(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"github.com\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_hostname(gh_url))) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     62 as std::os::raw::c_int,
                     b"0 == strcmp(\"github.com\", url_get_hostname(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"git\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_auth(gh_url))) as std::os::raw::c_int as std::os::raw::c_long != 0
       {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     63 as std::os::raw::c_int,
                     b"0 == strcmp(\"git\", url_get_auth(gh_url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"jwerle/url.h.git\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_pathname(gh_url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     64 as std::os::raw::c_int,
                     b"0 == strcmp(\"jwerle/url.h.git\", url_get_pathname(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"jwerle/url.h.git\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_path(gh_url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*::std::mem::transmute::<&[u8; 5],
                                               &[std::os::raw::c_char; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     65 as std::os::raw::c_int,
                     b"0 == strcmp(\"jwerle/url.h.git\", url_get_path(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    url_free(parsed);
    return 0 as std::os::raw::c_int;
}
test.rs:1086:5: 1088:6
unsafe {
        std::process::exit(main_0() as i32);
    }
