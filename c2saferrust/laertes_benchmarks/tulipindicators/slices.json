[
  {
    "func_defid": "DefId(0:331 ~ c2rust_out[3c70]::indicators::floor::ti_floor)",
    "span": "indicators/floor.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/floor.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_floor(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = floor(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:413 ~ c2rust_out[3c70]::indicators::macd::ti_macd_start)",
    "span": "indicators/macd.rs:30:1: 36:2 (#0)",
    "pieces": [
      "indicators/macd.rs:30:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 7,
    "source": "pub unsafe extern \"C\" fn ti_macd_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    /* NB we return data before signal is strictly valid. */\n    let long_period: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    return long_period - 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:667 ~ c2rust_out[3c70]::indicators::tema::ti_tema_start)",
    "span": "indicators/tema.rs:30:1: 35:2 (#0)",
    "pieces": [
      "indicators/tema.rs:30:1: 35:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn ti_tema_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    return (period - 1 as std::os::raw::c_int) * 3 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:445 ~ c2rust_out[3c70]::indicators::max::ti_max_start)",
    "span": "indicators/max.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/max.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_max_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:181 ~ c2rust_out[3c70]::indicators::bbands::ti_bbands_start)",
    "span": "indicators/bbands.rs:32:1: 36:2 (#0)",
    "pieces": [
      "indicators/bbands.rs:32:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_bbands_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:303 ~ c2rust_out[3c70]::indicators::ema::ti_ema)",
    "span": "indicators/ema.rs:35:1: 76:2 (#0)",
    "pieces": [
      "indicators/ema.rs:35:1: 76:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 42,
    "source": "pub unsafe extern \"C\" fn ti_ema(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_ema_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut val: std::os::raw::c_double = *input.offset(0 as std::os::raw::c_int as isize);\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = val;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        val = (*input.offset(i as isize) - val) * per + val;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = val;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_ema_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_ema\\x00\")).as_ptr(),\n                     b\"indicators/ema.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 54 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_ema_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:256 ~ c2rust_out[3c70]::indicators::dema::ti_dema)",
    "span": "indicators/dema.rs:37:1: 84:2 (#0)",
    "pieces": [
      "indicators/dema.rs:37:1: 84:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 48,
    "source": "pub unsafe extern \"C\" fn ti_dema(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_dema_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let per1: std::os::raw::c_double = 1.0f64 - per;\n    /*Calculate EMA(input)*/\n    let mut ema: std::os::raw::c_double = *input.offset(0 as std::os::raw::c_int as isize);\n    /*Calculate EMA(EMA(input))*/\n    let mut ema2: std::os::raw::c_double = ema;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        ema = ema * per1 + *input.offset(i as isize) * per;\n        if i == period - 1 as std::os::raw::c_int { ema2 = ema }\n        if i >= period - 1 as std::os::raw::c_int {\n            ema2 = ema2 * per1 + ema * per;\n            if i >= (period - 1 as std::os::raw::c_int) * 2 as std::os::raw::c_int {\n                *output = ema * 2 as std::os::raw::c_int as std::os::raw::c_double - ema2;\n                output = output.offset(1)\n            }\n        }\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_dema_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_dema\\x00\")).as_ptr(),\n                     b\"indicators/dema.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 66 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_dema_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:485 ~ c2rust_out[3c70]::indicators::mom::ti_mom)",
    "span": "indicators/mom.rs:35:1: 69:2 (#0)",
    "pieces": [
      "indicators/mom.rs:35:1: 69:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 35,
    "source": "pub unsafe extern \"C\" fn ti_mom(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_mom_start(options) { return 0 as std::os::raw::c_int }\n    let mut i: std::os::raw::c_int = 0;\n    i = period;\n    while i < size {\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 =\n            *input.offset(i as isize) - *input.offset((i - period) as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_mom_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_mom\\x00\")).as_ptr(),\n                     b\"indicators/mom.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 46 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_mom_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:755 ~ c2rust_out[3c70]::indicators::volatility::ti_volatility_start)",
    "span": "indicators/volatility.rs:10:1: 15:2 (#0)",
    "pieces": [
      "indicators/volatility.rs:10:1: 15:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn ti_volatility_start(mut options:\n                                                 *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as\n               std::os::raw::c_int; /* Multiplier, number of trading days in year. */\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:231 ~ c2rust_out[3c70]::indicators::crossany::ti_crossany)",
    "span": "indicators/crossany.rs:30:1: 57:2 (#0)",
    "pieces": [
      "indicators/crossany.rs:30:1: 57:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 28,
    "source": "pub unsafe extern \"C\" fn ti_crossany(mut size: std::os::raw::c_int,\n                                     mut inputs: *const *const std::os::raw::c_double,\n                                     mut options: *const std::os::raw::c_double,\n                                     mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut a: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut b: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 =\n            (*a.offset(i as isize) > *b.offset(i as isize) &&\n                 *a.offset((i - 1 as std::os::raw::c_int) as isize) <=\n                     *b.offset((i - 1 as std::os::raw::c_int) as isize) ||\n                 *a.offset(i as isize) < *b.offset(i as isize) &&\n                     *a.offset((i - 1 as std::os::raw::c_int) as isize) >=\n                         *b.offset((i - 1 as std::os::raw::c_int) as isize)) as\n                std::os::raw::c_int as std::os::raw::c_double;\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:808 ~ c2rust_out[3c70]::indicators::zlema::ti_zlema)",
    "span": "indicators/zlema.rs:36:1: 81:2 (#0)",
    "pieces": [
      "indicators/zlema.rs:36:1: 81:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 46,
    "source": "pub unsafe extern \"C\" fn ti_zlema(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let lag: std::os::raw::c_int = (period - 1 as std::os::raw::c_int) / 2 as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_zlema_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut val: std::os::raw::c_double =\n        *input.offset((lag - 1 as std::os::raw::c_int) as isize);\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = val;\n    let mut i: std::os::raw::c_int = 0;\n    i = lag;\n    while i < size {\n        let mut c: std::os::raw::c_double = *input.offset(i as isize);\n        let mut l: std::os::raw::c_double = *input.offset((i - lag) as isize);\n        val = (c + (c - l) - val) * per + val;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = val;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_zlema_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 9],\n                                               &[std::os::raw::c_char; 9]>(b\"ti_zlema\\x00\")).as_ptr(),\n                     b\"indicators/zlema.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 59 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_zlema_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:533 ~ c2rust_out[3c70]::indicators::psar::ti_psar)",
    "span": "indicators/psar.rs:35:1: 138:2 (#0)",
    "pieces": [
      "indicators/psar.rs:35:1: 138:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 104,
    "source": "pub unsafe extern \"C\" fn ti_psar(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let accel_step: std::os::raw::c_double =\n        *options.offset(0 as std::os::raw::c_int as isize);\n    let accel_max: std::os::raw::c_double =\n        *options.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if accel_step <= 0 as std::os::raw::c_int as std::os::raw::c_double {\n        return 1 as std::os::raw::c_int\n    }\n    if accel_max <= accel_step { return 1 as std::os::raw::c_int }\n    if size < 2 as std::os::raw::c_int { return 0 as std::os::raw::c_int }\n    /* Try to choose if we start as short or long.\n     * There is really no right answer here. */\n    let mut lng: std::os::raw::c_int = 0;\n    if *high.offset(0 as std::os::raw::c_int as isize) +\n           *low.offset(0 as std::os::raw::c_int as isize) <=\n           *high.offset(1 as std::os::raw::c_int as isize) +\n               *low.offset(1 as std::os::raw::c_int as isize) {\n        lng = 1 as std::os::raw::c_int\n    } else { lng = 0 as std::os::raw::c_int }\n    let mut sar: std::os::raw::c_double = 0.;\n    let mut extreme: std::os::raw::c_double = 0.;\n    if lng != 0 {\n        extreme = *high.offset(0 as std::os::raw::c_int as isize);\n        sar = *low.offset(0 as std::os::raw::c_int as isize)\n    } else {\n        extreme = *low.offset(0 as std::os::raw::c_int as isize);\n        sar = *high.offset(0 as std::os::raw::c_int as isize)\n    }\n    let mut accel: std::os::raw::c_double = accel_step;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        sar = (extreme - sar) * accel + sar;\n        if lng != 0 {\n            if i >= 2 as std::os::raw::c_int &&\n                   sar > *low.offset((i - 2 as std::os::raw::c_int) as isize) {\n                sar = *low.offset((i - 2 as std::os::raw::c_int) as isize)\n            }\n            if sar > *low.offset((i - 1 as std::os::raw::c_int) as isize) {\n                sar = *low.offset((i - 1 as std::os::raw::c_int) as isize)\n            }\n            if accel < accel_max && *high.offset(i as isize) > extreme {\n                accel += accel_step;\n                if accel > accel_max { accel = accel_max }\n            }\n            if *high.offset(i as isize) > extreme {\n                extreme = *high.offset(i as isize)\n            }\n        } else {\n            if i >= 2 as std::os::raw::c_int &&\n                   sar < *high.offset((i - 2 as std::os::raw::c_int) as isize) {\n                sar = *high.offset((i - 2 as std::os::raw::c_int) as isize)\n            }\n            if sar < *high.offset((i - 1 as std::os::raw::c_int) as isize) {\n                sar = *high.offset((i - 1 as std::os::raw::c_int) as isize)\n            }\n            if accel < accel_max && *low.offset(i as isize) < extreme {\n                accel += accel_step;\n                if accel > accel_max { accel = accel_max }\n            }\n            if *low.offset(i as isize) < extreme {\n                extreme = *low.offset(i as isize)\n            }\n        }\n        if lng != 0 && *low.offset(i as isize) < sar ||\n               lng == 0 && *high.offset(i as isize) > sar {\n            accel = accel_step;\n            sar = extreme;\n            lng = (lng == 0) as std::os::raw::c_int;\n            if lng == 0 {\n                extreme = *low.offset(i as isize)\n            } else { extreme = *high.offset(i as isize) }\n        }\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = sar;\n        i += 1\n        /*\n        printf(\"%s%2d %.4f %.4f %.4f %.4f %.4f %s\\n\", i == 1 ? \"\\n\" : \"\", i, high[i], low[i], accel, extreme, sar, reverse ? (!lng ? \"short\" : \"long\") : \"\");\n        */\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_psar_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_psar\\x00\")).as_ptr(),\n                     b\"indicators/psar.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 122 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_psar_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:777 ~ c2rust_out[3c70]::indicators::wad::ti_wad)",
    "span": "indicators/wad.rs:35:1: 86:2 (#0)",
    "pieces": [
      "indicators/wad.rs:35:1: 86:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 52,
    "source": "pub unsafe extern \"C\" fn ti_wad(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    if size <= ti_wad_start(options) { return 0 as std::os::raw::c_int }\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut yc: std::os::raw::c_double = *close.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        let c: std::os::raw::c_double = *close.offset(i as isize);\n        if c > yc {\n            sum +=\n                c -\n                    (if yc < *low.offset(i as isize) {\n                         yc\n                     } else { *low.offset(i as isize) })\n        } else if c < yc {\n            sum +=\n                c -\n                    (if yc > *high.offset(i as isize) {\n                         yc\n                     } else { *high.offset(i as isize) })\n        }\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = sum;\n        yc = *close.offset(i as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_wad_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_wad\\x00\")).as_ptr(),\n                     b\"indicators/wad.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 66 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_wad_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:521 ~ c2rust_out[3c70]::indicators::obv::ti_obv)",
    "span": "indicators/obv.rs:30:1: 61:2 (#0)",
    "pieces": [
      "indicators/obv.rs:30:1: 61:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 32,
    "source": "pub unsafe extern \"C\" fn ti_obv(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut volume: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = sum;\n    let mut prev: std::os::raw::c_double = *close.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        if *close.offset(i as isize) > prev {\n            sum += *volume.offset(i as isize)\n        } else if *close.offset(i as isize) < prev {\n            sum -= *volume.offset(i as isize)\n        }\n        prev = *close.offset(i as isize);\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = sum;\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:763 ~ c2rust_out[3c70]::indicators::vosc::ti_vosc)",
    "span": "indicators/vosc.rs:36:1: 95:2 (#0)",
    "pieces": [
      "indicators/vosc.rs:36:1: 95:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 60,
    "source": "pub unsafe extern \"C\" fn ti_vosc(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let short_period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let long_period: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let short_div: std::os::raw::c_double = 1.0f64 / short_period as std::os::raw::c_double;\n    let long_div: std::os::raw::c_double = 1.0f64 / long_period as std::os::raw::c_double;\n    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if long_period < short_period { return 1 as std::os::raw::c_int }\n    if size <= ti_vosc_start(options) { return 0 as std::os::raw::c_int }\n    let mut short_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut long_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < long_period {\n        if i >= long_period - short_period {\n            short_sum += *input.offset(i as isize)\n        }\n        long_sum += *input.offset(i as isize);\n        i += 1\n    }\n    let savg: std::os::raw::c_double = short_sum * short_div;\n    let lavg: std::os::raw::c_double = long_sum * long_div;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = 100.0f64 * (savg - lavg) / lavg;\n    i = long_period;\n    while i < size {\n        short_sum += *input.offset(i as isize);\n        short_sum -= *input.offset((i - short_period) as isize);\n        long_sum += *input.offset(i as isize);\n        long_sum -= *input.offset((i - long_period) as isize);\n        let savg_0: std::os::raw::c_double = short_sum * short_div;\n        let lavg_0: std::os::raw::c_double = long_sum * long_div;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = 100.0f64 * (savg_0 - lavg_0) / lavg_0;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_vosc_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_vosc\\x00\")).as_ptr(),\n                     b\"indicators/vosc.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 76 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_vosc_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:170 ~ c2rust_out[3c70]::indicators::atr::ti_atr_start)",
    "span": "indicators/atr.rs:32:1: 36:2 (#0)",
    "pieces": [
      "indicators/atr.rs:32:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_atr_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:61 ~ c2rust_out[3c70]::fuzzer::check_output)",
    "span": "fuzzer.rs:123:1: 213:2 (#0)",
    "pieces": [
      "fuzzer.rs:123:1: 213:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 91,
    "source": "pub unsafe extern \"C\" fn check_output(mut info: *const ti_indicator_info,\n                                      mut size: std::os::raw::c_int,\n                                      mut inputs:\n                                          *const *const std::os::raw::c_double,\n                                      mut options: *const std::os::raw::c_double,\n                                      mut outputs:\n                                          *const *mut std::os::raw::c_double) {\n    let mut s: std::os::raw::c_int = 0;\n    s = (*info).start.expect(\"non-null function pointer\")(options);\n    let mut o: std::os::raw::c_int = 0;\n    o = 0 as std::os::raw::c_int;\n    while o < (*info).outputs {\n        let mut max: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n        let mut min: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n        let mut i: std::os::raw::c_int = 0;\n        i = 0 as std::os::raw::c_int;\n        while i < size - s {\n            let op: std::os::raw::c_double =\n                *(*outputs.offset(o as isize)).offset(i as isize);\n            let in_0: std::os::raw::c_double =\n                *(*inputs.offset(0 as std::os::raw::c_int as\n                                     isize)).offset((i + s) as isize);\n            max = if in_0 > max { in_0 } else { max };\n            min = if in_0 < min { in_0 } else { min };\n            match (*info).type_0 {\n                1 => {\n                    if op > max * 1.5f64 + 2 as std::os::raw::c_int as std::os::raw::c_double\n                           ||\n                           op <\n                               min * 0.5f64 -\n                                   2 as std::os::raw::c_int as std::os::raw::c_double {\n                        let mut k: std::os::raw::c_int = 0;\n                        let mut j: std::os::raw::c_int = 0;\n                        printf(b\"\\nInputs:\\x00\" as *const u8 as\n                                   *const std::os::raw::c_char);\n                        k = 0 as std::os::raw::c_int;\n                        while k < size {\n                            printf(b\" %f\\x00\" as *const u8 as\n                                       *const std::os::raw::c_char,\n                                   *(*inputs.offset(0 as std::os::raw::c_int as\n                                                        isize)).offset(k as\n                                                                           isize));\n                            k += 1\n                        }\n                        printf(b\"\\nOptions:\\x00\" as *const u8 as\n                                   *const std::os::raw::c_char);\n                        k = 0 as std::os::raw::c_int;\n                        while k < (*info).options {\n                            printf(b\" %f\\x00\" as *const u8 as\n                                       *const std::os::raw::c_char,\n                                   *options.offset(k as isize));\n                            k += 1\n                        }\n                        j = 0 as std::os::raw::c_int;\n                        while j < (*info).outputs {\n                            printf(b\"\\nOutput[%d]:\\x00\" as *const u8 as\n                                       *const std::os::raw::c_char, j);\n                            k = 0 as std::os::raw::c_int;\n                            while k < size {\n                                printf(b\" %f\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char,\n                                       *(*outputs.offset(j as\n                                                             isize)).offset(k\n                                                                                as\n                                                                                isize));\n                                k += 1\n                            }\n                            j += 1\n                        }\n                        printf(b\"\\nERROR Output is out of range for input: input: %f output: %f\\n\\x00\"\n                                   as *const u8 as *const std::os::raw::c_char, in_0,\n                               op);\n                        if (0 as std::os::raw::c_int == 0) as std::os::raw::c_int as\n                               std::os::raw::c_long != 0 {\n                            __assert_rtn((*::std::mem::transmute::<&[u8; 13],\n                                                                   &[std::os::raw::c_char; 13]>(b\"check_output\\x00\")).as_ptr(),\n                                         b\"fuzzer.c\\x00\" as *const u8 as\n                                             *const std::os::raw::c_char,\n                                         94 as std::os::raw::c_int,\n                                         b\"0\\x00\" as *const u8 as\n                                             *const std::os::raw::c_char);\n                        } else { };\n                    }\n                }\n                _ => { }\n            }\n            i += 1\n        }\n        o += 1\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:64 ~ c2rust_out[3c70]::fuzzer::stress)",
        "span": "fuzzer.rs:319:13: 320:70 (#0)",
        "source": "check_output(info, 3 as std::os::raw::c_int, inputs.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());"
      },
      {
        "caller": "DefId(0:64 ~ c2rust_out[3c70]::fuzzer::stress)",
        "span": "fuzzer.rs:339:13: 340:70 (#0)",
        "source": "check_output(info, size, inputs0.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());"
      },
      {
        "caller": "DefId(0:64 ~ c2rust_out[3c70]::fuzzer::stress)",
        "span": "fuzzer.rs:286:13: 287:70 (#0)",
        "source": "check_output(info, 0 as std::os::raw::c_int, inputs.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());"
      },
      {
        "caller": "DefId(0:64 ~ c2rust_out[3c70]::fuzzer::stress)",
        "span": "fuzzer.rs:329:13: 330:70 (#0)",
        "source": "check_output(info, size, inputs.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());"
      },
      {
        "caller": "DefId(0:64 ~ c2rust_out[3c70]::fuzzer::stress)",
        "span": "fuzzer.rs:308:13: 309:70 (#0)",
        "source": "check_output(info, 2 as std::os::raw::c_int, inputs.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());"
      },
      {
        "caller": "DefId(0:64 ~ c2rust_out[3c70]::fuzzer::stress)",
        "span": "fuzzer.rs:297:13: 298:70 (#0)",
        "source": "check_output(info, 1 as std::os::raw::c_int, inputs.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "fuzzer.rs:18:1: 18:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "fuzzer.rs:17:1: 17:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:495 ~ c2rust_out[3c70]::indicators::msw::ti_msw_start)",
    "span": "indicators/msw.rs:38:1: 41:2 (#0)",
    "pieces": [
      "indicators/msw.rs:38:1: 41:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_msw_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1442 ~ c2rust_out[3c70]::indicators_index::ti_build)",
    "span": "indicators_index.rs:673:1: 675:2 (#0)",
    "pieces": [
      "indicators_index.rs:673:1: 675:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "pub extern \"C\" fn ti_build() -> std::os::raw::c_long {\n    return 1537377628 as std::os::raw::c_int as std::os::raw::c_long;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators_index.rs:593:1: 593:44 (#0)",
        "source": "pub use crate::indicators::tr::ti_tr_start;"
      },
      {
        "span": "indicators_index.rs:605:1: 605:52 (#0)",
        "source": "pub use crate::indicators::ultosc::ti_ultosc_start;"
      },
      {
        "span": "indicators_index.rs:475:1: 475:48 (#0)",
        "source": "pub use crate::indicators::dema::ti_dema_start;"
      },
      {
        "span": "indicators_index.rs:423:1: 423:46 (#0)",
        "source": "pub use crate::indicators::abs::ti_abs_start;"
      },
      {
        "span": "indicators_index.rs:489:1: 489:46 (#0)",
        "source": "pub use crate::indicators::ema::ti_ema_start;"
      },
      {
        "span": "indicators_index.rs:596:1: 596:42 (#0)",
        "source": "pub use crate::indicators::trix::ti_trix;"
      },
      {
        "span": "indicators_index.rs:573:1: 573:52 (#0)",
        "source": "pub use crate::indicators::stderr::ti_stderr_start;"
      },
      {
        "span": "indicators_index.rs:487:1: 487:52 (#0)",
        "source": "pub use crate::indicators::edecay::ti_edecay_start;"
      },
      {
        "span": "indicators_index.rs:512:1: 512:56 (#0)",
        "source": "pub use crate::indicators::linregslope::ti_linregslope;"
      },
      {
        "span": "indicators_index.rs:599:1: 599:50 (#0)",
        "source": "pub use crate::indicators::trunc::ti_trunc_start;"
      },
      {
        "span": "indicators_index.rs:628:1: 628:44 (#0)",
        "source": "pub use crate::indicators::zlema::ti_zlema;"
      },
      {
        "span": "indicators_index.rs:457:1: 457:46 (#0)",
        "source": "pub use crate::indicators::cci::ti_cci_start;"
      },
      {
        "span": "indicators_index.rs:471:1: 471:46 (#0)",
        "source": "pub use crate::indicators::cvi::ti_cvi_start;"
      },
      {
        "span": "indicators_index.rs:533:1: 533:46 (#0)",
        "source": "pub use crate::indicators::min::ti_min_start;"
      },
      {
        "span": "indicators_index.rs:513:1: 513:62 (#0)",
        "source": "pub use crate::indicators::linregslope::ti_linregslope_start;"
      },
      {
        "span": "indicators_index.rs:468:1: 468:52 (#0)",
        "source": "pub use crate::indicators::crossover::ti_crossover;"
      },
      {
        "span": "indicators_index.rs:506:1: 506:40 (#0)",
        "source": "pub use crate::indicators::lag::ti_lag;"
      },
      {
        "span": "indicators_index.rs:594:1: 594:44 (#0)",
        "source": "pub use crate::indicators::trima::ti_trima;"
      },
      {
        "span": "indicators_index.rs:504:1: 504:40 (#0)",
        "source": "pub use crate::indicators::kvo::ti_kvo;"
      },
      {
        "span": "indicators_index.rs:430:1: 430:44 (#0)",
        "source": "pub use crate::indicators::adosc::ti_adosc;"
      },
      {
        "span": "indicators_index.rs:624:1: 624:44 (#0)",
        "source": "pub use crate::indicators::willr::ti_willr;"
      },
      {
        "span": "indicators_index.rs:587:1: 587:48 (#0)",
        "source": "pub use crate::indicators::tema::ti_tema_start;"
      },
      {
        "span": "indicators_index.rs:427:1: 427:44 (#0)",
        "source": "pub use crate::indicators::ad::ti_ad_start;"
      },
      {
        "span": "indicators_index.rs:463:1: 463:46 (#0)",
        "source": "pub use crate::indicators::cos::ti_cos_start;"
      },
      {
        "span": "indicators_index.rs:575:1: 575:50 (#0)",
        "source": "pub use crate::indicators::stoch::ti_stoch_start;"
      },
      {
        "span": "indicators_index.rs:586:1: 586:42 (#0)",
        "source": "pub use crate::indicators::tema::ti_tema;"
      },
      {
        "span": "indicators_index.rs:592:1: 592:38 (#0)",
        "source": "pub use crate::indicators::tr::ti_tr;"
      },
      {
        "span": "indicators_index.rs:612:1: 612:54 (#0)",
        "source": "pub use crate::indicators::volatility::ti_volatility;"
      },
      {
        "span": "indicators_index.rs:553:1: 553:52 (#0)",
        "source": "pub use crate::indicators::qstick::ti_qstick_start;"
      },
      {
        "span": "indicators_index.rs:435:1: 435:48 (#0)",
        "source": "pub use crate::indicators::adxr::ti_adxr_start;"
      },
      {
        "span": "indicators_index.rs:618:1: 618:40 (#0)",
        "source": "pub use crate::indicators::wad::ti_wad;"
      },
      {
        "span": "indicators_index.rs:552:1: 552:46 (#0)",
        "source": "pub use crate::indicators::qstick::ti_qstick;"
      },
      {
        "span": "indicators_index.rs:518:1: 518:42 (#0)",
        "source": "pub use crate::indicators::macd::ti_macd;"
      },
      {
        "span": "indicators_index.rs:524:1: 524:40 (#0)",
        "source": "pub use crate::indicators::max::ti_max;"
      },
      {
        "span": "indicators_index.rs:458:1: 458:42 (#0)",
        "source": "pub use crate::indicators::ceil::ti_ceil;"
      },
      {
        "span": "indicators_index.rs:461:1: 461:46 (#0)",
        "source": "pub use crate::indicators::cmo::ti_cmo_start;"
      },
      {
        "span": "indicators_index.rs:540:1: 540:42 (#0)",
        "source": "pub use crate::indicators::natr::ti_natr;"
      },
      {
        "span": "indicators_index.rs:554:1: 554:40 (#0)",
        "source": "pub use crate::indicators::roc::ti_roc;"
      },
      {
        "span": "indicators_index.rs:584:1: 584:42 (#0)",
        "source": "pub use crate::indicators::tanh::ti_tanh;"
      },
      {
        "span": "indicators_index.rs:459:1: 459:48 (#0)",
        "source": "pub use crate::indicators::ceil::ti_ceil_start;"
      },
      {
        "span": "indicators_index.rs:499:1: 499:48 (#0)",
        "source": "pub use crate::indicators::fosc::ti_fosc_start;"
      },
      {
        "span": "indicators_index.rs:603:1: 603:56 (#0)",
        "source": "pub use crate::indicators::typprice::ti_typprice_start;"
      },
      {
        "span": "indicators_index.rs:433:1: 433:46 (#0)",
        "source": "pub use crate::indicators::adx::ti_adx_start;"
      },
      {
        "span": "indicators_index.rs:428:1: 428:40 (#0)",
        "source": "pub use crate::indicators::add::ti_add;"
      },
      {
        "span": "indicators_index.rs:441:1: 441:50 (#0)",
        "source": "pub use crate::indicators::aroon::ti_aroon_start;"
      },
      {
        "span": "indicators_index.rs:578:1: 578:40 (#0)",
        "source": "pub use crate::indicators::sub::ti_sub;"
      },
      {
        "span": "indicators_index.rs:429:1: 429:46 (#0)",
        "source": "pub use crate::indicators::add::ti_add_start;"
      },
      {
        "span": "indicators_index.rs:609:1: 609:46 (#0)",
        "source": "pub use crate::indicators::vhf::ti_vhf_start;"
      },
      {
        "span": "indicators_index.rs:485:1: 485:44 (#0)",
        "source": "pub use crate::indicators::dx::ti_dx_start;"
      },
      {
        "span": "indicators_index.rs:572:1: 572:46 (#0)",
        "source": "pub use crate::indicators::stderr::ti_stderr;"
      },
      {
        "span": "indicators_index.rs:561:1: 561:46 (#0)",
        "source": "pub use crate::indicators::rsi::ti_rsi_start;"
      },
      {
        "span": "indicators_index.rs:620:1: 620:48 (#0)",
        "source": "pub use crate::indicators::wcprice::ti_wcprice;"
      },
      {
        "span": "indicators_index.rs:528:1: 528:50 (#0)",
        "source": "pub use crate::indicators::medprice::ti_medprice;"
      },
      {
        "span": "indicators_index.rs:465:1: 465:48 (#0)",
        "source": "pub use crate::indicators::cosh::ti_cosh_start;"
      },
      {
        "span": "indicators_index.rs:545:1: 545:46 (#0)",
        "source": "pub use crate::indicators::obv::ti_obv_start;"
      },
      {
        "span": "indicators_index.rs:424:1: 424:42 (#0)",
        "source": "pub use crate::indicators::acos::ti_acos;"
      },
      {
        "span": "indicators_index.rs:425:1: 425:48 (#0)",
        "source": "pub use crate::indicators::acos::ti_acos_start;"
      },
      {
        "span": "indicators_index.rs:543:1: 543:46 (#0)",
        "source": "pub use crate::indicators::nvi::ti_nvi_start;"
      },
      {
        "span": "indicators_index.rs:610:1: 610:44 (#0)",
        "source": "pub use crate::indicators::vidya::ti_vidya;"
      },
      {
        "span": "indicators_index.rs:476:1: 476:38 (#0)",
        "source": "pub use crate::indicators::di::ti_di;"
      },
      {
        "span": "indicators_index.rs:549:1: 549:48 (#0)",
        "source": "pub use crate::indicators::psar::ti_psar_start;"
      },
      {
        "span": "indicators_index.rs:511:1: 511:70 (#0)",
        "source": "pub use crate::indicators::linregintercept::ti_linregintercept_start;"
      },
      {
        "span": "indicators_index.rs:598:1: 598:44 (#0)",
        "source": "pub use crate::indicators::trunc::ti_trunc;"
      },
      {
        "span": "indicators_index.rs:525:1: 525:46 (#0)",
        "source": "pub use crate::indicators::max::ti_max_start;"
      },
      {
        "span": "indicators_index.rs:541:1: 541:48 (#0)",
        "source": "pub use crate::indicators::natr::ti_natr_start;"
      },
      {
        "span": "indicators_index.rs:585:1: 585:48 (#0)",
        "source": "pub use crate::indicators::tanh::ti_tanh_start;"
      },
      {
        "span": "indicators_index.rs:451:1: 451:56 (#0)",
        "source": "pub use crate::indicators::avgprice::ti_avgprice_start;"
      },
      {
        "span": "indicators_index.rs:600:1: 600:40 (#0)",
        "source": "pub use crate::indicators::tsf::ti_tsf;"
      },
      {
        "span": "indicators_index.rs:532:1: 532:40 (#0)",
        "source": "pub use crate::indicators::min::ti_min;"
      },
      {
        "span": "indicators_index.rs:588:1: 588:44 (#0)",
        "source": "pub use crate::indicators::todeg::ti_todeg;"
      },
      {
        "span": "indicators_index.rs:604:1: 604:46 (#0)",
        "source": "pub use crate::indicators::ultosc::ti_ultosc;"
      },
      {
        "span": "indicators_index.rs:614:1: 614:42 (#0)",
        "source": "pub use crate::indicators::vosc::ti_vosc;"
      },
      {
        "span": "indicators_index.rs:472:1: 472:44 (#0)",
        "source": "pub use crate::indicators::decay::ti_decay;"
      },
      {
        "span": "indicators_index.rs:464:1: 464:42 (#0)",
        "source": "pub use crate::indicators::cosh::ti_cosh;"
      },
      {
        "span": "indicators_index.rs:500:1: 500:40 (#0)",
        "source": "pub use crate::indicators::hma::ti_hma;"
      },
      {
        "span": "indicators_index.rs:581:1: 581:46 (#0)",
        "source": "pub use crate::indicators::sum::ti_sum_start;"
      },
      {
        "span": "indicators_index.rs:523:1: 523:48 (#0)",
        "source": "pub use crate::indicators::mass::ti_mass_start;"
      },
      {
        "span": "indicators_index.rs:616:1: 616:42 (#0)",
        "source": "pub use crate::indicators::vwma::ti_vwma;"
      },
      {
        "span": "indicators_index.rs:625:1: 625:50 (#0)",
        "source": "pub use crate::indicators::willr::ti_willr_start;"
      },
      {
        "span": "indicators_index.rs:462:1: 462:40 (#0)",
        "source": "pub use crate::indicators::cos::ti_cos;"
      },
      {
        "span": "indicators_index.rs:452:1: 452:46 (#0)",
        "source": "pub use crate::indicators::bbands::ti_bbands;"
      },
      {
        "span": "indicators_index.rs:544:1: 544:40 (#0)",
        "source": "pub use crate::indicators::obv::ti_obv;"
      },
      {
        "span": "indicators_index.rs:579:1: 579:46 (#0)",
        "source": "pub use crate::indicators::sub::ti_sub_start;"
      },
      {
        "span": "indicators_index.rs:591:1: 591:50 (#0)",
        "source": "pub use crate::indicators::torad::ti_torad_start;"
      },
      {
        "span": "indicators_index.rs:522:1: 522:42 (#0)",
        "source": "pub use crate::indicators::mass::ti_mass;"
      },
      {
        "span": "indicators_index.rs:449:1: 449:46 (#0)",
        "source": "pub use crate::indicators::atr::ti_atr_start;"
      },
      {
        "span": "indicators_index.rs:548:1: 548:42 (#0)",
        "source": "pub use crate::indicators::psar::ti_psar;"
      },
      {
        "span": "indicators_index.rs:576:1: 576:50 (#0)",
        "source": "pub use crate::indicators::stochrsi::ti_stochrsi;"
      },
      {
        "span": "indicators_index.rs:577:1: 577:56 (#0)",
        "source": "pub use crate::indicators::stochrsi::ti_stochrsi_start;"
      },
      {
        "span": "indicators_index.rs:580:1: 580:40 (#0)",
        "source": "pub use crate::indicators::sum::ti_sum;"
      },
      {
        "span": "indicators_index.rs:527:1: 527:44 (#0)",
        "source": "pub use crate::indicators::md::ti_md_start;"
      },
      {
        "span": "indicators_index.rs:466:1: 466:50 (#0)",
        "source": "pub use crate::indicators::crossany::ti_crossany;"
      },
      {
        "span": "indicators_index.rs:477:1: 477:44 (#0)",
        "source": "pub use crate::indicators::di::ti_di_start;"
      },
      {
        "span": "indicators_index.rs:502:1: 502:42 (#0)",
        "source": "pub use crate::indicators::kama::ti_kama;"
      },
      {
        "span": "indicators_index.rs:547:1: 547:46 (#0)",
        "source": "pub use crate::indicators::ppo::ti_ppo_start;"
      },
      {
        "span": "indicators_index.rs:491:1: 491:46 (#0)",
        "source": "pub use crate::indicators::emv::ti_emv_start;"
      },
      {
        "span": "indicators_index.rs:560:1: 560:40 (#0)",
        "source": "pub use crate::indicators::rsi::ti_rsi;"
      },
      {
        "span": "indicators_index.rs:565:1: 565:48 (#0)",
        "source": "pub use crate::indicators::sinh::ti_sinh_start;"
      },
      {
        "span": "indicators_index.rs:426:1: 426:38 (#0)",
        "source": "pub use crate::indicators::ad::ti_ad;"
      },
      {
        "span": "indicators_index.rs:602:1: 602:50 (#0)",
        "source": "pub use crate::indicators::typprice::ti_typprice;"
      },
      {
        "span": "indicators_index.rs:582:1: 582:40 (#0)",
        "source": "pub use crate::indicators::tan::ti_tan;"
      },
      {
        "span": "indicators_index.rs:505:1: 505:46 (#0)",
        "source": "pub use crate::indicators::kvo::ti_kvo_start;"
      },
      {
        "span": "indicators_index.rs:486:1: 486:46 (#0)",
        "source": "pub use crate::indicators::edecay::ti_edecay;"
      },
      {
        "span": "indicators_index.rs:555:1: 555:46 (#0)",
        "source": "pub use crate::indicators::roc::ti_roc_start;"
      },
      {
        "span": "indicators_index.rs:606:1: 606:40 (#0)",
        "source": "pub use crate::indicators::var::ti_var;"
      },
      {
        "span": "indicators_index.rs:542:1: 542:40 (#0)",
        "source": "pub use crate::indicators::nvi::ti_nvi;"
      },
      {
        "span": "indicators_index.rs:436:1: 436:38 (#0)",
        "source": "pub use crate::indicators::ao::ti_ao;"
      },
      {
        "span": "indicators_index.rs:567:1: 567:46 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma_start;"
      },
      {
        "span": "indicators_index.rs:613:1: 613:60 (#0)",
        "source": "pub use crate::indicators::volatility::ti_volatility_start;"
      },
      {
        "span": "indicators_index.rs:531:1: 531:46 (#0)",
        "source": "pub use crate::indicators::mfi::ti_mfi_start;"
      },
      {
        "span": "indicators_index.rs:626:1: 626:40 (#0)",
        "source": "pub use crate::indicators::wma::ti_wma;"
      },
      {
        "span": "indicators_index.rs:495:1: 495:52 (#0)",
        "source": "pub use crate::indicators::fisher::ti_fisher_start;"
      },
      {
        "span": "indicators_index.rs:431:1: 431:50 (#0)",
        "source": "pub use crate::indicators::adosc::ti_adosc_start;"
      },
      {
        "span": "indicators_index.rs:448:1: 448:40 (#0)",
        "source": "pub use crate::indicators::atr::ti_atr;"
      },
      {
        "span": "indicators_index.rs:454:1: 454:40 (#0)",
        "source": "pub use crate::indicators::bop::ti_bop;"
      },
      {
        "span": "indicators_index.rs:456:1: 456:40 (#0)",
        "source": "pub use crate::indicators::cci::ti_cci;"
      },
      {
        "span": "indicators_index.rs:470:1: 470:40 (#0)",
        "source": "pub use crate::indicators::cvi::ti_cvi;"
      },
      {
        "span": "indicators_index.rs:484:1: 484:38 (#0)",
        "source": "pub use crate::indicators::dx::ti_dx;"
      },
      {
        "span": "indicators_index.rs:493:1: 493:46 (#0)",
        "source": "pub use crate::indicators::exp::ti_exp_start;"
      },
      {
        "span": "indicators_index.rs:597:1: 597:48 (#0)",
        "source": "pub use crate::indicators::trix::ti_trix_start;"
      },
      {
        "span": "indicators_index.rs:583:1: 583:46 (#0)",
        "source": "pub use crate::indicators::tan::ti_tan_start;"
      },
      {
        "span": "indicators_index.rs:492:1: 492:40 (#0)",
        "source": "pub use crate::indicators::exp::ti_exp;"
      },
      {
        "span": "indicators_index.rs:501:1: 501:46 (#0)",
        "source": "pub use crate::indicators::hma::ti_hma_start;"
      },
      {
        "span": "indicators_index.rs:536:1: 536:40 (#0)",
        "source": "pub use crate::indicators::msw::ti_msw;"
      },
      {
        "span": "indicators_index.rs:481:1: 481:44 (#0)",
        "source": "pub use crate::indicators::dm::ti_dm_start;"
      },
      {
        "span": "indicators_index.rs:538:1: 538:40 (#0)",
        "source": "pub use crate::indicators::mul::ti_mul;"
      },
      {
        "span": "indicators_index.rs:434:1: 434:42 (#0)",
        "source": "pub use crate::indicators::adxr::ti_adxr;"
      },
      {
        "span": "indicators_index.rs:482:1: 482:40 (#0)",
        "source": "pub use crate::indicators::dpo::ti_dpo;"
      },
      {
        "span": "indicators_index.rs:601:1: 601:46 (#0)",
        "source": "pub use crate::indicators::tsf::ti_tsf_start;"
      },
      {
        "span": "indicators_index.rs:629:1: 629:50 (#0)",
        "source": "pub use crate::indicators::zlema::ti_zlema_start;"
      },
      {
        "span": "indicators_index.rs:622:1: 622:48 (#0)",
        "source": "pub use crate::indicators::wilders::ti_wilders;"
      },
      {
        "span": "indicators_index.rs:455:1: 455:46 (#0)",
        "source": "pub use crate::indicators::bop::ti_bop_start;"
      },
      {
        "span": "indicators_index.rs:490:1: 490:40 (#0)",
        "source": "pub use crate::indicators::emv::ti_emv;"
      },
      {
        "span": "indicators_index.rs:514:1: 514:38 (#0)",
        "source": "pub use crate::indicators::ln::ti_ln;"
      },
      {
        "span": "indicators_index.rs:488:1: 488:40 (#0)",
        "source": "pub use crate::indicators::ema::ti_ema;"
      },
      {
        "span": "indicators_index.rs:516:1: 516:44 (#0)",
        "source": "pub use crate::indicators::log10::ti_log10;"
      },
      {
        "span": "indicators_index.rs:571:1: 571:52 (#0)",
        "source": "pub use crate::indicators::stddev::ti_stddev_start;"
      },
      {
        "span": "indicators_index.rs:526:1: 526:38 (#0)",
        "source": "pub use crate::indicators::md::ti_md;"
      },
      {
        "span": "indicators_index.rs:437:1: 437:44 (#0)",
        "source": "pub use crate::indicators::ao::ti_ao_start;"
      },
      {
        "span": "indicators_index.rs:442:1: 442:50 (#0)",
        "source": "pub use crate::indicators::aroonosc::ti_aroonosc;"
      },
      {
        "span": "indicators_index.rs:557:1: 557:48 (#0)",
        "source": "pub use crate::indicators::rocr::ti_rocr_start;"
      },
      {
        "span": "indicators_index.rs:439:1: 439:46 (#0)",
        "source": "pub use crate::indicators::apo::ti_apo_start;"
      },
      {
        "span": "indicators_index.rs:453:1: 453:52 (#0)",
        "source": "pub use crate::indicators::bbands::ti_bbands_start;"
      },
      {
        "span": "indicators_index.rs:467:1: 467:56 (#0)",
        "source": "pub use crate::indicators::crossany::ti_crossany_start;"
      },
      {
        "span": "indicators_index.rs:432:1: 432:40 (#0)",
        "source": "pub use crate::indicators::adx::ti_adx;"
      },
      {
        "span": "indicators_index.rs:473:1: 473:50 (#0)",
        "source": "pub use crate::indicators::decay::ti_decay_start;"
      },
      {
        "span": "indicators_index.rs:539:1: 539:46 (#0)",
        "source": "pub use crate::indicators::mul::ti_mul_start;"
      },
      {
        "span": "indicators_index.rs:443:1: 443:56 (#0)",
        "source": "pub use crate::indicators::aroonosc::ti_aroonosc_start;"
      },
      {
        "span": "indicators_index.rs:517:1: 517:50 (#0)",
        "source": "pub use crate::indicators::log10::ti_log10_start;"
      },
      {
        "span": "indicators_index.rs:445:1: 445:48 (#0)",
        "source": "pub use crate::indicators::asin::ti_asin_start;"
      },
      {
        "span": "indicators_index.rs:615:1: 615:48 (#0)",
        "source": "pub use crate::indicators::vosc::ti_vosc_start;"
      },
      {
        "span": "indicators_index.rs:621:1: 621:54 (#0)",
        "source": "pub use crate::indicators::wcprice::ti_wcprice_start;"
      },
      {
        "span": "indicators_index.rs:566:1: 566:40 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma;"
      },
      {
        "span": "indicators_index.rs:607:1: 607:46 (#0)",
        "source": "pub use crate::indicators::var::ti_var_start;"
      },
      {
        "span": "indicators_index.rs:619:1: 619:46 (#0)",
        "source": "pub use crate::indicators::wad::ti_wad_start;"
      },
      {
        "span": "indicators_index.rs:515:1: 515:44 (#0)",
        "source": "pub use crate::indicators::ln::ti_ln_start;"
      },
      {
        "span": "indicators_index.rs:558:1: 558:44 (#0)",
        "source": "pub use crate::indicators::round::ti_round;"
      },
      {
        "span": "indicators_index.rs:447:1: 447:48 (#0)",
        "source": "pub use crate::indicators::atan::ti_atan_start;"
      },
      {
        "span": "indicators_index.rs:450:1: 450:50 (#0)",
        "source": "pub use crate::indicators::avgprice::ti_avgprice;"
      },
      {
        "span": "indicators_index.rs:595:1: 595:50 (#0)",
        "source": "pub use crate::indicators::trima::ti_trima_start;"
      },
      {
        "span": "indicators_index.rs:562:1: 562:40 (#0)",
        "source": "pub use crate::indicators::sin::ti_sin;"
      },
      {
        "span": "indicators_index.rs:422:1: 422:40 (#0)",
        "source": "pub use crate::indicators::abs::ti_abs;"
      },
      {
        "span": "indicators_index.rs:537:1: 537:46 (#0)",
        "source": "pub use crate::indicators::msw::ti_msw_start;"
      },
      {
        "span": "indicators_index.rs:569:1: 569:48 (#0)",
        "source": "pub use crate::indicators::sqrt::ti_sqrt_start;"
      },
      {
        "span": "indicators_index.rs:507:1: 507:46 (#0)",
        "source": "pub use crate::indicators::lag::ti_lag_start;"
      },
      {
        "span": "indicators_index.rs:496:1: 496:44 (#0)",
        "source": "pub use crate::indicators::floor::ti_floor;"
      },
      {
        "span": "indicators_index.rs:590:1: 590:44 (#0)",
        "source": "pub use crate::indicators::torad::ti_torad;"
      },
      {
        "span": "indicators_index.rs:503:1: 503:48 (#0)",
        "source": "pub use crate::indicators::kama::ti_kama_start;"
      },
      {
        "span": "indicators_index.rs:498:1: 498:42 (#0)",
        "source": "pub use crate::indicators::fosc::ti_fosc;"
      },
      {
        "span": "indicators_index.rs:568:1: 568:42 (#0)",
        "source": "pub use crate::indicators::sqrt::ti_sqrt;"
      },
      {
        "span": "indicators_index.rs:478:1: 478:40 (#0)",
        "source": "pub use crate::indicators::div::ti_div;"
      },
      {
        "span": "indicators_index.rs:494:1: 494:46 (#0)",
        "source": "pub use crate::indicators::fisher::ti_fisher;"
      },
      {
        "span": "indicators_index.rs:564:1: 564:42 (#0)",
        "source": "pub use crate::indicators::sinh::ti_sinh;"
      },
      {
        "span": "indicators_index.rs:623:1: 623:54 (#0)",
        "source": "pub use crate::indicators::wilders::ti_wilders_start;"
      },
      {
        "span": "indicators_index.rs:589:1: 589:50 (#0)",
        "source": "pub use crate::indicators::todeg::ti_todeg_start;"
      },
      {
        "span": "indicators_index.rs:556:1: 556:42 (#0)",
        "source": "pub use crate::indicators::rocr::ti_rocr;"
      },
      {
        "span": "indicators_index.rs:460:1: 460:40 (#0)",
        "source": "pub use crate::indicators::cmo::ti_cmo;"
      },
      {
        "span": "indicators_index.rs:574:1: 574:44 (#0)",
        "source": "pub use crate::indicators::stoch::ti_stoch;"
      },
      {
        "span": "indicators_index.rs:469:1: 469:58 (#0)",
        "source": "pub use crate::indicators::crossover::ti_crossover_start;"
      },
      {
        "span": "indicators_index.rs:617:1: 617:48 (#0)",
        "source": "pub use crate::indicators::vwma::ti_vwma_start;"
      },
      {
        "span": "indicators_index.rs:480:1: 480:38 (#0)",
        "source": "pub use crate::indicators::dm::ti_dm;"
      },
      {
        "span": "indicators_index.rs:529:1: 529:56 (#0)",
        "source": "pub use crate::indicators::medprice::ti_medprice_start;"
      },
      {
        "span": "indicators_index.rs:563:1: 563:46 (#0)",
        "source": "pub use crate::indicators::sin::ti_sin_start;"
      },
      {
        "span": "indicators_index.rs:510:1: 510:64 (#0)",
        "source": "pub use crate::indicators::linregintercept::ti_linregintercept;"
      },
      {
        "span": "indicators_index.rs:444:1: 444:42 (#0)",
        "source": "pub use crate::indicators::asin::ti_asin;"
      },
      {
        "span": "indicators_index.rs:519:1: 519:48 (#0)",
        "source": "pub use crate::indicators::macd::ti_macd_start;"
      },
      {
        "span": "indicators_index.rs:627:1: 627:46 (#0)",
        "source": "pub use crate::indicators::wma::ti_wma_start;"
      },
      {
        "span": "indicators_index.rs:509:1: 509:52 (#0)",
        "source": "pub use crate::indicators::linreg::ti_linreg_start;"
      },
      {
        "span": "indicators_index.rs:534:1: 534:40 (#0)",
        "source": "pub use crate::indicators::mom::ti_mom;"
      },
      {
        "span": "indicators_index.rs:608:1: 608:40 (#0)",
        "source": "pub use crate::indicators::vhf::ti_vhf;"
      },
      {
        "span": "indicators_index.rs:483:1: 483:46 (#0)",
        "source": "pub use crate::indicators::dpo::ti_dpo_start;"
      },
      {
        "span": "indicators_index.rs:474:1: 474:42 (#0)",
        "source": "pub use crate::indicators::dema::ti_dema;"
      },
      {
        "span": "indicators_index.rs:550:1: 550:40 (#0)",
        "source": "pub use crate::indicators::pvi::ti_pvi;"
      },
      {
        "span": "indicators_index.rs:520:1: 520:50 (#0)",
        "source": "pub use crate::indicators::marketfi::ti_marketfi;"
      },
      {
        "span": "indicators_index.rs:508:1: 508:46 (#0)",
        "source": "pub use crate::indicators::linreg::ti_linreg;"
      },
      {
        "span": "indicators_index.rs:440:1: 440:44 (#0)",
        "source": "pub use crate::indicators::aroon::ti_aroon;"
      },
      {
        "span": "indicators_index.rs:551:1: 551:46 (#0)",
        "source": "pub use crate::indicators::pvi::ti_pvi_start;"
      },
      {
        "span": "indicators_index.rs:570:1: 570:46 (#0)",
        "source": "pub use crate::indicators::stddev::ti_stddev;"
      },
      {
        "span": "indicators_index.rs:521:1: 521:56 (#0)",
        "source": "pub use crate::indicators::marketfi::ti_marketfi_start;"
      },
      {
        "span": "indicators_index.rs:546:1: 546:40 (#0)",
        "source": "pub use crate::indicators::ppo::ti_ppo;"
      },
      {
        "span": "indicators_index.rs:559:1: 559:50 (#0)",
        "source": "pub use crate::indicators::round::ti_round_start;"
      },
      {
        "span": "indicators_index.rs:535:1: 535:46 (#0)",
        "source": "pub use crate::indicators::mom::ti_mom_start;"
      },
      {
        "span": "indicators_index.rs:530:1: 530:40 (#0)",
        "source": "pub use crate::indicators::mfi::ti_mfi;"
      },
      {
        "span": "indicators_index.rs:497:1: 497:50 (#0)",
        "source": "pub use crate::indicators::floor::ti_floor_start;"
      },
      {
        "span": "indicators_index.rs:479:1: 479:46 (#0)",
        "source": "pub use crate::indicators::div::ti_div_start;"
      },
      {
        "span": "indicators_index.rs:446:1: 446:42 (#0)",
        "source": "pub use crate::indicators::atan::ti_atan;"
      },
      {
        "span": "indicators_index.rs:611:1: 611:50 (#0)",
        "source": "pub use crate::indicators::vidya::ti_vidya_start;"
      },
      {
        "span": "indicators_index.rs:438:1: 438:40 (#0)",
        "source": "pub use crate::indicators::apo::ti_apo;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:89 ~ c2rust_out[3c70]::indicators::ad::ti_ad_start)",
    "span": "indicators/ad.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/ad.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_ad_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:375 ~ c2rust_out[3c70]::indicators::lag::ti_lag_start)",
    "span": "indicators/lag.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/lag.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_lag_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:756 ~ c2rust_out[3c70]::indicators::volatility::ti_volatility)",
    "span": "indicators/volatility.rs:17:1: 80:2 (#0)",
    "pieces": [
      "indicators/volatility.rs:17:1: 80:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 64,
    "source": "pub unsafe extern \"C\" fn ti_volatility(mut size: std::os::raw::c_int,\n                                       mut inputs:\n                                           *const *const std::os::raw::c_double,\n                                       mut options: *const std::os::raw::c_double,\n                                       mut outputs:\n                                           *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let annual: std::os::raw::c_double = sqrt(252 as std::os::raw::c_int as std::os::raw::c_double);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_volatility_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut sum2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i <= period {\n        let c: std::os::raw::c_double =\n            *input.offset(i as isize) /\n                *input.offset((i - 1 as std::os::raw::c_int) as isize) - 1.0f64;\n        sum += c;\n        sum2 += c * c;\n        i += 1\n    }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = sqrt(sum2 * scale - sum * scale * (sum * scale)) * annual;\n    i = period + 1 as std::os::raw::c_int;\n    while i < size {\n        let c_0: std::os::raw::c_double =\n            *input.offset(i as isize) /\n                *input.offset((i - 1 as std::os::raw::c_int) as isize) - 1.0f64;\n        sum += c_0;\n        sum2 += c_0 * c_0;\n        let cp: std::os::raw::c_double =\n            *input.offset((i - period) as isize) /\n                *input.offset((i - period - 1 as std::os::raw::c_int) as isize) -\n                1.0f64;\n        sum -= cp;\n        sum2 -= cp * cp;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = sqrt(sum2 * scale - sum * scale * (sum * scale)) * annual;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_volatility_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 14],\n                                               &[std::os::raw::c_char; 14]>(b\"ti_volatility\\x00\")).as_ptr(),\n                     b\"indicators/volatility.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 69 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_volatility_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:553 ~ c2rust_out[3c70]::indicators::roc::ti_roc_start)",
    "span": "indicators/roc.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/roc.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_roc_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:309 ~ c2rust_out[3c70]::indicators::emv::ti_emv_start)",
    "span": "indicators/emv.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/emv.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_emv_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:81 ~ c2rust_out[3c70]::indicators::abs::ti_abs)",
    "span": "indicators/abs.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/abs.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_abs(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = fabs(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:590 ~ c2rust_out[3c70]::indicators::sma::ti_sma)",
    "span": "indicators/sma.rs:36:1: 78:2 (#0)",
    "pieces": [
      "indicators/sma.rs:36:1: 78:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 43,
    "source": "pub unsafe extern \"C\" fn ti_sma(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_sma_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period { sum += *input.offset(i as isize); i += 1 }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = sum * scale;\n    i = period;\n    while i < size {\n        sum += *input.offset(i as isize);\n        sum -= *input.offset((i - period) as isize);\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = sum * scale;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_sma_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_sma\\x00\")).as_ptr(),\n                     b\"indicators/sma.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 57 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_sma_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:15 ~ c2rust_out[3c70]::example1::main_0)",
        "span": "example1.rs:99:5: 101:42 (#0)",
        "source": "let mut error: std::os::raw::c_int =\n        ti_sma(input_length, all_inputs.as_mut_ptr(), options.as_ptr(),\n               all_outputs.as_mut_ptr());"
      },
      {
        "caller": "DefId(0:689 ~ c2rust_out[3c70]::indicators::trima::ti_trima)",
        "span": "indicators/trima.rs:52:43: 54:6 (#0)",
        "source": "{\n        return ti_sma(size, inputs, options, outputs)\n    }"
      }
    ],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:14 ~ c2rust_out[3c70]::example1::print_array)",
    "span": "example1.rs:40:1: 51:2 (#0)",
    "pieces": [
      "example1.rs:40:1: 51:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "pub unsafe extern \"C\" fn print_array(mut p: *const std::os::raw::c_double,\n                                     size: std::os::raw::c_int) {\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        if i != 0 { printf(b\", \\x00\" as *const u8 as *const std::os::raw::c_char); }\n        printf(b\"%.1f\\x00\" as *const u8 as *const std::os::raw::c_char,\n               *p.offset(i as isize));\n        i += 1\n    }\n    printf(b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n}",
    "calls": [
      {
        "caller": "DefId(0:15 ~ c2rust_out[3c70]::example1::main_0)",
        "span": "example1.rs:111:5: 111:42 (#0)",
        "source": "print_array(data_out, output_length);"
      },
      {
        "caller": "DefId(0:15 ~ c2rust_out[3c70]::example1::main_0)",
        "span": "example1.rs:70:5: 70:49 (#0)",
        "source": "print_array(data_in.as_ptr(), input_length);"
      },
      {
        "caller": "DefId(0:15 ~ c2rust_out[3c70]::example1::main_0)",
        "span": "example1.rs:73:5: 77:42 (#0)",
        "source": "print_array(options.as_ptr(),\n                (::std::mem::size_of::<[std::os::raw::c_double; 1]>() as\n                     std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<std::os::raw::c_double>()\n                                                     as std::os::raw::c_ulong) as\n                    std::os::raw::c_int);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "example1.rs:15:1: 15:40 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma;"
      },
      {
        "span": "example1.rs:16:1: 16:46 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma_start;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:532 ~ c2rust_out[3c70]::indicators::psar::ti_psar_start)",
    "span": "indicators/psar.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/psar.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_psar_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:525 ~ c2rust_out[3c70]::indicators::ppo::ti_ppo_start)",
    "span": "indicators/ppo.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/ppo.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_ppo_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:454 ~ c2rust_out[3c70]::indicators::md::ti_md)",
    "span": "indicators/md.rs:38:1: 86:2 (#0)",
    "pieces": [
      "indicators/md.rs:38:1: 86:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 49,
    "source": "pub unsafe extern \"C\" fn ti_md(mut size: std::os::raw::c_int,\n                               mut inputs: *const *const std::os::raw::c_double,\n                               mut options: *const std::os::raw::c_double,\n                               mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_md_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        let today: std::os::raw::c_double = *input.offset(i as isize);\n        sum += today;\n        if i >= period { sum -= *input.offset((i - period) as isize) }\n        let avg: std::os::raw::c_double = sum * scale;\n        if i >= period - 1 as std::os::raw::c_int {\n            let mut acc: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n            j = 0 as std::os::raw::c_int;\n            while j < period {\n                acc += fabs(avg - *input.offset((i - j) as isize));\n                j += 1\n            }\n            let fresh0 = output;\n            output = output.offset(1);\n            *fresh0 = acc * scale\n        }\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_md_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 6],\n                                               &[std::os::raw::c_char; 6]>(b\"ti_md\\x00\")).as_ptr(),\n                     b\"indicators/md.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 63 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_md_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:794 ~ c2rust_out[3c70]::indicators::willr::ti_willr)",
    "span": "indicators/willr.rs:36:1: 116:2 (#0)",
    "pieces": [
      "indicators/willr.rs:36:1: 116:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 81,
    "source": "pub unsafe extern \"C\" fn ti_willr(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_willr_start(options) { return 0 as std::os::raw::c_int }\n    let mut trail: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut maxi: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut mini: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut max: std::os::raw::c_double = *high.offset(0 as std::os::raw::c_int as isize);\n    let mut min: std::os::raw::c_double = *low.offset(0 as std::os::raw::c_int as isize);\n    let mut bar: std::os::raw::c_double = 0.;\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        /* Maintain highest. */\n        bar = *high.offset(i as isize);\n        if maxi < trail {\n            maxi = trail;\n            max = *high.offset(maxi as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *high.offset(j as isize);\n                if bar >= max { max = bar; maxi = j }\n            }\n        } else if bar >= max { maxi = i; max = bar }\n        /* Maintain lowest. */\n        bar = *low.offset(i as isize);\n        if mini < trail {\n            mini = trail;\n            min = *low.offset(mini as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *low.offset(j as isize);\n                if bar <= min { min = bar; mini = j }\n            }\n        } else if bar <= min { mini = i; min = bar }\n        /* Calculate it. */\n        let highlow: std::os::raw::c_double = max - min;\n        let r: std::os::raw::c_double =\n            if highlow == 0.0f64 {\n                0.0f64\n            } else {\n                (-(100 as std::os::raw::c_int) as std::os::raw::c_double) *\n                    ((max - *close.offset(i as isize)) / highlow)\n            };\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = r;\n        i += 1;\n        trail += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_willr_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 9],\n                                               &[std::os::raw::c_char; 9]>(b\"ti_willr\\x00\")).as_ptr(),\n                     b\"indicators/willr.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 96 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_willr_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:297 ~ c2rust_out[3c70]::indicators::edecay::ti_edecay_start)",
    "span": "indicators/edecay.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/edecay.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_edecay_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:255 ~ c2rust_out[3c70]::indicators::dema::ti_dema_start)",
    "span": "indicators/dema.rs:30:1: 35:2 (#0)",
    "pieces": [
      "indicators/dema.rs:30:1: 35:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn ti_dema_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    return (period - 1 as std::os::raw::c_int) * 2 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:64 ~ c2rust_out[3c70]::fuzzer::stress)",
    "span": "fuzzer.rs:215:1: 368:2 (#0)",
    "pieces": [
      "fuzzer.rs:215:1: 368:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 154,
    "source": "pub unsafe extern \"C\" fn stress(mut info: *const ti_indicator_info) {\n    let opt_count: std::os::raw::c_int = (*info).options;\n    printf(b\"%s (%s) (%d options)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n           (*info).name, (*info).full_name, opt_count);\n    let mut inputs: [*const std::os::raw::c_double; 10] =\n        [0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,\n         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,\n         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,\n         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,\n         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double];\n    let mut inputs0: [*const std::os::raw::c_double; 10] =\n        [0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,\n         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,\n         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,\n         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,\n         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double];\n    let mut outputs: [*mut std::os::raw::c_double; 10] =\n        [0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double];\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < 10 as std::os::raw::c_int {\n        inputs[i as usize] =\n            if i < (*info).inputs {\n                dummy_in.as_mut_ptr()\n            } else { 0 as *mut std::os::raw::c_double };\n        inputs0[i as usize] =\n            if i < (*info).inputs {\n                dummy_in0.as_mut_ptr()\n            } else { 0 as *mut std::os::raw::c_double };\n        outputs[i as usize] =\n            if i < (*info).outputs {\n                dummy_ot.as_mut_ptr()\n            } else { 0 as *mut std::os::raw::c_double };\n        i += 1\n    }\n    let mut options_index: [std::os::raw::c_int; 11] =\n        [0 as std::os::raw::c_int, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    let mut options: [std::os::raw::c_double; 10] = [0.; 10];\n    let mut choices: std::os::raw::c_int =\n        (::std::mem::size_of::<[std::os::raw::c_double; 29]>() as\n             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<std::os::raw::c_double>()\n                                             as std::os::raw::c_ulong) as std::os::raw::c_int;\n    let mut size: std::os::raw::c_int =\n        (::std::mem::size_of::<[std::os::raw::c_double; 20]>() as\n             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<std::os::raw::c_double>()\n                                             as std::os::raw::c_ulong) as std::os::raw::c_int;\n    let mut j: std::os::raw::c_int = 0;\n    let mut count: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    loop  {\n        count += 1;\n        j = 0 as std::os::raw::c_int;\n        while j < opt_count {\n            options[j as usize] =\n                optionsd[options_index[j as usize] as usize];\n            printf(b\" %f\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   options[j as usize]);\n            j += 1\n        }\n        let mut r: std::os::raw::c_int = 0;\n        printf(b\" 0\\x00\" as *const u8 as *const std::os::raw::c_char);\n        r =\n            (*info).indicator.expect(\"non-null function pointer\")(0 as\n                                                                      std::os::raw::c_int,\n                                                                  inputs.as_mut_ptr(),\n                                                                  options.as_mut_ptr(),\n                                                                  outputs.as_mut_ptr());\n        if r == 0 as std::os::raw::c_int {\n            check_output(info, 0 as std::os::raw::c_int, inputs.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());\n        }\n        printf(b\" 1\\x00\" as *const u8 as *const std::os::raw::c_char);\n        r =\n            (*info).indicator.expect(\"non-null function pointer\")(1 as\n                                                                      std::os::raw::c_int,\n                                                                  inputs.as_mut_ptr(),\n                                                                  options.as_mut_ptr(),\n                                                                  outputs.as_mut_ptr());\n        if r == 0 as std::os::raw::c_int {\n            check_output(info, 1 as std::os::raw::c_int, inputs.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());\n        }\n        printf(b\" 2\\x00\" as *const u8 as *const std::os::raw::c_char);\n        r =\n            (*info).indicator.expect(\"non-null function pointer\")(2 as\n                                                                      std::os::raw::c_int,\n                                                                  inputs.as_mut_ptr(),\n                                                                  options.as_mut_ptr(),\n                                                                  outputs.as_mut_ptr());\n        if r == 0 as std::os::raw::c_int {\n            check_output(info, 2 as std::os::raw::c_int, inputs.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());\n        }\n        printf(b\" 3\\x00\" as *const u8 as *const std::os::raw::c_char);\n        r =\n            (*info).indicator.expect(\"non-null function pointer\")(3 as\n                                                                      std::os::raw::c_int,\n                                                                  inputs.as_mut_ptr(),\n                                                                  options.as_mut_ptr(),\n                                                                  outputs.as_mut_ptr());\n        if r == 0 as std::os::raw::c_int {\n            check_output(info, 3 as std::os::raw::c_int, inputs.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());\n        }\n        printf(b\" %d\\x00\" as *const u8 as *const std::os::raw::c_char, size);\n        r =\n            (*info).indicator.expect(\"non-null function pointer\")(size,\n                                                                  inputs.as_mut_ptr(),\n                                                                  options.as_mut_ptr(),\n                                                                  outputs.as_mut_ptr());\n        if r == 0 as std::os::raw::c_int {\n            check_output(info, size, inputs.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());\n        }\n        printf(b\" 0s\\x00\" as *const u8 as *const std::os::raw::c_char);\n        r =\n            (*info).indicator.expect(\"non-null function pointer\")(size,\n                                                                  inputs0.as_mut_ptr(),\n                                                                  options.as_mut_ptr(),\n                                                                  outputs.as_mut_ptr());\n        if r == 0 as std::os::raw::c_int {\n            check_output(info, size, inputs0.as_mut_ptr(),\n                         options.as_mut_ptr(), outputs.as_mut_ptr());\n        }\n        printf(b\"\\r                                                  \\r\\x00\"\n                   as *const u8 as *const std::os::raw::c_char);\n        j = 0 as std::os::raw::c_int;\n        loop  {\n            options_index[j as usize] =\n                (options_index[j as usize] + 1 as std::os::raw::c_int) % choices;\n            let fresh0 = j;\n            j = j + 1;\n            if !(options_index[fresh0 as usize] == 0 as std::os::raw::c_int) {\n                break ;\n            }\n        }\n        if !(j <= opt_count) { break ; }\n    }\n    if !(0.1f64 >\n             fabs(count as std::os::raw::c_double -\n                      pow(choices as std::os::raw::c_double,\n                          opt_count as std::os::raw::c_double))) as std::os::raw::c_int as\n           std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"stress\\x00\")).as_ptr(),\n                     b\"fuzzer.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                     154 as std::os::raw::c_int,\n                     b\".1 > fabs(count - (pow(choices, opt_count)))\\x00\" as\n                         *const u8 as *const std::os::raw::c_char);\n    } else { };\n}",
    "calls": [
      {
        "caller": "DefId(0:75 ~ c2rust_out[3c70]::fuzzer::main_0)",
        "span": "fuzzer.rs:375:30: 375:43 (#0)",
        "source": "stress(info);"
      },
      {
        "caller": "DefId(0:75 ~ c2rust_out[3c70]::fuzzer::main_0)",
        "span": "fuzzer.rs:379:13: 379:28 (#0)",
        "source": "stress(info_0);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "fuzzer.rs:17:1: 17:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      },
      {
        "span": "fuzzer.rs:18:1: 18:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1445 ~ c2rust_out[3c70]::indicators_index::ti_find_indicator)",
    "span": "indicators_index.rs:11047:1: 11072:2 (#0)",
    "pieces": [
      "indicators_index.rs:11047:1: 11072:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 26,
    "source": "pub unsafe extern \"C\" fn ti_find_indicator(mut name: *const std::os::raw::c_char)\n -> *const ti_indicator_info {\n    let mut imin: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut imax: std::os::raw::c_int =\n        (::std::mem::size_of::<[ti_indicator_info; 105]>() as\n             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<ti_indicator_info>()\n                                             as\n                                             std::os::raw::c_ulong).wrapping_sub(2 as\n                                                                             std::os::raw::c_int\n                                                                             as\n                                                                             std::os::raw::c_ulong)\n            as std::os::raw::c_int;\n    /*Binary search.*/\n    while imax >= imin {\n        let i: std::os::raw::c_int = imin + (imax - imin) / 2 as std::os::raw::c_int;\n        let c: std::os::raw::c_int = strcmp(name, ti_indicators[i as usize].name);\n        if c == 0 as std::os::raw::c_int {\n            return ti_indicators.as_mut_ptr().offset(i as isize)\n        } else {\n            if c > 0 as std::os::raw::c_int {\n                imin = i + 1 as std::os::raw::c_int\n            } else { imax = i - 1 as std::os::raw::c_int }\n        }\n    }\n    return 0 as *const ti_indicator_info;\n}",
    "calls": [
      {
        "caller": "DefId(0:1483 ~ c2rust_out[3c70]::sample::main_0)",
        "span": "sample.rs:185:5: 185:79 (#0)",
        "source": "info = ti_find_indicator(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:75 ~ c2rust_out[3c70]::fuzzer::main_0)",
        "span": "fuzzer.rs:373:9: 374:80 (#0)",
        "source": "let mut info: *const ti_indicator_info =\n            ti_find_indicator(*argv.offset(1 as std::os::raw::c_int as isize));"
      },
      {
        "caller": "DefId(0:1544 ~ c2rust_out[3c70]::smoke::test_ind_name)",
        "span": "smoke.rs:218:5: 218:70 (#0)",
        "source": "let mut info: *const ti_indicator_info = ti_find_indicator(name);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "indicators_index.rs:596:1: 596:42 (#0)",
        "source": "pub use crate::indicators::trix::ti_trix;"
      },
      {
        "span": "indicators_index.rs:510:1: 510:64 (#0)",
        "source": "pub use crate::indicators::linregintercept::ti_linregintercept;"
      },
      {
        "span": "indicators_index.rs:616:1: 616:42 (#0)",
        "source": "pub use crate::indicators::vwma::ti_vwma;"
      },
      {
        "span": "indicators_index.rs:458:1: 458:42 (#0)",
        "source": "pub use crate::indicators::ceil::ti_ceil;"
      },
      {
        "span": "indicators_index.rs:569:1: 569:48 (#0)",
        "source": "pub use crate::indicators::sqrt::ti_sqrt_start;"
      },
      {
        "span": "indicators_index.rs:629:1: 629:50 (#0)",
        "source": "pub use crate::indicators::zlema::ti_zlema_start;"
      },
      {
        "span": "indicators_index.rs:577:1: 577:56 (#0)",
        "source": "pub use crate::indicators::stochrsi::ti_stochrsi_start;"
      },
      {
        "span": "indicators_index.rs:504:1: 504:40 (#0)",
        "source": "pub use crate::indicators::kvo::ti_kvo;"
      },
      {
        "span": "indicators_index.rs:549:1: 549:48 (#0)",
        "source": "pub use crate::indicators::psar::ti_psar_start;"
      },
      {
        "span": "indicators_index.rs:472:1: 472:44 (#0)",
        "source": "pub use crate::indicators::decay::ti_decay;"
      },
      {
        "span": "indicators_index.rs:561:1: 561:46 (#0)",
        "source": "pub use crate::indicators::rsi::ti_rsi_start;"
      },
      {
        "span": "indicators_index.rs:600:1: 600:40 (#0)",
        "source": "pub use crate::indicators::tsf::ti_tsf;"
      },
      {
        "span": "indicators_index.rs:436:1: 436:38 (#0)",
        "source": "pub use crate::indicators::ao::ti_ao;"
      },
      {
        "span": "indicators_index.rs:583:1: 583:46 (#0)",
        "source": "pub use crate::indicators::tan::ti_tan_start;"
      },
      {
        "span": "indicators_index.rs:525:1: 525:46 (#0)",
        "source": "pub use crate::indicators::max::ti_max_start;"
      },
      {
        "span": "indicators_index.rs:451:1: 451:56 (#0)",
        "source": "pub use crate::indicators::avgprice::ti_avgprice_start;"
      },
      {
        "span": "indicators_index.rs:517:1: 517:50 (#0)",
        "source": "pub use crate::indicators::log10::ti_log10_start;"
      },
      {
        "span": "indicators_index.rs:597:1: 597:48 (#0)",
        "source": "pub use crate::indicators::trix::ti_trix_start;"
      },
      {
        "span": "indicators_index.rs:586:1: 586:42 (#0)",
        "source": "pub use crate::indicators::tema::ti_tema;"
      },
      {
        "span": "indicators_index.rs:514:1: 514:38 (#0)",
        "source": "pub use crate::indicators::ln::ti_ln;"
      },
      {
        "span": "indicators_index.rs:444:1: 444:42 (#0)",
        "source": "pub use crate::indicators::asin::ti_asin;"
      },
      {
        "span": "indicators_index.rs:580:1: 580:40 (#0)",
        "source": "pub use crate::indicators::sum::ti_sum;"
      },
      {
        "span": "indicators_index.rs:567:1: 567:46 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma_start;"
      },
      {
        "span": "indicators_index.rs:442:1: 442:50 (#0)",
        "source": "pub use crate::indicators::aroonosc::ti_aroonosc;"
      },
      {
        "span": "indicators_index.rs:570:1: 570:46 (#0)",
        "source": "pub use crate::indicators::stddev::ti_stddev;"
      },
      {
        "span": "indicators_index.rs:609:1: 609:46 (#0)",
        "source": "pub use crate::indicators::vhf::ti_vhf_start;"
      },
      {
        "span": "indicators_index.rs:439:1: 439:46 (#0)",
        "source": "pub use crate::indicators::apo::ti_apo_start;"
      },
      {
        "span": "indicators_index.rs:617:1: 617:48 (#0)",
        "source": "pub use crate::indicators::vwma::ti_vwma_start;"
      },
      {
        "span": "indicators_index.rs:511:1: 511:70 (#0)",
        "source": "pub use crate::indicators::linregintercept::ti_linregintercept_start;"
      },
      {
        "span": "indicators_index.rs:614:1: 614:42 (#0)",
        "source": "pub use crate::indicators::vosc::ti_vosc;"
      },
      {
        "span": "indicators_index.rs:618:1: 618:40 (#0)",
        "source": "pub use crate::indicators::wad::ti_wad;"
      },
      {
        "span": "indicators_index.rs:523:1: 523:48 (#0)",
        "source": "pub use crate::indicators::mass::ti_mass_start;"
      },
      {
        "span": "indicators_index.rs:424:1: 424:42 (#0)",
        "source": "pub use crate::indicators::acos::ti_acos;"
      },
      {
        "span": "indicators_index.rs:550:1: 550:40 (#0)",
        "source": "pub use crate::indicators::pvi::ti_pvi;"
      },
      {
        "span": "indicators_index.rs:591:1: 591:50 (#0)",
        "source": "pub use crate::indicators::torad::ti_torad_start;"
      },
      {
        "span": "indicators_index.rs:479:1: 479:46 (#0)",
        "source": "pub use crate::indicators::div::ti_div_start;"
      },
      {
        "span": "indicators_index.rs:582:1: 582:40 (#0)",
        "source": "pub use crate::indicators::tan::ti_tan;"
      },
      {
        "span": "indicators_index.rs:613:1: 613:60 (#0)",
        "source": "pub use crate::indicators::volatility::ti_volatility_start;"
      },
      {
        "span": "indicators_index.rs:466:1: 466:50 (#0)",
        "source": "pub use crate::indicators::crossany::ti_crossany;"
      },
      {
        "span": "indicators_index.rs:493:1: 493:46 (#0)",
        "source": "pub use crate::indicators::exp::ti_exp_start;"
      },
      {
        "span": "indicators_index.rs:627:1: 627:46 (#0)",
        "source": "pub use crate::indicators::wma::ti_wma_start;"
      },
      {
        "span": "indicators_index.rs:566:1: 566:40 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma;"
      },
      {
        "span": "indicators_index.rs:507:1: 507:46 (#0)",
        "source": "pub use crate::indicators::lag::ti_lag_start;"
      },
      {
        "span": "indicators_index.rs:558:1: 558:44 (#0)",
        "source": "pub use crate::indicators::round::ti_round;"
      },
      {
        "span": "indicators_index.rs:438:1: 438:40 (#0)",
        "source": "pub use crate::indicators::apo::ti_apo;"
      },
      {
        "span": "indicators_index.rs:498:1: 498:42 (#0)",
        "source": "pub use crate::indicators::fosc::ti_fosc;"
      },
      {
        "span": "indicators_index.rs:423:1: 423:46 (#0)",
        "source": "pub use crate::indicators::abs::ti_abs_start;"
      },
      {
        "span": "indicators_index.rs:505:1: 505:46 (#0)",
        "source": "pub use crate::indicators::kvo::ti_kvo_start;"
      },
      {
        "span": "indicators_index.rs:581:1: 581:46 (#0)",
        "source": "pub use crate::indicators::sum::ti_sum_start;"
      },
      {
        "span": "indicators_index.rs:509:1: 509:52 (#0)",
        "source": "pub use crate::indicators::linreg::ti_linreg_start;"
      },
      {
        "span": "indicators_index.rs:483:1: 483:46 (#0)",
        "source": "pub use crate::indicators::dpo::ti_dpo_start;"
      },
      {
        "span": "indicators_index.rs:487:1: 487:52 (#0)",
        "source": "pub use crate::indicators::edecay::ti_edecay_start;"
      },
      {
        "span": "indicators_index.rs:520:1: 520:50 (#0)",
        "source": "pub use crate::indicators::marketfi::ti_marketfi;"
      },
      {
        "span": "indicators_index.rs:624:1: 624:44 (#0)",
        "source": "pub use crate::indicators::willr::ti_willr;"
      },
      {
        "span": "indicators_index.rs:426:1: 426:38 (#0)",
        "source": "pub use crate::indicators::ad::ti_ad;"
      },
      {
        "span": "indicators_index.rs:516:1: 516:44 (#0)",
        "source": "pub use crate::indicators::log10::ti_log10;"
      },
      {
        "span": "indicators_index.rs:526:1: 526:38 (#0)",
        "source": "pub use crate::indicators::md::ti_md;"
      },
      {
        "span": "indicators_index.rs:571:1: 571:52 (#0)",
        "source": "pub use crate::indicators::stddev::ti_stddev_start;"
      },
      {
        "span": "indicators_index.rs:619:1: 619:46 (#0)",
        "source": "pub use crate::indicators::wad::ti_wad_start;"
      },
      {
        "span": "indicators_index.rs:477:1: 477:44 (#0)",
        "source": "pub use crate::indicators::di::ti_di_start;"
      },
      {
        "span": "indicators_index.rs:560:1: 560:40 (#0)",
        "source": "pub use crate::indicators::rsi::ti_rsi;"
      },
      {
        "span": "indicators_index.rs:623:1: 623:54 (#0)",
        "source": "pub use crate::indicators::wilders::ti_wilders_start;"
      },
      {
        "span": "indicators_index.rs:621:1: 621:54 (#0)",
        "source": "pub use crate::indicators::wcprice::ti_wcprice_start;"
      },
      {
        "span": "indicators_index.rs:475:1: 475:48 (#0)",
        "source": "pub use crate::indicators::dema::ti_dema_start;"
      },
      {
        "span": "indicators_index.rs:491:1: 491:46 (#0)",
        "source": "pub use crate::indicators::emv::ti_emv_start;"
      },
      {
        "span": "indicators_index.rs:497:1: 497:50 (#0)",
        "source": "pub use crate::indicators::floor::ti_floor_start;"
      },
      {
        "span": "indicators_index.rs:486:1: 486:46 (#0)",
        "source": "pub use crate::indicators::edecay::ti_edecay;"
      },
      {
        "span": "indicators_index.rs:429:1: 429:46 (#0)",
        "source": "pub use crate::indicators::add::ti_add_start;"
      },
      {
        "span": "indicators_index.rs:585:1: 585:48 (#0)",
        "source": "pub use crate::indicators::tanh::ti_tanh_start;"
      },
      {
        "span": "indicators_index.rs:524:1: 524:40 (#0)",
        "source": "pub use crate::indicators::max::ti_max;"
      },
      {
        "span": "indicators_index.rs:544:1: 544:40 (#0)",
        "source": "pub use crate::indicators::obv::ti_obv;"
      },
      {
        "span": "indicators_index.rs:541:1: 541:48 (#0)",
        "source": "pub use crate::indicators::natr::ti_natr_start;"
      },
      {
        "span": "indicators_index.rs:527:1: 527:44 (#0)",
        "source": "pub use crate::indicators::md::ti_md_start;"
      },
      {
        "span": "indicators_index.rs:499:1: 499:48 (#0)",
        "source": "pub use crate::indicators::fosc::ti_fosc_start;"
      },
      {
        "span": "indicators_index.rs:469:1: 469:58 (#0)",
        "source": "pub use crate::indicators::crossover::ti_crossover_start;"
      },
      {
        "span": "indicators_index.rs:551:1: 551:46 (#0)",
        "source": "pub use crate::indicators::pvi::ti_pvi_start;"
      },
      {
        "span": "indicators_index.rs:488:1: 488:40 (#0)",
        "source": "pub use crate::indicators::ema::ti_ema;"
      },
      {
        "span": "indicators_index.rs:625:1: 625:50 (#0)",
        "source": "pub use crate::indicators::willr::ti_willr_start;"
      },
      {
        "span": "indicators_index.rs:579:1: 579:46 (#0)",
        "source": "pub use crate::indicators::sub::ti_sub_start;"
      },
      {
        "span": "indicators_index.rs:476:1: 476:38 (#0)",
        "source": "pub use crate::indicators::di::ti_di;"
      },
      {
        "span": "indicators_index.rs:478:1: 478:40 (#0)",
        "source": "pub use crate::indicators::div::ti_div;"
      },
      {
        "span": "indicators_index.rs:445:1: 445:48 (#0)",
        "source": "pub use crate::indicators::asin::ti_asin_start;"
      },
      {
        "span": "indicators_index.rs:515:1: 515:44 (#0)",
        "source": "pub use crate::indicators::ln::ti_ln_start;"
      },
      {
        "span": "indicators_index.rs:521:1: 521:56 (#0)",
        "source": "pub use crate::indicators::marketfi::ti_marketfi_start;"
      },
      {
        "span": "indicators_index.rs:564:1: 564:42 (#0)",
        "source": "pub use crate::indicators::sinh::ti_sinh;"
      },
      {
        "span": "indicators_index.rs:452:1: 452:46 (#0)",
        "source": "pub use crate::indicators::bbands::ti_bbands;"
      },
      {
        "span": "indicators_index.rs:534:1: 534:40 (#0)",
        "source": "pub use crate::indicators::mom::ti_mom;"
      },
      {
        "span": "indicators_index.rs:494:1: 494:46 (#0)",
        "source": "pub use crate::indicators::fisher::ti_fisher;"
      },
      {
        "span": "indicators_index.rs:513:1: 513:62 (#0)",
        "source": "pub use crate::indicators::linregslope::ti_linregslope_start;"
      },
      {
        "span": "indicators_index.rs:536:1: 536:40 (#0)",
        "source": "pub use crate::indicators::msw::ti_msw;"
      },
      {
        "span": "indicators_index.rs:474:1: 474:42 (#0)",
        "source": "pub use crate::indicators::dema::ti_dema;"
      },
      {
        "span": "indicators_index.rs:428:1: 428:40 (#0)",
        "source": "pub use crate::indicators::add::ti_add;"
      },
      {
        "span": "indicators_index.rs:448:1: 448:40 (#0)",
        "source": "pub use crate::indicators::atr::ti_atr;"
      },
      {
        "span": "indicators_index.rs:489:1: 489:46 (#0)",
        "source": "pub use crate::indicators::ema::ti_ema_start;"
      },
      {
        "span": "indicators_index.rs:546:1: 546:40 (#0)",
        "source": "pub use crate::indicators::ppo::ti_ppo;"
      },
      {
        "span": "indicators_index.rs:584:1: 584:42 (#0)",
        "source": "pub use crate::indicators::tanh::ti_tanh;"
      },
      {
        "span": "indicators_index.rs:599:1: 599:50 (#0)",
        "source": "pub use crate::indicators::trunc::ti_trunc_start;"
      },
      {
        "span": "indicators_index.rs:459:1: 459:48 (#0)",
        "source": "pub use crate::indicators::ceil::ti_ceil_start;"
      },
      {
        "span": "indicators_index.rs:425:1: 425:48 (#0)",
        "source": "pub use crate::indicators::acos::ti_acos_start;"
      },
      {
        "span": "indicators_index.rs:482:1: 482:40 (#0)",
        "source": "pub use crate::indicators::dpo::ti_dpo;"
      },
      {
        "span": "indicators_index.rs:565:1: 565:48 (#0)",
        "source": "pub use crate::indicators::sinh::ti_sinh_start;"
      },
      {
        "span": "indicators_index.rs:450:1: 450:50 (#0)",
        "source": "pub use crate::indicators::avgprice::ti_avgprice;"
      },
      {
        "span": "indicators_index.rs:518:1: 518:42 (#0)",
        "source": "pub use crate::indicators::macd::ti_macd;"
      },
      {
        "span": "indicators_index.rs:508:1: 508:46 (#0)",
        "source": "pub use crate::indicators::linreg::ti_linreg;"
      },
      {
        "span": "indicators_index.rs:473:1: 473:50 (#0)",
        "source": "pub use crate::indicators::decay::ti_decay_start;"
      },
      {
        "span": "indicators_index.rs:559:1: 559:50 (#0)",
        "source": "pub use crate::indicators::round::ti_round_start;"
      },
      {
        "span": "indicators_index.rs:615:1: 615:48 (#0)",
        "source": "pub use crate::indicators::vosc::ti_vosc_start;"
      },
      {
        "span": "indicators_index.rs:432:1: 432:40 (#0)",
        "source": "pub use crate::indicators::adx::ti_adx;"
      },
      {
        "span": "indicators_index.rs:468:1: 468:52 (#0)",
        "source": "pub use crate::indicators::crossover::ti_crossover;"
      },
      {
        "span": "indicators_index.rs:545:1: 545:46 (#0)",
        "source": "pub use crate::indicators::obv::ti_obv_start;"
      },
      {
        "span": "indicators_index.rs:495:1: 495:52 (#0)",
        "source": "pub use crate::indicators::fisher::ti_fisher_start;"
      },
      {
        "span": "indicators_index.rs:422:1: 422:40 (#0)",
        "source": "pub use crate::indicators::abs::ti_abs;"
      },
      {
        "span": "indicators_index.rs:575:1: 575:50 (#0)",
        "source": "pub use crate::indicators::stoch::ti_stoch_start;"
      },
      {
        "span": "indicators_index.rs:612:1: 612:54 (#0)",
        "source": "pub use crate::indicators::volatility::ti_volatility;"
      },
      {
        "span": "indicators_index.rs:480:1: 480:38 (#0)",
        "source": "pub use crate::indicators::dm::ti_dm;"
      },
      {
        "span": "indicators_index.rs:542:1: 542:40 (#0)",
        "source": "pub use crate::indicators::nvi::ti_nvi;"
      },
      {
        "span": "indicators_index.rs:512:1: 512:56 (#0)",
        "source": "pub use crate::indicators::linregslope::ti_linregslope;"
      },
      {
        "span": "indicators_index.rs:465:1: 465:48 (#0)",
        "source": "pub use crate::indicators::cosh::ti_cosh_start;"
      },
      {
        "span": "indicators_index.rs:530:1: 530:40 (#0)",
        "source": "pub use crate::indicators::mfi::ti_mfi;"
      },
      {
        "span": "indicators_index.rs:532:1: 532:40 (#0)",
        "source": "pub use crate::indicators::min::ti_min;"
      },
      {
        "span": "indicators_index.rs:589:1: 589:50 (#0)",
        "source": "pub use crate::indicators::todeg::ti_todeg_start;"
      },
      {
        "span": "indicators_index.rs:449:1: 449:46 (#0)",
        "source": "pub use crate::indicators::atr::ti_atr_start;"
      },
      {
        "span": "indicators_index.rs:626:1: 626:40 (#0)",
        "source": "pub use crate::indicators::wma::ti_wma;"
      },
      {
        "span": "indicators_index.rs:563:1: 563:46 (#0)",
        "source": "pub use crate::indicators::sin::ti_sin_start;"
      },
      {
        "span": "indicators_index.rs:519:1: 519:48 (#0)",
        "source": "pub use crate::indicators::macd::ti_macd_start;"
      },
      {
        "span": "indicators_index.rs:606:1: 606:40 (#0)",
        "source": "pub use crate::indicators::var::ti_var;"
      },
      {
        "span": "indicators_index.rs:470:1: 470:40 (#0)",
        "source": "pub use crate::indicators::cvi::ti_cvi;"
      },
      {
        "span": "indicators_index.rs:440:1: 440:44 (#0)",
        "source": "pub use crate::indicators::aroon::ti_aroon;"
      },
      {
        "span": "indicators_index.rs:471:1: 471:46 (#0)",
        "source": "pub use crate::indicators::cvi::ti_cvi_start;"
      },
      {
        "span": "indicators_index.rs:462:1: 462:40 (#0)",
        "source": "pub use crate::indicators::cos::ti_cos;"
      },
      {
        "span": "indicators_index.rs:490:1: 490:40 (#0)",
        "source": "pub use crate::indicators::emv::ti_emv;"
      },
      {
        "span": "indicators_index.rs:435:1: 435:48 (#0)",
        "source": "pub use crate::indicators::adxr::ti_adxr_start;"
      },
      {
        "span": "indicators_index.rs:535:1: 535:46 (#0)",
        "source": "pub use crate::indicators::mom::ti_mom_start;"
      },
      {
        "span": "indicators_index.rs:608:1: 608:40 (#0)",
        "source": "pub use crate::indicators::vhf::ti_vhf;"
      },
      {
        "span": "indicators_index.rs:568:1: 568:42 (#0)",
        "source": "pub use crate::indicators::sqrt::ti_sqrt;"
      },
      {
        "span": "indicators_index.rs:603:1: 603:56 (#0)",
        "source": "pub use crate::indicators::typprice::ti_typprice_start;"
      },
      {
        "span": "indicators_index.rs:540:1: 540:42 (#0)",
        "source": "pub use crate::indicators::natr::ti_natr;"
      },
      {
        "span": "indicators_index.rs:576:1: 576:50 (#0)",
        "source": "pub use crate::indicators::stochrsi::ti_stochrsi;"
      },
      {
        "span": "indicators_index.rs:594:1: 594:44 (#0)",
        "source": "pub use crate::indicators::trima::ti_trima;"
      },
      {
        "span": "indicators_index.rs:610:1: 610:44 (#0)",
        "source": "pub use crate::indicators::vidya::ti_vidya;"
      },
      {
        "span": "indicators_index.rs:443:1: 443:56 (#0)",
        "source": "pub use crate::indicators::aroonosc::ti_aroonosc_start;"
      },
      {
        "span": "indicators_index.rs:500:1: 500:40 (#0)",
        "source": "pub use crate::indicators::hma::ti_hma;"
      },
      {
        "span": "indicators_index.rs:529:1: 529:56 (#0)",
        "source": "pub use crate::indicators::medprice::ti_medprice_start;"
      },
      {
        "span": "indicators_index.rs:446:1: 446:42 (#0)",
        "source": "pub use crate::indicators::atan::ti_atan;"
      },
      {
        "span": "indicators_index.rs:467:1: 467:56 (#0)",
        "source": "pub use crate::indicators::crossany::ti_crossany_start;"
      },
      {
        "span": "indicators_index.rs:522:1: 522:42 (#0)",
        "source": "pub use crate::indicators::mass::ti_mass;"
      },
      {
        "span": "indicators_index.rs:552:1: 552:46 (#0)",
        "source": "pub use crate::indicators::qstick::ti_qstick;"
      },
      {
        "span": "indicators_index.rs:593:1: 593:44 (#0)",
        "source": "pub use crate::indicators::tr::ti_tr_start;"
      },
      {
        "span": "indicators_index.rs:431:1: 431:50 (#0)",
        "source": "pub use crate::indicators::adosc::ti_adosc_start;"
      },
      {
        "span": "indicators_index.rs:538:1: 538:40 (#0)",
        "source": "pub use crate::indicators::mul::ti_mul;"
      },
      {
        "span": "indicators_index.rs:543:1: 543:46 (#0)",
        "source": "pub use crate::indicators::nvi::ti_nvi_start;"
      },
      {
        "span": "indicators_index.rs:547:1: 547:46 (#0)",
        "source": "pub use crate::indicators::ppo::ti_ppo_start;"
      },
      {
        "span": "indicators_index.rs:574:1: 574:44 (#0)",
        "source": "pub use crate::indicators::stoch::ti_stoch;"
      },
      {
        "span": "indicators_index.rs:553:1: 553:52 (#0)",
        "source": "pub use crate::indicators::qstick::ti_qstick_start;"
      },
      {
        "span": "indicators_index.rs:595:1: 595:50 (#0)",
        "source": "pub use crate::indicators::trima::ti_trima_start;"
      },
      {
        "span": "indicators_index.rs:456:1: 456:40 (#0)",
        "source": "pub use crate::indicators::cci::ti_cci;"
      },
      {
        "span": "indicators_index.rs:601:1: 601:46 (#0)",
        "source": "pub use crate::indicators::tsf::ti_tsf_start;"
      },
      {
        "span": "indicators_index.rs:588:1: 588:44 (#0)",
        "source": "pub use crate::indicators::todeg::ti_todeg;"
      },
      {
        "span": "indicators_index.rs:607:1: 607:46 (#0)",
        "source": "pub use crate::indicators::var::ti_var_start;"
      },
      {
        "span": "indicators_index.rs:587:1: 587:48 (#0)",
        "source": "pub use crate::indicators::tema::ti_tema_start;"
      },
      {
        "span": "indicators_index.rs:628:1: 628:44 (#0)",
        "source": "pub use crate::indicators::zlema::ti_zlema;"
      },
      {
        "span": "indicators_index.rs:555:1: 555:46 (#0)",
        "source": "pub use crate::indicators::roc::ti_roc_start;"
      },
      {
        "span": "indicators_index.rs:531:1: 531:46 (#0)",
        "source": "pub use crate::indicators::mfi::ti_mfi_start;"
      },
      {
        "span": "indicators_index.rs:434:1: 434:42 (#0)",
        "source": "pub use crate::indicators::adxr::ti_adxr;"
      },
      {
        "span": "indicators_index.rs:455:1: 455:46 (#0)",
        "source": "pub use crate::indicators::bop::ti_bop_start;"
      },
      {
        "span": "indicators_index.rs:557:1: 557:48 (#0)",
        "source": "pub use crate::indicators::rocr::ti_rocr_start;"
      },
      {
        "span": "indicators_index.rs:485:1: 485:44 (#0)",
        "source": "pub use crate::indicators::dx::ti_dx_start;"
      },
      {
        "span": "indicators_index.rs:501:1: 501:46 (#0)",
        "source": "pub use crate::indicators::hma::ti_hma_start;"
      },
      {
        "span": "indicators_index.rs:620:1: 620:48 (#0)",
        "source": "pub use crate::indicators::wcprice::ti_wcprice;"
      },
      {
        "span": "indicators_index.rs:441:1: 441:50 (#0)",
        "source": "pub use crate::indicators::aroon::ti_aroon_start;"
      },
      {
        "span": "indicators_index.rs:447:1: 447:48 (#0)",
        "source": "pub use crate::indicators::atan::ti_atan_start;"
      },
      {
        "span": "indicators_index.rs:611:1: 611:50 (#0)",
        "source": "pub use crate::indicators::vidya::ti_vidya_start;"
      },
      {
        "span": "indicators_index.rs:604:1: 604:46 (#0)",
        "source": "pub use crate::indicators::ultosc::ti_ultosc;"
      },
      {
        "span": "indicators_index.rs:430:1: 430:44 (#0)",
        "source": "pub use crate::indicators::adosc::ti_adosc;"
      },
      {
        "span": "indicators_index.rs:598:1: 598:44 (#0)",
        "source": "pub use crate::indicators::trunc::ti_trunc;"
      },
      {
        "span": "indicators_index.rs:539:1: 539:46 (#0)",
        "source": "pub use crate::indicators::mul::ti_mul_start;"
      },
      {
        "span": "indicators_index.rs:453:1: 453:52 (#0)",
        "source": "pub use crate::indicators::bbands::ti_bbands_start;"
      },
      {
        "span": "indicators_index.rs:496:1: 496:44 (#0)",
        "source": "pub use crate::indicators::floor::ti_floor;"
      },
      {
        "span": "indicators_index.rs:533:1: 533:46 (#0)",
        "source": "pub use crate::indicators::min::ti_min_start;"
      },
      {
        "span": "indicators_index.rs:622:1: 622:48 (#0)",
        "source": "pub use crate::indicators::wilders::ti_wilders;"
      },
      {
        "span": "indicators_index.rs:537:1: 537:46 (#0)",
        "source": "pub use crate::indicators::msw::ti_msw_start;"
      },
      {
        "span": "indicators_index.rs:556:1: 556:42 (#0)",
        "source": "pub use crate::indicators::rocr::ti_rocr;"
      },
      {
        "span": "indicators_index.rs:578:1: 578:40 (#0)",
        "source": "pub use crate::indicators::sub::ti_sub;"
      },
      {
        "span": "indicators_index.rs:457:1: 457:46 (#0)",
        "source": "pub use crate::indicators::cci::ti_cci_start;"
      },
      {
        "span": "indicators_index.rs:484:1: 484:38 (#0)",
        "source": "pub use crate::indicators::dx::ti_dx;"
      },
      {
        "span": "indicators_index.rs:433:1: 433:46 (#0)",
        "source": "pub use crate::indicators::adx::ti_adx_start;"
      },
      {
        "span": "indicators_index.rs:460:1: 460:40 (#0)",
        "source": "pub use crate::indicators::cmo::ti_cmo;"
      },
      {
        "span": "indicators_index.rs:592:1: 592:38 (#0)",
        "source": "pub use crate::indicators::tr::ti_tr;"
      },
      {
        "span": "indicators_index.rs:562:1: 562:40 (#0)",
        "source": "pub use crate::indicators::sin::ti_sin;"
      },
      {
        "span": "indicators_index.rs:605:1: 605:52 (#0)",
        "source": "pub use crate::indicators::ultosc::ti_ultosc_start;"
      },
      {
        "span": "indicators_index.rs:528:1: 528:50 (#0)",
        "source": "pub use crate::indicators::medprice::ti_medprice;"
      },
      {
        "span": "indicators_index.rs:454:1: 454:40 (#0)",
        "source": "pub use crate::indicators::bop::ti_bop;"
      },
      {
        "span": "indicators_index.rs:602:1: 602:50 (#0)",
        "source": "pub use crate::indicators::typprice::ti_typprice;"
      },
      {
        "span": "indicators_index.rs:503:1: 503:48 (#0)",
        "source": "pub use crate::indicators::kama::ti_kama_start;"
      },
      {
        "span": "indicators_index.rs:506:1: 506:40 (#0)",
        "source": "pub use crate::indicators::lag::ti_lag;"
      },
      {
        "span": "indicators_index.rs:573:1: 573:52 (#0)",
        "source": "pub use crate::indicators::stderr::ti_stderr_start;"
      },
      {
        "span": "indicators_index.rs:590:1: 590:44 (#0)",
        "source": "pub use crate::indicators::torad::ti_torad;"
      },
      {
        "span": "indicators_index.rs:461:1: 461:46 (#0)",
        "source": "pub use crate::indicators::cmo::ti_cmo_start;"
      },
      {
        "span": "indicators_index.rs:481:1: 481:44 (#0)",
        "source": "pub use crate::indicators::dm::ti_dm_start;"
      },
      {
        "span": "indicators_index.rs:492:1: 492:40 (#0)",
        "source": "pub use crate::indicators::exp::ti_exp;"
      },
      {
        "span": "indicators_index.rs:554:1: 554:40 (#0)",
        "source": "pub use crate::indicators::roc::ti_roc;"
      },
      {
        "span": "indicators_index.rs:464:1: 464:42 (#0)",
        "source": "pub use crate::indicators::cosh::ti_cosh;"
      },
      {
        "span": "indicators_index.rs:572:1: 572:46 (#0)",
        "source": "pub use crate::indicators::stderr::ti_stderr;"
      },
      {
        "span": "indicators_index.rs:437:1: 437:44 (#0)",
        "source": "pub use crate::indicators::ao::ti_ao_start;"
      },
      {
        "span": "indicators_index.rs:463:1: 463:46 (#0)",
        "source": "pub use crate::indicators::cos::ti_cos_start;"
      },
      {
        "span": "indicators_index.rs:548:1: 548:42 (#0)",
        "source": "pub use crate::indicators::psar::ti_psar;"
      },
      {
        "span": "indicators_index.rs:502:1: 502:42 (#0)",
        "source": "pub use crate::indicators::kama::ti_kama;"
      },
      {
        "span": "indicators_index.rs:427:1: 427:44 (#0)",
        "source": "pub use crate::indicators::ad::ti_ad_start;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:60 ~ c2rust_out[3c70]::fuzzer::banner)",
    "span": "fuzzer.rs:102:1: 121:2 (#0)",
    "pieces": [
      "fuzzer.rs:102:1: 121:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 20,
    "source": "pub unsafe extern \"C\" fn banner() {\n    printf(b\"  ______ _    _ __________________ _____  \\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char);\n    printf(b\" |  ____| |  | |___  /___  /  ____|  __ \\\\ \\n\\x00\" as *const u8\n               as *const std::os::raw::c_char);\n    printf(b\" | |__  | |  | |  / /   / /| |__  | |__) |\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char);\n    printf(b\" |  __| | |  | | / /   / / |  __| |  _  / \\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char);\n    printf(b\" | |    | |__| |/ /__ / /__| |____| | \\\\ \\\\ \\n\\x00\" as *const u8\n               as *const std::os::raw::c_char);\n    printf(b\" |_|     \\\\____//_____/_____|______|_|  \\\\_\\\\\\n\\n\\x00\" as\n               *const u8 as *const std::os::raw::c_char);\n    printf(b\"This program tries each indicator with a lot of options.\\n\\x00\"\n               as *const u8 as *const std::os::raw::c_char);\n    printf(b\"It\\'s good for checking for crashes or assertion failures.\\n\\x00\"\n               as *const u8 as *const std::os::raw::c_char);\n    printf(b\"Use with a memory tool to check for memory errors in ti.\\n\\n\\x00\"\n               as *const u8 as *const std::os::raw::c_char);\n}",
    "calls": [
      {
        "caller": "DefId(0:75 ~ c2rust_out[3c70]::fuzzer::main_0)",
        "span": "fuzzer.rs:371:5: 371:14 (#0)",
        "source": "banner();"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "fuzzer.rs:17:1: 17:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      },
      {
        "span": "fuzzer.rs:18:1: 18:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:75 ~ c2rust_out[3c70]::fuzzer::main_0)",
    "span": "fuzzer.rs:369:1: 387:2 (#0)",
    "pieces": [
      "fuzzer.rs:369:1: 387:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 19,
    "source": "unsafe fn main_0(mut argc: std::os::raw::c_int, mut argv: *mut *mut std::os::raw::c_char)\n -> std::os::raw::c_int {\n    banner();\n    if argc > 1 as std::os::raw::c_int {\n        let mut info: *const ti_indicator_info =\n            ti_find_indicator(*argv.offset(1 as std::os::raw::c_int as isize));\n        if !info.is_null() { stress(info); }\n    } else {\n        let mut info_0: *const ti_indicator_info = ti_indicators.as_mut_ptr();\n        loop  {\n            stress(info_0);\n            info_0 = info_0.offset(1);\n            if (*info_0).name.is_null() { break ; }\n        }\n    }\n    printf(b\"\\r                                                  \\rDone\\n\\x00\"\n               as *const u8 as *const std::os::raw::c_char);\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:76 ~ c2rust_out[3c70]::fuzzer::main)",
        "span": "fuzzer.rs:394:5: 398:6 (#0)",
        "source": "unsafe {\n        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,\n                                    args.as_mut_ptr() as\n                                        *mut *mut std::os::raw::c_char) as i32)\n    }"
      }
    ],
    "globals": [
      {
        "span": "indicators_index.rs:677:1: 11045:7 (#0)",
        "source": "pub static mut ti_indicators: [ti_indicator_info; 105] =\n    unsafe {\n        [{\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"abs\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Absolute Value\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_abs_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_abs as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"abs\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"acos\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arccosine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_acos_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_acos as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"acos\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Accumulation/Distribution Line\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ad\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"add\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Addition\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_add_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_add as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"add\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Accumulation/Distribution Oscillator\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"adosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adx\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Directional Movement Index\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adx_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adx as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adxr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Directional Movement Rating\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adxr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adxr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ao\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Awesome Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ao_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ao as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ao\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"apo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Absolute Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_apo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_apo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"apo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"aroon\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Aroon\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_aroon_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_aroon as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"aroon_down\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"aroon_up\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"aroonosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Aroon Oscillator\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_aroonosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_aroonosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"aroonosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"asin\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arcsine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_asin_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_asin as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"asin\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"atan\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arctangent\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_atan_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_atan as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"atan\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"atr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average True Range\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_atr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_atr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"atr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"avgprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_avgprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_avgprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"avgprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"bbands\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Bollinger Bands\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_bbands_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_bbands as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 3 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"stddev\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"bbands_lower\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"bbands_middle\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"bbands_upper\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"bop\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Balance of Power\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_bop_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_bop as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"bop\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cci\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Commodity Channel Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cci_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cci as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cci\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ceil\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Ceiling\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ceil_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ceil as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ceil\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cmo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Chande Momentum Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cmo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cmo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cmo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cos\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Cosine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cos_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cos as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cos\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cosh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Cosine\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cosh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cosh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cosh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"crossany\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Crossany\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_crossany_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_crossany as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"crossany\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"crossover\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Crossover\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_crossover_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_crossover as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"crossover\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Chaikins Volatility\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"decay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Decay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_decay_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_decay as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"decay\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Double Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"di\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Indicator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_di_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_di as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"plus_di\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"minus_di\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"div\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Division\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_div_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_div as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"div\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dm\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Movement\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dm_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dm as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"plus_dm\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"minus_dm\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dpo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Detrended Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dpo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dpo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dpo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dx\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Movement Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dx_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dx as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"edecay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Exponential Decay\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_edecay_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_edecay as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"edecay\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Exponential Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"emv\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Ease of Movement\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_emv_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_emv as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"emv\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"exp\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Exponential\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_exp_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_exp as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"exp\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"fisher\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Fisher Transform\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_fisher_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_fisher as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"fisher\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"fisher_signal\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"floor\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Floor\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_floor_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_floor as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"floor\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"fosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Forecast Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_fosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_fosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"fosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"hma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Hull Moving Average\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_hma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_hma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"hma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"kama\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Kaufman Adaptive Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_kama_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_kama as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"kama\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"kvo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Klinger Volume Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_kvo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_kvo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"kvo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"lag\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Lag\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_lag_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_lag as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"lag\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linreg\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linreg_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linreg as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linreg\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linregintercept\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression Intercept\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linregintercept_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linregintercept as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linregintercept\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linregslope\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression Slope\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linregslope_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linregslope as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linregslope\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ln\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Natural Log\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ln_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ln as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ln\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"log10\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Base-10 Log\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_log10_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_log10 as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"log10\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"macd\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Moving Average Convergence/Divergence\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_macd_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_macd as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 3 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"signal period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"macd\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"macd_signal\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"macd_histogram\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"marketfi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Market Facilitation Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_marketfi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_marketfi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"marketfi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mass\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mass Index\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mass_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mass as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mass\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"max\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Maximum In Period\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_max_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_max as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"max\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"md\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mean Deviation Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_md_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_md as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"md\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"medprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Median Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_medprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_medprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"medprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mfi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Money Flow Index\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mfi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mfi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mfi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"min\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Minimum In Period\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_min_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_min as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"min\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mom\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Momentum\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mom_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mom as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mom\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"msw\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mesa Sine Wave\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_msw_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_msw as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"msw_sine\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"msw_lead\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mul\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Multiplication\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mul_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mul as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mul\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"natr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Normalized Average True Range\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_natr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_natr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"natr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"nvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Negative Volume Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_nvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_nvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"nvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"obv\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"On Balance Volume\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_obv_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_obv as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"obv\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ppo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Percentage Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ppo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ppo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ppo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"psar\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Parabolic SAR\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_psar_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_psar as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"acceleration factor step\\x00\" as\n                                            *const u8 as *const std::os::raw::c_char\n                                            as *mut std::os::raw::c_char,\n                                        b\"acceleration factor maximum\\x00\" as\n                                            *const u8 as *const std::os::raw::c_char\n                                            as *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"psar\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"pvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Positive Volume Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_pvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_pvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"pvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"qstick\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Qstick\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_qstick_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_qstick as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"qstick\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"roc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Rate of Change\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_roc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_roc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"roc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"rocr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Rate of Change Ratio\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_rocr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_rocr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"rocr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"round\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Round\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_round_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_round as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"round\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"rsi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Relative Strength Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_rsi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_rsi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"rsi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sin\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Sine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sin_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sin as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sin\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sinh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Sine\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sinh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sinh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sinh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Simple Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sqrt\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Square Root\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sqrt_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sqrt as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sqrt\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stddev\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Standard Deviation Over Period\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stddev_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stddev as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stddev\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stderr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Standard Error Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stderr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stderr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stderr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stoch\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Stochastic Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stoch_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stoch as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"%k period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"%k slowing period\\x00\" as *const u8\n                                            as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"%d period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stoch_k\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"stoch_d\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stochrsi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Stochastic RSI\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stochrsi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stochrsi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stochrsi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sub\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Subtraction\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sub_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sub as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sub\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sum\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Sum Over Period\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sum_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sum as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sum\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tan\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Tangent\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tan_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tan as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tan\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tanh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Tangent\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tanh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tanh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tanh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Triple Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"todeg\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Degree Conversion\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_todeg_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_todeg as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"degrees\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"torad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Radian Conversion\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_torad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_torad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"radians\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"True Range\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trima\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Triangular Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trima_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trima as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trima\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trix\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Trix\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trix_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trix as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trix\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trunc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Truncate\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trunc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trunc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trunc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tsf\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Time Series Forecast\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tsf_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tsf as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tsf\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"typprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Typical Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_typprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_typprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"typprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ultosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Ultimate Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ultosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ultosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"medium period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ultosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"var\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Variance Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_var_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_var as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"var\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vhf\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vertical Horizontal Filter\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vhf_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vhf as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vhf\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vidya\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Variable Index Dynamic Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vidya_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vidya as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"alpha\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vidya\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"volatility\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Annualized Historical Volatility\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_volatility_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_volatility as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"volatility\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Volume Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vwma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Volume Weighted Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vwma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vwma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vwma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Williams Accumulation/Distribution\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wad\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wcprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Weighted Close Price\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wcprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wcprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wcprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wilders\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Wilders Smoothing\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wilders_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wilders as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wilders\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"willr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Williams %R\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_willr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_willr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"willr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Weighted Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"zlema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Zero-Lag Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_zlema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_zlema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"zlema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       0 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       0 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start: None,\n                                   indicator: None,\n                                   type_0: 0 as std::os::raw::c_int,\n                                   inputs: 0 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 0 as std::os::raw::c_int,\n                                   input_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         }]\n    };"
      }
    ],
    "imports": [
      {
        "span": "fuzzer.rs:18:1: 18:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "fuzzer.rs:17:1: 17:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:76 ~ c2rust_out[3c70]::fuzzer::main)",
    "span": "fuzzer.rs:388:1: 399:2 (#0)",
    "pieces": [
      "fuzzer.rs:388:1: 399:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "pub fn main() {\n    let mut args: Vec<*mut std::os::raw::c_char> = Vec::new();\n    for arg in ::std::env::args() {\n        args.push(::std::ffi::CString::new(arg).expect(\"Failed to convert argument into CString.\").into_raw());\n    };\n    args.push(::std::ptr::null_mut());\n    unsafe {\n        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,\n                                    args.as_mut_ptr() as\n                                        *mut *mut std::os::raw::c_char) as i32)\n    }\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "fuzzer.rs:18:1: 18:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "fuzzer.rs:17:1: 17:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:668 ~ c2rust_out[3c70]::indicators::tema::ti_tema)",
    "span": "indicators/tema.rs:37:1: 94:2 (#0)",
    "pieces": [
      "indicators/tema.rs:37:1: 94:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 58,
    "source": "pub unsafe extern \"C\" fn ti_tema(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_tema_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let per1: std::os::raw::c_double = 1.0f64 - per;\n    /*Calculate EMA(input)*/\n    let mut ema: std::os::raw::c_double = *input.offset(0 as std::os::raw::c_int as isize);\n    /*Calculate EMA(EMA(input))*/\n    let mut ema2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    /*Calculate EMA(EMA(EMA(input)))*/\n    let mut ema3: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        ema = ema * per1 + *input.offset(i as isize) * per;\n        if i == period - 1 as std::os::raw::c_int { ema2 = ema }\n        if i >= period - 1 as std::os::raw::c_int {\n            ema2 = ema2 * per1 + ema * per;\n            if i == (period - 1 as std::os::raw::c_int) * 2 as std::os::raw::c_int {\n                ema3 = ema2\n            }\n            if i >= (period - 1 as std::os::raw::c_int) * 2 as std::os::raw::c_int {\n                ema3 = ema3 * per1 + ema2 * per;\n                if i >= (period - 1 as std::os::raw::c_int) * 3 as std::os::raw::c_int {\n                    *output =\n                        3 as std::os::raw::c_int as std::os::raw::c_double * ema -\n                            3 as std::os::raw::c_int as std::os::raw::c_double * ema2 + ema3;\n                    output = output.offset(1)\n                }\n            }\n        }\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_tema_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_tema\\x00\")).as_ptr(),\n                     b\"indicators/tema.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 76 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_tema_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:351 ~ c2rust_out[3c70]::indicators::hma::ti_hma_start)",
    "span": "indicators/hma.rs:41:1: 48:2 (#0)",
    "pieces": [
      "indicators/hma.rs:41:1: 48:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 8,
    "source": "pub unsafe extern \"C\" fn ti_hma_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let periodsqrt: std::os::raw::c_int =\n        sqrt(period as std::os::raw::c_double) as std::os::raw::c_int;\n    return period + periodsqrt - 2 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/hma.rs:13:1: 13:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "indicators/hma.rs:14:1: 14:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:171 ~ c2rust_out[3c70]::indicators::atr::ti_atr)",
    "span": "indicators/atr.rs:38:1: 111:2 (#0)",
    "pieces": [
      "indicators/atr.rs:38:1: 111:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 74,
    "source": "pub unsafe extern \"C\" fn ti_atr(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_atr_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut truerange: std::os::raw::c_double = 0.;\n    sum +=\n        *high.offset(0 as std::os::raw::c_int as isize) -\n            *low.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < period {\n        let l: std::os::raw::c_double = *low.offset(i as isize);\n        let h: std::os::raw::c_double = *high.offset(i as isize);\n        let c: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych: std::os::raw::c_double = fabs(h - c);\n        let ycl: std::os::raw::c_double = fabs(l - c);\n        let mut v: std::os::raw::c_double = h - l;\n        if ych > v { v = ych }\n        if ycl > v { v = ycl }\n        truerange = v;\n        sum += truerange;\n        i += 1\n    }\n    let mut val: std::os::raw::c_double = sum / period as std::os::raw::c_double;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = val;\n    i = period;\n    while i < size {\n        let l_0: std::os::raw::c_double = *low.offset(i as isize);\n        let h_0: std::os::raw::c_double = *high.offset(i as isize);\n        let c_0: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych_0: std::os::raw::c_double = fabs(h_0 - c_0);\n        let ycl_0: std::os::raw::c_double = fabs(l_0 - c_0);\n        let mut v_0: std::os::raw::c_double = h_0 - l_0;\n        if ych_0 > v_0 { v_0 = ych_0 }\n        if ycl_0 > v_0 { v_0 = ycl_0 }\n        truerange = v_0;\n        val = (truerange - val) * per + val;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = val;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_atr_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_atr\\x00\")).as_ptr(),\n                     b\"indicators/atr.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 69 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_atr_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:215 ~ c2rust_out[3c70]::indicators::cmo::ti_cmo_start)",
    "span": "indicators/cmo.rs:8:1: 11:2 (#0)",
    "pieces": [
      "indicators/cmo.rs:8:1: 11:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_cmo_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:191 ~ c2rust_out[3c70]::indicators::bop::ti_bop)",
    "span": "indicators/bop.rs:30:1: 59:2 (#0)",
    "pieces": [
      "indicators/bop.rs:30:1: 59:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 30,
    "source": "pub unsafe extern \"C\" fn ti_bop(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut open: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(3 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        let mut hl: std::os::raw::c_double =\n            *high.offset(i as isize) - *low.offset(i as isize);\n        if hl <= 0.0f64 {\n            *output.offset(i as isize) = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else {\n            *output.offset(i as isize) =\n                (*close.offset(i as isize) - *open.offset(i as isize)) / hl\n        }\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:546 ~ c2rust_out[3c70]::indicators::qstick::ti_qstick_start)",
    "span": "indicators/qstick.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/qstick.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_qstick_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:176 ~ c2rust_out[3c70]::indicators::avgprice::ti_avgprice)",
    "span": "indicators/avgprice.rs:30:1: 55:2 (#0)",
    "pieces": [
      "indicators/avgprice.rs:30:1: 55:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 26,
    "source": "pub unsafe extern \"C\" fn ti_avgprice(mut size: std::os::raw::c_int,\n                                     mut inputs: *const *const std::os::raw::c_double,\n                                     mut options: *const std::os::raw::c_double,\n                                     mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut open: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(3 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            (*open.offset(i as isize) + *high.offset(i as isize) +\n                 *low.offset(i as isize) + *close.offset(i as isize)) *\n                0.25f64;\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:681 ~ c2rust_out[3c70]::indicators::tr::ti_tr)",
    "span": "indicators/tr.rs:34:1: 68:2 (#0)",
    "pieces": [
      "indicators/tr.rs:34:1: 68:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 35,
    "source": "pub unsafe extern \"C\" fn ti_tr(mut size: std::os::raw::c_int,\n                               mut inputs: *const *const std::os::raw::c_double,\n                               mut options: *const std::os::raw::c_double,\n                               mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut truerange: std::os::raw::c_double = 0.;\n    *output.offset(0 as std::os::raw::c_int as isize) =\n        *high.offset(0 as std::os::raw::c_int as isize) -\n            *low.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        let l: std::os::raw::c_double = *low.offset(i as isize);\n        let h: std::os::raw::c_double = *high.offset(i as isize);\n        let c: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych: std::os::raw::c_double = fabs(h - c);\n        let ycl: std::os::raw::c_double = fabs(l - c);\n        let mut v: std::os::raw::c_double = h - l;\n        if ych > v { v = ych }\n        if ycl > v { v = ycl }\n        truerange = v;\n        *output.offset(i as isize) = truerange;\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:657 ~ c2rust_out[3c70]::indicators::tan::ti_tan)",
    "span": "indicators/tan.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/tan.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_tan(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = tan(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1562 ~ c2rust_out[3c70]::utils::buffer::ti_buffer_free)",
    "span": "utils/buffer.rs:50:1: 52:2 (#0)",
    "pieces": [
      "utils/buffer.rs:50:1: 52:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "pub unsafe extern \"C\" fn ti_buffer_free(mut buffer: *mut ti_buffer) {\n    free(buffer as *mut std::os::raw::c_void);\n}",
    "calls": [
      {
        "caller": "DefId(0:352 ~ c2rust_out[3c70]::indicators::hma::ti_hma)",
        "span": "indicators/hma.rs:137:5: 137:26 (#0)",
        "source": "ti_buffer_free(buff);"
      },
      {
        "caller": "DefId(0:725 ~ c2rust_out[3c70]::indicators::ultosc::ti_ultosc)",
        "span": "indicators/ultosc.rs:156:5: 156:28 (#0)",
        "source": "ti_buffer_free(bp_buf);"
      },
      {
        "caller": "DefId(0:471 ~ c2rust_out[3c70]::indicators::mfi::ti_mfi)",
        "span": "indicators/mfi.rs:129:5: 129:26 (#0)",
        "source": "ti_buffer_free(down);"
      },
      {
        "caller": "DefId(0:625 ~ c2rust_out[3c70]::indicators::stoch::ti_stoch)",
        "span": "indicators/stoch.rs:163:5: 163:27 (#0)",
        "source": "ti_buffer_free(k_sum);"
      },
      {
        "caller": "DefId(0:1552 ~ c2rust_out[3c70]::smoke::test_buffer)",
        "span": "smoke.rs:606:5: 606:23 (#0)",
        "source": "ti_buffer_free(b);"
      },
      {
        "caller": "DefId(0:725 ~ c2rust_out[3c70]::indicators::ultosc::ti_ultosc)",
        "span": "indicators/ultosc.rs:157:5: 157:27 (#0)",
        "source": "ti_buffer_free(r_buf);"
      },
      {
        "caller": "DefId(0:120 ~ c2rust_out[3c70]::indicators::adxr::ti_adxr)",
        "span": "indicators/adxr.rs:196:5: 196:26 (#0)",
        "source": "ti_buffer_free(adxr);"
      },
      {
        "caller": "DefId(0:439 ~ c2rust_out[3c70]::indicators::mass::ti_mass)",
        "span": "indicators/mass.rs:108:5: 108:25 (#0)",
        "source": "ti_buffer_free(sum);"
      },
      {
        "caller": "DefId(0:625 ~ c2rust_out[3c70]::indicators::stoch::ti_stoch)",
        "span": "indicators/stoch.rs:164:5: 164:27 (#0)",
        "source": "ti_buffer_free(d_sum);"
      },
      {
        "caller": "DefId(0:641 ~ c2rust_out[3c70]::indicators::stochrsi::ti_stochrsi)",
        "span": "indicators/stochrsi.rs:166:5: 166:25 (#0)",
        "source": "ti_buffer_free(rsi);"
      },
      {
        "caller": "DefId(0:471 ~ c2rust_out[3c70]::indicators::mfi::ti_mfi)",
        "span": "indicators/mfi.rs:128:5: 128:24 (#0)",
        "source": "ti_buffer_free(up);"
      },
      {
        "caller": "DefId(0:246 ~ c2rust_out[3c70]::indicators::cvi::ti_cvi)",
        "span": "indicators/cvi.rs:94:5: 94:25 (#0)",
        "source": "ti_buffer_free(lag);"
      },
      {
        "caller": "DefId(0:204 ~ c2rust_out[3c70]::indicators::cci::ti_cci)",
        "span": "indicators/cci.rs:79:5: 79:25 (#0)",
        "source": "ti_buffer_free(sum);"
      }
    ],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1561 ~ c2rust_out[3c70]::utils::buffer::ti_buffer_new)",
    "span": "utils/buffer.rs:34:1: 48:2 (#0)",
    "pieces": [
      "utils/buffer.rs:34:1: 48:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 15,
    "source": "pub unsafe extern \"C\" fn ti_buffer_new(mut size: std::os::raw::c_int)\n -> *mut ti_buffer {\n    let s: std::os::raw::c_int =\n        ::std::mem::size_of::<ti_buffer>() as std::os::raw::c_ulong as std::os::raw::c_int +\n            (size - 1 as std::os::raw::c_int) *\n                ::std::mem::size_of::<std::os::raw::c_double>() as std::os::raw::c_ulong as\n                    std::os::raw::c_int;\n    let mut ret: *mut ti_buffer =\n        malloc(s as std::os::raw::c_uint as std::os::raw::c_ulong) as *mut ti_buffer;\n    (*ret).size = size;\n    (*ret).pushes = 0 as std::os::raw::c_int;\n    (*ret).index = 0 as std::os::raw::c_int;\n    (*ret).sum = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    return ret;\n}",
    "calls": [
      {
        "caller": "DefId(0:625 ~ c2rust_out[3c70]::indicators::stoch::ti_stoch)",
        "span": "indicators/stoch.rs:84:5: 84:60 (#0)",
        "source": "let mut d_sum: *mut ti_buffer = ti_buffer_new(dperiod);"
      },
      {
        "caller": "DefId(0:1552 ~ c2rust_out[3c70]::smoke::test_buffer)",
        "span": "smoke.rs:421:5: 421:73 (#0)",
        "source": "let mut b: *mut ti_buffer = ti_buffer_new(3 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:120 ~ c2rust_out[3c70]::indicators::adxr::ti_adxr)",
        "span": "indicators/adxr.rs:118:5: 118:85 (#0)",
        "source": "let mut adxr: *mut ti_buffer = ti_buffer_new(period - 1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:246 ~ c2rust_out[3c70]::indicators::cvi::ti_cvi)",
        "span": "indicators/cvi.rs:64:5: 64:57 (#0)",
        "source": "let mut lag: *mut ti_buffer = ti_buffer_new(period);"
      },
      {
        "caller": "DefId(0:625 ~ c2rust_out[3c70]::indicators::stoch::ti_stoch)",
        "span": "indicators/stoch.rs:83:5: 83:58 (#0)",
        "source": "let mut k_sum: *mut ti_buffer = ti_buffer_new(kslow);"
      },
      {
        "caller": "DefId(0:641 ~ c2rust_out[3c70]::indicators::stochrsi::ti_stochrsi)",
        "span": "indicators/stochrsi.rs:60:5: 60:57 (#0)",
        "source": "let mut rsi: *mut ti_buffer = ti_buffer_new(period);"
      },
      {
        "caller": "DefId(0:471 ~ c2rust_out[3c70]::indicators::mfi::ti_mfi)",
        "span": "indicators/mfi.rs:47:5: 47:58 (#0)",
        "source": "let mut down: *mut ti_buffer = ti_buffer_new(period);"
      },
      {
        "caller": "DefId(0:204 ~ c2rust_out[3c70]::indicators::cci::ti_cci)",
        "span": "indicators/cci.rs:44:5: 44:57 (#0)",
        "source": "let mut sum: *mut ti_buffer = ti_buffer_new(period);"
      },
      {
        "caller": "DefId(0:439 ~ c2rust_out[3c70]::indicators::mass::ti_mass)",
        "span": "indicators/mass.rs:75:5: 75:57 (#0)",
        "source": "let mut sum: *mut ti_buffer = ti_buffer_new(period);"
      },
      {
        "caller": "DefId(0:725 ~ c2rust_out[3c70]::indicators::ultosc::ti_ultosc)",
        "span": "indicators/ultosc.rs:67:5: 67:65 (#0)",
        "source": "let mut bp_buf: *mut ti_buffer = ti_buffer_new(long_period);"
      },
      {
        "caller": "DefId(0:725 ~ c2rust_out[3c70]::indicators::ultosc::ti_ultosc)",
        "span": "indicators/ultosc.rs:68:5: 68:64 (#0)",
        "source": "let mut r_buf: *mut ti_buffer = ti_buffer_new(long_period);"
      },
      {
        "caller": "DefId(0:471 ~ c2rust_out[3c70]::indicators::mfi::ti_mfi)",
        "span": "indicators/mfi.rs:46:5: 46:56 (#0)",
        "source": "let mut up: *mut ti_buffer = ti_buffer_new(period);"
      },
      {
        "caller": "DefId(0:352 ~ c2rust_out[3c70]::indicators::hma::ti_hma)",
        "span": "indicators/hma.rs:103:5: 103:62 (#0)",
        "source": "let mut buff: *mut ti_buffer = ti_buffer_new(periodsqrt);"
      }
    ],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:625 ~ c2rust_out[3c70]::indicators::stoch::ti_stoch)",
    "span": "indicators/stoch.rs:50:1: 188:2 (#0)",
    "pieces": [
      "indicators/stoch.rs:50:1: 188:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 139,
    "source": "pub unsafe extern \"C\" fn ti_stoch(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let kperiod: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let kslow: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let dperiod: std::os::raw::c_int =\n        *options.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let kper: std::os::raw::c_double = 1.0f64 / kslow as std::os::raw::c_double;\n    let dper: std::os::raw::c_double = 1.0f64 / dperiod as std::os::raw::c_double;\n    let mut stoch: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut stoch_ma: *mut std::os::raw::c_double =\n        *outputs.offset(1 as std::os::raw::c_int as isize);\n    if kperiod < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if kslow < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if dperiod < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_stoch_start(options) { return 0 as std::os::raw::c_int }\n    let mut trail: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut maxi: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut mini: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut max: std::os::raw::c_double = *high.offset(0 as std::os::raw::c_int as isize);\n    let mut min: std::os::raw::c_double = *low.offset(0 as std::os::raw::c_int as isize);\n    let mut bar: std::os::raw::c_double = 0.;\n    let mut k_sum: *mut ti_buffer = ti_buffer_new(kslow);\n    let mut d_sum: *mut ti_buffer = ti_buffer_new(dperiod);\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        if i >= kperiod { trail += 1 }\n        /* Maintain highest. */\n        bar = *high.offset(i as isize);\n        if maxi < trail {\n            maxi = trail;\n            max = *high.offset(maxi as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *high.offset(j as isize);\n                if bar >= max { max = bar; maxi = j }\n            }\n        } else if bar >= max { maxi = i; max = bar }\n        /* Maintain lowest. */\n        bar = *low.offset(i as isize);\n        if mini < trail {\n            mini = trail;\n            min = *low.offset(mini as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *low.offset(j as isize);\n                if bar <= min { min = bar; mini = j }\n            }\n        } else if bar <= min { mini = i; min = bar }\n        /* Calculate it. */\n        let kdiff: std::os::raw::c_double = max - min;\n        let kfast: std::os::raw::c_double =\n            if kdiff == 0.0f64 {\n                0.0f64\n            } else {\n                (100 as std::os::raw::c_int as std::os::raw::c_double) *\n                    ((*close.offset(i as isize) - min) / kdiff)\n            };\n        if (*k_sum).pushes >= (*k_sum).size {\n            (*k_sum).sum -=\n                *(*k_sum).vals.as_mut_ptr().offset((*k_sum).index as isize)\n        }\n        (*k_sum).sum += kfast;\n        *(*k_sum).vals.as_mut_ptr().offset((*k_sum).index as isize) = kfast;\n        (*k_sum).pushes += 1 as std::os::raw::c_int;\n        (*k_sum).index = (*k_sum).index + 1 as std::os::raw::c_int;\n        if (*k_sum).index >= (*k_sum).size {\n            (*k_sum).index = 0 as std::os::raw::c_int\n        }\n        if i >= kperiod - 1 as std::os::raw::c_int + kslow - 1 as std::os::raw::c_int {\n            let k: std::os::raw::c_double = (*k_sum).sum * kper;\n            if (*d_sum).pushes >= (*d_sum).size {\n                (*d_sum).sum -=\n                    *(*d_sum).vals.as_mut_ptr().offset((*d_sum).index as\n                                                           isize)\n            }\n            (*d_sum).sum += k;\n            *(*d_sum).vals.as_mut_ptr().offset((*d_sum).index as isize) = k;\n            (*d_sum).pushes += 1 as std::os::raw::c_int;\n            (*d_sum).index = (*d_sum).index + 1 as std::os::raw::c_int;\n            if (*d_sum).index >= (*d_sum).size {\n                (*d_sum).index = 0 as std::os::raw::c_int\n            }\n            if i >=\n                   kperiod - 1 as std::os::raw::c_int + kslow - 1 as std::os::raw::c_int +\n                       dperiod - 1 as std::os::raw::c_int {\n                let fresh0 = stoch;\n                stoch = stoch.offset(1);\n                *fresh0 = k;\n                let fresh1 = stoch_ma;\n                stoch_ma = stoch_ma.offset(1);\n                *fresh1 = (*d_sum).sum * dper\n            }\n        }\n        i += 1\n    }\n    ti_buffer_free(k_sum);\n    ti_buffer_free(d_sum);\n    if !(stoch.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                        isize)) as\n             std::os::raw::c_long == (size - ti_stoch_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 9],\n                                               &[std::os::raw::c_char; 9]>(b\"ti_stoch\\x00\")).as_ptr(),\n                     b\"indicators/stoch.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 125 as std::os::raw::c_int,\n                     b\"stoch - outputs[0] == size - ti_stoch_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    if !(stoch_ma.offset_from(*outputs.offset(1 as std::os::raw::c_int as\n                                                           isize)) as\n             std::os::raw::c_long == (size - ti_stoch_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 9],\n                                               &[std::os::raw::c_char; 9]>(b\"ti_stoch\\x00\")).as_ptr(),\n                     b\"indicators/stoch.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 126 as std::os::raw::c_int,\n                     b\"stoch_ma - outputs[1] == size - ti_stoch_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/stoch.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "indicators/stoch.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:323 ~ c2rust_out[3c70]::indicators::fisher::ti_fisher)",
    "span": "indicators/fisher.rs:38:1: 154:2 (#0)",
    "pieces": [
      "indicators/fisher.rs:38:1: 154:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 117,
    "source": "pub unsafe extern \"C\" fn ti_fisher(mut size: std::os::raw::c_int,\n                                   mut inputs: *const *const std::os::raw::c_double,\n                                   mut options: *const std::os::raw::c_double,\n                                   mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut fisher: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut signal: *mut std::os::raw::c_double =\n        *outputs.offset(1 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_fisher_start(options) { return 0 as std::os::raw::c_int }\n    let mut trail: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut maxi: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut mini: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut max: std::os::raw::c_double =\n        0.5f64 *\n            (*high.offset(0 as std::os::raw::c_int as isize) +\n                 *low.offset(0 as std::os::raw::c_int as isize));\n    let mut min: std::os::raw::c_double =\n        0.5f64 *\n            (*high.offset(0 as std::os::raw::c_int as isize) +\n                 *low.offset(0 as std::os::raw::c_int as isize));\n    let mut val1: std::os::raw::c_double = 0.0f64;\n    let mut bar: std::os::raw::c_double = 0.;\n    let mut fish: std::os::raw::c_double = 0.0f64;\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        /* Maintain highest. */\n        bar = 0.5f64 * (*high.offset(i as isize) + *low.offset(i as isize));\n        if maxi < trail {\n            maxi = trail;\n            max =\n                0.5f64 *\n                    (*high.offset(maxi as isize) +\n                         *low.offset(maxi as isize));\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar =\n                    0.5f64 *\n                        (*high.offset(j as isize) + *low.offset(j as isize));\n                if bar >= max { max = bar; maxi = j }\n            }\n        } else if bar >= max { maxi = i; max = bar }\n        /* Maintain lowest. */\n        bar = 0.5f64 * (*high.offset(i as isize) + *low.offset(i as isize));\n        if mini < trail {\n            mini = trail;\n            min =\n                0.5f64 *\n                    (*high.offset(mini as isize) +\n                         *low.offset(mini as isize));\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar =\n                    0.5f64 *\n                        (*high.offset(j as isize) + *low.offset(j as isize));\n                if bar <= min { min = bar; mini = j }\n            }\n        } else if bar <= min { mini = i; min = bar }\n        let mut mm: std::os::raw::c_double = max - min;\n        if mm == 0.0f64 { mm = 0.001f64 }\n        val1 =\n            0.33f64 * 2.0f64 *\n                ((0.5f64 *\n                      (*high.offset(i as isize) + *low.offset(i as isize)) -\n                      min) / mm - 0.5f64) + 0.67f64 * val1;\n        if val1 > 0.99f64 { val1 = 0.999f64 }\n        if val1 < -0.99f64 { val1 = -0.999f64 }\n        let fresh0 = signal;\n        signal = signal.offset(1);\n        *fresh0 = fish;\n        fish =\n            0.5f64 * log((1.0f64 + val1) / (1.0f64 - val1)) + 0.5f64 * fish;\n        let fresh1 = fisher;\n        fisher = fisher.offset(1);\n        *fresh1 = fish;\n        i += 1;\n        trail += 1\n    }\n    if !(fisher.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_fisher_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 10],\n                                               &[std::os::raw::c_char; 10]>(b\"ti_fisher\\x00\")).as_ptr(),\n                     b\"indicators/fisher.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 103 as std::os::raw::c_int,\n                     b\"fisher - outputs[0] == size - ti_fisher_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    if !(signal.offset_from(*outputs.offset(1 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_fisher_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 10],\n                                               &[std::os::raw::c_char; 10]>(b\"ti_fisher\\x00\")).as_ptr(),\n                     b\"indicators/fisher.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 104 as std::os::raw::c_int,\n                     b\"signal - outputs[1] == size - ti_fisher_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:119 ~ c2rust_out[3c70]::indicators::adxr::ti_adxr_start)",
    "span": "indicators/adxr.rs:47:1: 51:2 (#0)",
    "pieces": [
      "indicators/adxr.rs:47:1: 51:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_adxr_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return (*options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n                1 as std::os::raw::c_int) * 3 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:120 ~ c2rust_out[3c70]::indicators::adxr::ti_adxr)",
        "span": "indicators/adxr.rs:119:5: 119:66 (#0)",
        "source": "let first_adxr: std::os::raw::c_int = ti_adxr_start(options);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "indicators/adxr.rs:13:1: 13:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "indicators/adxr.rs:14:1: 14:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:446 ~ c2rust_out[3c70]::indicators::max::ti_max)",
    "span": "indicators/max.rs:36:1: 86:2 (#0)",
    "pieces": [
      "indicators/max.rs:36:1: 86:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 51,
    "source": "pub unsafe extern \"C\" fn ti_max(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_max_start(options) { return 0 as std::os::raw::c_int }\n    let mut trail: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut maxi: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut max: std::os::raw::c_double = *input.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        let mut bar: std::os::raw::c_double = *input.offset(i as isize);\n        if maxi < trail {\n            maxi = trail;\n            max = *input.offset(maxi as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *input.offset(j as isize);\n                if bar >= max { max = bar; maxi = j }\n            }\n        } else if bar >= max { maxi = i; max = bar }\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = max;\n        i += 1;\n        trail += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_max_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_max\\x00\")).as_ptr(),\n                     b\"indicators/max.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 67 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_max_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:676 ~ c2rust_out[3c70]::indicators::torad::ti_torad_start)",
    "span": "indicators/torad.rs:45:1: 48:2 (#0)",
    "pieces": [
      "indicators/torad.rs:45:1: 48:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_torad_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:712 ~ c2rust_out[3c70]::indicators::typprice::ti_typprice_start)",
    "span": "indicators/typprice.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/typprice.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_typprice_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:786 ~ c2rust_out[3c70]::indicators::wilders::ti_wilders_start)",
    "span": "indicators/wilders.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/wilders.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_wilders_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:675 ~ c2rust_out[3c70]::indicators::torad::ti_torad)",
    "span": "indicators/torad.rs:25:1: 43:2 (#0)",
    "pieces": [
      "indicators/torad.rs:25:1: 43:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 19,
    "source": "pub unsafe extern \"C\" fn ti_torad(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            *in1.offset(i as isize) *\n                (3.14159265358979323846264338327950288f64 / 180.0f64);\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:227 ~ c2rust_out[3c70]::indicators::cosh::ti_cosh)",
    "span": "indicators/cosh.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/cosh.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_cosh(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = cosh(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:263 ~ c2rust_out[3c70]::indicators::di::ti_di_start)",
    "span": "indicators/di.rs:32:1: 36:2 (#0)",
    "pieces": [
      "indicators/di.rs:32:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_di_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:360 ~ c2rust_out[3c70]::indicators::kama::ti_kama_start)",
    "span": "indicators/kama.rs:34:1: 38:2 (#0)",
    "pieces": [
      "indicators/kama.rs:34:1: 38:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_kama_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:611 ~ c2rust_out[3c70]::indicators::stderr::ti_stderr)",
    "span": "indicators/stderr.rs:38:1: 96:2 (#0)",
    "pieces": [
      "indicators/stderr.rs:38:1: 96:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 59,
    "source": "pub unsafe extern \"C\" fn ti_stderr(mut size: std::os::raw::c_int,\n                                   mut inputs: *const *const std::os::raw::c_double,\n                                   mut options: *const std::os::raw::c_double,\n                                   mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_stderr_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut sum2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mul: std::os::raw::c_double = 1.0f64 / sqrt(period as std::os::raw::c_double);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period {\n        sum += *input.offset(i as isize);\n        sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        i += 1\n    }\n    let mut s2s2: std::os::raw::c_double = sum2 * scale - sum * scale * (sum * scale);\n    if s2s2 > 0.0f64 { s2s2 = sqrt(s2s2) }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = mul * s2s2;\n    i = period;\n    while i < size {\n        sum += *input.offset(i as isize);\n        sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        sum -= *input.offset((i - period) as isize);\n        sum2 -=\n            *input.offset((i - period) as isize) *\n                *input.offset((i - period) as isize);\n        let mut s2s2_0: std::os::raw::c_double =\n            sum2 * scale - sum * scale * (sum * scale);\n        if s2s2_0 > 0.0f64 { s2s2_0 = sqrt(s2s2_0) }\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = mul * s2s2_0;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_stderr_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 10],\n                                               &[std::os::raw::c_char; 10]>(b\"ti_stderr\\x00\")).as_ptr(),\n                     b\"indicators/stderr.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 71 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_stderr_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:310 ~ c2rust_out[3c70]::indicators::emv::ti_emv)",
    "span": "indicators/emv.rs:35:1: 78:2 (#0)",
    "pieces": [
      "indicators/emv.rs:35:1: 78:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 44,
    "source": "pub unsafe extern \"C\" fn ti_emv(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut volume: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if size <= ti_emv_start(options) { return 0 as std::os::raw::c_int }\n    let mut last: std::os::raw::c_double =\n        (*high.offset(0 as std::os::raw::c_int as isize) +\n             *low.offset(0 as std::os::raw::c_int as isize)) * 0.5f64;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        let mut hl: std::os::raw::c_double =\n            (*high.offset(i as isize) + *low.offset(i as isize)) * 0.5f64;\n        let mut br: std::os::raw::c_double =\n            *volume.offset(i as isize) / 10000.0f64 /\n                (*high.offset(i as isize) - *low.offset(i as isize));\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = (hl - last) / br;\n        last = hl;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_emv_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_emv\\x00\")).as_ptr(),\n                     b\"indicators/emv.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 56 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_emv_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:127 ~ c2rust_out[3c70]::indicators::ao::ti_ao)",
    "span": "indicators/ao.rs:35:1: 95:2 (#0)",
    "pieces": [
      "indicators/ao.rs:35:1: 95:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 61,
    "source": "pub unsafe extern \"C\" fn ti_ao(mut size: std::os::raw::c_int,\n                               mut inputs: *const *const std::os::raw::c_double,\n                               mut options: *const std::os::raw::c_double,\n                               mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int = 34 as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if size <= ti_ao_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum34: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut sum5: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let per34: std::os::raw::c_double = 1.0f64 / 34.0f64;\n    let per5: std::os::raw::c_double = 1.0f64 / 5.0f64;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < 34 as std::os::raw::c_int {\n        let mut hl: std::os::raw::c_double =\n            0.5f64 * (*high.offset(i as isize) + *low.offset(i as isize));\n        sum34 += hl;\n        if i >= 29 as std::os::raw::c_int { sum5 += hl }\n        i += 1\n    }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = per5 * sum5 - per34 * sum34;\n    i = period;\n    while i < size {\n        let mut hl_0: std::os::raw::c_double =\n            0.5f64 * (*high.offset(i as isize) + *low.offset(i as isize));\n        sum34 += hl_0;\n        sum5 += hl_0;\n        sum34 -=\n            0.5f64 *\n                (*high.offset((i - 34 as std::os::raw::c_int) as isize) +\n                     *low.offset((i - 34 as std::os::raw::c_int) as isize));\n        sum5 -=\n            0.5f64 *\n                (*high.offset((i - 5 as std::os::raw::c_int) as isize) +\n                     *low.offset((i - 5 as std::os::raw::c_int) as isize));\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = per5 * sum5 - per34 * sum34;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_ao_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 6],\n                                               &[std::os::raw::c_char; 6]>(b\"ti_ao\\x00\")).as_ptr(),\n                     b\"indicators/ao.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 68 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_ao_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:120 ~ c2rust_out[3c70]::indicators::adxr::ti_adxr)",
    "span": "indicators/adxr.rs:53:1: 209:2 (#0)",
    "pieces": [
      "indicators/adxr.rs:53:1: 209:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 157,
    "source": "pub unsafe extern \"C\" fn ti_adxr(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_adxr_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double =\n        (period as std::os::raw::c_double - 1 as std::os::raw::c_int as std::os::raw::c_double) /\n            period as std::os::raw::c_double;\n    let invper: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let mut atr: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut dmup: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut dmdown: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < period {\n        let mut truerange: std::os::raw::c_double = 0.;\n        let l: std::os::raw::c_double = *low.offset(i as isize);\n        let h: std::os::raw::c_double = *high.offset(i as isize);\n        let c: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych: std::os::raw::c_double = fabs(h - c);\n        let ycl: std::os::raw::c_double = fabs(l - c);\n        let mut v: std::os::raw::c_double = h - l;\n        if ych > v { v = ych }\n        if ycl > v { v = ycl }\n        truerange = v;\n        atr += truerange;\n        let mut dp: std::os::raw::c_double = 0.;\n        let mut dm: std::os::raw::c_double = 0.;\n        dp =\n            *high.offset(i as isize) -\n                *high.offset((i - 1 as std::os::raw::c_int) as isize);\n        dm =\n            *low.offset((i - 1 as std::os::raw::c_int) as isize) -\n                *low.offset(i as isize);\n        if dp < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dp = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dp > dm { dm = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        if dm < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dm = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dm > dp { dp = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        dmup += dp;\n        dmdown += dm;\n        i += 1\n    }\n    let mut adx: std::os::raw::c_double = 0.0f64;\n    let mut di_up: std::os::raw::c_double = dmup / atr;\n    let mut di_down: std::os::raw::c_double = dmdown / atr;\n    let mut dm_diff: std::os::raw::c_double = fabs(di_up - di_down);\n    let mut dm_sum: std::os::raw::c_double = di_up + di_down;\n    let mut dx: std::os::raw::c_double =\n        dm_diff / dm_sum * 100 as std::os::raw::c_int as std::os::raw::c_double;\n    adx += dx;\n    let mut adxr: *mut ti_buffer = ti_buffer_new(period - 1 as std::os::raw::c_int);\n    let first_adxr: std::os::raw::c_int = ti_adxr_start(options);\n    i = period;\n    while i < size {\n        let mut truerange_0: std::os::raw::c_double = 0.;\n        let l_0: std::os::raw::c_double = *low.offset(i as isize);\n        let h_0: std::os::raw::c_double = *high.offset(i as isize);\n        let c_0: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych_0: std::os::raw::c_double = fabs(h_0 - c_0);\n        let ycl_0: std::os::raw::c_double = fabs(l_0 - c_0);\n        let mut v_0: std::os::raw::c_double = h_0 - l_0;\n        if ych_0 > v_0 { v_0 = ych_0 }\n        if ycl_0 > v_0 { v_0 = ycl_0 }\n        truerange_0 = v_0;\n        atr = atr * per + truerange_0;\n        let mut dp_0: std::os::raw::c_double = 0.;\n        let mut dm_0: std::os::raw::c_double = 0.;\n        dp_0 =\n            *high.offset(i as isize) -\n                *high.offset((i - 1 as std::os::raw::c_int) as isize);\n        dm_0 =\n            *low.offset((i - 1 as std::os::raw::c_int) as isize) -\n                *low.offset(i as isize);\n        if dp_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dp_0 > dm_0 { dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        if dm_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dm_0 > dp_0 { dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        dmup = dmup * per + dp_0;\n        dmdown = dmdown * per + dm_0;\n        let mut di_up_0: std::os::raw::c_double = dmup / atr;\n        let mut di_down_0: std::os::raw::c_double = dmdown / atr;\n        let mut dm_diff_0: std::os::raw::c_double = fabs(di_up_0 - di_down_0);\n        let mut dm_sum_0: std::os::raw::c_double = di_up_0 + di_down_0;\n        let mut dx_0: std::os::raw::c_double =\n            dm_diff_0 / dm_sum_0 * 100 as std::os::raw::c_int as std::os::raw::c_double;\n        if i - period < period - 2 as std::os::raw::c_int {\n            adx += dx_0\n        } else if i - period == period - 2 as std::os::raw::c_int {\n            adx += dx_0;\n            *(*adxr).vals.as_mut_ptr().offset((*adxr).index as isize) =\n                adx * invper;\n            (*adxr).index = (*adxr).index + 1 as std::os::raw::c_int;\n            if (*adxr).index >= (*adxr).size {\n                (*adxr).index = 0 as std::os::raw::c_int\n            }\n        } else {\n            adx = adx * per + dx_0;\n            if i >= first_adxr {\n                let fresh0 = output;\n                output = output.offset(1);\n                *fresh0 =\n                    0.5f64 *\n                        (adx * invper +\n                             *(*adxr).vals.as_mut_ptr().offset((((*adxr).index\n                                                                     +\n                                                                     (*adxr).size\n                                                                     -\n                                                                     1 as\n                                                                         std::os::raw::c_int\n                                                                     +\n                                                                     1 as\n                                                                         std::os::raw::c_int)\n                                                                    %\n                                                                    (*adxr).size)\n                                                                   as isize))\n            }\n            *(*adxr).vals.as_mut_ptr().offset((*adxr).index as isize) =\n                adx * invper;\n            (*adxr).index = (*adxr).index + 1 as std::os::raw::c_int;\n            if (*adxr).index >= (*adxr).size {\n                (*adxr).index = 0 as std::os::raw::c_int\n            }\n        }\n        i += 1\n    }\n    ti_buffer_free(adxr);\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_adxr_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_adxr\\x00\")).as_ptr(),\n                     b\"indicators/adxr.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 122 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_adxr_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/adxr.rs:14:1: 14:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "indicators/adxr.rs:13:1: 13:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:713 ~ c2rust_out[3c70]::indicators::typprice::ti_typprice)",
    "span": "indicators/typprice.rs:30:1: 52:2 (#0)",
    "pieces": [
      "indicators/typprice.rs:30:1: 52:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 23,
    "source": "pub unsafe extern \"C\" fn ti_typprice(mut size: std::os::raw::c_int,\n                                     mut inputs: *const *const std::os::raw::c_double,\n                                     mut options: *const std::os::raw::c_double,\n                                     mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            (*high.offset(i as isize) + *low.offset(i as isize) +\n                 *close.offset(i as isize)) * (1.0f64 / 3.0f64);\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:508 ~ c2rust_out[3c70]::indicators::natr::ti_natr_start)",
    "span": "indicators/natr.rs:32:1: 36:2 (#0)",
    "pieces": [
      "indicators/natr.rs:32:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_natr_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1539 ~ c2rust_out[3c70]::smoke::next_line)",
    "span": "smoke.rs:161:1: 178:2 (#0)",
    "pieces": [
      "smoke.rs:161:1: 178:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 18,
    "source": "pub unsafe extern \"C\" fn next_line(mut fp: *mut FILE) -> *mut std::os::raw::c_char {\n    static mut buf: [std::os::raw::c_char; 1024] = [0; 1024];\n    while !fgets(buf.as_mut_ptr(), 1024 as std::os::raw::c_int, fp).is_null() {\n        /*Skip Comments*/\n        if buf[0 as std::os::raw::c_int as usize] as std::os::raw::c_int == '#' as i32 {\n            continue ;\n        }\n        /*Skip blank lines*/\n        if buf[0 as std::os::raw::c_int as usize] as std::os::raw::c_int == 10 as std::os::raw::c_int\n               ||\n               buf[0 as std::os::raw::c_int as usize] as std::os::raw::c_int ==\n                   13 as std::os::raw::c_int {\n            continue ;\n        }\n        return buf.as_mut_ptr()\n    }\n    return 0 as *mut std::os::raw::c_char;\n}",
    "calls": [
      {
        "caller": "DefId(0:1543 ~ c2rust_out[3c70]::smoke::get_array)",
        "span": "smoke.rs:184:5: 184:61 (#0)",
        "source": "let mut line: *mut std::os::raw::c_char = next_line(fp);"
      },
      {
        "caller": "DefId(0:1550 ~ c2rust_out[3c70]::smoke::test)",
        "span": "smoke.rs:361:9: 361:30 (#0)",
        "source": "line = next_line(fp);"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "smoke.rs:46:1: 46:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "smoke.rs:44:1: 44:45 (#0)",
        "source": "pub use crate::indicators_index::ti_version;"
      },
      {
        "span": "smoke.rs:41:1: 41:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      },
      {
        "span": "smoke.rs:42:1: 42:43 (#0)",
        "source": "pub use crate::indicators_index::ti_build;"
      },
      {
        "span": "smoke.rs:43:1: 43:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "smoke.rs:45:1: 45:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:382 ~ c2rust_out[3c70]::indicators::linreg::ti_linreg_start)",
    "span": "indicators/linreg.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/linreg.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_linreg_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:35 ~ c2rust_out[3c70]::example2::main_0)",
    "span": "example2.rs:56:1: 108:2 (#0)",
    "pieces": [
      "example2.rs:56:1: 108:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 53,
    "source": "unsafe fn main_0() -> std::os::raw::c_int {\n    printf(b\"This program is an example of looping through\\n\\x00\" as *const u8\n               as *const std::os::raw::c_char);\n    printf(b\"each of the available indicators.\\n\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char);\n    /* Set info to first indicators in array. */\n    let mut info: *const ti_indicator_info = ti_indicators.as_mut_ptr();\n    /* The last item is all zeros, so we'll stop when we get there. */\n    while !(*info).name.is_null() {\n        let mut i: std::os::raw::c_int = 0;\n        printf(b\"%s (%s) has type %d with: %d inputs, %d options, %d outputs.\\n\\x00\"\n                   as *const u8 as *const std::os::raw::c_char, (*info).name,\n               (*info).full_name, (*info).type_0, (*info).inputs,\n               (*info).options, (*info).outputs);\n        printf(b\"   inputs: \\x00\" as *const u8 as *const std::os::raw::c_char);\n        i = 0 as std::os::raw::c_int;\n        while i < (*info).inputs {\n            printf(b\"%s%s\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   if i != 0 {\n                       b\", \\x00\" as *const u8 as *const std::os::raw::c_char\n                   } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char },\n                   (*info).input_names[i as usize]);\n            i += 1\n        }\n        printf(b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n        printf(b\"   options: \\x00\" as *const u8 as *const std::os::raw::c_char);\n        i = 0 as std::os::raw::c_int;\n        while i < (*info).options {\n            printf(b\"%s%s\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   if i != 0 {\n                       b\", \\x00\" as *const u8 as *const std::os::raw::c_char\n                   } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char },\n                   (*info).option_names[i as usize]);\n            i += 1\n        }\n        printf(b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n        printf(b\"   outputs: \\x00\" as *const u8 as *const std::os::raw::c_char);\n        i = 0 as std::os::raw::c_int;\n        while i < (*info).outputs {\n            printf(b\"%s%s\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   if i != 0 {\n                       b\", \\x00\" as *const u8 as *const std::os::raw::c_char\n                   } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char },\n                   (*info).output_names[i as usize]);\n            i += 1\n        }\n        printf(b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n        /* Next indicator. */\n        printf(b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n        info = info.offset(1)\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:36 ~ c2rust_out[3c70]::example2::main)",
        "span": "example2.rs:109:17: 109:65 (#0)",
        "source": "unsafe { ::std::process::exit(main_0() as i32) }"
      }
    ],
    "globals": [
      {
        "span": "indicators_index.rs:677:1: 11045:7 (#0)",
        "source": "pub static mut ti_indicators: [ti_indicator_info; 105] =\n    unsafe {\n        [{\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"abs\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Absolute Value\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_abs_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_abs as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"abs\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"acos\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arccosine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_acos_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_acos as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"acos\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Accumulation/Distribution Line\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ad\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"add\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Addition\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_add_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_add as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"add\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Accumulation/Distribution Oscillator\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"adosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adx\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Directional Movement Index\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adx_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adx as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adxr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Directional Movement Rating\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adxr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adxr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ao\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Awesome Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ao_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ao as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ao\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"apo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Absolute Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_apo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_apo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"apo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"aroon\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Aroon\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_aroon_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_aroon as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"aroon_down\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"aroon_up\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"aroonosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Aroon Oscillator\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_aroonosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_aroonosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"aroonosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"asin\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arcsine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_asin_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_asin as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"asin\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"atan\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arctangent\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_atan_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_atan as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"atan\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"atr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average True Range\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_atr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_atr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"atr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"avgprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_avgprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_avgprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"avgprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"bbands\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Bollinger Bands\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_bbands_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_bbands as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 3 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"stddev\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"bbands_lower\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"bbands_middle\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"bbands_upper\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"bop\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Balance of Power\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_bop_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_bop as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"bop\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cci\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Commodity Channel Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cci_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cci as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cci\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ceil\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Ceiling\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ceil_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ceil as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ceil\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cmo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Chande Momentum Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cmo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cmo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cmo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cos\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Cosine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cos_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cos as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cos\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cosh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Cosine\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cosh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cosh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cosh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"crossany\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Crossany\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_crossany_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_crossany as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"crossany\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"crossover\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Crossover\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_crossover_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_crossover as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"crossover\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Chaikins Volatility\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"decay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Decay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_decay_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_decay as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"decay\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Double Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"di\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Indicator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_di_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_di as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"plus_di\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"minus_di\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"div\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Division\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_div_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_div as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"div\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dm\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Movement\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dm_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dm as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"plus_dm\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"minus_dm\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dpo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Detrended Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dpo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dpo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dpo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dx\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Movement Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dx_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dx as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"edecay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Exponential Decay\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_edecay_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_edecay as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"edecay\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Exponential Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"emv\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Ease of Movement\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_emv_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_emv as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"emv\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"exp\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Exponential\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_exp_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_exp as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"exp\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"fisher\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Fisher Transform\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_fisher_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_fisher as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"fisher\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"fisher_signal\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"floor\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Floor\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_floor_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_floor as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"floor\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"fosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Forecast Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_fosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_fosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"fosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"hma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Hull Moving Average\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_hma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_hma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"hma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"kama\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Kaufman Adaptive Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_kama_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_kama as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"kama\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"kvo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Klinger Volume Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_kvo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_kvo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"kvo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"lag\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Lag\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_lag_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_lag as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"lag\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linreg\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linreg_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linreg as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linreg\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linregintercept\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression Intercept\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linregintercept_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linregintercept as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linregintercept\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linregslope\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression Slope\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linregslope_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linregslope as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linregslope\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ln\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Natural Log\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ln_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ln as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ln\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"log10\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Base-10 Log\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_log10_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_log10 as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"log10\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"macd\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Moving Average Convergence/Divergence\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_macd_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_macd as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 3 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"signal period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"macd\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"macd_signal\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"macd_histogram\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"marketfi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Market Facilitation Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_marketfi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_marketfi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"marketfi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mass\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mass Index\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mass_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mass as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mass\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"max\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Maximum In Period\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_max_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_max as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"max\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"md\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mean Deviation Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_md_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_md as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"md\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"medprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Median Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_medprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_medprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"medprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mfi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Money Flow Index\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mfi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mfi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mfi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"min\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Minimum In Period\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_min_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_min as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"min\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mom\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Momentum\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mom_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mom as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mom\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"msw\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mesa Sine Wave\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_msw_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_msw as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"msw_sine\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"msw_lead\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mul\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Multiplication\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mul_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mul as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mul\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"natr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Normalized Average True Range\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_natr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_natr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"natr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"nvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Negative Volume Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_nvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_nvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"nvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"obv\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"On Balance Volume\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_obv_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_obv as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"obv\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ppo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Percentage Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ppo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ppo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ppo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"psar\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Parabolic SAR\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_psar_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_psar as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"acceleration factor step\\x00\" as\n                                            *const u8 as *const std::os::raw::c_char\n                                            as *mut std::os::raw::c_char,\n                                        b\"acceleration factor maximum\\x00\" as\n                                            *const u8 as *const std::os::raw::c_char\n                                            as *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"psar\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"pvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Positive Volume Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_pvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_pvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"pvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"qstick\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Qstick\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_qstick_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_qstick as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"qstick\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"roc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Rate of Change\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_roc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_roc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"roc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"rocr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Rate of Change Ratio\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_rocr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_rocr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"rocr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"round\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Round\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_round_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_round as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"round\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"rsi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Relative Strength Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_rsi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_rsi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"rsi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sin\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Sine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sin_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sin as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sin\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sinh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Sine\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sinh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sinh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sinh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Simple Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sqrt\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Square Root\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sqrt_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sqrt as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sqrt\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stddev\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Standard Deviation Over Period\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stddev_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stddev as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stddev\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stderr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Standard Error Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stderr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stderr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stderr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stoch\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Stochastic Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stoch_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stoch as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"%k period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"%k slowing period\\x00\" as *const u8\n                                            as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"%d period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stoch_k\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"stoch_d\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stochrsi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Stochastic RSI\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stochrsi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stochrsi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stochrsi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sub\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Subtraction\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sub_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sub as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sub\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sum\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Sum Over Period\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sum_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sum as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sum\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tan\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Tangent\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tan_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tan as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tan\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tanh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Tangent\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tanh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tanh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tanh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Triple Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"todeg\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Degree Conversion\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_todeg_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_todeg as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"degrees\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"torad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Radian Conversion\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_torad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_torad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"radians\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"True Range\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trima\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Triangular Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trima_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trima as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trima\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trix\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Trix\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trix_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trix as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trix\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trunc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Truncate\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trunc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trunc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trunc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tsf\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Time Series Forecast\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tsf_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tsf as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tsf\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"typprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Typical Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_typprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_typprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"typprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ultosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Ultimate Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ultosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ultosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"medium period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ultosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"var\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Variance Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_var_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_var as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"var\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vhf\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vertical Horizontal Filter\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vhf_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vhf as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vhf\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vidya\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Variable Index Dynamic Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vidya_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vidya as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"alpha\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vidya\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"volatility\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Annualized Historical Volatility\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_volatility_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_volatility as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"volatility\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Volume Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vwma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Volume Weighted Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vwma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vwma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vwma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Williams Accumulation/Distribution\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wad\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wcprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Weighted Close Price\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wcprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wcprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wcprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wilders\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Wilders Smoothing\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wilders_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wilders as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wilders\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"willr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Williams %R\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_willr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_willr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"willr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Weighted Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"zlema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Zero-Lag Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_zlema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_zlema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"zlema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       0 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       0 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start: None,\n                                   indicator: None,\n                                   type_0: 0 as std::os::raw::c_int,\n                                   inputs: 0 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 0 as std::os::raw::c_int,\n                                   input_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         }]\n    };"
      }
    ],
    "imports": [
      {
        "span": "example2.rs:8:1: 8:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:403 ~ c2rust_out[3c70]::indicators::ln::ti_ln_start)",
    "span": "indicators/ln.rs:29:1: 32:2 (#0)",
    "pieces": [
      "indicators/ln.rs:29:1: 32:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_ln_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:640 ~ c2rust_out[3c70]::indicators::stochrsi::ti_stochrsi_start)",
    "span": "indicators/stochrsi.rs:39:1: 44:2 (#0)",
    "pieces": [
      "indicators/stochrsi.rs:39:1: 44:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn ti_stochrsi_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int *\n               2 as std::os::raw::c_int -\n               1 as std::os::raw::c_int; /* If period = 0 then min-max = 0. */\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/stochrsi.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "indicators/stochrsi.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:540 ~ c2rust_out[3c70]::indicators::pvi::ti_pvi)",
    "span": "indicators/pvi.rs:35:1: 78:2 (#0)",
    "pieces": [
      "indicators/pvi.rs:35:1: 78:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 44,
    "source": "pub unsafe extern \"C\" fn ti_pvi(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut volume: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if size <= ti_pvi_start(options) { return 0 as std::os::raw::c_int }\n    let mut pvi: std::os::raw::c_double = 1000 as std::os::raw::c_int as std::os::raw::c_double;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = pvi;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        if *volume.offset(i as isize) >\n               *volume.offset((i - 1 as std::os::raw::c_int) as isize) {\n            pvi +=\n                (*close.offset(i as isize) -\n                     *close.offset((i - 1 as std::os::raw::c_int) as isize)) /\n                    *close.offset((i - 1 as std::os::raw::c_int) as isize) * pvi\n        }\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = pvi;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_pvi_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_pvi\\x00\")).as_ptr(),\n                     b\"indicators/pvi.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 56 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_pvi_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:776 ~ c2rust_out[3c70]::indicators::wad::ti_wad_start)",
    "span": "indicators/wad.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/wad.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_wad_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1483 ~ c2rust_out[3c70]::sample::main_0)",
    "span": "sample.rs:103:1: 408:2 (#0)",
    "pieces": [
      "sample.rs:103:1: 408:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 306,
    "source": "unsafe fn main_0(mut argc: std::os::raw::c_int, mut argv: *mut *mut std::os::raw::c_char)\n -> std::os::raw::c_int {\n    let mut info: *const ti_indicator_info = ti_indicators.as_mut_ptr();\n    if argc < 2 as std::os::raw::c_int {\n        printf(b\"No indicator given.\\n\\x00\" as *const u8 as\n                   *const std::os::raw::c_char);\n        printf(b\"Example:\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n        printf(b\"\\tsample ma 5\\x00\" as *const u8 as *const std::os::raw::c_char);\n        return 1 as std::os::raw::c_int\n    }\n    if strcmp(*argv.offset(1 as std::os::raw::c_int as isize),\n              b\"--version\\x00\" as *const u8 as *const std::os::raw::c_char) ==\n           0 as std::os::raw::c_int {\n        printf(b\"TI VERSION: %s, TI BUILD: %d\\n\\x00\" as *const u8 as\n                   *const std::os::raw::c_char,\n               b\"0.8.4\\x00\" as *const u8 as *const std::os::raw::c_char,\n               1537377628 as std::os::raw::c_int);\n        return 0 as std::os::raw::c_int\n    }\n    if strcmp(*argv.offset(1 as std::os::raw::c_int as isize),\n              b\"--list\\x00\" as *const u8 as *const std::os::raw::c_char) ==\n           0 as std::os::raw::c_int {\n        loop  {\n            if (*info).type_0 == 1 as std::os::raw::c_int {\n                printf(b\"type overlay \\x00\" as *const u8 as\n                           *const std::os::raw::c_char);\n            } else if (*info).type_0 == 2 as std::os::raw::c_int {\n                printf(b\"type indicator \\x00\" as *const u8 as\n                           *const std::os::raw::c_char);\n            } else if (*info).type_0 == 3 as std::os::raw::c_int {\n                printf(b\"type math \\x00\" as *const u8 as *const std::os::raw::c_char);\n            } else if (*info).type_0 == 4 as std::os::raw::c_int {\n                printf(b\"type simple \\x00\" as *const u8 as\n                           *const std::os::raw::c_char);\n            } else {\n                printf(b\"type unknown \\x00\" as *const u8 as\n                           *const std::os::raw::c_char);\n            }\n            printf(b\"name %s \\x00\" as *const u8 as *const std::os::raw::c_char,\n                   (*info).name);\n            printf(b\"full_name {%s} \\x00\" as *const u8 as *const std::os::raw::c_char,\n                   (*info).full_name);\n            let mut i: std::os::raw::c_int = 0;\n            printf(b\"inputs {\\x00\" as *const u8 as *const std::os::raw::c_char);\n            i = 0 as std::os::raw::c_int;\n            while i < (*info).inputs {\n                printf(b\"%s%s\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       if i != 0 {\n                           b\" \\x00\" as *const u8 as *const std::os::raw::c_char\n                       } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char },\n                       (*info).input_names[i as usize]);\n                i += 1\n            }\n            printf(b\"} \\x00\" as *const u8 as *const std::os::raw::c_char);\n            printf(b\"options {\\x00\" as *const u8 as *const std::os::raw::c_char);\n            i = 0 as std::os::raw::c_int;\n            while i < (*info).options {\n                printf(b\"%s{%s}\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       if i != 0 {\n                           b\" \\x00\" as *const u8 as *const std::os::raw::c_char\n                       } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char },\n                       (*info).option_names[i as usize]);\n                i += 1\n            }\n            printf(b\"} \\x00\" as *const u8 as *const std::os::raw::c_char);\n            printf(b\"outputs {\\x00\" as *const u8 as *const std::os::raw::c_char);\n            i = 0 as std::os::raw::c_int;\n            while i < (*info).outputs {\n                printf(b\"%s{%s}\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       if i != 0 {\n                           b\" \\x00\" as *const u8 as *const std::os::raw::c_char\n                       } else { b\"\\x00\" as *const u8 as *const std::os::raw::c_char },\n                       (*info).output_names[i as usize]);\n                i += 1\n            }\n            printf(b\"}\\x00\" as *const u8 as *const std::os::raw::c_char);\n            printf(b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n            info = info.offset(1);\n            if (*info).name.is_null() { break ; }\n        }\n        return 0 as std::os::raw::c_int\n    }\n    info = ti_find_indicator(*argv.offset(1 as std::os::raw::c_int as isize));\n    if info.is_null() {\n        printf(b\"Couldn\\'t find indicator: %s\\n\\x00\" as *const u8 as\n                   *const std::os::raw::c_char,\n               *argv.offset(1 as std::os::raw::c_int as isize));\n        return 1 as std::os::raw::c_int\n    }\n    let mut inputs: [*const std::os::raw::c_double; 5] =\n        [0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,\n         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,\n         0 as *const std::os::raw::c_double];\n    let mut outputs: [*mut std::os::raw::c_double; 5] =\n        [out[0 as std::os::raw::c_int as usize].as_mut_ptr(),\n         out[1 as std::os::raw::c_int as usize].as_mut_ptr(),\n         out[2 as std::os::raw::c_int as usize].as_mut_ptr(),\n         out[3 as std::os::raw::c_int as usize].as_mut_ptr(),\n         out[4 as std::os::raw::c_int as usize].as_mut_ptr()];\n    let mut o: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut h: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut l: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut c: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut r: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut r2: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut v: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut a: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    /* Setup the inputs. */\n    let mut j: std::os::raw::c_int = 0;\n    j = 0 as std::os::raw::c_int;\n    while j < (*info).inputs {\n        if strcmp((*info).input_names[j as usize],\n                  b\"open\\x00\" as *const u8 as *const std::os::raw::c_char) ==\n               0 as std::os::raw::c_int {\n            inputs[j as usize] = open.as_mut_ptr();\n            o = 1 as std::os::raw::c_int\n        } else if strcmp((*info).input_names[j as usize],\n                         b\"high\\x00\" as *const u8 as *const std::os::raw::c_char) ==\n                      0 as std::os::raw::c_int {\n            inputs[j as usize] = high.as_mut_ptr();\n            h = 1 as std::os::raw::c_int\n        } else if strcmp((*info).input_names[j as usize],\n                         b\"low\\x00\" as *const u8 as *const std::os::raw::c_char) ==\n                      0 as std::os::raw::c_int {\n            inputs[j as usize] = low.as_mut_ptr();\n            l = 1 as std::os::raw::c_int\n        } else if strcmp((*info).input_names[j as usize],\n                         b\"close\\x00\" as *const u8 as *const std::os::raw::c_char) ==\n                      0 as std::os::raw::c_int {\n            inputs[j as usize] = close.as_mut_ptr();\n            c = 1 as std::os::raw::c_int\n        } else if strcmp((*info).input_names[j as usize],\n                         b\"volume\\x00\" as *const u8 as *const std::os::raw::c_char) ==\n                      0 as std::os::raw::c_int {\n            inputs[j as usize] = volume.as_mut_ptr();\n            v = 1 as std::os::raw::c_int\n        } else if strcmp((*info).input_names[j as usize],\n                         b\"real\\x00\" as *const u8 as *const std::os::raw::c_char) ==\n                      0 as std::os::raw::c_int {\n            if r == 0 {\n                inputs[j as usize] = close.as_mut_ptr();\n                r = 1 as std::os::raw::c_int\n            } else {\n                inputs[j as usize] = open.as_mut_ptr();\n                r2 = 1 as std::os::raw::c_int\n            }\n        } else {\n            if (0 as std::os::raw::c_int == 0) as std::os::raw::c_int as std::os::raw::c_long != 0 {\n                __assert_rtn((*::std::mem::transmute::<&[u8; 5],\n                                                       &[std::os::raw::c_char; 5]>(b\"main\\x00\")).as_ptr(),\n                             b\"sample.c\\x00\" as *const u8 as\n                                 *const std::os::raw::c_char, 144 as std::os::raw::c_int,\n                             b\"0\\x00\" as *const u8 as *const std::os::raw::c_char);\n            } else { };\n        }\n        j += 1\n    }\n    /* See if we need alternative inputs (for the indicators that can't take large numbers. */\n    let mut alts: [*const std::os::raw::c_char; 8] =\n        [b\"acos\\x00\" as *const u8 as *const std::os::raw::c_char,\n         b\"asin\\x00\" as *const u8 as *const std::os::raw::c_char,\n         b\"atan\\x00\" as *const u8 as *const std::os::raw::c_char,\n         b\"cosh\\x00\" as *const u8 as *const std::os::raw::c_char,\n         b\"sinh\\x00\" as *const u8 as *const std::os::raw::c_char,\n         b\"tanh\\x00\" as *const u8 as *const std::os::raw::c_char,\n         b\"todeg\\x00\" as *const u8 as *const std::os::raw::c_char,\n         0 as *const std::os::raw::c_char];\n    let mut alt: *mut *const std::os::raw::c_char = alts.as_mut_ptr();\n    while !(*alt).is_null() {\n        if strcmp(*alt, (*info).name) == 0 as std::os::raw::c_int {\n            r = 0 as std::os::raw::c_int;\n            a = 1 as std::os::raw::c_int;\n            j = 0 as std::os::raw::c_int;\n            while j < (*info).inputs {\n                inputs[j as usize] = alternative.as_mut_ptr();\n                j += 1\n            }\n            break ;\n        } else { alt = alt.offset(1) }\n    }\n    /* Set options, save offset. */\n    let mut options: [std::os::raw::c_double; 10] = [0.; 10];\n    let mut i_0: std::os::raw::c_int = 0;\n    i_0 = 0 as std::os::raw::c_int;\n    while i_0 < (*info).options {\n        if argc < 3 as std::os::raw::c_int + i_0 {\n            printf(b\"*ERROR NOT ENOUGH OPTIONS*\\n\\x00\" as *const u8 as\n                       *const std::os::raw::c_char);\n            return 1 as std::os::raw::c_int\n        }\n        options[i_0 as usize] =\n            atof(*argv.offset((2 as std::os::raw::c_int + i_0) as isize));\n        i_0 += 1\n    }\n    let mut start: std::os::raw::c_int =\n        (*info).start.expect(\"non-null function pointer\")(options.as_mut_ptr());\n    /* Run it. */\n    let ret: std::os::raw::c_int =\n        (*info).indicator.expect(\"non-null function pointer\")(15 as\n                                                                  std::os::raw::c_int,\n                                                              inputs.as_mut_ptr(),\n                                                              options.as_mut_ptr(),\n                                                              outputs.as_mut_ptr());\n    if ret == 0 as std::os::raw::c_int {\n        let mut i_1: std::os::raw::c_int = 0;\n        let mut k: std::os::raw::c_int = 0;\n        let mut bad: std::os::raw::c_int = 0 as std::os::raw::c_int;\n        printf(b\"date        \\x00\" as *const u8 as *const std::os::raw::c_char);\n        if o != 0 {\n            printf(b\" open   \\x00\" as *const u8 as *const std::os::raw::c_char);\n        }\n        if h != 0 {\n            printf(b\" high   \\x00\" as *const u8 as *const std::os::raw::c_char);\n        }\n        if l != 0 {\n            printf(b\" low    \\x00\" as *const u8 as *const std::os::raw::c_char);\n        }\n        if c != 0 {\n            printf(b\" close  \\x00\" as *const u8 as *const std::os::raw::c_char);\n        }\n        if v != 0 {\n            printf(b\" volume \\x00\" as *const u8 as *const std::os::raw::c_char);\n        }\n        if r != 0 {\n            printf(b\" input  \\x00\" as *const u8 as *const std::os::raw::c_char);\n        }\n        if r2 != 0 {\n            printf(b\" input2  \\x00\" as *const u8 as *const std::os::raw::c_char);\n        }\n        if a != 0 {\n            printf(b\" input  \\x00\" as *const u8 as *const std::os::raw::c_char);\n        }\n        i_1 = 0 as std::os::raw::c_int;\n        while i_1 < (*info).outputs {\n            printf(b\" %s\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   (*info).output_names[i_1 as usize]);\n            i_1 += 1\n        }\n        printf(b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n        i_1 = 0 as std::os::raw::c_int;\n        while i_1 < 15 as std::os::raw::c_int {\n            printf(b\"%s\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   datet[i_1 as usize]);\n            if o != 0 {\n                printf(b\" %8.2f\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       open[i_1 as usize]);\n            }\n            if h != 0 {\n                printf(b\" %8.2f\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       high[i_1 as usize]);\n            }\n            if l != 0 {\n                printf(b\" %8.2f\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       low[i_1 as usize]);\n            }\n            if c != 0 {\n                printf(b\" %8.2f\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       close[i_1 as usize]);\n            }\n            if v != 0 {\n                printf(b\" %8.0f\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       volume[i_1 as usize]);\n            }\n            if r != 0 {\n                printf(b\" %8.2f\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       close[i_1 as usize]);\n            }\n            if r2 != 0 {\n                printf(b\" %8.2f\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       open[i_1 as usize]);\n            }\n            if a != 0 {\n                printf(b\" %8.2f\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       alternative[i_1 as usize]);\n            }\n            if i_1 >= start {\n                k = 0 as std::os::raw::c_int;\n                while k < (*info).outputs {\n                    if out[k as usize][(i_1 - start) as usize] !=\n                           out[k as usize][(i_1 - start) as usize] {\n                        bad = 1 as std::os::raw::c_int\n                    }\n                    printf(b\" %8.3f\\x00\" as *const u8 as *const std::os::raw::c_char,\n                           out[k as usize][(i_1 - start) as usize]);\n                    k += 1\n                }\n            }\n            printf(b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n            i_1 += 1\n        }\n        if bad != 0 {\n            printf(b\"\\nERROR NaN in outputs (%s).\\n\\x00\" as *const u8 as\n                       *const std::os::raw::c_char, (*info).name);\n            return 1 as std::os::raw::c_int\n        }\n        return 0 as std::os::raw::c_int\n    } else {\n        if ret == 1 as std::os::raw::c_int {\n            printf(b\"*ERROR INVALID OPTION*\\n\\x00\" as *const u8 as\n                       *const std::os::raw::c_char);\n        } else {\n            printf(b\"*ERROR*\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n        }\n        return 1 as std::os::raw::c_int\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:1491 ~ c2rust_out[3c70]::sample::main)",
        "span": "sample.rs:415:5: 419:6 (#0)",
        "source": "unsafe {\n        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,\n                                    args.as_mut_ptr() as\n                                        *mut *mut std::os::raw::c_char) as i32)\n    }"
      }
    ],
    "globals": [
      {
        "span": "indicators_index.rs:677:1: 11045:7 (#0)",
        "source": "pub static mut ti_indicators: [ti_indicator_info; 105] =\n    unsafe {\n        [{\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"abs\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Absolute Value\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_abs_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_abs as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"abs\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"acos\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arccosine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_acos_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_acos as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"acos\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Accumulation/Distribution Line\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ad\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"add\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Addition\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_add_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_add as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"add\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Accumulation/Distribution Oscillator\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"adosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adx\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Directional Movement Index\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adx_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adx as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adxr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Directional Movement Rating\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adxr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adxr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ao\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Awesome Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ao_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ao as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ao\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"apo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Absolute Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_apo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_apo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"apo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"aroon\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Aroon\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_aroon_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_aroon as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"aroon_down\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"aroon_up\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"aroonosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Aroon Oscillator\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_aroonosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_aroonosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"aroonosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"asin\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arcsine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_asin_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_asin as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"asin\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"atan\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arctangent\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_atan_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_atan as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"atan\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"atr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average True Range\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_atr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_atr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"atr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"avgprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_avgprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_avgprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"avgprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"bbands\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Bollinger Bands\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_bbands_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_bbands as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 3 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"stddev\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"bbands_lower\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"bbands_middle\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"bbands_upper\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"bop\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Balance of Power\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_bop_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_bop as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"bop\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cci\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Commodity Channel Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cci_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cci as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cci\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ceil\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Ceiling\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ceil_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ceil as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ceil\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cmo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Chande Momentum Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cmo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cmo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cmo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cos\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Cosine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cos_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cos as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cos\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cosh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Cosine\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cosh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cosh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cosh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"crossany\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Crossany\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_crossany_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_crossany as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"crossany\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"crossover\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Crossover\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_crossover_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_crossover as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"crossover\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Chaikins Volatility\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"decay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Decay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_decay_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_decay as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"decay\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Double Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"di\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Indicator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_di_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_di as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"plus_di\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"minus_di\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"div\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Division\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_div_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_div as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"div\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dm\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Movement\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dm_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dm as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"plus_dm\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"minus_dm\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dpo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Detrended Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dpo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dpo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dpo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dx\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Movement Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dx_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dx as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"edecay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Exponential Decay\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_edecay_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_edecay as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"edecay\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Exponential Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"emv\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Ease of Movement\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_emv_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_emv as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"emv\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"exp\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Exponential\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_exp_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_exp as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"exp\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"fisher\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Fisher Transform\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_fisher_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_fisher as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"fisher\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"fisher_signal\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"floor\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Floor\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_floor_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_floor as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"floor\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"fosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Forecast Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_fosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_fosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"fosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"hma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Hull Moving Average\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_hma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_hma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"hma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"kama\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Kaufman Adaptive Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_kama_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_kama as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"kama\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"kvo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Klinger Volume Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_kvo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_kvo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"kvo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"lag\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Lag\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_lag_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_lag as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"lag\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linreg\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linreg_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linreg as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linreg\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linregintercept\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression Intercept\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linregintercept_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linregintercept as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linregintercept\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linregslope\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression Slope\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linregslope_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linregslope as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linregslope\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ln\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Natural Log\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ln_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ln as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ln\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"log10\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Base-10 Log\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_log10_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_log10 as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"log10\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"macd\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Moving Average Convergence/Divergence\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_macd_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_macd as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 3 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"signal period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"macd\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"macd_signal\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"macd_histogram\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"marketfi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Market Facilitation Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_marketfi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_marketfi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"marketfi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mass\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mass Index\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mass_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mass as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mass\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"max\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Maximum In Period\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_max_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_max as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"max\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"md\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mean Deviation Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_md_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_md as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"md\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"medprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Median Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_medprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_medprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"medprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mfi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Money Flow Index\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mfi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mfi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mfi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"min\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Minimum In Period\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_min_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_min as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"min\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mom\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Momentum\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mom_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mom as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mom\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"msw\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mesa Sine Wave\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_msw_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_msw as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"msw_sine\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"msw_lead\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mul\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Multiplication\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mul_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mul as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mul\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"natr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Normalized Average True Range\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_natr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_natr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"natr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"nvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Negative Volume Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_nvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_nvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"nvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"obv\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"On Balance Volume\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_obv_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_obv as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"obv\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ppo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Percentage Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ppo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ppo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ppo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"psar\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Parabolic SAR\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_psar_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_psar as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"acceleration factor step\\x00\" as\n                                            *const u8 as *const std::os::raw::c_char\n                                            as *mut std::os::raw::c_char,\n                                        b\"acceleration factor maximum\\x00\" as\n                                            *const u8 as *const std::os::raw::c_char\n                                            as *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"psar\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"pvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Positive Volume Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_pvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_pvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"pvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"qstick\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Qstick\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_qstick_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_qstick as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"qstick\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"roc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Rate of Change\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_roc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_roc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"roc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"rocr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Rate of Change Ratio\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_rocr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_rocr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"rocr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"round\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Round\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_round_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_round as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"round\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"rsi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Relative Strength Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_rsi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_rsi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"rsi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sin\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Sine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sin_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sin as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sin\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sinh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Sine\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sinh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sinh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sinh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Simple Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sqrt\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Square Root\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sqrt_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sqrt as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sqrt\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stddev\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Standard Deviation Over Period\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stddev_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stddev as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stddev\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stderr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Standard Error Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stderr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stderr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stderr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stoch\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Stochastic Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stoch_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stoch as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"%k period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"%k slowing period\\x00\" as *const u8\n                                            as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"%d period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stoch_k\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"stoch_d\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stochrsi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Stochastic RSI\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stochrsi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stochrsi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stochrsi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sub\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Subtraction\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sub_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sub as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sub\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sum\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Sum Over Period\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sum_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sum as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sum\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tan\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Tangent\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tan_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tan as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tan\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tanh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Tangent\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tanh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tanh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tanh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Triple Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"todeg\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Degree Conversion\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_todeg_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_todeg as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"degrees\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"torad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Radian Conversion\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_torad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_torad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"radians\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"True Range\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trima\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Triangular Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trima_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trima as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trima\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trix\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Trix\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trix_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trix as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trix\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trunc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Truncate\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trunc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trunc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trunc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tsf\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Time Series Forecast\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tsf_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tsf as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tsf\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"typprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Typical Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_typprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_typprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"typprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ultosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Ultimate Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ultosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ultosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"medium period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ultosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"var\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Variance Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_var_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_var as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"var\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vhf\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vertical Horizontal Filter\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vhf_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vhf as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vhf\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vidya\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Variable Index Dynamic Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vidya_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vidya as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"alpha\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vidya\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"volatility\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Annualized Historical Volatility\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_volatility_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_volatility as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"volatility\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Volume Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vwma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Volume Weighted Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vwma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vwma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vwma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Williams Accumulation/Distribution\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wad\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wcprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Weighted Close Price\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wcprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wcprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wcprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wilders\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Wilders Smoothing\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wilders_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wilders as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wilders\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"willr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Williams %R\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_willr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_willr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"willr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Weighted Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"zlema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Zero-Lag Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_zlema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_zlema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"zlema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       0 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       0 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start: None,\n                                   indicator: None,\n                                   type_0: 0 as std::os::raw::c_int,\n                                   inputs: 0 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 0 as std::os::raw::c_int,\n                                   input_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         }]\n    };"
      },
      {
        "span": "sample.rs:25:1: 25:71 (#0)",
        "source": "pub static mut out: [[std::os::raw::c_double; 15]; 5] = [[0.; 15]; 5];"
      }
    ],
    "imports": [
      {
        "span": "sample.rs:18:1: 18:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "sample.rs:17:1: 17:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1491 ~ c2rust_out[3c70]::sample::main)",
    "span": "sample.rs:409:1: 420:2 (#0)",
    "pieces": [
      "sample.rs:409:1: 420:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 12,
    "source": "pub fn main() {\n    let mut args: Vec<*mut std::os::raw::c_char> = Vec::new();\n    for arg in ::std::env::args() {\n        args.push(::std::ffi::CString::new(arg).expect(\"Failed to convert argument into CString.\").into_raw());\n    };\n    args.push(::std::ptr::null_mut());\n    unsafe {\n        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,\n                                    args.as_mut_ptr() as\n                                        *mut *mut std::os::raw::c_char) as i32)\n    }\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "sample.rs:17:1: 17:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      },
      {
        "span": "sample.rs:18:1: 18:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:106 ~ c2rust_out[3c70]::indicators::adx::ti_adx)",
    "span": "indicators/adx.rs:38:1: 166:2 (#0)",
    "pieces": [
      "indicators/adx.rs:38:1: 166:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 129,
    "source": "pub unsafe extern \"C\" fn ti_adx(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_adx_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double =\n        (period as std::os::raw::c_double - 1 as std::os::raw::c_int as std::os::raw::c_double) /\n            period as std::os::raw::c_double;\n    let invper: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let mut atr: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut dmup: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut dmdown: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < period {\n        let mut truerange: std::os::raw::c_double = 0.;\n        let l: std::os::raw::c_double = *low.offset(i as isize);\n        let h: std::os::raw::c_double = *high.offset(i as isize);\n        let c: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych: std::os::raw::c_double = fabs(h - c);\n        let ycl: std::os::raw::c_double = fabs(l - c);\n        let mut v: std::os::raw::c_double = h - l;\n        if ych > v { v = ych }\n        if ycl > v { v = ycl }\n        truerange = v;\n        atr += truerange;\n        let mut dp: std::os::raw::c_double = 0.;\n        let mut dm: std::os::raw::c_double = 0.;\n        dp =\n            *high.offset(i as isize) -\n                *high.offset((i - 1 as std::os::raw::c_int) as isize);\n        dm =\n            *low.offset((i - 1 as std::os::raw::c_int) as isize) -\n                *low.offset(i as isize);\n        if dp < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dp = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dp > dm { dm = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        if dm < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dm = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dm > dp { dp = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        dmup += dp;\n        dmdown += dm;\n        i += 1\n    }\n    let mut adx: std::os::raw::c_double = 0.0f64;\n    let mut di_up: std::os::raw::c_double = dmup / atr;\n    let mut di_down: std::os::raw::c_double = dmdown / atr;\n    let mut dm_diff: std::os::raw::c_double = fabs(di_up - di_down);\n    let mut dm_sum: std::os::raw::c_double = di_up + di_down;\n    let mut dx: std::os::raw::c_double =\n        dm_diff / dm_sum * 100 as std::os::raw::c_int as std::os::raw::c_double;\n    adx += dx;\n    i = period;\n    while i < size {\n        let mut truerange_0: std::os::raw::c_double = 0.;\n        let l_0: std::os::raw::c_double = *low.offset(i as isize);\n        let h_0: std::os::raw::c_double = *high.offset(i as isize);\n        let c_0: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych_0: std::os::raw::c_double = fabs(h_0 - c_0);\n        let ycl_0: std::os::raw::c_double = fabs(l_0 - c_0);\n        let mut v_0: std::os::raw::c_double = h_0 - l_0;\n        if ych_0 > v_0 { v_0 = ych_0 }\n        if ycl_0 > v_0 { v_0 = ycl_0 }\n        truerange_0 = v_0;\n        atr = atr * per + truerange_0;\n        let mut dp_0: std::os::raw::c_double = 0.;\n        let mut dm_0: std::os::raw::c_double = 0.;\n        dp_0 =\n            *high.offset(i as isize) -\n                *high.offset((i - 1 as std::os::raw::c_int) as isize);\n        dm_0 =\n            *low.offset((i - 1 as std::os::raw::c_int) as isize) -\n                *low.offset(i as isize);\n        if dp_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dp_0 > dm_0 { dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        if dm_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dm_0 > dp_0 { dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        dmup = dmup * per + dp_0;\n        dmdown = dmdown * per + dm_0;\n        let mut di_up_0: std::os::raw::c_double = dmup / atr;\n        let mut di_down_0: std::os::raw::c_double = dmdown / atr;\n        let mut dm_diff_0: std::os::raw::c_double = fabs(di_up_0 - di_down_0);\n        let mut dm_sum_0: std::os::raw::c_double = di_up_0 + di_down_0;\n        let mut dx_0: std::os::raw::c_double =\n            dm_diff_0 / dm_sum_0 * 100 as std::os::raw::c_int as std::os::raw::c_double;\n        if i - period < period - 2 as std::os::raw::c_int {\n            adx += dx_0\n        } else if i - period == period - 2 as std::os::raw::c_int {\n            adx += dx_0;\n            let fresh0 = output;\n            output = output.offset(1);\n            *fresh0 = adx * invper\n        } else {\n            adx = adx * per + dx_0;\n            let fresh1 = output;\n            output = output.offset(1);\n            *fresh1 = adx * invper\n        }\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_adx_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_adx\\x00\")).as_ptr(),\n                     b\"indicators/adx.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 112 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_adx_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:404 ~ c2rust_out[3c70]::indicators::ln::ti_ln)",
    "span": "indicators/ln.rs:34:1: 50:2 (#0)",
    "pieces": [
      "indicators/ln.rs:34:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_ln(mut size: std::os::raw::c_int,\n                               mut inputs: *const *const std::os::raw::c_double,\n                               mut options: *const std::os::raw::c_double,\n                               mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = log(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:800 ~ c2rust_out[3c70]::indicators::wma::ti_wma_start)",
    "span": "indicators/wma.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/wma.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_wma_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:336 ~ c2rust_out[3c70]::indicators::fosc::ti_fosc_start)",
    "span": "indicators/fosc.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/fosc.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_fosc_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1544 ~ c2rust_out[3c70]::smoke::test_ind_name)",
    "span": "smoke.rs:214:1: 341:2 (#0)",
    "pieces": [
      "smoke.rs:214:1: 341:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 128,
    "source": "pub unsafe extern \"C\" fn test_ind_name(mut fp: *mut FILE,\n                                       mut name: *const std::os::raw::c_char,\n                                       mut count: std::os::raw::c_int) {\n    /*Find indicator from name.*/\n    let mut info: *const ti_indicator_info = ti_find_indicator(name);\n    if info.is_null() {\n        printf(b\"Couldn\\'t find indicator %s\\n\\x00\" as *const u8 as\n                   *const std::os::raw::c_char, name);\n        ltests += 1;\n        if 0 as std::os::raw::c_int == 0 {\n            lfails += 1;\n            printf(b\"%s:%d error \\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   99 as std::os::raw::c_int);\n        }\n        return\n    }\n    let ind_num: std::os::raw::c_int =\n        info.offset_from(ti_indicators.as_mut_ptr()) as std::os::raw::c_long\n            as std::os::raw::c_int;\n    if count != 0 { tested[ind_num as usize] = 1 as std::os::raw::c_int }\n    let mut options: [std::os::raw::c_double; 10] = [0.; 10];\n    let mut o: *mut std::os::raw::c_double = options.as_mut_ptr();\n    let mut s: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;\n    loop  {\n        s =\n            strtok(0 as *mut std::os::raw::c_char,\n                   b\" \\n\\r\\x00\" as *const u8 as *const std::os::raw::c_char);\n        if s.is_null() { break ; }\n        *o = atof(s);\n        o = o.offset(1)\n    }\n    ltests += 1;\n    if o.offset_from(options.as_mut_ptr()) as std::os::raw::c_long as\n           std::os::raw::c_int != (*info).options {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               117 as std::os::raw::c_int,\n               o.offset_from(options.as_mut_ptr()) as std::os::raw::c_long as\n                   std::os::raw::c_int, (*info).options);\n    }\n    let mut i: std::os::raw::c_int = 0;\n    let mut inputs: [*mut std::os::raw::c_double; 10] =\n        [0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double];\n    let mut answers: [*mut std::os::raw::c_double; 10] =\n        [0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double];\n    let mut outputs: [*mut std::os::raw::c_double; 10] =\n        [0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,\n         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double];\n    let mut input_size: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    i = 0 as std::os::raw::c_int;\n    while i < (*info).inputs {\n        inputs[i as usize] =\n            malloc((::std::mem::size_of::<std::os::raw::c_double>() as\n                        std::os::raw::c_ulong).wrapping_mul(512 as std::os::raw::c_int as\n                                                        std::os::raw::c_ulong)) as\n                *mut std::os::raw::c_double;\n        input_size = get_array(fp, inputs[i as usize]);\n        i += 1\n    }\n    let mut answer_size: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    i = 0 as std::os::raw::c_int;\n    while i < (*info).outputs {\n        answers[i as usize] =\n            malloc((::std::mem::size_of::<std::os::raw::c_double>() as\n                        std::os::raw::c_ulong).wrapping_mul(512 as std::os::raw::c_int as\n                                                        std::os::raw::c_ulong)) as\n                *mut std::os::raw::c_double;\n        outputs[i as usize] =\n            malloc((::std::mem::size_of::<std::os::raw::c_double>() as\n                        std::os::raw::c_ulong).wrapping_mul(512 as std::os::raw::c_int as\n                                                        std::os::raw::c_ulong)) as\n                *mut std::os::raw::c_double;\n        answer_size = get_array(fp, answers[i as usize]);\n        i += 1\n    }\n    let ret: std::os::raw::c_int =\n        (*info).indicator.expect(\"non-null function pointer\")(input_size,\n                                                              inputs.as_mut_ptr()\n                                                                  as\n                                                                  *const *const std::os::raw::c_double,\n                                                              options.as_mut_ptr(),\n                                                              outputs.as_mut_ptr());\n    ltests += 1;\n    if !(ret == 0 as std::os::raw::c_int) {\n        lfails += 1;\n        printf(b\"%s:%d error \\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               139 as std::os::raw::c_int);\n    }\n    let mut output_size: std::os::raw::c_int =\n        input_size -\n            (*info).start.expect(\"non-null function pointer\")(options.as_mut_ptr());\n    if output_size < 0 as std::os::raw::c_int { output_size = 0 as std::os::raw::c_int }\n    i = 0 as std::os::raw::c_int;\n    while i < (*info).outputs {\n        compare_arrays(answers[i as usize], outputs[i as usize], answer_size,\n                       output_size);\n        i += 1\n    }\n    i = 0 as std::os::raw::c_int;\n    while i < (*info).inputs {\n        free(inputs[i as usize] as *mut std::os::raw::c_void);\n        i += 1\n    }\n    i = 0 as std::os::raw::c_int;\n    while i < (*info).outputs {\n        free(answers[i as usize] as *mut std::os::raw::c_void);\n        i += 1\n    }\n    i = 0 as std::os::raw::c_int;\n    while i < (*info).outputs {\n        free(outputs[i as usize] as *mut std::os::raw::c_void);\n        i += 1\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:1550 ~ c2rust_out[3c70]::smoke::test)",
        "span": "smoke.rs:385:13: 385:44 (#0)",
        "source": "test_ind_name(fp, name, count);"
      }
    ],
    "globals": [
      {
        "span": "smoke.rs:97:1: 97:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "indicators_index.rs:677:1: 11045:7 (#0)",
        "source": "pub static mut ti_indicators: [ti_indicator_info; 105] =\n    unsafe {\n        [{\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"abs\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Absolute Value\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_abs_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_abs as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"abs\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"acos\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arccosine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_acos_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_acos as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"acos\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Accumulation/Distribution Line\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ad\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"add\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Addition\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_add_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_add as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"add\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Accumulation/Distribution Oscillator\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"adosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adx\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Directional Movement Index\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adx_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adx as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"adxr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Directional Movement Rating\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_adxr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_adxr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ao\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Awesome Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ao_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ao as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ao\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"apo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Absolute Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_apo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_apo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"apo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"aroon\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Aroon\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_aroon_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_aroon as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"aroon_down\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"aroon_up\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"aroonosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Aroon Oscillator\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_aroonosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_aroonosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"aroonosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"asin\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arcsine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_asin_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_asin as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"asin\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"atan\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Arctangent\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_atan_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_atan as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"atan\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"atr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average True Range\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_atr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_atr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"atr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"avgprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Average Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_avgprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_avgprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"avgprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"bbands\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Bollinger Bands\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_bbands_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_bbands as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 3 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"stddev\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"bbands_lower\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"bbands_middle\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"bbands_upper\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"bop\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Balance of Power\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_bop_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_bop as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"bop\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cci\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Commodity Channel Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cci_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cci as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cci\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ceil\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Ceiling\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ceil_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ceil as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ceil\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cmo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Chande Momentum Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cmo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cmo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cmo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cos\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Cosine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cos_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cos as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cos\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cosh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Cosine\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cosh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cosh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cosh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"crossany\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Crossany\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_crossany_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_crossany as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"crossany\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"crossover\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Crossover\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_crossover_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_crossover as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"crossover\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"cvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Chaikins Volatility\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_cvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_cvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"cvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"decay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Decay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_decay_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_decay as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"decay\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Double Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"di\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Indicator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_di_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_di as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"plus_di\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"minus_di\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"div\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Division\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_div_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_div as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"div\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dm\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Movement\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dm_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dm as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"plus_dm\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"minus_dm\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dpo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Detrended Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dpo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dpo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dpo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"dx\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Directional Movement Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_dx_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_dx as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"dx\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"edecay\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Exponential Decay\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_edecay_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_edecay as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"edecay\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Exponential Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"emv\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Ease of Movement\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_emv_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_emv as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"emv\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"exp\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Exponential\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_exp_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_exp as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"exp\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"fisher\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Fisher Transform\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_fisher_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_fisher as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"fisher\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"fisher_signal\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"floor\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Floor\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_floor_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_floor as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"floor\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"fosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Forecast Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_fosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_fosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"fosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"hma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Hull Moving Average\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_hma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_hma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"hma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"kama\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Kaufman Adaptive Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_kama_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_kama as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"kama\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"kvo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Klinger Volume Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_kvo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_kvo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"kvo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"lag\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Lag\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_lag_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_lag as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"lag\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linreg\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linreg_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linreg as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linreg\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linregintercept\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression Intercept\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linregintercept_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linregintercept as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linregintercept\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"linregslope\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Linear Regression Slope\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_linregslope_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_linregslope as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"linregslope\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ln\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Natural Log\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ln_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ln as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ln\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"log10\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Base-10 Log\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_log10_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_log10 as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"log10\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"macd\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Moving Average Convergence/Divergence\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_macd_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_macd as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 3 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"signal period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"macd\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"macd_signal\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"macd_histogram\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"marketfi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Market Facilitation Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_marketfi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_marketfi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"marketfi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mass\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mass Index\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mass_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mass as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mass\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"max\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Maximum In Period\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_max_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_max as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"max\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"md\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mean Deviation Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_md_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_md as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"md\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"medprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Median Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_medprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_medprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"medprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mfi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Money Flow Index\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mfi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mfi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 4 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mfi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"min\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Minimum In Period\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_min_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_min as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"min\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mom\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Momentum\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mom_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mom as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mom\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"msw\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Mesa Sine Wave\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_msw_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_msw as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"msw_sine\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"msw_lead\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"mul\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Multiplication\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_mul_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_mul as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"mul\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"natr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Normalized Average True Range\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_natr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_natr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"natr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"nvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Negative Volume Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_nvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_nvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"nvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"obv\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"On Balance Volume\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_obv_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_obv as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"obv\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ppo\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Percentage Price Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ppo_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ppo as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ppo\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"psar\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Parabolic SAR\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_psar_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_psar as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"acceleration factor step\\x00\" as\n                                            *const u8 as *const std::os::raw::c_char\n                                            as *mut std::os::raw::c_char,\n                                        b\"acceleration factor maximum\\x00\" as\n                                            *const u8 as *const std::os::raw::c_char\n                                            as *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"psar\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"pvi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Positive Volume Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_pvi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_pvi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"pvi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"qstick\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Qstick\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_qstick_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_qstick as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"open\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"qstick\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"roc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Rate of Change\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_roc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_roc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"roc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"rocr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Rate of Change Ratio\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_rocr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_rocr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"rocr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"round\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Round\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_round_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_round as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"round\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"rsi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Relative Strength Index\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_rsi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_rsi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"rsi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sin\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Sine\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sin_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sin as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sin\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sinh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Sine\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sinh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sinh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sinh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Simple Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sqrt\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Square Root\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sqrt_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sqrt as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sqrt\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stddev\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Standard Deviation Over Period\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stddev_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stddev as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stddev\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stderr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Standard Error Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stderr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stderr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stderr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stoch\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Stochastic Oscillator\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stoch_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stoch as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 2 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"%k period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"%k slowing period\\x00\" as *const u8\n                                            as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"%d period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stoch_k\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"stoch_d\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"stochrsi\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Stochastic RSI\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_stochrsi_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_stochrsi as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"stochrsi\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sub\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Subtraction\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sub_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sub as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sub\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"sum\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Sum Over Period\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_sum_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_sum as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"sum\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tan\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Tangent\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tan_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tan as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tan\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tanh\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Hyperbolic Tangent\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tanh_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tanh as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tanh\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Triple Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"todeg\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Degree Conversion\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_todeg_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_todeg as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"degrees\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"torad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Radian Conversion\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_torad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_torad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"radians\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"True Range\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trima\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Triangular Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trima_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trima as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trima\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trix\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Trix\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trix_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trix as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trix\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"trunc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vector Truncate\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_trunc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_trunc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 4 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"trunc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"tsf\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Time Series Forecast\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_tsf_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_tsf as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"tsf\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"typprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Typical Price\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_typprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_typprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"typprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"ultosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Ultimate Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_ultosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_ultosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"medium period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"ultosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"var\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Variance Over Period\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_var_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_var as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 3 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"var\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vhf\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Vertical Horizontal Filter\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vhf_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vhf as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vhf\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vidya\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Variable Index Dynamic Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vidya_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vidya as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 3 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"alpha\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vidya\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"volatility\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Annualized Historical Volatility\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_volatility_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_volatility as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"volatility\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vosc\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Volume Oscillator\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vosc_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vosc as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 2 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"short period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"long period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vosc\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"vwma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Volume Weighted Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_vwma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_vwma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 2 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"volume\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"vwma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wad\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Williams Accumulation/Distribution\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wad_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wad as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wad\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wcprice\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Weighted Close Price\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wcprice_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wcprice as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wcprice\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wilders\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Wilders Smoothing\\x00\" as *const u8\n                                           as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wilders_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wilders as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wilders\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"willr\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Williams %R\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_willr_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_willr as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 2 as std::os::raw::c_int,\n                                   inputs: 3 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"high\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"low\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        b\"close\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"willr\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"wma\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Weighted Moving Average\\x00\" as\n                                           *const u8 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_wma_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_wma as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"wma\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       b\"zlema\\x00\" as *const u8 as\n                                           *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       b\"Zero-Lag Exponential Moving Average\\x00\"\n                                           as *const u8 as *const std::os::raw::c_char\n                                           as *mut std::os::raw::c_char,\n                                   start:\n                                       Some(ti_zlema_start as\n                                                unsafe extern \"C\" fn(_:\n                                                                         *const std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   indicator:\n                                       Some(ti_zlema as\n                                                unsafe extern \"C\" fn(_:\n                                                                         std::os::raw::c_int,\n                                                                     _:\n                                                                         *const *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const std::os::raw::c_double,\n                                                                     _:\n                                                                         *const *mut std::os::raw::c_double)\n                                                    -> std::os::raw::c_int),\n                                   type_0: 1 as std::os::raw::c_int,\n                                   inputs: 1 as std::os::raw::c_int,\n                                   options: 1 as std::os::raw::c_int,\n                                   outputs: 1 as std::os::raw::c_int,\n                                   input_names:\n                                       [b\"real\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [b\"period\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [b\"zlema\\x00\" as *const u8 as\n                                            *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         },\n         {\n             let mut init =\n                 ti_indicator_info{name:\n                                       0 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   full_name:\n                                       0 as *const std::os::raw::c_char as\n                                           *mut std::os::raw::c_char,\n                                   start: None,\n                                   indicator: None,\n                                   type_0: 0 as std::os::raw::c_int,\n                                   inputs: 0 as std::os::raw::c_int,\n                                   options: 0 as std::os::raw::c_int,\n                                   outputs: 0 as std::os::raw::c_int,\n                                   input_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   option_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],\n                                   output_names:\n                                       [0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char,\n                                        0 as *const std::os::raw::c_char as\n                                            *mut std::os::raw::c_char],};\n             init\n         }]\n    };"
      },
      {
        "span": "smoke.rs:98:1: 98:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "smoke.rs:122:1: 127:45 (#0)",
        "source": "pub static mut tested: [std::os::raw::c_int; 104] =\n    [0 as std::os::raw::c_int, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];"
      }
    ],
    "imports": [
      {
        "span": "smoke.rs:42:1: 42:43 (#0)",
        "source": "pub use crate::indicators_index::ti_build;"
      },
      {
        "span": "smoke.rs:43:1: 43:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "smoke.rs:44:1: 44:45 (#0)",
        "source": "pub use crate::indicators_index::ti_version;"
      },
      {
        "span": "smoke.rs:45:1: 45:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "smoke.rs:46:1: 46:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "smoke.rs:41:1: 41:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1550 ~ c2rust_out[3c70]::smoke::test)",
    "span": "smoke.rs:343:1: 400:2 (#0)",
    "pieces": [
      "smoke.rs:343:1: 400:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 58,
    "source": "pub unsafe extern \"C\" fn test(mut fname: *const std::os::raw::c_char,\n                              mut count: std::os::raw::c_int) {\n    /*Read in test values from external file.*/\n    printf(b\"%s:\\n\\x00\" as *const u8 as *const std::os::raw::c_char, fname);\n    let mut fp: *mut FILE =\n        fopen(fname, b\"r\\x00\" as *const u8 as *const std::os::raw::c_char);\n    if fp.is_null() {\n        ltests += 1;\n        if 0 as std::os::raw::c_int == 0 {\n            lfails += 1;\n            printf(b\"%s:%d error \\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   159 as std::os::raw::c_int);\n        }\n        return\n    }\n    let mut line: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;\n    loop  {\n        line = next_line(fp);\n        if line.is_null() { break ; }\n        /*Looking for function name.*/\n        if (*line.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int) <\n               'a' as i32 ||\n               *line.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int >\n                   'z' as i32 {\n            ltests += 1;\n            if 0 as std::os::raw::c_int == 0 {\n                lfails += 1;\n                printf(b\"%s:%d error \\n\\x00\" as *const u8 as\n                           *const std::os::raw::c_char,\n                       b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                       169 as std::os::raw::c_int);\n            }\n        } else {\n            /*Found function*/\n            let mut name: *mut std::os::raw::c_char =\n                strtok(line,\n                       b\" \\n\\r\\x00\" as *const u8 as *const std::os::raw::c_char);\n            let ts: std::os::raw::c_int = ltests;\n            let fs: std::os::raw::c_int = lfails;\n            let start: clock_t = clock();\n            printf(b\"\\t%-16s\\x00\" as *const u8 as *const std::os::raw::c_char, name);\n            test_ind_name(fp, name, count);\n            printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n                       *const std::os::raw::c_char, ltests - ts - (lfails - fs),\n                   lfails - fs,\n                   clock().wrapping_sub(start).wrapping_mul(1000 as\n                                                                std::os::raw::c_int as\n                                                                std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                                as\n                                                                                                std::os::raw::c_int\n                                                                                                as\n                                                                                                std::os::raw::c_ulong)\n                       as std::os::raw::c_int);\n        }\n    }\n    fclose(fp);\n}",
    "calls": [
      {
        "caller": "DefId(0:1553 ~ c2rust_out[3c70]::smoke::main_0)",
        "span": "smoke.rs:641:5: 642:36 (#0)",
        "source": "test(b\"tests/untest.txt\\x00\" as *const u8 as *const std::os::raw::c_char,\n         0 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:1553 ~ c2rust_out[3c70]::smoke::main_0)",
        "span": "smoke.rs:645:5: 646:36 (#0)",
        "source": "test(b\"tests/extra.txt\\x00\" as *const u8 as *const std::os::raw::c_char,\n         1 as std::os::raw::c_int);"
      },
      {
        "caller": "DefId(0:1553 ~ c2rust_out[3c70]::smoke::main_0)",
        "span": "smoke.rs:643:5: 644:36 (#0)",
        "source": "test(b\"tests/atoz.txt\\x00\" as *const u8 as *const std::os::raw::c_char,\n         1 as std::os::raw::c_int);"
      }
    ],
    "globals": [
      {
        "span": "smoke.rs:98:1: 98:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "smoke.rs:97:1: 97:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "smoke.rs:43:1: 43:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "smoke.rs:46:1: 46:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "smoke.rs:45:1: 45:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "smoke.rs:44:1: 44:45 (#0)",
        "source": "pub use crate::indicators_index::ti_version;"
      },
      {
        "span": "smoke.rs:42:1: 42:43 (#0)",
        "source": "pub use crate::indicators_index::ti_build;"
      },
      {
        "span": "smoke.rs:41:1: 41:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:361 ~ c2rust_out[3c70]::indicators::kama::ti_kama)",
    "span": "indicators/kama.rs:40:1: 114:2 (#0)",
    "pieces": [
      "indicators/kama.rs:40:1: 114:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 75,
    "source": "pub unsafe extern \"C\" fn ti_kama(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_kama_start(options) { return 0 as std::os::raw::c_int }\n    /* The caller selects the period used in the efficiency ratio.\n     * The fast and slow periods are hard set by the algorithm. */\n    let short_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (2.0f64 + 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let long_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (30.0f64 + 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < period {\n        sum +=\n            fabs(*input.offset(i as isize) -\n                     *input.offset((i - 1 as std::os::raw::c_int) as isize));\n        i += 1\n    }\n    let mut kama: std::os::raw::c_double =\n        *input.offset((period - 1 as std::os::raw::c_int) as isize);\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = kama;\n    let mut er: std::os::raw::c_double = 0.;\n    let mut sc: std::os::raw::c_double = 0.;\n    i = period;\n    while i < size {\n        sum +=\n            fabs(*input.offset(i as isize) -\n                     *input.offset((i - 1 as std::os::raw::c_int) as isize));\n        if i > period {\n            sum -=\n                fabs(*input.offset((i - period) as isize) -\n                         *input.offset((i - period - 1 as std::os::raw::c_int) as\n                                           isize))\n        }\n        if sum != 0.0f64 {\n            er =\n                fabs(*input.offset(i as isize) -\n                         *input.offset((i - period) as isize)) / sum\n        } else { er = 1.0f64 }\n        sc =\n            pow(er * (short_per - long_per) + long_per,\n                2 as std::os::raw::c_int as std::os::raw::c_double);\n        kama = kama + sc * (*input.offset(i as isize) - kama);\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = kama;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_kama_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_kama\\x00\")).as_ptr(),\n                     b\"indicators/kama.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 75 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_kama_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:708 ~ c2rust_out[3c70]::indicators::tsf::ti_tsf)",
    "span": "indicators/tsf.rs:36:1: 95:2 (#0)",
    "pieces": [
      "indicators/tsf.rs:36:1: 95:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 60,
    "source": "pub unsafe extern \"C\" fn ti_tsf(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_tsf_start(options) { return 0 as std::os::raw::c_int }\n    let mut x: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut x2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut y: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut xy: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let p: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period - 1 as std::os::raw::c_int {\n        x += (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        x2 +=\n            ((i + 1 as std::os::raw::c_int) * (i + 1 as std::os::raw::c_int)) as\n                std::os::raw::c_double;\n        xy +=\n            *input.offset(i as isize) *\n                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        y += *input.offset(i as isize);\n        i += 1\n    }\n    x += period as std::os::raw::c_double;\n    x2 += (period * period) as std::os::raw::c_double;\n    let bd: std::os::raw::c_double = 1.0f64 / (period as std::os::raw::c_double * x2 - x * x);\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        xy += *input.offset(i as isize) * period as std::os::raw::c_double;\n        y += *input.offset(i as isize);\n        let b: std::os::raw::c_double = (period as std::os::raw::c_double * xy - x * y) * bd;\n        let a: std::os::raw::c_double = (y - b * x) * p;\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = a + b * (period + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        xy -= y;\n        y -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_tsf_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_tsf\\x00\")).as_ptr(),\n                     b\"indicators/tsf.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 44 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_tsf_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:234 ~ c2rust_out[3c70]::indicators::crossover::ti_crossover)",
    "span": "indicators/crossover.rs:31:1: 56:2 (#0)",
    "pieces": [
      "indicators/crossover.rs:31:1: 56:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 26,
    "source": "pub unsafe extern \"C\" fn ti_crossover(mut size: std::os::raw::c_int,\n                                      mut inputs:\n                                          *const *const std::os::raw::c_double,\n                                      mut options: *const std::os::raw::c_double,\n                                      mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut a: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut b: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 =\n            (*a.offset(i as isize) > *b.offset(i as isize) &&\n                 *a.offset((i - 1 as std::os::raw::c_int) as isize) <=\n                     *b.offset((i - 1 as std::os::raw::c_int) as isize)) as\n                std::os::raw::c_int as std::os::raw::c_double;\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:298 ~ c2rust_out[3c70]::indicators::edecay::ti_edecay)",
    "span": "indicators/edecay.rs:30:1: 59:2 (#0)",
    "pieces": [
      "indicators/edecay.rs:30:1: 59:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 30,
    "source": "pub unsafe extern \"C\" fn ti_edecay(mut size: std::os::raw::c_int,\n                                   mut inputs: *const *const std::os::raw::c_double,\n                                   mut options: *const std::os::raw::c_double,\n                                   mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let scale: std::os::raw::c_double = 1.0f64 - 1.0f64 / period as std::os::raw::c_double;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = *input.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        let mut d: std::os::raw::c_double =\n            *output.offset(-(1 as std::os::raw::c_int) as isize) * scale;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 =\n            if *input.offset(i as isize) > d {\n                *input.offset(i as isize)\n            } else { d };\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:246 ~ c2rust_out[3c70]::indicators::cvi::ti_cvi)",
    "span": "indicators/cvi.rs:46:1: 107:2 (#0)",
    "pieces": [
      "indicators/cvi.rs:46:1: 107:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 62,
    "source": "pub unsafe extern \"C\" fn ti_cvi(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_cvi_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut lag: *mut ti_buffer = ti_buffer_new(period);\n    let mut val: std::os::raw::c_double =\n        *high.offset(0 as std::os::raw::c_int as isize) -\n            *low.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < period * 2 as std::os::raw::c_int - 1 as std::os::raw::c_int {\n        val =\n            (*high.offset(i as isize) - *low.offset(i as isize) - val) * per +\n                val;\n        *(*lag).vals.as_mut_ptr().offset((*lag).index as isize) = val;\n        (*lag).index = (*lag).index + 1 as std::os::raw::c_int;\n        if (*lag).index >= (*lag).size { (*lag).index = 0 as std::os::raw::c_int }\n        i += 1\n    }\n    i = period * 2 as std::os::raw::c_int - 1 as std::os::raw::c_int;\n    while i < size {\n        val =\n            (*high.offset(i as isize) - *low.offset(i as isize) - val) * per +\n                val;\n        let old: std::os::raw::c_double =\n            *(*lag).vals.as_mut_ptr().offset((*lag).index as isize);\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = 100.0f64 * (val - old) / old;\n        *(*lag).vals.as_mut_ptr().offset((*lag).index as isize) = val;\n        (*lag).index = (*lag).index + 1 as std::os::raw::c_int;\n        if (*lag).index >= (*lag).size { (*lag).index = 0 as std::os::raw::c_int }\n        i += 1\n    }\n    ti_buffer_free(lag);\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_cvi_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_cvi\\x00\")).as_ptr(),\n                     b\"indicators/cvi.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 66 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_cvi_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/cvi.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "indicators/cvi.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:793 ~ c2rust_out[3c70]::indicators::willr::ti_willr_start)",
    "span": "indicators/willr.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/willr.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_willr_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:484 ~ c2rust_out[3c70]::indicators::mom::ti_mom_start)",
    "span": "indicators/mom.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/mom.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_mom_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:560 ~ c2rust_out[3c70]::indicators::rocr::ti_rocr_start)",
    "span": "indicators/rocr.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/rocr.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_rocr_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:458 ~ c2rust_out[3c70]::indicators::medprice::ti_medprice_start)",
    "span": "indicators/medprice.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/medprice.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_medprice_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:93 ~ c2rust_out[3c70]::indicators::add::ti_add_start)",
    "span": "indicators/add.rs:46:1: 49:2 (#0)",
    "pieces": [
      "indicators/add.rs:46:1: 49:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_add_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1538 ~ c2rust_out[3c70]::smoke::compare_arrays)",
    "span": "smoke.rs:130:1: 158:2 (#0)",
    "pieces": [
      "smoke.rs:130:1: 158:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 29,
    "source": "pub unsafe extern \"C\" fn compare_arrays(mut a: *mut std::os::raw::c_double,\n                                        mut b: *mut std::os::raw::c_double,\n                                        mut size_a: std::os::raw::c_int,\n                                        mut size_b: std::os::raw::c_int) {\n    let mut i: std::os::raw::c_int = 0;\n    ltests += 1;\n    if size_a != size_b {\n        lfails += 1;\n        printf(b\"%s:%d (%d != %d)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               36 as std::os::raw::c_int, size_a, size_b);\n    }\n    if size_a != size_b {\n        printf(b\"Size mismatch.\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n    }\n    i = 0 as std::os::raw::c_int;\n    while i < size_a {\n        ltests += 1;\n        if fabs(*a.offset(i as isize) - *b.offset(i as isize)) > 0.001f64 {\n            lfails += 1;\n            printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as\n                       *const std::os::raw::c_char,\n                   b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   42 as std::os::raw::c_int, *a.offset(i as isize),\n                   *b.offset(i as isize));\n        }\n        i += 1\n    };\n}",
    "calls": [],
    "globals": [
      {
        "span": "smoke.rs:98:1: 98:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "smoke.rs:97:1: 97:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "smoke.rs:42:1: 42:43 (#0)",
        "source": "pub use crate::indicators_index::ti_build;"
      },
      {
        "span": "smoke.rs:46:1: 46:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "smoke.rs:45:1: 45:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "smoke.rs:41:1: 41:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      },
      {
        "span": "smoke.rs:44:1: 44:45 (#0)",
        "source": "pub use crate::indicators_index::ti_version;"
      },
      {
        "span": "smoke.rs:43:1: 43:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:126 ~ c2rust_out[3c70]::indicators::ao::ti_ao_start)",
    "span": "indicators/ao.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/ao.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_ao_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 33 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1551 ~ c2rust_out[3c70]::smoke::test_version)",
    "span": "smoke.rs:402:1: 418:2 (#0)",
    "pieces": [
      "smoke.rs:402:1: 418:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn test_version() {\n    ltests += 1;\n    if !(strcmp(b\"0.8.4\\x00\" as *const u8 as *const std::os::raw::c_char,\n                ti_version()) == 0 as std::os::raw::c_int) {\n        lfails += 1;\n        printf(b\"%s:%d error \\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               183 as std::os::raw::c_int);\n    }\n    ltests += 1;\n    if !(1537377628 as std::os::raw::c_int as std::os::raw::c_long == ti_build()) {\n        lfails += 1;\n        printf(b\"%s:%d error \\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               184 as std::os::raw::c_int);\n    };\n}",
    "calls": [
      {
        "caller": "DefId(0:1553 ~ c2rust_out[3c70]::smoke::main_0)",
        "span": "smoke.rs:630:5: 630:20 (#0)",
        "source": "test_version();"
      }
    ],
    "globals": [
      {
        "span": "smoke.rs:97:1: 97:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "smoke.rs:98:1: 98:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "smoke.rs:43:1: 43:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "smoke.rs:44:1: 44:45 (#0)",
        "source": "pub use crate::indicators_index::ti_version;"
      },
      {
        "span": "smoke.rs:46:1: 46:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "smoke.rs:42:1: 42:43 (#0)",
        "source": "pub use crate::indicators_index::ti_build;"
      },
      {
        "span": "smoke.rs:41:1: 41:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      },
      {
        "span": "smoke.rs:45:1: 45:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:650 ~ c2rust_out[3c70]::indicators::sum::ti_sum_start)",
    "span": "indicators/sum.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/sum.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_sum_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:233 ~ c2rust_out[3c70]::indicators::crossover::ti_crossover_start)",
    "span": "indicators/crossover.rs:25:1: 29:2 (#0)",
    "pieces": [
      "indicators/crossover.rs:25:1: 29:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub extern \"C\" fn ti_crossover_start(mut options:\n                                                *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:509 ~ c2rust_out[3c70]::indicators::natr::ti_natr)",
    "span": "indicators/natr.rs:38:1: 115:2 (#0)",
    "pieces": [
      "indicators/natr.rs:38:1: 115:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 78,
    "source": "pub unsafe extern \"C\" fn ti_natr(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_natr_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut truerange: std::os::raw::c_double = 0.;\n    sum +=\n        *high.offset(0 as std::os::raw::c_int as isize) -\n            *low.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < period {\n        let l: std::os::raw::c_double = *low.offset(i as isize);\n        let h: std::os::raw::c_double = *high.offset(i as isize);\n        let c: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych: std::os::raw::c_double = fabs(h - c);\n        let ycl: std::os::raw::c_double = fabs(l - c);\n        let mut v: std::os::raw::c_double = h - l;\n        if ych > v { v = ych }\n        if ycl > v { v = ycl }\n        truerange = v;\n        sum += truerange;\n        i += 1\n    }\n    let mut val: std::os::raw::c_double = sum / period as std::os::raw::c_double;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 =\n        100 as std::os::raw::c_int as std::os::raw::c_double * val /\n            *close.offset((period - 1 as std::os::raw::c_int) as isize);\n    i = period;\n    while i < size {\n        let l_0: std::os::raw::c_double = *low.offset(i as isize);\n        let h_0: std::os::raw::c_double = *high.offset(i as isize);\n        let c_0: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych_0: std::os::raw::c_double = fabs(h_0 - c_0);\n        let ycl_0: std::os::raw::c_double = fabs(l_0 - c_0);\n        let mut v_0: std::os::raw::c_double = h_0 - l_0;\n        if ych_0 > v_0 { v_0 = ych_0 }\n        if ycl_0 > v_0 { v_0 = ycl_0 }\n        truerange = v_0;\n        val = (truerange - val) * per + val;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 =\n            100 as std::os::raw::c_int as std::os::raw::c_double * val /\n                *close.offset(i as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_natr_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_natr\\x00\")).as_ptr(),\n                     b\"indicators/natr.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 69 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_natr_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:781 ~ c2rust_out[3c70]::indicators::wcprice::ti_wcprice_start)",
    "span": "indicators/wcprice.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/wcprice.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_wcprice_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:658 ~ c2rust_out[3c70]::indicators::tan::ti_tan_start)",
    "span": "indicators/tan.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/tan.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_tan_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:276 ~ c2rust_out[3c70]::indicators::dm::ti_dm)",
    "span": "indicators/dm.rs:36:1: 134:2 (#0)",
    "pieces": [
      "indicators/dm.rs:36:1: 134:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 99,
    "source": "pub unsafe extern \"C\" fn ti_dm(mut size: std::os::raw::c_int,\n                               mut inputs: *const *const std::os::raw::c_double,\n                               mut options: *const std::os::raw::c_double,\n                               mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut plus_dm: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut minus_dm: *mut std::os::raw::c_double =\n        *outputs.offset(1 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_dm_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double =\n        (period as std::os::raw::c_double - 1 as std::os::raw::c_int as std::os::raw::c_double) /\n            period as std::os::raw::c_double;\n    let mut dmup: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut dmdown: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < period {\n        let mut dp: std::os::raw::c_double = 0.;\n        let mut dm: std::os::raw::c_double = 0.;\n        dp =\n            *high.offset(i as isize) -\n                *high.offset((i - 1 as std::os::raw::c_int) as isize);\n        dm =\n            *low.offset((i - 1 as std::os::raw::c_int) as isize) -\n                *low.offset(i as isize);\n        if dp < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dp = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dp > dm { dm = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        if dm < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dm = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dm > dp { dp = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        dmup += dp;\n        dmdown += dm;\n        i += 1\n    }\n    let fresh0 = plus_dm;\n    plus_dm = plus_dm.offset(1);\n    *fresh0 = dmup;\n    let fresh1 = minus_dm;\n    minus_dm = minus_dm.offset(1);\n    *fresh1 = dmdown;\n    i = period;\n    while i < size {\n        let mut dp_0: std::os::raw::c_double = 0.;\n        let mut dm_0: std::os::raw::c_double = 0.;\n        dp_0 =\n            *high.offset(i as isize) -\n                *high.offset((i - 1 as std::os::raw::c_int) as isize);\n        dm_0 =\n            *low.offset((i - 1 as std::os::raw::c_int) as isize) -\n                *low.offset(i as isize);\n        if dp_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dp_0 > dm_0 { dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        if dm_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dm_0 > dp_0 { dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        dmup = dmup * per + dp_0;\n        dmdown = dmdown * per + dm_0;\n        let fresh2 = plus_dm;\n        plus_dm = plus_dm.offset(1);\n        *fresh2 = dmup;\n        let fresh3 = minus_dm;\n        minus_dm = minus_dm.offset(1);\n        *fresh3 = dmdown;\n        i += 1\n    }\n    if !(plus_dm.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                          isize)) as\n             std::os::raw::c_long == (size - ti_dm_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 6],\n                                               &[std::os::raw::c_char; 6]>(b\"ti_dm\\x00\")).as_ptr(),\n                     b\"indicators/dm.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 77 as std::os::raw::c_int,\n                     b\"plus_dm - outputs[0] == size - ti_dm_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    if !(minus_dm.offset_from(*outputs.offset(1 as std::os::raw::c_int as\n                                                           isize)) as\n             std::os::raw::c_long == (size - ti_dm_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 6],\n                                               &[std::os::raw::c_char; 6]>(b\"ti_dm\\x00\")).as_ptr(),\n                     b\"indicators/dm.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 78 as std::os::raw::c_int,\n                     b\"minus_dm - outputs[1] == size - ti_dm_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:164 ~ c2rust_out[3c70]::indicators::atan::ti_atan)",
    "span": "indicators/atan.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/atan.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_atan(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = atan(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:222 ~ c2rust_out[3c70]::indicators::cos::ti_cos)",
    "span": "indicators/cos.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/cos.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_cos(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = cos(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:390 ~ c2rust_out[3c70]::indicators::linregintercept::ti_linregintercept)",
    "span": "indicators/linregintercept.rs:37:1: 100:2 (#0)",
    "pieces": [
      "indicators/linregintercept.rs:37:1: 100:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 64,
    "source": "pub unsafe extern \"C\" fn ti_linregintercept(mut size: std::os::raw::c_int,\n                                            mut inputs:\n                                                *const *const std::os::raw::c_double,\n                                            mut options:\n                                                *const std::os::raw::c_double,\n                                            mut outputs:\n                                                *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_linregintercept_start(options) { return 0 as std::os::raw::c_int }\n    let mut x: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut x2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut y: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut xy: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let p: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period - 1 as std::os::raw::c_int {\n        x += (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        x2 +=\n            ((i + 1 as std::os::raw::c_int) * (i + 1 as std::os::raw::c_int)) as\n                std::os::raw::c_double;\n        xy +=\n            *input.offset(i as isize) *\n                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        y += *input.offset(i as isize);\n        i += 1\n    }\n    x += period as std::os::raw::c_double;\n    x2 += (period * period) as std::os::raw::c_double;\n    let bd: std::os::raw::c_double = 1.0f64 / (period as std::os::raw::c_double * x2 - x * x);\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        xy += *input.offset(i as isize) * period as std::os::raw::c_double;\n        y += *input.offset(i as isize);\n        let b: std::os::raw::c_double = (period as std::os::raw::c_double * xy - x * y) * bd;\n        let a: std::os::raw::c_double = (y - b * x) * p;\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = a + b * 1 as std::os::raw::c_int as std::os::raw::c_double;\n        xy -= y;\n        y -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_linregintercept_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 19],\n                                               &[std::os::raw::c_char; 19]>(b\"ti_linregintercept\\x00\")).as_ptr(),\n                     b\"indicators/linregintercept.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 43 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_linregintercept_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:596 ~ c2rust_out[3c70]::indicators::sqrt::ti_sqrt)",
    "span": "indicators/sqrt.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/sqrt.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_sqrt(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = sqrt(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:724 ~ c2rust_out[3c70]::indicators::ultosc::ti_ultosc_start)",
    "span": "indicators/ultosc.rs:39:1: 42:2 (#0)",
    "pieces": [
      "indicators/ultosc.rs:39:1: 42:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_ultosc_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/ultosc.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "indicators/ultosc.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:732 ~ c2rust_out[3c70]::indicators::var::ti_var)",
    "span": "indicators/var.rs:36:1: 87:2 (#0)",
    "pieces": [
      "indicators/var.rs:36:1: 87:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 52,
    "source": "pub unsafe extern \"C\" fn ti_var(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_var_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut sum2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period {\n        sum += *input.offset(i as isize);\n        sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        i += 1\n    }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = sum2 * scale - sum * scale * (sum * scale);\n    i = period;\n    while i < size {\n        sum += *input.offset(i as isize);\n        sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        sum -= *input.offset((i - period) as isize);\n        sum2 -=\n            *input.offset((i - period) as isize) *\n                *input.offset((i - period) as isize);\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = sum2 * scale - sum * scale * (sum * scale);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_var_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_var\\x00\")).as_ptr(),\n                     b\"indicators/var.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 64 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_var_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:302 ~ c2rust_out[3c70]::indicators::ema::ti_ema_start)",
    "span": "indicators/ema.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/ema.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_ema_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:36 ~ c2rust_out[3c70]::example2::main)",
    "span": "example2.rs:109:1: 109:67 (#0)",
    "pieces": [
      "example2.rs:109:1: 109:67 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 1,
    "source": "pub fn main() { unsafe { ::std::process::exit(main_0() as i32) } }",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "example2.rs:8:1: 8:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:414 ~ c2rust_out[3c70]::indicators::macd::ti_macd)",
    "span": "indicators/macd.rs:38:1: 141:2 (#0)",
    "pieces": [
      "indicators/macd.rs:38:1: 141:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 104,
    "source": "pub unsafe extern \"C\" fn ti_macd(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut macd: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut signal: *mut std::os::raw::c_double =\n        *outputs.offset(1 as std::os::raw::c_int as isize);\n    let mut hist: *mut std::os::raw::c_double =\n        *outputs.offset(2 as std::os::raw::c_int as isize);\n    let short_period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let long_period: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let signal_period: std::os::raw::c_int =\n        *options.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if long_period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if long_period < short_period { return 1 as std::os::raw::c_int }\n    if signal_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_macd_start(options) { return 0 as std::os::raw::c_int }\n    let mut short_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (short_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut long_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (long_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut signal_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (signal_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    if short_period == 12 as std::os::raw::c_int && long_period == 26 as std::os::raw::c_int {\n        /* I don't like this, but it's what people expect. */\n        short_per = 0.15f64;\n        long_per = 0.075f64\n    }\n    let mut short_ema: std::os::raw::c_double =\n        *input.offset(0 as std::os::raw::c_int as isize);\n    let mut long_ema: std::os::raw::c_double =\n        *input.offset(0 as std::os::raw::c_int as isize);\n    let mut signal_ema: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        short_ema =\n            (*input.offset(i as isize) - short_ema) * short_per + short_ema;\n        long_ema =\n            (*input.offset(i as isize) - long_ema) * long_per + long_ema;\n        let out: std::os::raw::c_double = short_ema - long_ema;\n        if i == long_period - 1 as std::os::raw::c_int { signal_ema = out }\n        if i >= long_period - 1 as std::os::raw::c_int {\n            signal_ema = (out - signal_ema) * signal_per + signal_ema;\n            let fresh0 = macd;\n            macd = macd.offset(1);\n            *fresh0 = out;\n            let fresh1 = signal;\n            signal = signal.offset(1);\n            *fresh1 = signal_ema;\n            let fresh2 = hist;\n            hist = hist.offset(1);\n            *fresh2 = out - signal_ema\n        }\n        i += 1\n    }\n    if !(macd.offset_from(*outputs.offset(0 as std::os::raw::c_int as isize))\n             as std::os::raw::c_long ==\n             (size - ti_macd_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_macd\\x00\")).as_ptr(),\n                     b\"indicators/macd.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 86 as std::os::raw::c_int,\n                     b\"macd - outputs[0] == size - ti_macd_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    if !(signal.offset_from(*outputs.offset(1 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_macd_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_macd\\x00\")).as_ptr(),\n                     b\"indicators/macd.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 87 as std::os::raw::c_int,\n                     b\"signal - outputs[1] == size - ti_macd_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    if !(hist.offset_from(*outputs.offset(2 as std::os::raw::c_int as isize))\n             as std::os::raw::c_long ==\n             (size - ti_macd_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_macd\\x00\")).as_ptr(),\n                     b\"indicators/macd.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 88 as std::os::raw::c_int,\n                     b\"hist - outputs[2] == size - ti_macd_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:223 ~ c2rust_out[3c70]::indicators::cos::ti_cos_start)",
    "span": "indicators/cos.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/cos.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_cos_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:496 ~ c2rust_out[3c70]::indicators::msw::ti_msw)",
    "span": "indicators/msw.rs:43:1: 128:2 (#0)",
    "pieces": [
      "indicators/msw.rs:43:1: 128:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 86,
    "source": "pub unsafe extern \"C\" fn ti_msw(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut sine: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut lead: *mut std::os::raw::c_double =\n        *outputs.offset(1 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_msw_start(options) { return 0 as std::os::raw::c_int }\n    let pi: std::os::raw::c_double = 3.1415926f64;\n    let tpi: std::os::raw::c_double = 2 as std::os::raw::c_int as std::os::raw::c_double * pi;\n    let mut weight: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut phase: std::os::raw::c_double = 0.;\n    let mut rp: std::os::raw::c_double = 0.;\n    let mut ip: std::os::raw::c_double = 0.;\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = period;\n    while i < size {\n        rp = 0 as std::os::raw::c_int as std::os::raw::c_double;\n        ip = 0 as std::os::raw::c_int as std::os::raw::c_double;\n        j = 0 as std::os::raw::c_int;\n        while j < period {\n            weight = *input.offset((i - j) as isize);\n            rp =\n                rp +\n                    cos(tpi * j as std::os::raw::c_double / period as std::os::raw::c_double)\n                        * weight;\n            ip =\n                ip +\n                    sin(tpi * j as std::os::raw::c_double / period as std::os::raw::c_double)\n                        * weight;\n            j += 1\n        }\n        if fabs(rp) > 0.001f64 {\n            phase = atan(ip / rp)\n        } else {\n            phase =\n                tpi / 2.0f64 *\n                    (if ip < 0 as std::os::raw::c_int as std::os::raw::c_double {\n                         -1.0f64\n                     } else { 1.0f64 })\n        }\n        if rp < 0.0f64 { phase += pi }\n        phase += pi / 2.0f64;\n        if phase < 0.0f64 { phase += tpi }\n        if phase > tpi { phase -= tpi }\n        //phase = 180 * phase / pi;\n        let fresh0 = sine;\n        sine = sine.offset(1);\n        *fresh0 = sin(phase);\n        let fresh1 = lead;\n        lead = lead.offset(1);\n        *fresh1 = sin(phase + pi / 4.0f64);\n        i += 1\n    }\n    if !(sine.offset_from(*outputs.offset(0 as std::os::raw::c_int as isize))\n             as std::os::raw::c_long ==\n             (size - ti_msw_start(options)) as std::os::raw::c_long) as std::os::raw::c_int as\n           std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_msw\\x00\")).as_ptr(),\n                     b\"indicators/msw.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 73 as std::os::raw::c_int,\n                     b\"sine - outputs[0] == size - ti_msw_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    if !(lead.offset_from(*outputs.offset(1 as std::os::raw::c_int as isize))\n             as std::os::raw::c_long ==\n             (size - ti_msw_start(options)) as std::os::raw::c_long) as std::os::raw::c_int as\n           std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_msw\\x00\")).as_ptr(),\n                     b\"indicators/msw.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 74 as std::os::raw::c_int,\n                     b\"lead - outputs[1] == size - ti_msw_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:663 ~ c2rust_out[3c70]::indicators::tanh::ti_tanh_start)",
    "span": "indicators/tanh.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/tanh.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_tanh_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:702 ~ c2rust_out[3c70]::indicators::trunc::ti_trunc)",
    "span": "indicators/trunc.rs:25:1: 42:2 (#0)",
    "pieces": [
      "indicators/trunc.rs:25:1: 42:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 18,
    "source": "pub unsafe extern \"C\" fn ti_trunc(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            *in1.offset(i as isize) as std::os::raw::c_int as std::os::raw::c_double;\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:516 ~ c2rust_out[3c70]::indicators::nvi::ti_nvi)",
    "span": "indicators/nvi.rs:35:1: 78:2 (#0)",
    "pieces": [
      "indicators/nvi.rs:35:1: 78:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 44,
    "source": "pub unsafe extern \"C\" fn ti_nvi(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut volume: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if size <= ti_nvi_start(options) { return 0 as std::os::raw::c_int }\n    let mut nvi: std::os::raw::c_double = 1000 as std::os::raw::c_int as std::os::raw::c_double;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = nvi;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        if *volume.offset(i as isize) <\n               *volume.offset((i - 1 as std::os::raw::c_int) as isize) {\n            nvi +=\n                (*close.offset(i as isize) -\n                     *close.offset((i - 1 as std::os::raw::c_int) as isize)) /\n                    *close.offset((i - 1 as std::os::raw::c_int) as isize) * nvi\n        }\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = nvi;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_nvi_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_nvi\\x00\")).as_ptr(),\n                     b\"indicators/nvi.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 56 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_nvi_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:152 ~ c2rust_out[3c70]::indicators::aroonosc::ti_aroonosc_start)",
    "span": "indicators/aroonosc.rs:33:1: 36:2 (#0)",
    "pieces": [
      "indicators/aroonosc.rs:33:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_aroonosc_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/aroonosc.rs:9:1: 9:50 (#0)",
        "source": "pub use crate::indicators::aroon::ti_aroon_start;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:369 ~ c2rust_out[3c70]::indicators::kvo::ti_kvo)",
    "span": "indicators/kvo.rs:37:1: 126:2 (#0)",
    "pieces": [
      "indicators/kvo.rs:37:1: 126:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 90,
    "source": "pub unsafe extern \"C\" fn ti_kvo(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut volume: *const std::os::raw::c_double =\n        *inputs.offset(3 as std::os::raw::c_int as isize);\n    let short_period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let long_period: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if long_period < short_period { return 1 as std::os::raw::c_int }\n    if size <= ti_kvo_start(options) { return 0 as std::os::raw::c_int }\n    let short_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (short_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let long_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (long_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut cm: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut prev_hlc: std::os::raw::c_double =\n        *high.offset(0 as std::os::raw::c_int as isize) +\n            *low.offset(0 as std::os::raw::c_int as isize) +\n            *close.offset(0 as std::os::raw::c_int as isize);\n    let mut trend: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut short_ema: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut long_ema: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        let hlc: std::os::raw::c_double =\n            *high.offset(i as isize) + *low.offset(i as isize) +\n                *close.offset(i as isize);\n        let dm: std::os::raw::c_double =\n            *high.offset(i as isize) - *low.offset(i as isize);\n        if hlc > prev_hlc && trend != 1 as std::os::raw::c_int {\n            trend = 1 as std::os::raw::c_int;\n            cm =\n                *high.offset((i - 1 as std::os::raw::c_int) as isize) -\n                    *low.offset((i - 1 as std::os::raw::c_int) as isize)\n        } else if hlc < prev_hlc && trend != 0 as std::os::raw::c_int {\n            trend = 0 as std::os::raw::c_int;\n            cm =\n                *high.offset((i - 1 as std::os::raw::c_int) as isize) -\n                    *low.offset((i - 1 as std::os::raw::c_int) as isize)\n        }\n        cm += dm;\n        let vf: std::os::raw::c_double =\n            *volume.offset(i as isize) *\n                fabs(dm / cm * 2 as std::os::raw::c_int as std::os::raw::c_double -\n                         1 as std::os::raw::c_int as std::os::raw::c_double) *\n                100 as std::os::raw::c_int as std::os::raw::c_double *\n                (if trend != 0 { 1.0f64 } else { -1.0f64 });\n        if i == 1 as std::os::raw::c_int {\n            short_ema = vf;\n            long_ema = vf\n        } else {\n            short_ema = (vf - short_ema) * short_per + short_ema;\n            long_ema = (vf - long_ema) * long_per + long_ema\n        }\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = short_ema - long_ema;\n        prev_hlc = hlc;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_kvo_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_kvo\\x00\")).as_ptr(),\n                     b\"indicators/kvo.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 88 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_kvo_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:624 ~ c2rust_out[3c70]::indicators::stoch::ti_stoch_start)",
    "span": "indicators/stoch.rs:39:1: 48:2 (#0)",
    "pieces": [
      "indicators/stoch.rs:39:1: 48:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 10,
    "source": "pub unsafe extern \"C\" fn ti_stoch_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let kperiod: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let kslow: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let dperiod: std::os::raw::c_int =\n        *options.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    return kperiod + kslow + dperiod - 3 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/stoch.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "indicators/stoch.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:292 ~ c2rust_out[3c70]::indicators::dx::ti_dx_start)",
    "span": "indicators/dx.rs:32:1: 36:2 (#0)",
    "pieces": [
      "indicators/dx.rs:32:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_dx_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:526 ~ c2rust_out[3c70]::indicators::ppo::ti_ppo)",
    "span": "indicators/ppo.rs:35:1: 90:2 (#0)",
    "pieces": [
      "indicators/ppo.rs:35:1: 90:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 56,
    "source": "pub unsafe extern \"C\" fn ti_ppo(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut ppo: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let short_period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let long_period: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if long_period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if long_period < short_period { return 1 as std::os::raw::c_int }\n    if size <= ti_ppo_start(options) { return 0 as std::os::raw::c_int }\n    let mut short_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (short_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut long_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (long_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut short_ema: std::os::raw::c_double =\n        *input.offset(0 as std::os::raw::c_int as isize);\n    let mut long_ema: std::os::raw::c_double =\n        *input.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        short_ema =\n            (*input.offset(i as isize) - short_ema) * short_per + short_ema;\n        long_ema =\n            (*input.offset(i as isize) - long_ema) * long_per + long_ema;\n        let out: std::os::raw::c_double =\n            100.0f64 * (short_ema - long_ema) / long_ema;\n        let fresh0 = ppo;\n        ppo = ppo.offset(1);\n        *fresh0 = out;\n        i += 1\n    }\n    if !(ppo.offset_from(*outputs.offset(0 as std::os::raw::c_int as isize))\n             as std::os::raw::c_long ==\n             (size - ti_ppo_start(options)) as std::os::raw::c_long) as std::os::raw::c_int as\n           std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_ppo\\x00\")).as_ptr(),\n                     b\"indicators/ppo.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 63 as std::os::raw::c_int,\n                     b\"ppo - outputs[0] == size - ti_ppo_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:554 ~ c2rust_out[3c70]::indicators::roc::ti_roc)",
    "span": "indicators/roc.rs:35:1: 70:2 (#0)",
    "pieces": [
      "indicators/roc.rs:35:1: 70:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 36,
    "source": "pub unsafe extern \"C\" fn ti_roc(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_roc_start(options) { return 0 as std::os::raw::c_int }\n    let mut i: std::os::raw::c_int = 0;\n    i = period;\n    while i < size {\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 =\n            (*input.offset(i as isize) - *input.offset((i - period) as isize))\n                / *input.offset((i - period) as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_roc_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_roc\\x00\")).as_ptr(),\n                     b\"indicators/roc.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 46 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_roc_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:92 ~ c2rust_out[3c70]::indicators::add::ti_add)",
    "span": "indicators/add.rs:25:1: 44:2 (#0)",
    "pieces": [
      "indicators/add.rs:25:1: 44:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 20,
    "source": "pub unsafe extern \"C\" fn ti_add(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut in2: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            *in1.offset(i as isize) + *in2.offset(i as isize);\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:245 ~ c2rust_out[3c70]::indicators::cvi::ti_cvi_start)",
    "span": "indicators/cvi.rs:39:1: 44:2 (#0)",
    "pieces": [
      "indicators/cvi.rs:39:1: 44:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn ti_cvi_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let n: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    return n * 2 as std::os::raw::c_int - 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/cvi.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "indicators/cvi.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:725 ~ c2rust_out[3c70]::indicators::ultosc::ti_ultosc)",
    "span": "indicators/ultosc.rs:44:1: 171:2 (#0)",
    "pieces": [
      "indicators/ultosc.rs:44:1: 171:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 128,
    "source": "pub unsafe extern \"C\" fn ti_ultosc(mut size: std::os::raw::c_int,\n                                   mut inputs: *const *const std::os::raw::c_double,\n                                   mut options: *const std::os::raw::c_double,\n                                   mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let short_period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let medium_period: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let long_period: std::os::raw::c_int =\n        *options.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if medium_period < short_period { return 1 as std::os::raw::c_int }\n    if long_period < medium_period { return 1 as std::os::raw::c_int }\n    if size <= ti_ultosc_start(options) { return 0 as std::os::raw::c_int }\n    let mut bp_buf: *mut ti_buffer = ti_buffer_new(long_period);\n    let mut r_buf: *mut ti_buffer = ti_buffer_new(long_period);\n    let mut bp_short_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut bp_medium_sum: std::os::raw::c_double =\n        0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut r_short_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut r_medium_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        let true_low: std::os::raw::c_double =\n            if *low.offset(i as isize) <\n                   *close.offset((i - 1 as std::os::raw::c_int) as isize) {\n                *low.offset(i as isize)\n            } else { *close.offset((i - 1 as std::os::raw::c_int) as isize) };\n        let true_high: std::os::raw::c_double =\n            if *high.offset(i as isize) >\n                   *close.offset((i - 1 as std::os::raw::c_int) as isize) {\n                *high.offset(i as isize)\n            } else { *close.offset((i - 1 as std::os::raw::c_int) as isize) };\n        let bp: std::os::raw::c_double = *close.offset(i as isize) - true_low;\n        let r: std::os::raw::c_double = true_high - true_low;\n        bp_short_sum += bp;\n        bp_medium_sum += bp;\n        r_short_sum += r;\n        r_medium_sum += r;\n        if (*bp_buf).pushes >= (*bp_buf).size {\n            (*bp_buf).sum -=\n                *(*bp_buf).vals.as_mut_ptr().offset((*bp_buf).index as isize)\n        }\n        (*bp_buf).sum += bp;\n        *(*bp_buf).vals.as_mut_ptr().offset((*bp_buf).index as isize) = bp;\n        (*bp_buf).pushes += 1 as std::os::raw::c_int;\n        (*bp_buf).index = (*bp_buf).index + 1 as std::os::raw::c_int;\n        if (*bp_buf).index >= (*bp_buf).size {\n            (*bp_buf).index = 0 as std::os::raw::c_int\n        }\n        if (*r_buf).pushes >= (*r_buf).size {\n            (*r_buf).sum -=\n                *(*r_buf).vals.as_mut_ptr().offset((*r_buf).index as isize)\n        }\n        (*r_buf).sum += r;\n        *(*r_buf).vals.as_mut_ptr().offset((*r_buf).index as isize) = r;\n        (*r_buf).pushes += 1 as std::os::raw::c_int;\n        (*r_buf).index = (*r_buf).index + 1 as std::os::raw::c_int;\n        if (*r_buf).index >= (*r_buf).size {\n            (*r_buf).index = 0 as std::os::raw::c_int\n        }\n        /* The long sum takes care of itself, but we're piggy-backing\n         * the medium and short sums off the same buffers. */\n        if i > short_period {\n            let mut short_index: std::os::raw::c_int =\n                (*bp_buf).index - short_period - 1 as std::os::raw::c_int;\n            if short_index < 0 as std::os::raw::c_int { short_index += long_period }\n            bp_short_sum -=\n                *(*bp_buf).vals.as_mut_ptr().offset(short_index as isize);\n            r_short_sum -=\n                *(*r_buf).vals.as_mut_ptr().offset(short_index as isize);\n            if i > medium_period {\n                let mut medium_index: std::os::raw::c_int =\n                    (*bp_buf).index - medium_period - 1 as std::os::raw::c_int;\n                if medium_index < 0 as std::os::raw::c_int {\n                    medium_index += long_period\n                }\n                bp_medium_sum -=\n                    *(*bp_buf).vals.as_mut_ptr().offset(medium_index as\n                                                            isize);\n                r_medium_sum -=\n                    *(*r_buf).vals.as_mut_ptr().offset(medium_index as isize)\n            }\n        }\n        if i >= long_period {\n            let first: std::os::raw::c_double =\n                4 as std::os::raw::c_int as std::os::raw::c_double * bp_short_sum /\n                    r_short_sum;\n            let second: std::os::raw::c_double =\n                2 as std::os::raw::c_int as std::os::raw::c_double * bp_medium_sum /\n                    r_medium_sum;\n            let third: std::os::raw::c_double =\n                1 as std::os::raw::c_int as std::os::raw::c_double * (*bp_buf).sum /\n                    (*r_buf).sum;\n            let ult: std::os::raw::c_double =\n                (first + second + third) * 100.0f64 / 7.0f64;\n            let fresh0 = output;\n            output = output.offset(1);\n            *fresh0 = ult\n        }\n        i += 1\n    }\n    ti_buffer_free(bp_buf);\n    ti_buffer_free(r_buf);\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_ultosc_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 10],\n                                               &[std::os::raw::c_char; 10]>(b\"ti_ultosc\\x00\")).as_ptr(),\n                     b\"indicators/ultosc.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 103 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_ultosc_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/ultosc.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "indicators/ultosc.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:770 ~ c2rust_out[3c70]::indicators::vwma::ti_vwma)",
    "span": "indicators/vwma.rs:36:1: 88:2 (#0)",
    "pieces": [
      "indicators/vwma.rs:36:1: 88:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 53,
    "source": "pub unsafe extern \"C\" fn ti_vwma(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut volume: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_vwma_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut vsum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period {\n        sum += *input.offset(i as isize) * *volume.offset(i as isize);\n        vsum += *volume.offset(i as isize);\n        i += 1\n    }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = sum / vsum;\n    i = period;\n    while i < size {\n        sum += *input.offset(i as isize) * *volume.offset(i as isize);\n        sum -=\n            *input.offset((i - period) as isize) *\n                *volume.offset((i - period) as isize);\n        vsum += *volume.offset(i as isize);\n        vsum -= *volume.offset((i - period) as isize);\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = sum / vsum;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_vwma_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_vwma\\x00\")).as_ptr(),\n                     b\"indicators/vwma.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 64 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_vwma_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:230 ~ c2rust_out[3c70]::indicators::crossany::ti_crossany_start)",
    "span": "indicators/crossany.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/crossany.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_crossany_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:589 ~ c2rust_out[3c70]::indicators::sma::ti_sma_start)",
    "span": "indicators/sma.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/sma.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_sma_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:15 ~ c2rust_out[3c70]::example1::main_0)",
        "span": "example1.rs:78:5: 78:69 (#0)",
        "source": "let start: std::os::raw::c_int = ti_sma_start(options.as_ptr());"
      }
    ],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:15 ~ c2rust_out[3c70]::example1::main_0)",
    "span": "example1.rs:52:1: 113:2 (#0)",
    "pieces": [
      "example1.rs:52:1: 113:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 62,
    "source": "unsafe fn main_0() -> std::os::raw::c_int {\n    let data_in: [std::os::raw::c_double; 10] =\n        [5 as std::os::raw::c_int as std::os::raw::c_double,\n         8 as std::os::raw::c_int as std::os::raw::c_double,\n         12 as std::os::raw::c_int as std::os::raw::c_double,\n         11 as std::os::raw::c_int as std::os::raw::c_double,\n         9 as std::os::raw::c_int as std::os::raw::c_double,\n         8 as std::os::raw::c_int as std::os::raw::c_double,\n         7 as std::os::raw::c_int as std::os::raw::c_double,\n         10 as std::os::raw::c_int as std::os::raw::c_double,\n         11 as std::os::raw::c_int as std::os::raw::c_double,\n         13 as std::os::raw::c_int as std::os::raw::c_double];\n    let input_length: std::os::raw::c_int =\n        (::std::mem::size_of::<[std::os::raw::c_double; 10]>() as\n             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<std::os::raw::c_double>()\n                                             as std::os::raw::c_ulong) as std::os::raw::c_int;\n    printf(b\"We have %d bars of input data.\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, input_length);\n    print_array(data_in.as_ptr(), input_length);\n    let options: [std::os::raw::c_double; 1] = [3 as std::os::raw::c_int as std::os::raw::c_double];\n    printf(b\"Our option array is: \\x00\" as *const u8 as *const std::os::raw::c_char);\n    print_array(options.as_ptr(),\n                (::std::mem::size_of::<[std::os::raw::c_double; 1]>() as\n                     std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<std::os::raw::c_double>()\n                                                     as std::os::raw::c_ulong) as\n                    std::os::raw::c_int);\n    let start: std::os::raw::c_int = ti_sma_start(options.as_ptr());\n    printf(b\"The start amount is: %d\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, start);\n    let output_length: std::os::raw::c_int = input_length - start;\n    let mut data_out: *mut std::os::raw::c_double =\n        malloc((output_length as std::os::raw::c_uint as\n                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_double>()\n                                                    as std::os::raw::c_ulong)) as\n            *mut std::os::raw::c_double;\n    if data_out.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 5],\n                                               &[std::os::raw::c_char; 5]>(b\"main\\x00\")).as_ptr(),\n                     b\"example1.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                     56 as std::os::raw::c_int,\n                     b\"data_out != 0\\x00\" as *const u8 as\n                         *const std::os::raw::c_char);\n    } else { };\n    printf(b\"The output length is: %d\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, output_length);\n    let mut all_inputs: [*const std::os::raw::c_double; 1] = [data_in.as_ptr()];\n    let mut all_outputs: [*mut std::os::raw::c_double; 1] = [data_out];\n    let mut error: std::os::raw::c_int =\n        ti_sma(input_length, all_inputs.as_mut_ptr(), options.as_ptr(),\n               all_outputs.as_mut_ptr());\n    if !(error == 0 as std::os::raw::c_int) as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 5],\n                                               &[std::os::raw::c_char; 5]>(b\"main\\x00\")).as_ptr(),\n                     b\"example1.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                     62 as std::os::raw::c_int,\n                     b\"error == TI_OKAY\\x00\" as *const u8 as\n                         *const std::os::raw::c_char);\n    } else { };\n    printf(b\"The output data is: \\x00\" as *const u8 as *const std::os::raw::c_char);\n    print_array(data_out, output_length);\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:26 ~ c2rust_out[3c70]::example1::main)",
        "span": "example1.rs:114:17: 114:65 (#0)",
        "source": "unsafe { ::std::process::exit(main_0() as i32) }"
      }
    ],
    "globals": [],
    "imports": [
      {
        "span": "example1.rs:16:1: 16:46 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma_start;"
      },
      {
        "span": "example1.rs:15:1: 15:40 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:568 ~ c2rust_out[3c70]::indicators::round::ti_round_start)",
    "span": "indicators/round.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/round.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_round_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:408 ~ c2rust_out[3c70]::indicators::log10::ti_log10)",
    "span": "indicators/log10.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/log10.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_log10(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = log10(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:739 ~ c2rust_out[3c70]::indicators::vhf::ti_vhf_start)",
    "span": "indicators/vhf.rs:32:1: 35:2 (#0)",
    "pieces": [
      "indicators/vhf.rs:32:1: 35:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_vhf_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:459 ~ c2rust_out[3c70]::indicators::medprice::ti_medprice)",
    "span": "indicators/medprice.rs:30:1: 49:2 (#0)",
    "pieces": [
      "indicators/medprice.rs:30:1: 49:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 20,
    "source": "pub unsafe extern \"C\" fn ti_medprice(mut size: std::os::raw::c_int,\n                                     mut inputs: *const *const std::os::raw::c_double,\n                                     mut options: *const std::os::raw::c_double,\n                                     mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            (*high.offset(i as isize) + *low.offset(i as isize)) * 0.5f64;\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:561 ~ c2rust_out[3c70]::indicators::rocr::ti_rocr)",
    "span": "indicators/rocr.rs:35:1: 69:2 (#0)",
    "pieces": [
      "indicators/rocr.rs:35:1: 69:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 35,
    "source": "pub unsafe extern \"C\" fn ti_rocr(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_rocr_start(options) { return 0 as std::os::raw::c_int }\n    let mut i: std::os::raw::c_int = 0;\n    i = period;\n    while i < size {\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 =\n            *input.offset(i as isize) / *input.offset((i - period) as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_rocr_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_rocr\\x00\")).as_ptr(),\n                     b\"indicators/rocr.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 46 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_rocr_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:703 ~ c2rust_out[3c70]::indicators::trunc::ti_trunc_start)",
    "span": "indicators/trunc.rs:44:1: 47:2 (#0)",
    "pieces": [
      "indicators/trunc.rs:44:1: 47:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_trunc_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:567 ~ c2rust_out[3c70]::indicators::round::ti_round)",
    "span": "indicators/round.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/round.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_round(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = floor(*in1.offset(i as isize) + 0.5f64);\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:695 ~ c2rust_out[3c70]::indicators::trix::ti_trix_start)",
    "span": "indicators/trix.rs:30:1: 35:2 (#0)",
    "pieces": [
      "indicators/trix.rs:30:1: 35:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn ti_trix_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    return (period - 1 as std::os::raw::c_int) * 3 as std::os::raw::c_int + 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:271 ~ c2rust_out[3c70]::indicators::div::ti_div_start)",
    "span": "indicators/div.rs:46:1: 49:2 (#0)",
    "pieces": [
      "indicators/div.rs:46:1: 49:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_div_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:352 ~ c2rust_out[3c70]::indicators::hma::ti_hma)",
    "span": "indicators/hma.rs:50:1: 150:2 (#0)",
    "pieces": [
      "indicators/hma.rs:50:1: 150:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 101,
    "source": "pub unsafe extern \"C\" fn ti_hma(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_hma_start(options) { return 0 as std::os::raw::c_int }\n    /* HMA(input, N) = WMA((2 * WMA(input, N/2) - WMA(input, N)), sqrt(N)) */\n    /* Need to do three WMAs, with periods N, N/2, and sqrt N.*/\n    let period2: std::os::raw::c_int =\n        period / 2 as std::os::raw::c_int; /* Flat sum of previous numbers. */\n    let periodsqrt: std::os::raw::c_int =\n        sqrt(period as std::os::raw::c_double) as\n            std::os::raw::c_int; /* Weighted sum of previous numbers. */\n    let weights: std::os::raw::c_double =\n        (period * (period + 1 as std::os::raw::c_int) / 2 as std::os::raw::c_int) as\n            std::os::raw::c_double;\n    let weights2: std::os::raw::c_double =\n        (period2 * (period2 + 1 as std::os::raw::c_int) / 2 as std::os::raw::c_int) as\n            std::os::raw::c_double;\n    let weightssqrt: std::os::raw::c_double =\n        (periodsqrt * (periodsqrt + 1 as std::os::raw::c_int) / 2 as std::os::raw::c_int) as\n            std::os::raw::c_double;\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut weight_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut sum2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut weight_sum2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut sumsqrt: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut weight_sumsqrt: std::os::raw::c_double =\n        0 as std::os::raw::c_int as std::os::raw::c_double;\n    /* Setup up the WMA(period) and WMA(period/2) on the input. */\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period - 1 as std::os::raw::c_int {\n        weight_sum +=\n            *input.offset(i as isize) *\n                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        sum += *input.offset(i as isize);\n        if i >= period - period2 {\n            weight_sum2 +=\n                *input.offset(i as isize) *\n                    (i + 1 as std::os::raw::c_int - (period - period2)) as\n                        std::os::raw::c_double;\n            sum2 += *input.offset(i as isize)\n        }\n        i += 1\n    }\n    let mut buff: *mut ti_buffer = ti_buffer_new(periodsqrt);\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        weight_sum += *input.offset(i as isize) * period as std::os::raw::c_double;\n        sum += *input.offset(i as isize);\n        weight_sum2 += *input.offset(i as isize) * period2 as std::os::raw::c_double;\n        sum2 += *input.offset(i as isize);\n        let wma: std::os::raw::c_double = weight_sum / weights;\n        let wma2: std::os::raw::c_double = weight_sum2 / weights2;\n        let diff: std::os::raw::c_double =\n            2 as std::os::raw::c_int as std::os::raw::c_double * wma2 - wma;\n        weight_sumsqrt += diff * periodsqrt as std::os::raw::c_double;\n        sumsqrt += diff;\n        *(*buff).vals.as_mut_ptr().offset((*buff).index as isize) = diff;\n        (*buff).index = (*buff).index + 1 as std::os::raw::c_int;\n        if (*buff).index >= (*buff).size { (*buff).index = 0 as std::os::raw::c_int }\n        if i >= period - 1 as std::os::raw::c_int + (periodsqrt - 1 as std::os::raw::c_int) {\n            let fresh0 = output;\n            output = output.offset(1);\n            *fresh0 = weight_sumsqrt / weightssqrt;\n            weight_sumsqrt -= sumsqrt;\n            sumsqrt -=\n                *(*buff).vals.as_mut_ptr().offset((((*buff).index +\n                                                        (*buff).size -\n                                                        1 as std::os::raw::c_int +\n                                                        1 as std::os::raw::c_int) %\n                                                       (*buff).size) as isize)\n        } else { weight_sumsqrt -= sumsqrt }\n        weight_sum -= sum;\n        sum -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);\n        weight_sum2 -= sum2;\n        sum2 -= *input.offset((i - period2 + 1 as std::os::raw::c_int) as isize);\n        i += 1\n    }\n    ti_buffer_free(buff);\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_hma_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_hma\\x00\")).as_ptr(),\n                     b\"indicators/hma.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 111 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_hma_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/hma.rs:13:1: 13:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "indicators/hma.rs:14:1: 14:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:680 ~ c2rust_out[3c70]::indicators::tr::ti_tr_start)",
    "span": "indicators/tr.rs:29:1: 32:2 (#0)",
    "pieces": [
      "indicators/tr.rs:29:1: 32:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_tr_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:332 ~ c2rust_out[3c70]::indicators::floor::ti_floor_start)",
    "span": "indicators/floor.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/floor.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_floor_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:133 ~ c2rust_out[3c70]::indicators::apo::ti_apo_start)",
    "span": "indicators/apo.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/apo.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_apo_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:134 ~ c2rust_out[3c70]::indicators::apo::ti_apo)",
    "span": "indicators/apo.rs:35:1: 89:2 (#0)",
    "pieces": [
      "indicators/apo.rs:35:1: 89:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 55,
    "source": "pub unsafe extern \"C\" fn ti_apo(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut apo: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let short_period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let long_period: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if long_period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if long_period < short_period { return 1 as std::os::raw::c_int }\n    if size <= ti_apo_start(options) { return 0 as std::os::raw::c_int }\n    let mut short_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (short_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut long_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (long_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut short_ema: std::os::raw::c_double =\n        *input.offset(0 as std::os::raw::c_int as isize);\n    let mut long_ema: std::os::raw::c_double =\n        *input.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        short_ema =\n            (*input.offset(i as isize) - short_ema) * short_per + short_ema;\n        long_ema =\n            (*input.offset(i as isize) - long_ema) * long_per + long_ema;\n        let out: std::os::raw::c_double = short_ema - long_ema;\n        let fresh0 = apo;\n        apo = apo.offset(1);\n        *fresh0 = out;\n        i += 1\n    }\n    if !(apo.offset_from(*outputs.offset(0 as std::os::raw::c_int as isize))\n             as std::os::raw::c_long ==\n             (size - ti_apo_start(options)) as std::os::raw::c_long) as std::os::raw::c_int as\n           std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_apo\\x00\")).as_ptr(),\n                     b\"indicators/apo.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 63 as std::os::raw::c_int,\n                     b\"apo - outputs[0] == size - ti_apo_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:579 ~ c2rust_out[3c70]::indicators::sin::ti_sin)",
    "span": "indicators/sin.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/sin.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_sin(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = sin(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:580 ~ c2rust_out[3c70]::indicators::sin::ti_sin_start)",
    "span": "indicators/sin.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/sin.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_sin_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:585 ~ c2rust_out[3c70]::indicators::sinh::ti_sinh_start)",
    "span": "indicators/sinh.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/sinh.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_sinh_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:285 ~ c2rust_out[3c70]::indicators::dpo::ti_dpo)",
    "span": "indicators/dpo.rs:36:1: 81:2 (#0)",
    "pieces": [
      "indicators/dpo.rs:36:1: 81:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 46,
    "source": "pub unsafe extern \"C\" fn ti_dpo(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let back: std::os::raw::c_int = period / 2 as std::os::raw::c_int + 1 as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_dpo_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period { sum += *input.offset(i as isize); i += 1 }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 =\n        *input.offset((period - 1 as std::os::raw::c_int - back) as isize) -\n            sum * scale;\n    i = period;\n    while i < size {\n        sum += *input.offset(i as isize);\n        sum -= *input.offset((i - period) as isize);\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = *input.offset((i - back) as isize) - sum * scale;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_dpo_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_dpo\\x00\")).as_ptr(),\n                     b\"indicators/dpo.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 60 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_dpo_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:696 ~ c2rust_out[3c70]::indicators::trix::ti_trix)",
    "span": "indicators/trix.rs:37:1: 105:2 (#0)",
    "pieces": [
      "indicators/trix.rs:37:1: 105:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 69,
    "source": "pub unsafe extern \"C\" fn ti_trix(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_trix_start(options) { return 0 as std::os::raw::c_int }\n    let start: std::os::raw::c_int = period * 3 as std::os::raw::c_int - 2 as std::os::raw::c_int;\n    if !(start == ti_trix_start(options)) as std::os::raw::c_int as std::os::raw::c_long != 0\n       {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_trix\\x00\")).as_ptr(),\n                     b\"indicators/trix.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 43 as std::os::raw::c_int,\n                     b\"start == ti_trix_start(options)\\x00\" as *const u8 as\n                         *const std::os::raw::c_char);\n    } else { };\n    let per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut ema1: std::os::raw::c_double = *input.offset(0 as std::os::raw::c_int as isize);\n    let mut ema2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut ema3: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < start {\n        ema1 = (*input.offset(i as isize) - ema1) * per + ema1;\n        if i == period - 1 as std::os::raw::c_int {\n            ema2 = ema1\n        } else if i > period - 1 as std::os::raw::c_int {\n            ema2 = (ema1 - ema2) * per + ema2;\n            if i == period * 2 as std::os::raw::c_int - 2 as std::os::raw::c_int {\n                ema3 = ema2\n            } else if i > period * 2 as std::os::raw::c_int - 2 as std::os::raw::c_int {\n                ema3 = (ema2 - ema3) * per + ema3\n            }\n        }\n        i += 1\n    }\n    i = start;\n    while i < size {\n        ema1 = (*input.offset(i as isize) - ema1) * per + ema1;\n        ema2 = (ema1 - ema2) * per + ema2;\n        let last: std::os::raw::c_double = ema3;\n        ema3 = (ema2 - ema3) * per + ema3;\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = (ema3 - last) / ema3 * 100.0f64;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_trix_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_trix\\x00\")).as_ptr(),\n                     b\"indicators/trix.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 75 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_trix_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:322 ~ c2rust_out[3c70]::indicators::fisher::ti_fisher_start)",
    "span": "indicators/fisher.rs:32:1: 36:2 (#0)",
    "pieces": [
      "indicators/fisher.rs:32:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_fisher_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:787 ~ c2rust_out[3c70]::indicators::wilders::ti_wilders)",
    "span": "indicators/wilders.rs:36:1: 79:2 (#0)",
    "pieces": [
      "indicators/wilders.rs:36:1: 79:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 44,
    "source": "pub unsafe extern \"C\" fn ti_wilders(mut size: std::os::raw::c_int,\n                                    mut inputs: *const *const std::os::raw::c_double,\n                                    mut options: *const std::os::raw::c_double,\n                                    mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_wilders_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period { sum += *input.offset(i as isize); i += 1 }\n    let mut val: std::os::raw::c_double = sum / period as std::os::raw::c_double;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = val;\n    i = period;\n    while i < size {\n        val = (*input.offset(i as isize) - val) * per + val;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = val;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_wilders_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 11],\n                                               &[std::os::raw::c_char; 11]>(b\"ti_wilders\\x00\")).as_ptr(),\n                     b\"indicators/wilders.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 60 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_wilders_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:539 ~ c2rust_out[3c70]::indicators::pvi::ti_pvi_start)",
    "span": "indicators/pvi.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/pvi.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_pvi_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:210 ~ c2rust_out[3c70]::indicators::ceil::ti_ceil)",
    "span": "indicators/ceil.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/ceil.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_ceil(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = ceil(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:140 ~ c2rust_out[3c70]::indicators::aroon::ti_aroon_start)",
    "span": "indicators/aroon.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/aroon.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_aroon_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:204 ~ c2rust_out[3c70]::indicators::cci::ti_cci)",
    "span": "indicators/cci.rs:26:1: 92:2 (#0)",
    "pieces": [
      "indicators/cci.rs:26:1: 92:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 67,
    "source": "pub unsafe extern \"C\" fn ti_cci(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_cci_start(options) { return 0 as std::os::raw::c_int }\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut sum: *mut ti_buffer = ti_buffer_new(period);\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        let today: std::os::raw::c_double =\n            (*high.offset(i as isize) + *low.offset(i as isize) +\n                 *close.offset(i as isize)) * (1.0f64 / 3.0f64);\n        if (*sum).pushes >= (*sum).size {\n            (*sum).sum -=\n                *(*sum).vals.as_mut_ptr().offset((*sum).index as isize)\n        }\n        (*sum).sum += today;\n        *(*sum).vals.as_mut_ptr().offset((*sum).index as isize) = today;\n        (*sum).pushes += 1 as std::os::raw::c_int;\n        (*sum).index = (*sum).index + 1 as std::os::raw::c_int;\n        if (*sum).index >= (*sum).size { (*sum).index = 0 as std::os::raw::c_int }\n        let avg: std::os::raw::c_double = (*sum).sum * scale;\n        if i >= period * 2 as std::os::raw::c_int - 2 as std::os::raw::c_int {\n            let mut acc: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n            j = 0 as std::os::raw::c_int;\n            while j < period {\n                acc +=\n                    fabs(avg - *(*sum).vals.as_mut_ptr().offset(j as isize));\n                j += 1\n            }\n            let mut cci: std::os::raw::c_double = acc * scale;\n            cci *= 0.015f64;\n            cci = (today - avg) / cci;\n            let fresh0 = output;\n            output = output.offset(1);\n            *fresh0 = cci\n        }\n        i += 1\n    }\n    ti_buffer_free(sum);\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_cci_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_cci\\x00\")).as_ptr(),\n                     b\"indicators/cci.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 73 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_cci_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/cci.rs:14:1: 14:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "indicators/cci.rs:13:1: 13:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1441 ~ c2rust_out[3c70]::indicators_index::ti_version)",
    "span": "indicators_index.rs:669:1: 671:2 (#0)",
    "pieces": [
      "indicators_index.rs:669:1: 671:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 3,
    "source": "pub extern \"C\" fn ti_version() -> *const std::os::raw::c_char {\n    return b\"0.8.4\\x00\" as *const u8 as *const std::os::raw::c_char;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators_index.rs:557:1: 557:48 (#0)",
        "source": "pub use crate::indicators::rocr::ti_rocr_start;"
      },
      {
        "span": "indicators_index.rs:521:1: 521:56 (#0)",
        "source": "pub use crate::indicators::marketfi::ti_marketfi_start;"
      },
      {
        "span": "indicators_index.rs:423:1: 423:46 (#0)",
        "source": "pub use crate::indicators::abs::ti_abs_start;"
      },
      {
        "span": "indicators_index.rs:484:1: 484:38 (#0)",
        "source": "pub use crate::indicators::dx::ti_dx;"
      },
      {
        "span": "indicators_index.rs:596:1: 596:42 (#0)",
        "source": "pub use crate::indicators::trix::ti_trix;"
      },
      {
        "span": "indicators_index.rs:435:1: 435:48 (#0)",
        "source": "pub use crate::indicators::adxr::ti_adxr_start;"
      },
      {
        "span": "indicators_index.rs:450:1: 450:50 (#0)",
        "source": "pub use crate::indicators::avgprice::ti_avgprice;"
      },
      {
        "span": "indicators_index.rs:528:1: 528:50 (#0)",
        "source": "pub use crate::indicators::medprice::ti_medprice;"
      },
      {
        "span": "indicators_index.rs:474:1: 474:42 (#0)",
        "source": "pub use crate::indicators::dema::ti_dema;"
      },
      {
        "span": "indicators_index.rs:490:1: 490:40 (#0)",
        "source": "pub use crate::indicators::emv::ti_emv;"
      },
      {
        "span": "indicators_index.rs:520:1: 520:50 (#0)",
        "source": "pub use crate::indicators::marketfi::ti_marketfi;"
      },
      {
        "span": "indicators_index.rs:429:1: 429:46 (#0)",
        "source": "pub use crate::indicators::add::ti_add_start;"
      },
      {
        "span": "indicators_index.rs:595:1: 595:50 (#0)",
        "source": "pub use crate::indicators::trima::ti_trima_start;"
      },
      {
        "span": "indicators_index.rs:597:1: 597:48 (#0)",
        "source": "pub use crate::indicators::trix::ti_trix_start;"
      },
      {
        "span": "indicators_index.rs:445:1: 445:48 (#0)",
        "source": "pub use crate::indicators::asin::ti_asin_start;"
      },
      {
        "span": "indicators_index.rs:580:1: 580:40 (#0)",
        "source": "pub use crate::indicators::sum::ti_sum;"
      },
      {
        "span": "indicators_index.rs:470:1: 470:40 (#0)",
        "source": "pub use crate::indicators::cvi::ti_cvi;"
      },
      {
        "span": "indicators_index.rs:539:1: 539:46 (#0)",
        "source": "pub use crate::indicators::mul::ti_mul_start;"
      },
      {
        "span": "indicators_index.rs:537:1: 537:46 (#0)",
        "source": "pub use crate::indicators::msw::ti_msw_start;"
      },
      {
        "span": "indicators_index.rs:585:1: 585:48 (#0)",
        "source": "pub use crate::indicators::tanh::ti_tanh_start;"
      },
      {
        "span": "indicators_index.rs:456:1: 456:40 (#0)",
        "source": "pub use crate::indicators::cci::ti_cci;"
      },
      {
        "span": "indicators_index.rs:548:1: 548:42 (#0)",
        "source": "pub use crate::indicators::psar::ti_psar;"
      },
      {
        "span": "indicators_index.rs:609:1: 609:46 (#0)",
        "source": "pub use crate::indicators::vhf::ti_vhf_start;"
      },
      {
        "span": "indicators_index.rs:615:1: 615:48 (#0)",
        "source": "pub use crate::indicators::vosc::ti_vosc_start;"
      },
      {
        "span": "indicators_index.rs:619:1: 619:46 (#0)",
        "source": "pub use crate::indicators::wad::ti_wad_start;"
      },
      {
        "span": "indicators_index.rs:509:1: 509:52 (#0)",
        "source": "pub use crate::indicators::linreg::ti_linreg_start;"
      },
      {
        "span": "indicators_index.rs:491:1: 491:46 (#0)",
        "source": "pub use crate::indicators::emv::ti_emv_start;"
      },
      {
        "span": "indicators_index.rs:526:1: 526:38 (#0)",
        "source": "pub use crate::indicators::md::ti_md;"
      },
      {
        "span": "indicators_index.rs:554:1: 554:40 (#0)",
        "source": "pub use crate::indicators::roc::ti_roc;"
      },
      {
        "span": "indicators_index.rs:447:1: 447:48 (#0)",
        "source": "pub use crate::indicators::atan::ti_atan_start;"
      },
      {
        "span": "indicators_index.rs:546:1: 546:40 (#0)",
        "source": "pub use crate::indicators::ppo::ti_ppo;"
      },
      {
        "span": "indicators_index.rs:465:1: 465:48 (#0)",
        "source": "pub use crate::indicators::cosh::ti_cosh_start;"
      },
      {
        "span": "indicators_index.rs:625:1: 625:50 (#0)",
        "source": "pub use crate::indicators::willr::ti_willr_start;"
      },
      {
        "span": "indicators_index.rs:612:1: 612:54 (#0)",
        "source": "pub use crate::indicators::volatility::ti_volatility;"
      },
      {
        "span": "indicators_index.rs:463:1: 463:46 (#0)",
        "source": "pub use crate::indicators::cos::ti_cos_start;"
      },
      {
        "span": "indicators_index.rs:466:1: 466:50 (#0)",
        "source": "pub use crate::indicators::crossany::ti_crossany;"
      },
      {
        "span": "indicators_index.rs:477:1: 477:44 (#0)",
        "source": "pub use crate::indicators::di::ti_di_start;"
      },
      {
        "span": "indicators_index.rs:515:1: 515:44 (#0)",
        "source": "pub use crate::indicators::ln::ti_ln_start;"
      },
      {
        "span": "indicators_index.rs:479:1: 479:46 (#0)",
        "source": "pub use crate::indicators::div::ti_div_start;"
      },
      {
        "span": "indicators_index.rs:536:1: 536:40 (#0)",
        "source": "pub use crate::indicators::msw::ti_msw;"
      },
      {
        "span": "indicators_index.rs:453:1: 453:52 (#0)",
        "source": "pub use crate::indicators::bbands::ti_bbands_start;"
      },
      {
        "span": "indicators_index.rs:428:1: 428:40 (#0)",
        "source": "pub use crate::indicators::add::ti_add;"
      },
      {
        "span": "indicators_index.rs:522:1: 522:42 (#0)",
        "source": "pub use crate::indicators::mass::ti_mass;"
      },
      {
        "span": "indicators_index.rs:503:1: 503:48 (#0)",
        "source": "pub use crate::indicators::kama::ti_kama_start;"
      },
      {
        "span": "indicators_index.rs:610:1: 610:44 (#0)",
        "source": "pub use crate::indicators::vidya::ti_vidya;"
      },
      {
        "span": "indicators_index.rs:629:1: 629:50 (#0)",
        "source": "pub use crate::indicators::zlema::ti_zlema_start;"
      },
      {
        "span": "indicators_index.rs:444:1: 444:42 (#0)",
        "source": "pub use crate::indicators::asin::ti_asin;"
      },
      {
        "span": "indicators_index.rs:573:1: 573:52 (#0)",
        "source": "pub use crate::indicators::stderr::ti_stderr_start;"
      },
      {
        "span": "indicators_index.rs:532:1: 532:40 (#0)",
        "source": "pub use crate::indicators::min::ti_min;"
      },
      {
        "span": "indicators_index.rs:496:1: 496:44 (#0)",
        "source": "pub use crate::indicators::floor::ti_floor;"
      },
      {
        "span": "indicators_index.rs:551:1: 551:46 (#0)",
        "source": "pub use crate::indicators::pvi::ti_pvi_start;"
      },
      {
        "span": "indicators_index.rs:623:1: 623:54 (#0)",
        "source": "pub use crate::indicators::wilders::ti_wilders_start;"
      },
      {
        "span": "indicators_index.rs:587:1: 587:48 (#0)",
        "source": "pub use crate::indicators::tema::ti_tema_start;"
      },
      {
        "span": "indicators_index.rs:533:1: 533:46 (#0)",
        "source": "pub use crate::indicators::min::ti_min_start;"
      },
      {
        "span": "indicators_index.rs:441:1: 441:50 (#0)",
        "source": "pub use crate::indicators::aroon::ti_aroon_start;"
      },
      {
        "span": "indicators_index.rs:571:1: 571:52 (#0)",
        "source": "pub use crate::indicators::stddev::ti_stddev_start;"
      },
      {
        "span": "indicators_index.rs:540:1: 540:42 (#0)",
        "source": "pub use crate::indicators::natr::ti_natr;"
      },
      {
        "span": "indicators_index.rs:614:1: 614:42 (#0)",
        "source": "pub use crate::indicators::vosc::ti_vosc;"
      },
      {
        "span": "indicators_index.rs:451:1: 451:56 (#0)",
        "source": "pub use crate::indicators::avgprice::ti_avgprice_start;"
      },
      {
        "span": "indicators_index.rs:433:1: 433:46 (#0)",
        "source": "pub use crate::indicators::adx::ti_adx_start;"
      },
      {
        "span": "indicators_index.rs:507:1: 507:46 (#0)",
        "source": "pub use crate::indicators::lag::ti_lag_start;"
      },
      {
        "span": "indicators_index.rs:518:1: 518:42 (#0)",
        "source": "pub use crate::indicators::macd::ti_macd;"
      },
      {
        "span": "indicators_index.rs:427:1: 427:44 (#0)",
        "source": "pub use crate::indicators::ad::ti_ad_start;"
      },
      {
        "span": "indicators_index.rs:432:1: 432:40 (#0)",
        "source": "pub use crate::indicators::adx::ti_adx;"
      },
      {
        "span": "indicators_index.rs:575:1: 575:50 (#0)",
        "source": "pub use crate::indicators::stoch::ti_stoch_start;"
      },
      {
        "span": "indicators_index.rs:613:1: 613:60 (#0)",
        "source": "pub use crate::indicators::volatility::ti_volatility_start;"
      },
      {
        "span": "indicators_index.rs:549:1: 549:48 (#0)",
        "source": "pub use crate::indicators::psar::ti_psar_start;"
      },
      {
        "span": "indicators_index.rs:568:1: 568:42 (#0)",
        "source": "pub use crate::indicators::sqrt::ti_sqrt;"
      },
      {
        "span": "indicators_index.rs:482:1: 482:40 (#0)",
        "source": "pub use crate::indicators::dpo::ti_dpo;"
      },
      {
        "span": "indicators_index.rs:624:1: 624:44 (#0)",
        "source": "pub use crate::indicators::willr::ti_willr;"
      },
      {
        "span": "indicators_index.rs:524:1: 524:40 (#0)",
        "source": "pub use crate::indicators::max::ti_max;"
      },
      {
        "span": "indicators_index.rs:438:1: 438:40 (#0)",
        "source": "pub use crate::indicators::apo::ti_apo;"
      },
      {
        "span": "indicators_index.rs:531:1: 531:46 (#0)",
        "source": "pub use crate::indicators::mfi::ti_mfi_start;"
      },
      {
        "span": "indicators_index.rs:578:1: 578:40 (#0)",
        "source": "pub use crate::indicators::sub::ti_sub;"
      },
      {
        "span": "indicators_index.rs:455:1: 455:46 (#0)",
        "source": "pub use crate::indicators::bop::ti_bop_start;"
      },
      {
        "span": "indicators_index.rs:426:1: 426:38 (#0)",
        "source": "pub use crate::indicators::ad::ti_ad;"
      },
      {
        "span": "indicators_index.rs:430:1: 430:44 (#0)",
        "source": "pub use crate::indicators::adosc::ti_adosc;"
      },
      {
        "span": "indicators_index.rs:458:1: 458:42 (#0)",
        "source": "pub use crate::indicators::ceil::ti_ceil;"
      },
      {
        "span": "indicators_index.rs:527:1: 527:44 (#0)",
        "source": "pub use crate::indicators::md::ti_md_start;"
      },
      {
        "span": "indicators_index.rs:584:1: 584:42 (#0)",
        "source": "pub use crate::indicators::tanh::ti_tanh;"
      },
      {
        "span": "indicators_index.rs:489:1: 489:46 (#0)",
        "source": "pub use crate::indicators::ema::ti_ema_start;"
      },
      {
        "span": "indicators_index.rs:448:1: 448:40 (#0)",
        "source": "pub use crate::indicators::atr::ti_atr;"
      },
      {
        "span": "indicators_index.rs:593:1: 593:44 (#0)",
        "source": "pub use crate::indicators::tr::ti_tr_start;"
      },
      {
        "span": "indicators_index.rs:622:1: 622:48 (#0)",
        "source": "pub use crate::indicators::wilders::ti_wilders;"
      },
      {
        "span": "indicators_index.rs:497:1: 497:50 (#0)",
        "source": "pub use crate::indicators::floor::ti_floor_start;"
      },
      {
        "span": "indicators_index.rs:498:1: 498:42 (#0)",
        "source": "pub use crate::indicators::fosc::ti_fosc;"
      },
      {
        "span": "indicators_index.rs:467:1: 467:56 (#0)",
        "source": "pub use crate::indicators::crossany::ti_crossany_start;"
      },
      {
        "span": "indicators_index.rs:449:1: 449:46 (#0)",
        "source": "pub use crate::indicators::atr::ti_atr_start;"
      },
      {
        "span": "indicators_index.rs:513:1: 513:62 (#0)",
        "source": "pub use crate::indicators::linregslope::ti_linregslope_start;"
      },
      {
        "span": "indicators_index.rs:488:1: 488:40 (#0)",
        "source": "pub use crate::indicators::ema::ti_ema;"
      },
      {
        "span": "indicators_index.rs:436:1: 436:38 (#0)",
        "source": "pub use crate::indicators::ao::ti_ao;"
      },
      {
        "span": "indicators_index.rs:541:1: 541:48 (#0)",
        "source": "pub use crate::indicators::natr::ti_natr_start;"
      },
      {
        "span": "indicators_index.rs:472:1: 472:44 (#0)",
        "source": "pub use crate::indicators::decay::ti_decay;"
      },
      {
        "span": "indicators_index.rs:487:1: 487:52 (#0)",
        "source": "pub use crate::indicators::edecay::ti_edecay_start;"
      },
      {
        "span": "indicators_index.rs:439:1: 439:46 (#0)",
        "source": "pub use crate::indicators::apo::ti_apo_start;"
      },
      {
        "span": "indicators_index.rs:583:1: 583:46 (#0)",
        "source": "pub use crate::indicators::tan::ti_tan_start;"
      },
      {
        "span": "indicators_index.rs:547:1: 547:46 (#0)",
        "source": "pub use crate::indicators::ppo::ti_ppo_start;"
      },
      {
        "span": "indicators_index.rs:486:1: 486:46 (#0)",
        "source": "pub use crate::indicators::edecay::ti_edecay;"
      },
      {
        "span": "indicators_index.rs:581:1: 581:46 (#0)",
        "source": "pub use crate::indicators::sum::ti_sum_start;"
      },
      {
        "span": "indicators_index.rs:602:1: 602:50 (#0)",
        "source": "pub use crate::indicators::typprice::ti_typprice;"
      },
      {
        "span": "indicators_index.rs:475:1: 475:48 (#0)",
        "source": "pub use crate::indicators::dema::ti_dema_start;"
      },
      {
        "span": "indicators_index.rs:425:1: 425:48 (#0)",
        "source": "pub use crate::indicators::acos::ti_acos_start;"
      },
      {
        "span": "indicators_index.rs:620:1: 620:48 (#0)",
        "source": "pub use crate::indicators::wcprice::ti_wcprice;"
      },
      {
        "span": "indicators_index.rs:442:1: 442:50 (#0)",
        "source": "pub use crate::indicators::aroonosc::ti_aroonosc;"
      },
      {
        "span": "indicators_index.rs:469:1: 469:58 (#0)",
        "source": "pub use crate::indicators::crossover::ti_crossover_start;"
      },
      {
        "span": "indicators_index.rs:510:1: 510:64 (#0)",
        "source": "pub use crate::indicators::linregintercept::ti_linregintercept;"
      },
      {
        "span": "indicators_index.rs:542:1: 542:40 (#0)",
        "source": "pub use crate::indicators::nvi::ti_nvi;"
      },
      {
        "span": "indicators_index.rs:616:1: 616:42 (#0)",
        "source": "pub use crate::indicators::vwma::ti_vwma;"
      },
      {
        "span": "indicators_index.rs:544:1: 544:40 (#0)",
        "source": "pub use crate::indicators::obv::ti_obv;"
      },
      {
        "span": "indicators_index.rs:608:1: 608:40 (#0)",
        "source": "pub use crate::indicators::vhf::ti_vhf;"
      },
      {
        "span": "indicators_index.rs:457:1: 457:46 (#0)",
        "source": "pub use crate::indicators::cci::ti_cci_start;"
      },
      {
        "span": "indicators_index.rs:591:1: 591:50 (#0)",
        "source": "pub use crate::indicators::torad::ti_torad_start;"
      },
      {
        "span": "indicators_index.rs:468:1: 468:52 (#0)",
        "source": "pub use crate::indicators::crossover::ti_crossover;"
      },
      {
        "span": "indicators_index.rs:530:1: 530:40 (#0)",
        "source": "pub use crate::indicators::mfi::ti_mfi;"
      },
      {
        "span": "indicators_index.rs:576:1: 576:50 (#0)",
        "source": "pub use crate::indicators::stochrsi::ti_stochrsi;"
      },
      {
        "span": "indicators_index.rs:601:1: 601:46 (#0)",
        "source": "pub use crate::indicators::tsf::ti_tsf_start;"
      },
      {
        "span": "indicators_index.rs:607:1: 607:46 (#0)",
        "source": "pub use crate::indicators::var::ti_var_start;"
      },
      {
        "span": "indicators_index.rs:460:1: 460:40 (#0)",
        "source": "pub use crate::indicators::cmo::ti_cmo;"
      },
      {
        "span": "indicators_index.rs:553:1: 553:52 (#0)",
        "source": "pub use crate::indicators::qstick::ti_qstick_start;"
      },
      {
        "span": "indicators_index.rs:579:1: 579:46 (#0)",
        "source": "pub use crate::indicators::sub::ti_sub_start;"
      },
      {
        "span": "indicators_index.rs:626:1: 626:40 (#0)",
        "source": "pub use crate::indicators::wma::ti_wma;"
      },
      {
        "span": "indicators_index.rs:517:1: 517:50 (#0)",
        "source": "pub use crate::indicators::log10::ti_log10_start;"
      },
      {
        "span": "indicators_index.rs:495:1: 495:52 (#0)",
        "source": "pub use crate::indicators::fisher::ti_fisher_start;"
      },
      {
        "span": "indicators_index.rs:559:1: 559:50 (#0)",
        "source": "pub use crate::indicators::round::ti_round_start;"
      },
      {
        "span": "indicators_index.rs:560:1: 560:40 (#0)",
        "source": "pub use crate::indicators::rsi::ti_rsi;"
      },
      {
        "span": "indicators_index.rs:599:1: 599:50 (#0)",
        "source": "pub use crate::indicators::trunc::ti_trunc_start;"
      },
      {
        "span": "indicators_index.rs:440:1: 440:44 (#0)",
        "source": "pub use crate::indicators::aroon::ti_aroon;"
      },
      {
        "span": "indicators_index.rs:462:1: 462:40 (#0)",
        "source": "pub use crate::indicators::cos::ti_cos;"
      },
      {
        "span": "indicators_index.rs:628:1: 628:44 (#0)",
        "source": "pub use crate::indicators::zlema::ti_zlema;"
      },
      {
        "span": "indicators_index.rs:574:1: 574:44 (#0)",
        "source": "pub use crate::indicators::stoch::ti_stoch;"
      },
      {
        "span": "indicators_index.rs:461:1: 461:46 (#0)",
        "source": "pub use crate::indicators::cmo::ti_cmo_start;"
      },
      {
        "span": "indicators_index.rs:492:1: 492:40 (#0)",
        "source": "pub use crate::indicators::exp::ti_exp;"
      },
      {
        "span": "indicators_index.rs:494:1: 494:46 (#0)",
        "source": "pub use crate::indicators::fisher::ti_fisher;"
      },
      {
        "span": "indicators_index.rs:511:1: 511:70 (#0)",
        "source": "pub use crate::indicators::linregintercept::ti_linregintercept_start;"
      },
      {
        "span": "indicators_index.rs:512:1: 512:56 (#0)",
        "source": "pub use crate::indicators::linregslope::ti_linregslope;"
      },
      {
        "span": "indicators_index.rs:452:1: 452:46 (#0)",
        "source": "pub use crate::indicators::bbands::ti_bbands;"
      },
      {
        "span": "indicators_index.rs:555:1: 555:46 (#0)",
        "source": "pub use crate::indicators::roc::ti_roc_start;"
      },
      {
        "span": "indicators_index.rs:529:1: 529:56 (#0)",
        "source": "pub use crate::indicators::medprice::ti_medprice_start;"
      },
      {
        "span": "indicators_index.rs:483:1: 483:46 (#0)",
        "source": "pub use crate::indicators::dpo::ti_dpo_start;"
      },
      {
        "span": "indicators_index.rs:481:1: 481:44 (#0)",
        "source": "pub use crate::indicators::dm::ti_dm_start;"
      },
      {
        "span": "indicators_index.rs:617:1: 617:48 (#0)",
        "source": "pub use crate::indicators::vwma::ti_vwma_start;"
      },
      {
        "span": "indicators_index.rs:499:1: 499:48 (#0)",
        "source": "pub use crate::indicators::fosc::ti_fosc_start;"
      },
      {
        "span": "indicators_index.rs:493:1: 493:46 (#0)",
        "source": "pub use crate::indicators::exp::ti_exp_start;"
      },
      {
        "span": "indicators_index.rs:500:1: 500:40 (#0)",
        "source": "pub use crate::indicators::hma::ti_hma;"
      },
      {
        "span": "indicators_index.rs:514:1: 514:38 (#0)",
        "source": "pub use crate::indicators::ln::ti_ln;"
      },
      {
        "span": "indicators_index.rs:523:1: 523:48 (#0)",
        "source": "pub use crate::indicators::mass::ti_mass_start;"
      },
      {
        "span": "indicators_index.rs:562:1: 562:40 (#0)",
        "source": "pub use crate::indicators::sin::ti_sin;"
      },
      {
        "span": "indicators_index.rs:535:1: 535:46 (#0)",
        "source": "pub use crate::indicators::mom::ti_mom_start;"
      },
      {
        "span": "indicators_index.rs:564:1: 564:42 (#0)",
        "source": "pub use crate::indicators::sinh::ti_sinh;"
      },
      {
        "span": "indicators_index.rs:590:1: 590:44 (#0)",
        "source": "pub use crate::indicators::torad::ti_torad;"
      },
      {
        "span": "indicators_index.rs:501:1: 501:46 (#0)",
        "source": "pub use crate::indicators::hma::ti_hma_start;"
      },
      {
        "span": "indicators_index.rs:545:1: 545:46 (#0)",
        "source": "pub use crate::indicators::obv::ti_obv_start;"
      },
      {
        "span": "indicators_index.rs:534:1: 534:40 (#0)",
        "source": "pub use crate::indicators::mom::ti_mom;"
      },
      {
        "span": "indicators_index.rs:505:1: 505:46 (#0)",
        "source": "pub use crate::indicators::kvo::ti_kvo_start;"
      },
      {
        "span": "indicators_index.rs:476:1: 476:38 (#0)",
        "source": "pub use crate::indicators::di::ti_di;"
      },
      {
        "span": "indicators_index.rs:588:1: 588:44 (#0)",
        "source": "pub use crate::indicators::todeg::ti_todeg;"
      },
      {
        "span": "indicators_index.rs:604:1: 604:46 (#0)",
        "source": "pub use crate::indicators::ultosc::ti_ultosc;"
      },
      {
        "span": "indicators_index.rs:504:1: 504:40 (#0)",
        "source": "pub use crate::indicators::kvo::ti_kvo;"
      },
      {
        "span": "indicators_index.rs:446:1: 446:42 (#0)",
        "source": "pub use crate::indicators::atan::ti_atan;"
      },
      {
        "span": "indicators_index.rs:572:1: 572:46 (#0)",
        "source": "pub use crate::indicators::stderr::ti_stderr;"
      },
      {
        "span": "indicators_index.rs:565:1: 565:48 (#0)",
        "source": "pub use crate::indicators::sinh::ti_sinh_start;"
      },
      {
        "span": "indicators_index.rs:424:1: 424:42 (#0)",
        "source": "pub use crate::indicators::acos::ti_acos;"
      },
      {
        "span": "indicators_index.rs:434:1: 434:42 (#0)",
        "source": "pub use crate::indicators::adxr::ti_adxr;"
      },
      {
        "span": "indicators_index.rs:443:1: 443:56 (#0)",
        "source": "pub use crate::indicators::aroonosc::ti_aroonosc_start;"
      },
      {
        "span": "indicators_index.rs:556:1: 556:42 (#0)",
        "source": "pub use crate::indicators::rocr::ti_rocr;"
      },
      {
        "span": "indicators_index.rs:569:1: 569:48 (#0)",
        "source": "pub use crate::indicators::sqrt::ti_sqrt_start;"
      },
      {
        "span": "indicators_index.rs:606:1: 606:40 (#0)",
        "source": "pub use crate::indicators::var::ti_var;"
      },
      {
        "span": "indicators_index.rs:566:1: 566:40 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma;"
      },
      {
        "span": "indicators_index.rs:478:1: 478:40 (#0)",
        "source": "pub use crate::indicators::div::ti_div;"
      },
      {
        "span": "indicators_index.rs:502:1: 502:42 (#0)",
        "source": "pub use crate::indicators::kama::ti_kama;"
      },
      {
        "span": "indicators_index.rs:525:1: 525:46 (#0)",
        "source": "pub use crate::indicators::max::ti_max_start;"
      },
      {
        "span": "indicators_index.rs:577:1: 577:56 (#0)",
        "source": "pub use crate::indicators::stochrsi::ti_stochrsi_start;"
      },
      {
        "span": "indicators_index.rs:485:1: 485:44 (#0)",
        "source": "pub use crate::indicators::dx::ti_dx_start;"
      },
      {
        "span": "indicators_index.rs:592:1: 592:38 (#0)",
        "source": "pub use crate::indicators::tr::ti_tr;"
      },
      {
        "span": "indicators_index.rs:594:1: 594:44 (#0)",
        "source": "pub use crate::indicators::trima::ti_trima;"
      },
      {
        "span": "indicators_index.rs:600:1: 600:40 (#0)",
        "source": "pub use crate::indicators::tsf::ti_tsf;"
      },
      {
        "span": "indicators_index.rs:506:1: 506:40 (#0)",
        "source": "pub use crate::indicators::lag::ti_lag;"
      },
      {
        "span": "indicators_index.rs:586:1: 586:42 (#0)",
        "source": "pub use crate::indicators::tema::ti_tema;"
      },
      {
        "span": "indicators_index.rs:519:1: 519:48 (#0)",
        "source": "pub use crate::indicators::macd::ti_macd_start;"
      },
      {
        "span": "indicators_index.rs:508:1: 508:46 (#0)",
        "source": "pub use crate::indicators::linreg::ti_linreg;"
      },
      {
        "span": "indicators_index.rs:473:1: 473:50 (#0)",
        "source": "pub use crate::indicators::decay::ti_decay_start;"
      },
      {
        "span": "indicators_index.rs:618:1: 618:40 (#0)",
        "source": "pub use crate::indicators::wad::ti_wad;"
      },
      {
        "span": "indicators_index.rs:459:1: 459:48 (#0)",
        "source": "pub use crate::indicators::ceil::ti_ceil_start;"
      },
      {
        "span": "indicators_index.rs:538:1: 538:40 (#0)",
        "source": "pub use crate::indicators::mul::ti_mul;"
      },
      {
        "span": "indicators_index.rs:611:1: 611:50 (#0)",
        "source": "pub use crate::indicators::vidya::ti_vidya_start;"
      },
      {
        "span": "indicators_index.rs:454:1: 454:40 (#0)",
        "source": "pub use crate::indicators::bop::ti_bop;"
      },
      {
        "span": "indicators_index.rs:552:1: 552:46 (#0)",
        "source": "pub use crate::indicators::qstick::ti_qstick;"
      },
      {
        "span": "indicators_index.rs:627:1: 627:46 (#0)",
        "source": "pub use crate::indicators::wma::ti_wma_start;"
      },
      {
        "span": "indicators_index.rs:563:1: 563:46 (#0)",
        "source": "pub use crate::indicators::sin::ti_sin_start;"
      },
      {
        "span": "indicators_index.rs:621:1: 621:54 (#0)",
        "source": "pub use crate::indicators::wcprice::ti_wcprice_start;"
      },
      {
        "span": "indicators_index.rs:570:1: 570:46 (#0)",
        "source": "pub use crate::indicators::stddev::ti_stddev;"
      },
      {
        "span": "indicators_index.rs:422:1: 422:40 (#0)",
        "source": "pub use crate::indicators::abs::ti_abs;"
      },
      {
        "span": "indicators_index.rs:431:1: 431:50 (#0)",
        "source": "pub use crate::indicators::adosc::ti_adosc_start;"
      },
      {
        "span": "indicators_index.rs:567:1: 567:46 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma_start;"
      },
      {
        "span": "indicators_index.rs:471:1: 471:46 (#0)",
        "source": "pub use crate::indicators::cvi::ti_cvi_start;"
      },
      {
        "span": "indicators_index.rs:516:1: 516:44 (#0)",
        "source": "pub use crate::indicators::log10::ti_log10;"
      },
      {
        "span": "indicators_index.rs:550:1: 550:40 (#0)",
        "source": "pub use crate::indicators::pvi::ti_pvi;"
      },
      {
        "span": "indicators_index.rs:561:1: 561:46 (#0)",
        "source": "pub use crate::indicators::rsi::ti_rsi_start;"
      },
      {
        "span": "indicators_index.rs:589:1: 589:50 (#0)",
        "source": "pub use crate::indicators::todeg::ti_todeg_start;"
      },
      {
        "span": "indicators_index.rs:598:1: 598:44 (#0)",
        "source": "pub use crate::indicators::trunc::ti_trunc;"
      },
      {
        "span": "indicators_index.rs:605:1: 605:52 (#0)",
        "source": "pub use crate::indicators::ultosc::ti_ultosc_start;"
      },
      {
        "span": "indicators_index.rs:480:1: 480:38 (#0)",
        "source": "pub use crate::indicators::dm::ti_dm;"
      },
      {
        "span": "indicators_index.rs:558:1: 558:44 (#0)",
        "source": "pub use crate::indicators::round::ti_round;"
      },
      {
        "span": "indicators_index.rs:603:1: 603:56 (#0)",
        "source": "pub use crate::indicators::typprice::ti_typprice_start;"
      },
      {
        "span": "indicators_index.rs:437:1: 437:44 (#0)",
        "source": "pub use crate::indicators::ao::ti_ao_start;"
      },
      {
        "span": "indicators_index.rs:464:1: 464:42 (#0)",
        "source": "pub use crate::indicators::cosh::ti_cosh;"
      },
      {
        "span": "indicators_index.rs:582:1: 582:40 (#0)",
        "source": "pub use crate::indicators::tan::ti_tan;"
      },
      {
        "span": "indicators_index.rs:543:1: 543:46 (#0)",
        "source": "pub use crate::indicators::nvi::ti_nvi_start;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:807 ~ c2rust_out[3c70]::indicators::zlema::ti_zlema_start)",
    "span": "indicators/zlema.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/zlema.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_zlema_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return (*options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n                1 as std::os::raw::c_int) / 2 as std::os::raw::c_int - 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:769 ~ c2rust_out[3c70]::indicators::vwma::ti_vwma_start)",
    "span": "indicators/vwma.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/vwma.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_vwma_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:602 ~ c2rust_out[3c70]::indicators::stddev::ti_stddev_start)",
    "span": "indicators/stddev.rs:32:1: 36:2 (#0)",
    "pieces": [
      "indicators/stddev.rs:32:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_stddev_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:97 ~ c2rust_out[3c70]::indicators::adosc::ti_adosc_start)",
    "span": "indicators/adosc.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/adosc.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_adosc_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:438 ~ c2rust_out[3c70]::indicators::mass::ti_mass_start)",
    "span": "indicators/mass.rs:39:1: 47:2 (#0)",
    "pieces": [
      "indicators/mass.rs:39:1: 47:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 9,
    "source": "pub unsafe extern \"C\" fn ti_mass_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut sum_p: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n            1 as std::os::raw::c_int;\n    /* The ema uses a hard-coded period of 9.\n     * (9-1)*2 = 16 */\n    return 16 as std::os::raw::c_int + sum_p;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/mass.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "indicators/mass.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:250 ~ c2rust_out[3c70]::indicators::decay::ti_decay_start)",
    "span": "indicators/decay.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/decay.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_decay_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:86 ~ c2rust_out[3c70]::indicators::acos::ti_acos)",
    "span": "indicators/acos.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/acos.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_acos(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = acos(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:748 ~ c2rust_out[3c70]::indicators::vidya::ti_vidya)",
    "span": "indicators/vidya.rs:40:1: 140:2 (#0)",
    "pieces": [
      "indicators/vidya.rs:40:1: 140:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 101,
    "source": "pub unsafe extern \"C\" fn ti_vidya(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let short_period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let long_period: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let alpha: std::os::raw::c_double = *options.offset(2 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let short_div: std::os::raw::c_double = 1.0f64 / short_period as std::os::raw::c_double;\n    let long_div: std::os::raw::c_double = 1.0f64 / long_period as std::os::raw::c_double;\n    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if long_period < short_period { return 1 as std::os::raw::c_int }\n    if long_period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if alpha < 0.0f64 || alpha > 1.0f64 { return 1 as std::os::raw::c_int }\n    if size <= ti_vidya_start(options) { return 0 as std::os::raw::c_int }\n    let mut short_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut short_sum2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut long_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut long_sum2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < long_period {\n        long_sum += *input.offset(i as isize);\n        long_sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        if i >= long_period - short_period {\n            short_sum += *input.offset(i as isize);\n            short_sum2 +=\n                *input.offset(i as isize) * *input.offset(i as isize)\n        }\n        i += 1\n    }\n    let mut val: std::os::raw::c_double =\n        *input.offset((long_period - 2 as std::os::raw::c_int) as isize);\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = val;\n    if (long_period - 1 as std::os::raw::c_int) < size {\n        let mut short_stddev: std::os::raw::c_double =\n            sqrt(short_sum2 * short_div -\n                     short_sum * short_div * (short_sum * short_div));\n        let mut long_stddev: std::os::raw::c_double =\n            sqrt(long_sum2 * long_div -\n                     long_sum * long_div * (long_sum * long_div));\n        let mut k: std::os::raw::c_double = short_stddev / long_stddev;\n        if k != k { k = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        k *= alpha;\n        val =\n            (*input.offset((long_period - 1 as std::os::raw::c_int) as isize) - val) *\n                k + val;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = val\n    }\n    i = long_period;\n    while i < size {\n        long_sum += *input.offset(i as isize);\n        long_sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        short_sum += *input.offset(i as isize);\n        short_sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        long_sum -= *input.offset((i - long_period) as isize);\n        long_sum2 -=\n            *input.offset((i - long_period) as isize) *\n                *input.offset((i - long_period) as isize);\n        short_sum -= *input.offset((i - short_period) as isize);\n        short_sum2 -=\n            *input.offset((i - short_period) as isize) *\n                *input.offset((i - short_period) as isize);\n        let mut short_stddev_0: std::os::raw::c_double =\n            sqrt(short_sum2 * short_div -\n                     short_sum * short_div * (short_sum * short_div));\n        let mut long_stddev_0: std::os::raw::c_double =\n            sqrt(long_sum2 * long_div -\n                     long_sum * long_div * (long_sum * long_div));\n        let mut k_0: std::os::raw::c_double = short_stddev_0 / long_stddev_0;\n        if k_0 != k_0 { k_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        k_0 *= alpha;\n        val = (*input.offset(i as isize) - val) * k_0 + val;\n        let fresh2 = output;\n        output = output.offset(1);\n        *fresh2 = val;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_vidya_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 9],\n                                               &[std::os::raw::c_char; 9]>(b\"ti_vidya\\x00\")).as_ptr(),\n                     b\"indicators/vidya.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 106 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_vidya_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1552 ~ c2rust_out[3c70]::smoke::test_buffer)",
    "span": "smoke.rs:420:1: 607:2 (#0)",
    "pieces": [
      "smoke.rs:420:1: 607:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 188,
    "source": "pub unsafe extern \"C\" fn test_buffer() {\n    let mut b: *mut ti_buffer = ti_buffer_new(3 as std::os::raw::c_int);\n    if (*b).pushes >= (*b).size {\n        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)\n    }\n    (*b).sum += 5.0f64;\n    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 5.0f64;\n    (*b).pushes += 1 as std::os::raw::c_int;\n    (*b).index = (*b).index + 1 as std::os::raw::c_int;\n    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }\n    ltests += 1;\n    if fabs((*b).sum - 5.0f64) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               190 as std::os::raw::c_int, (*b).sum, 5.0f64);\n    }\n    if (*b).pushes >= (*b).size {\n        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)\n    }\n    (*b).sum += 5.0f64;\n    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 5.0f64;\n    (*b).pushes += 1 as std::os::raw::c_int;\n    (*b).index = (*b).index + 1 as std::os::raw::c_int;\n    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }\n    ltests += 1;\n    if fabs((*b).sum - 10.0f64) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               191 as std::os::raw::c_int, (*b).sum, 10.0f64);\n    }\n    if (*b).pushes >= (*b).size {\n        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)\n    }\n    (*b).sum += 1.0f64;\n    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 1.0f64;\n    (*b).pushes += 1 as std::os::raw::c_int;\n    (*b).index = (*b).index + 1 as std::os::raw::c_int;\n    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }\n    ltests += 1;\n    if fabs((*b).sum - 11.0f64) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               192 as std::os::raw::c_int, (*b).sum, 11.0f64);\n    }\n    if (*b).pushes >= (*b).size {\n        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)\n    }\n    (*b).sum += 1.0f64;\n    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 1.0f64;\n    (*b).pushes += 1 as std::os::raw::c_int;\n    (*b).index = (*b).index + 1 as std::os::raw::c_int;\n    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }\n    ltests += 1;\n    if fabs((*b).sum - 7.0f64) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               193 as std::os::raw::c_int, (*b).sum, 7.0f64);\n    }\n    if (*b).pushes >= (*b).size {\n        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)\n    }\n    (*b).sum += 3.0f64;\n    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 3.0f64;\n    (*b).pushes += 1 as std::os::raw::c_int;\n    (*b).index = (*b).index + 1 as std::os::raw::c_int;\n    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }\n    ltests += 1;\n    if fabs((*b).sum - 5.0f64) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               194 as std::os::raw::c_int, (*b).sum, 5.0f64);\n    }\n    if (*b).pushes >= (*b).size {\n        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)\n    }\n    (*b).sum += 1.0f64;\n    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 1.0f64;\n    (*b).pushes += 1 as std::os::raw::c_int;\n    (*b).index = (*b).index + 1 as std::os::raw::c_int;\n    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }\n    ltests += 1;\n    if fabs((*b).sum - 5.0f64) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               195 as std::os::raw::c_int, (*b).sum, 5.0f64);\n    }\n    if (*b).pushes >= (*b).size {\n        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)\n    }\n    (*b).sum += 2.0f64;\n    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 2.0f64;\n    (*b).pushes += 1 as std::os::raw::c_int;\n    (*b).index = (*b).index + 1 as std::os::raw::c_int;\n    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }\n    ltests += 1;\n    if fabs((*b).sum - 6.0f64) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               196 as std::os::raw::c_int, (*b).sum, 6.0f64);\n    }\n    if (*b).pushes >= (*b).size {\n        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)\n    }\n    (*b).sum += 3.0f64;\n    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 3.0f64;\n    (*b).pushes += 1 as std::os::raw::c_int;\n    (*b).index = (*b).index + 1 as std::os::raw::c_int;\n    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }\n    ltests += 1;\n    if fabs((*b).sum - 6.0f64) > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               197 as std::os::raw::c_int, (*b).sum, 6.0f64);\n    }\n    ltests += 1;\n    if fabs(*(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -\n                                                 1 as std::os::raw::c_int +\n                                                 0 as std::os::raw::c_int) %\n                                                (*b).size) as isize) - 3.0f64)\n           > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               199 as std::os::raw::c_int,\n               *(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -\n                                                    1 as std::os::raw::c_int +\n                                                    0 as std::os::raw::c_int) %\n                                                   (*b).size) as isize),\n               3.0f64);\n    }\n    ltests += 1;\n    if fabs(*(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -\n                                                 1 as std::os::raw::c_int +\n                                                 -(1 as std::os::raw::c_int)) %\n                                                (*b).size) as isize) - 2.0f64)\n           > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               200 as std::os::raw::c_int,\n               *(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -\n                                                    1 as std::os::raw::c_int +\n                                                    -(1 as std::os::raw::c_int)) %\n                                                   (*b).size) as isize),\n               2.0f64);\n    }\n    ltests += 1;\n    if fabs(*(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -\n                                                 1 as std::os::raw::c_int +\n                                                 -(2 as std::os::raw::c_int)) %\n                                                (*b).size) as isize) - 1.0f64)\n           > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               201 as std::os::raw::c_int,\n               *(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -\n                                                    1 as std::os::raw::c_int +\n                                                    -(2 as std::os::raw::c_int)) %\n                                                   (*b).size) as isize),\n               1.0f64);\n    }\n    ltests += 1;\n    if fabs(*(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -\n                                                 1 as std::os::raw::c_int +\n                                                 -(3 as std::os::raw::c_int)) %\n                                                (*b).size) as isize) - 3.0f64)\n           > 0.001f64 {\n        lfails += 1;\n        printf(b\"%s:%d (%f != %f)\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n               b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n               202 as std::os::raw::c_int,\n               *(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -\n                                                    1 as std::os::raw::c_int +\n                                                    -(3 as std::os::raw::c_int)) %\n                                                   (*b).size) as isize),\n               3.0f64);\n    }\n    ti_buffer_free(b);\n}",
    "calls": [
      {
        "caller": "DefId(0:1553 ~ c2rust_out[3c70]::smoke::main_0)",
        "span": "smoke.rs:615:5: 615:19 (#0)",
        "source": "test_buffer();"
      }
    ],
    "globals": [
      {
        "span": "smoke.rs:98:1: 98:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "smoke.rs:97:1: 97:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "smoke.rs:44:1: 44:45 (#0)",
        "source": "pub use crate::indicators_index::ti_version;"
      },
      {
        "span": "smoke.rs:45:1: 45:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "smoke.rs:41:1: 41:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      },
      {
        "span": "smoke.rs:43:1: 43:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "smoke.rs:46:1: 46:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "smoke.rs:42:1: 42:43 (#0)",
        "source": "pub use crate::indicators_index::ti_build;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1553 ~ c2rust_out[3c70]::smoke::main_0)",
    "span": "smoke.rs:608:1: 665:2 (#0)",
    "pieces": [
      "smoke.rs:608:1: 665:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 58,
    "source": "unsafe fn main_0() -> std::os::raw::c_int {\n    printf(b\"TI TEST SUITE\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n    let ts: std::os::raw::c_int = ltests;\n    let fs: std::os::raw::c_int = lfails;\n    let start: clock_t = clock();\n    printf(b\"\\t%-16s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"buffer\\x00\" as *const u8 as *const std::os::raw::c_char);\n    test_buffer();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts - (lfails - fs), lfails - fs,\n           clock().wrapping_sub(start).wrapping_mul(1000 as std::os::raw::c_int as\n                                                        std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                        as\n                                                                                        std::os::raw::c_int\n                                                                                        as\n                                                                                        std::os::raw::c_ulong)\n               as std::os::raw::c_int);\n    let ts_0: std::os::raw::c_int = ltests;\n    let fs_0: std::os::raw::c_int = lfails;\n    let start_0: clock_t = clock();\n    printf(b\"\\t%-16s\\x00\" as *const u8 as *const std::os::raw::c_char,\n           b\"version\\x00\" as *const u8 as *const std::os::raw::c_char);\n    test_version();\n    printf(b\"pass:%2d   fail:%2d   %4dms\\n\\x00\" as *const u8 as\n               *const std::os::raw::c_char, ltests - ts_0 - (lfails - fs_0),\n           lfails - fs_0,\n           clock().wrapping_sub(start_0).wrapping_mul(1000 as std::os::raw::c_int as\n                                                          std::os::raw::c_ulong).wrapping_div(1000000\n                                                                                          as\n                                                                                          std::os::raw::c_int\n                                                                                          as\n                                                                                          std::os::raw::c_ulong)\n               as std::os::raw::c_int);\n    test(b\"tests/untest.txt\\x00\" as *const u8 as *const std::os::raw::c_char,\n         0 as std::os::raw::c_int);\n    test(b\"tests/atoz.txt\\x00\" as *const u8 as *const std::os::raw::c_char,\n         1 as std::os::raw::c_int);\n    test(b\"tests/extra.txt\\x00\" as *const u8 as *const std::os::raw::c_char,\n         1 as std::os::raw::c_int);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < 104 as std::os::raw::c_int {\n        if tested[i as usize] == 0 {\n            printf(b\"WARNING: no test for %s\\n\\x00\" as *const u8 as\n                       *const std::os::raw::c_char,\n                   (*ti_indicators.as_mut_ptr().offset(i as isize)).name);\n        }\n        i += 1\n    }\n    if lfails == 0 as std::os::raw::c_int {\n        printf(b\"ALL TESTS PASSED (%d/%d)\\n\\x00\" as *const u8 as\n                   *const std::os::raw::c_char, ltests, ltests);\n    } else {\n        printf(b\"%d TESTS FAILED (of %d)\\n\\x00\" as *const u8 as\n                   *const std::os::raw::c_char, lfails, ltests);\n    }\n    return (lfails != 0 as std::os::raw::c_int) as std::os::raw::c_int;\n}",
    "calls": [
      {
        "caller": "DefId(0:1554 ~ c2rust_out[3c70]::smoke::main)",
        "span": "smoke.rs:666:17: 666:65 (#0)",
        "source": "unsafe { ::std::process::exit(main_0() as i32) }"
      }
    ],
    "globals": [
      {
        "span": "smoke.rs:98:1: 98:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "smoke.rs:97:1: 97:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "smoke.rs:43:1: 43:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "smoke.rs:41:1: 41:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      },
      {
        "span": "smoke.rs:46:1: 46:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "smoke.rs:42:1: 42:43 (#0)",
        "source": "pub use crate::indicators_index::ti_build;"
      },
      {
        "span": "smoke.rs:45:1: 45:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "smoke.rs:44:1: 44:45 (#0)",
        "source": "pub use crate::indicators_index::ti_version;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:175 ~ c2rust_out[3c70]::indicators::avgprice::ti_avgprice_start)",
    "span": "indicators/avgprice.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/avgprice.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_avgprice_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:477 ~ c2rust_out[3c70]::indicators::min::ti_min_start)",
    "span": "indicators/min.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/min.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_min_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:641 ~ c2rust_out[3c70]::indicators::stochrsi::ti_stochrsi)",
    "span": "indicators/stochrsi.rs:46:1: 180:2 (#0)",
    "pieces": [
      "indicators/stochrsi.rs:46:1: 180:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 135,
    "source": "pub unsafe extern \"C\" fn ti_stochrsi(mut size: std::os::raw::c_int,\n                                     mut inputs: *const *const std::os::raw::c_double,\n                                     mut options: *const std::os::raw::c_double,\n                                     mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let per: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_stochrsi_start(options) { return 0 as std::os::raw::c_int }\n    let mut rsi: *mut ti_buffer = ti_buffer_new(period);\n    let mut smooth_up: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut smooth_down: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i <= period {\n        let upward: std::os::raw::c_double =\n            if *input.offset(i as isize) >\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset(i as isize)) -\n                    *input.offset((i - 1 as std::os::raw::c_int) as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        let downward: std::os::raw::c_double =\n            if *input.offset(i as isize) <\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -\n                    *input.offset(i as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        smooth_up += upward;\n        smooth_down += downward;\n        i += 1\n    }\n    smooth_up /= period as std::os::raw::c_double;\n    smooth_down /= period as std::os::raw::c_double;\n    let mut r: std::os::raw::c_double =\n        100.0f64 * (smooth_up / (smooth_up + smooth_down));\n    if (*rsi).pushes >= (*rsi).size {\n        (*rsi).sum -= *(*rsi).vals.as_mut_ptr().offset((*rsi).index as isize)\n    }\n    (*rsi).sum += r;\n    *(*rsi).vals.as_mut_ptr().offset((*rsi).index as isize) = r;\n    (*rsi).pushes += 1 as std::os::raw::c_int;\n    (*rsi).index = (*rsi).index + 1 as std::os::raw::c_int;\n    if (*rsi).index >= (*rsi).size { (*rsi).index = 0 as std::os::raw::c_int }\n    let mut min: std::os::raw::c_double = r;\n    let mut max: std::os::raw::c_double = r;\n    let mut mini: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut maxi: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    i = period + 1 as std::os::raw::c_int;\n    while i < size {\n        let upward_0: std::os::raw::c_double =\n            if *input.offset(i as isize) >\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset(i as isize)) -\n                    *input.offset((i - 1 as std::os::raw::c_int) as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        let downward_0: std::os::raw::c_double =\n            if *input.offset(i as isize) <\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -\n                    *input.offset(i as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        smooth_up = (upward_0 - smooth_up) * per + smooth_up;\n        smooth_down = (downward_0 - smooth_down) * per + smooth_down;\n        r = 100.0f64 * (smooth_up / (smooth_up + smooth_down));\n        if r > max {\n            max = r;\n            maxi = (*rsi).index\n        } else if maxi == (*rsi).index {\n            max = r;\n            let mut j: std::os::raw::c_int = 0;\n            j = 0 as std::os::raw::c_int;\n            while j < (*rsi).size {\n                if !(j == (*rsi).index) {\n                    if *(*rsi).vals.as_mut_ptr().offset(j as isize) > max {\n                        max = *(*rsi).vals.as_mut_ptr().offset(j as isize);\n                        maxi = j\n                    }\n                }\n                j += 1\n            }\n        }\n        if r < min {\n            min = r;\n            mini = (*rsi).index\n        } else if mini == (*rsi).index {\n            min = r;\n            let mut j_0: std::os::raw::c_int = 0;\n            j_0 = 0 as std::os::raw::c_int;\n            while j_0 < (*rsi).size {\n                if !(j_0 == (*rsi).index) {\n                    if *(*rsi).vals.as_mut_ptr().offset(j_0 as isize) < min {\n                        min = *(*rsi).vals.as_mut_ptr().offset(j_0 as isize);\n                        mini = j_0\n                    }\n                }\n                j_0 += 1\n            }\n        }\n        *(*rsi).vals.as_mut_ptr().offset((*rsi).index as isize) = r;\n        (*rsi).index = (*rsi).index + 1 as std::os::raw::c_int;\n        if (*rsi).index >= (*rsi).size { (*rsi).index = 0 as std::os::raw::c_int }\n        if i > period * 2 as std::os::raw::c_int - 2 as std::os::raw::c_int {\n            let diff: std::os::raw::c_double = max - min;\n            if diff == 0.0f64 {\n                let fresh0 = output;\n                output = output.offset(1);\n                *fresh0 = 0.0f64\n            } else {\n                let fresh1 = output;\n                output = output.offset(1);\n                *fresh1 = (r - min) / diff\n            }\n        }\n        i += 1\n    }\n    ti_buffer_free(rsi);\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_stochrsi_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 12],\n                                               &[std::os::raw::c_char; 12]>(b\"ti_stochrsi\\x00\")).as_ptr(),\n                     b\"indicators/stochrsi.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 115 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_stochrsi_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/stochrsi.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "indicators/stochrsi.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:82 ~ c2rust_out[3c70]::indicators::abs::ti_abs_start)",
    "span": "indicators/abs.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/abs.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_abs_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:182 ~ c2rust_out[3c70]::indicators::bbands::ti_bbands)",
    "span": "indicators/bbands.rs:38:1: 132:2 (#0)",
    "pieces": [
      "indicators/bbands.rs:38:1: 132:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 95,
    "source": "pub unsafe extern \"C\" fn ti_bbands(mut size: std::os::raw::c_int,\n                                   mut inputs: *const *const std::os::raw::c_double,\n                                   mut options: *const std::os::raw::c_double,\n                                   mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut lower: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut middle: *mut std::os::raw::c_double =\n        *outputs.offset(1 as std::os::raw::c_int as isize);\n    let mut upper: *mut std::os::raw::c_double =\n        *outputs.offset(2 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let stddev: std::os::raw::c_double = *options.offset(1 as std::os::raw::c_int as isize);\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_bbands_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut sum2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period {\n        sum += *input.offset(i as isize);\n        sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        i += 1\n    }\n    let mut sd: std::os::raw::c_double =\n        sqrt(sum2 * scale - sum * scale * (sum * scale));\n    *middle = sum * scale;\n    let fresh0 = lower;\n    lower = lower.offset(1);\n    *fresh0 = *middle - stddev * sd;\n    let fresh1 = upper;\n    upper = upper.offset(1);\n    *fresh1 = *middle + stddev * sd;\n    middle = middle.offset(1);\n    i = period;\n    while i < size {\n        sum += *input.offset(i as isize);\n        sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        sum -= *input.offset((i - period) as isize);\n        sum2 -=\n            *input.offset((i - period) as isize) *\n                *input.offset((i - period) as isize);\n        sd = sqrt(sum2 * scale - sum * scale * (sum * scale));\n        *middle = sum * scale;\n        let fresh2 = upper;\n        upper = upper.offset(1);\n        *fresh2 = *middle + stddev * sd;\n        let fresh3 = lower;\n        lower = lower.offset(1);\n        *fresh3 = *middle - stddev * sd;\n        middle = middle.offset(1);\n        i += 1\n    }\n    if !(lower.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                        isize)) as\n             std::os::raw::c_long ==\n             (size - ti_bbands_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 10],\n                                               &[std::os::raw::c_char; 10]>(b\"ti_bbands\\x00\")).as_ptr(),\n                     b\"indicators/bbands.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 76 as std::os::raw::c_int,\n                     b\"lower - outputs[0] == size - ti_bbands_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    if !(middle.offset_from(*outputs.offset(1 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_bbands_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 10],\n                                               &[std::os::raw::c_char; 10]>(b\"ti_bbands\\x00\")).as_ptr(),\n                     b\"indicators/bbands.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 77 as std::os::raw::c_int,\n                     b\"middle - outputs[1] == size - ti_bbands_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    if !(upper.offset_from(*outputs.offset(2 as std::os::raw::c_int as\n                                                        isize)) as\n             std::os::raw::c_long ==\n             (size - ti_bbands_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 10],\n                                               &[std::os::raw::c_char; 10]>(b\"ti_bbands\\x00\")).as_ptr(),\n                     b\"indicators/bbands.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 78 as std::os::raw::c_int,\n                     b\"upper - outputs[2] == size - ti_bbands_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:275 ~ c2rust_out[3c70]::indicators::dm::ti_dm_start)",
    "span": "indicators/dm.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/dm.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_dm_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:471 ~ c2rust_out[3c70]::indicators::mfi::ti_mfi)",
    "span": "indicators/mfi.rs:22:1: 142:2 (#0)",
    "pieces": [
      "indicators/mfi.rs:22:1: 142:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 121,
    "source": "pub unsafe extern \"C\" fn ti_mfi(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut volume: *const std::os::raw::c_double =\n        *inputs.offset(3 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_mfi_start(options) { return 0 as std::os::raw::c_int }\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut ytyp: std::os::raw::c_double =\n        (*high.offset(0 as std::os::raw::c_int as isize) +\n             *low.offset(0 as std::os::raw::c_int as isize) +\n             *close.offset(0 as std::os::raw::c_int as isize)) * (1.0f64 / 3.0f64);\n    let mut i: std::os::raw::c_int = 0;\n    let mut up: *mut ti_buffer = ti_buffer_new(period);\n    let mut down: *mut ti_buffer = ti_buffer_new(period);\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        let typ: std::os::raw::c_double =\n            (*high.offset(i as isize) + *low.offset(i as isize) +\n                 *close.offset(i as isize)) * (1.0f64 / 3.0f64);\n        let bar: std::os::raw::c_double = typ * *volume.offset(i as isize);\n        if typ > ytyp {\n            if (*up).pushes >= (*up).size {\n                (*up).sum -=\n                    *(*up).vals.as_mut_ptr().offset((*up).index as isize)\n            }\n            (*up).sum += bar;\n            *(*up).vals.as_mut_ptr().offset((*up).index as isize) = bar;\n            (*up).pushes += 1 as std::os::raw::c_int;\n            (*up).index = (*up).index + 1 as std::os::raw::c_int;\n            if (*up).index >= (*up).size { (*up).index = 0 as std::os::raw::c_int }\n            if (*down).pushes >= (*down).size {\n                (*down).sum -=\n                    *(*down).vals.as_mut_ptr().offset((*down).index as isize)\n            }\n            (*down).sum += 0.0f64;\n            *(*down).vals.as_mut_ptr().offset((*down).index as isize) =\n                0.0f64;\n            (*down).pushes += 1 as std::os::raw::c_int;\n            (*down).index = (*down).index + 1 as std::os::raw::c_int;\n            if (*down).index >= (*down).size {\n                (*down).index = 0 as std::os::raw::c_int\n            }\n        } else if typ < ytyp {\n            if (*down).pushes >= (*down).size {\n                (*down).sum -=\n                    *(*down).vals.as_mut_ptr().offset((*down).index as isize)\n            }\n            (*down).sum += bar;\n            *(*down).vals.as_mut_ptr().offset((*down).index as isize) = bar;\n            (*down).pushes += 1 as std::os::raw::c_int;\n            (*down).index = (*down).index + 1 as std::os::raw::c_int;\n            if (*down).index >= (*down).size {\n                (*down).index = 0 as std::os::raw::c_int\n            }\n            if (*up).pushes >= (*up).size {\n                (*up).sum -=\n                    *(*up).vals.as_mut_ptr().offset((*up).index as isize)\n            }\n            (*up).sum += 0.0f64;\n            *(*up).vals.as_mut_ptr().offset((*up).index as isize) = 0.0f64;\n            (*up).pushes += 1 as std::os::raw::c_int;\n            (*up).index = (*up).index + 1 as std::os::raw::c_int;\n            if (*up).index >= (*up).size { (*up).index = 0 as std::os::raw::c_int }\n        } else {\n            if (*up).pushes >= (*up).size {\n                (*up).sum -=\n                    *(*up).vals.as_mut_ptr().offset((*up).index as isize)\n            }\n            (*up).sum += 0.0f64;\n            *(*up).vals.as_mut_ptr().offset((*up).index as isize) = 0.0f64;\n            (*up).pushes += 1 as std::os::raw::c_int;\n            (*up).index = (*up).index + 1 as std::os::raw::c_int;\n            if (*up).index >= (*up).size { (*up).index = 0 as std::os::raw::c_int }\n            if (*down).pushes >= (*down).size {\n                (*down).sum -=\n                    *(*down).vals.as_mut_ptr().offset((*down).index as isize)\n            }\n            (*down).sum += 0.0f64;\n            *(*down).vals.as_mut_ptr().offset((*down).index as isize) =\n                0.0f64;\n            (*down).pushes += 1 as std::os::raw::c_int;\n            (*down).index = (*down).index + 1 as std::os::raw::c_int;\n            if (*down).index >= (*down).size {\n                (*down).index = 0 as std::os::raw::c_int\n            }\n        }\n        ytyp = typ;\n        if i >= period {\n            let fresh0 = output;\n            output = output.offset(1);\n            *fresh0 = (*up).sum / ((*up).sum + (*down).sum) * 100.0f64\n        }\n        i += 1\n    }\n    ti_buffer_free(up);\n    ti_buffer_free(down);\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_mfi_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_mfi\\x00\")).as_ptr(),\n                     b\"indicators/mfi.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 78 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_mfi_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/mfi.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "indicators/mfi.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:610 ~ c2rust_out[3c70]::indicators::stderr::ti_stderr_start)",
    "span": "indicators/stderr.rs:32:1: 36:2 (#0)",
    "pieces": [
      "indicators/stderr.rs:32:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_stderr_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:731 ~ c2rust_out[3c70]::indicators::var::ti_var_start)",
    "span": "indicators/var.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/var.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_var_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:376 ~ c2rust_out[3c70]::indicators::lag::ti_lag)",
    "span": "indicators/lag.rs:35:1: 68:2 (#0)",
    "pieces": [
      "indicators/lag.rs:35:1: 68:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 34,
    "source": "pub unsafe extern \"C\" fn ti_lag(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 0 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_lag_start(options) { return 0 as std::os::raw::c_int }\n    let mut i: std::os::raw::c_int = 0;\n    i = period;\n    while i < size {\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = *input.offset((i - period) as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_lag_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_lag\\x00\")).as_ptr(),\n                     b\"indicators/lag.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 46 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_lag_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:284 ~ c2rust_out[3c70]::indicators::dpo::ti_dpo_start)",
    "span": "indicators/dpo.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/dpo.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_dpo_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:105 ~ c2rust_out[3c70]::indicators::adx::ti_adx_start)",
    "span": "indicators/adx.rs:32:1: 36:2 (#0)",
    "pieces": [
      "indicators/adx.rs:32:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_adx_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return (*options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n                1 as std::os::raw::c_int) * 2 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:211 ~ c2rust_out[3c70]::indicators::ceil::ti_ceil_start)",
    "span": "indicators/ceil.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/ceil.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_ceil_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:368 ~ c2rust_out[3c70]::indicators::kvo::ti_kvo_start)",
    "span": "indicators/kvo.rs:32:1: 35:2 (#0)",
    "pieces": [
      "indicators/kvo.rs:32:1: 35:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_kvo_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:502 ~ c2rust_out[3c70]::indicators::mul::ti_mul_start)",
    "span": "indicators/mul.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/mul.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_mul_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:573 ~ c2rust_out[3c70]::indicators::rsi::ti_rsi)",
    "span": "indicators/rsi.rs:35:1: 108:2 (#0)",
    "pieces": [
      "indicators/rsi.rs:35:1: 108:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 74,
    "source": "pub unsafe extern \"C\" fn ti_rsi(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let per: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_rsi_start(options) { return 0 as std::os::raw::c_int }\n    let mut smooth_up: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut smooth_down: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i <= period {\n        let upward: std::os::raw::c_double =\n            if *input.offset(i as isize) >\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset(i as isize)) -\n                    *input.offset((i - 1 as std::os::raw::c_int) as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        let downward: std::os::raw::c_double =\n            if *input.offset(i as isize) <\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -\n                    *input.offset(i as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        smooth_up += upward;\n        smooth_down += downward;\n        i += 1\n    }\n    smooth_up /= period as std::os::raw::c_double;\n    smooth_down /= period as std::os::raw::c_double;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = 100.0f64 * (smooth_up / (smooth_up + smooth_down));\n    i = period + 1 as std::os::raw::c_int;\n    while i < size {\n        let upward_0: std::os::raw::c_double =\n            if *input.offset(i as isize) >\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset(i as isize)) -\n                    *input.offset((i - 1 as std::os::raw::c_int) as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        let downward_0: std::os::raw::c_double =\n            if *input.offset(i as isize) <\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -\n                    *input.offset(i as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        smooth_up = (upward_0 - smooth_up) * per + smooth_up;\n        smooth_down = (downward_0 - smooth_down) * per + smooth_down;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = 100.0f64 * (smooth_up / (smooth_up + smooth_down));\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_rsi_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_rsi\\x00\")).as_ptr(),\n                     b\"indicators/rsi.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 66 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_rsi_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:662 ~ c2rust_out[3c70]::indicators::tanh::ti_tanh)",
    "span": "indicators/tanh.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/tanh.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_tanh(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = tanh(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:425 ~ c2rust_out[3c70]::indicators::marketfi::ti_marketfi)",
    "span": "indicators/marketfi.rs:35:1: 72:2 (#0)",
    "pieces": [
      "indicators/marketfi.rs:35:1: 72:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 38,
    "source": "pub unsafe extern \"C\" fn ti_marketfi(mut size: std::os::raw::c_int,\n                                     mut inputs: *const *const std::os::raw::c_double,\n                                     mut options: *const std::os::raw::c_double,\n                                     mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut volume: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if size <= ti_marketfi_start(options) { return 0 as std::os::raw::c_int }\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 =\n            (*high.offset(i as isize) - *low.offset(i as isize)) /\n                *volume.offset(i as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_marketfi_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 12],\n                                               &[std::os::raw::c_char; 12]>(b\"ti_marketfi\\x00\")).as_ptr(),\n                     b\"indicators/marketfi.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 50 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_marketfi_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:503 ~ c2rust_out[3c70]::indicators::mul::ti_mul)",
    "span": "indicators/mul.rs:30:1: 49:2 (#0)",
    "pieces": [
      "indicators/mul.rs:30:1: 49:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 20,
    "source": "pub unsafe extern \"C\" fn ti_mul(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut in2: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            *in1.offset(i as isize) * *in2.offset(i as isize);\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1543 ~ c2rust_out[3c70]::smoke::get_array)",
    "span": "smoke.rs:181:1: 211:2 (#0)",
    "pieces": [
      "smoke.rs:181:1: 211:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 31,
    "source": "pub unsafe extern \"C\" fn get_array(mut fp: *mut FILE,\n                                   mut s: *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut line: *mut std::os::raw::c_char = next_line(fp);\n    if *line.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int != '{' as i32 {\n        printf(b\"Bad input\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n        ltests += 1;\n        if 0 as std::os::raw::c_int == 0 {\n            lfails += 1;\n            printf(b\"%s:%d error \\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   b\"smoke.c\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   70 as std::os::raw::c_int);\n        }\n        return 0 as std::os::raw::c_int\n    }\n    //#pragma warning(disable:4996) //MSVC\n    let mut num: *mut std::os::raw::c_char =\n        strtok(line.offset(1 as std::os::raw::c_int as isize),\n               b\",}\\r\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n    if num.is_null() { return 0 as std::os::raw::c_int }\n    let mut inp: *mut std::os::raw::c_double = s;\n    loop  {\n        *inp = atof(num);\n        inp = inp.offset(1);\n        num =\n            strtok(0 as *mut std::os::raw::c_char,\n                   b\",}\\r\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n        if num.is_null() { break ; }\n    }\n    return inp.offset_from(s) as std::os::raw::c_long as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [
      {
        "span": "smoke.rs:98:1: 98:67 (#0)",
        "source": "static mut ltests: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      },
      {
        "span": "smoke.rs:97:1: 97:67 (#0)",
        "source": "static mut lfails: std::os::raw::c_int = 0 as std::os::raw::c_int;"
      }
    ],
    "imports": [
      {
        "span": "smoke.rs:43:1: 43:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "smoke.rs:44:1: 44:45 (#0)",
        "source": "pub use crate::indicators_index::ti_version;"
      },
      {
        "span": "smoke.rs:41:1: 41:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      },
      {
        "span": "smoke.rs:46:1: 46:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "smoke.rs:42:1: 42:43 (#0)",
        "source": "pub use crate::indicators_index::ti_build;"
      },
      {
        "span": "smoke.rs:45:1: 45:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:26 ~ c2rust_out[3c70]::example1::main)",
    "span": "example1.rs:114:1: 114:67 (#0)",
    "pieces": [
      "example1.rs:114:1: 114:67 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 1,
    "source": "pub fn main() { unsafe { ::std::process::exit(main_0() as i32) } }",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "example1.rs:16:1: 16:46 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma_start;"
      },
      {
        "span": "example1.rs:15:1: 15:40 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:747 ~ c2rust_out[3c70]::indicators::vidya::ti_vidya_start)",
    "span": "indicators/vidya.rs:32:1: 38:2 (#0)",
    "pieces": [
      "indicators/vidya.rs:32:1: 38:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 7,
    "source": "pub unsafe extern \"C\" fn ti_vidya_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               2 as\n                   std::os::raw::c_int; /* In some conditions it works out that we take the sqrt(-0.0), which gives NaN.\n                              That implies that k should be zero. */\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:547 ~ c2rust_out[3c70]::indicators::qstick::ti_qstick)",
    "span": "indicators/qstick.rs:36:1: 86:2 (#0)",
    "pieces": [
      "indicators/qstick.rs:36:1: 86:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 51,
    "source": "pub unsafe extern \"C\" fn ti_qstick(mut size: std::os::raw::c_int,\n                                   mut inputs: *const *const std::os::raw::c_double,\n                                   mut options: *const std::os::raw::c_double,\n                                   mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut open: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_qstick_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period {\n        sum += *close.offset(i as isize) - *open.offset(i as isize);\n        i += 1\n    }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = sum * scale;\n    i = period;\n    while i < size {\n        sum += *close.offset(i as isize) - *open.offset(i as isize);\n        sum -=\n            *close.offset((i - period) as isize) -\n                *open.offset((i - period) as isize);\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = sum * scale;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_qstick_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 10],\n                                               &[std::os::raw::c_char; 10]>(b\"ti_qstick\\x00\")).as_ptr(),\n                     b\"indicators/qstick.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 58 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_qstick_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:801 ~ c2rust_out[3c70]::indicators::wma::ti_wma)",
    "span": "indicators/wma.rs:36:1: 91:2 (#0)",
    "pieces": [
      "indicators/wma.rs:36:1: 91:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 56,
    "source": "pub unsafe extern \"C\" fn ti_wma(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_wma_start(options) { return 0 as std::os::raw::c_int }\n    /* Weights for 6 period WMA:\n     * 1 2 3 4 5 6\n     */\n    let weights: std::os::raw::c_double =\n        (period * (period + 1 as std::os::raw::c_int) / 2 as std::os::raw::c_int) as\n            std::os::raw::c_double; /* Flat sum of previous numbers. */\n    let mut sum: std::os::raw::c_double =\n        0 as std::os::raw::c_int as\n            std::os::raw::c_double; /* Weighted sum of previous numbers. */\n    let mut weight_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period - 1 as std::os::raw::c_int {\n        weight_sum +=\n            *input.offset(i as isize) *\n                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        sum += *input.offset(i as isize);\n        i += 1\n    }\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        weight_sum += *input.offset(i as isize) * period as std::os::raw::c_double;\n        sum += *input.offset(i as isize);\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = weight_sum / weights;\n        weight_sum -= sum;\n        sum -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_wma_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_wma\\x00\")).as_ptr(),\n                     b\"indicators/wma.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 67 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_wma_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:688 ~ c2rust_out[3c70]::indicators::trima::ti_trima_start)",
    "span": "indicators/trima.rs:33:1: 37:2 (#0)",
    "pieces": [
      "indicators/trima.rs:33:1: 37:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_trima_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/trima.rs:9:1: 9:40 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:98 ~ c2rust_out[3c70]::indicators::adosc::ti_adosc)",
    "span": "indicators/adosc.rs:36:1: 107:2 (#0)",
    "pieces": [
      "indicators/adosc.rs:36:1: 107:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 72,
    "source": "pub unsafe extern \"C\" fn ti_adosc(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut volume: *const std::os::raw::c_double =\n        *inputs.offset(3 as std::os::raw::c_int as isize);\n    let short_period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let long_period: std::os::raw::c_int =\n        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let start: std::os::raw::c_int = long_period - 1 as std::os::raw::c_int;\n    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if long_period < short_period { return 1 as std::os::raw::c_int }\n    if size <= ti_adosc_start(options) { return 0 as std::os::raw::c_int }\n    let short_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (short_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let long_per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (long_period as std::os::raw::c_double +\n                 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut short_ema: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut long_ema: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        let hl: std::os::raw::c_double =\n            *high.offset(i as isize) - *low.offset(i as isize);\n        if hl != 0.0f64 {\n            sum +=\n                (*close.offset(i as isize) - *low.offset(i as isize) -\n                     *high.offset(i as isize) + *close.offset(i as isize)) /\n                    hl * *volume.offset(i as isize)\n        }\n        if i == 0 as std::os::raw::c_int {\n            short_ema = sum;\n            long_ema = sum\n        } else {\n            short_ema = (sum - short_ema) * short_per + short_ema;\n            long_ema = (sum - long_ema) * long_per + long_ema\n        }\n        if i >= start {\n            let fresh0 = output;\n            output = output.offset(1);\n            *fresh0 = short_ema - long_ema\n        }\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_adosc_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 9],\n                                               &[std::os::raw::c_char; 9]>(b\"ti_adosc\\x00\")).as_ptr(),\n                     b\"indicators/adosc.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 73 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_adosc_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:165 ~ c2rust_out[3c70]::indicators::atan::ti_atan_start)",
    "span": "indicators/atan.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/atan.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_atan_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:216 ~ c2rust_out[3c70]::indicators::cmo::ti_cmo)",
    "span": "indicators/cmo.rs:13:1: 95:2 (#0)",
    "pieces": [
      "indicators/cmo.rs:13:1: 95:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 83,
    "source": "pub unsafe extern \"C\" fn ti_cmo(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_cmo_start(options) { return 0 as std::os::raw::c_int }\n    let mut up_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut down_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i <= period {\n        up_sum +=\n            if *input.offset(i as isize) >\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset(i as isize)) -\n                    *input.offset((i - 1 as std::os::raw::c_int) as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        down_sum +=\n            if *input.offset(i as isize) <\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -\n                    *input.offset(i as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        i += 1\n    }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 =\n        100 as std::os::raw::c_int as std::os::raw::c_double * (up_sum - down_sum) /\n            (up_sum + down_sum);\n    i = period + 1 as std::os::raw::c_int;\n    while i < size {\n        up_sum -=\n            if *input.offset((i - period) as isize) >\n                   *input.offset((i - period - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset((i - period) as isize)) -\n                    *input.offset((i - period - 1 as std::os::raw::c_int) as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        down_sum -=\n            if *input.offset((i - period) as isize) <\n                   *input.offset((i - period - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset((i - period - 1 as std::os::raw::c_int) as isize)) -\n                    *input.offset((i - period) as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        up_sum +=\n            if *input.offset(i as isize) >\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset(i as isize)) -\n                    *input.offset((i - 1 as std::os::raw::c_int) as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        down_sum +=\n            if *input.offset(i as isize) <\n                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {\n                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -\n                    *input.offset(i as isize)\n            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 =\n            100 as std::os::raw::c_int as std::os::raw::c_double * (up_sum - down_sum) /\n                (up_sum + down_sum);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_cmo_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_cmo\\x00\")).as_ptr(),\n                     b\"indicators/cmo.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 64 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_cmo_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:383 ~ c2rust_out[3c70]::indicators::linreg::ti_linreg)",
    "span": "indicators/linreg.rs:36:1: 96:2 (#0)",
    "pieces": [
      "indicators/linreg.rs:36:1: 96:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 61,
    "source": "pub unsafe extern \"C\" fn ti_linreg(mut size: std::os::raw::c_int,\n                                   mut inputs: *const *const std::os::raw::c_double,\n                                   mut options: *const std::os::raw::c_double,\n                                   mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_linreg_start(options) { return 0 as std::os::raw::c_int }\n    let mut x: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut x2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut y: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut xy: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let p: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period - 1 as std::os::raw::c_int {\n        x += (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        x2 +=\n            ((i + 1 as std::os::raw::c_int) * (i + 1 as std::os::raw::c_int)) as\n                std::os::raw::c_double;\n        xy +=\n            *input.offset(i as isize) *\n                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        y += *input.offset(i as isize);\n        i += 1\n    }\n    x += period as std::os::raw::c_double;\n    x2 += (period * period) as std::os::raw::c_double;\n    let bd: std::os::raw::c_double = 1.0f64 / (period as std::os::raw::c_double * x2 - x * x);\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        xy += *input.offset(i as isize) * period as std::os::raw::c_double;\n        y += *input.offset(i as isize);\n        let b: std::os::raw::c_double = (period as std::os::raw::c_double * xy - x * y) * bd;\n        let a: std::os::raw::c_double = (y - b * x) * p;\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = a + b * period as std::os::raw::c_double;\n        xy -= y;\n        y -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_linreg_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 10],\n                                               &[std::os::raw::c_char; 10]>(b\"ti_linreg\\x00\")).as_ptr(),\n                     b\"indicators/linreg.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 43 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_linreg_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:515 ~ c2rust_out[3c70]::indicators::nvi::ti_nvi_start)",
    "span": "indicators/nvi.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/nvi.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_nvi_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:397 ~ c2rust_out[3c70]::indicators::linregslope::ti_linregslope)",
    "span": "indicators/linregslope.rs:37:1: 97:2 (#0)",
    "pieces": [
      "indicators/linregslope.rs:37:1: 97:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 61,
    "source": "pub unsafe extern \"C\" fn ti_linregslope(mut size: std::os::raw::c_int,\n                                        mut inputs:\n                                            *const *const std::os::raw::c_double,\n                                        mut options: *const std::os::raw::c_double,\n                                        mut outputs:\n                                            *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_linregslope_start(options) { return 0 as std::os::raw::c_int }\n    let mut x: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut x2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut y: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut xy: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period - 1 as std::os::raw::c_int {\n        x += (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        x2 +=\n            ((i + 1 as std::os::raw::c_int) * (i + 1 as std::os::raw::c_int)) as\n                std::os::raw::c_double;\n        xy +=\n            *input.offset(i as isize) *\n                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        y += *input.offset(i as isize);\n        i += 1\n    }\n    x += period as std::os::raw::c_double;\n    x2 += (period * period) as std::os::raw::c_double;\n    let bd: std::os::raw::c_double = 1.0f64 / (period as std::os::raw::c_double * x2 - x * x);\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        xy += *input.offset(i as isize) * period as std::os::raw::c_double;\n        y += *input.offset(i as isize);\n        let b: std::os::raw::c_double = (period as std::os::raw::c_double * xy - x * y) * bd;\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = b;\n        xy -= y;\n        y -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_linregslope_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 15],\n                                               &[std::os::raw::c_char; 15]>(b\"ti_linregslope\\x00\")).as_ptr(),\n                     b\"indicators/linregslope.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 51 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_linregslope_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:597 ~ c2rust_out[3c70]::indicators::sqrt::ti_sqrt_start)",
    "span": "indicators/sqrt.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/sqrt.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_sqrt_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:470 ~ c2rust_out[3c70]::indicators::mfi::ti_mfi_start)",
    "span": "indicators/mfi.rs:17:1: 20:2 (#0)",
    "pieces": [
      "indicators/mfi.rs:17:1: 20:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_mfi_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/mfi.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "indicators/mfi.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:646 ~ c2rust_out[3c70]::indicators::sub::ti_sub_start)",
    "span": "indicators/sub.rs:46:1: 49:2 (#0)",
    "pieces": [
      "indicators/sub.rs:46:1: 49:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_sub_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:90 ~ c2rust_out[3c70]::indicators::ad::ti_ad)",
    "span": "indicators/ad.rs:30:1: 61:2 (#0)",
    "pieces": [
      "indicators/ad.rs:30:1: 61:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 32,
    "source": "pub unsafe extern \"C\" fn ti_ad(mut size: std::os::raw::c_int,\n                               mut inputs: *const *const std::os::raw::c_double,\n                               mut options: *const std::os::raw::c_double,\n                               mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut volume: *const std::os::raw::c_double =\n        *inputs.offset(3 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        let hl: std::os::raw::c_double =\n            *high.offset(i as isize) - *low.offset(i as isize);\n        if hl != 0.0f64 {\n            sum +=\n                (*close.offset(i as isize) - *low.offset(i as isize) -\n                     *high.offset(i as isize) + *close.offset(i as isize)) /\n                    hl * *volume.offset(i as isize)\n        }\n        *output.offset(i as isize) = sum;\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:651 ~ c2rust_out[3c70]::indicators::sum::ti_sum)",
    "span": "indicators/sum.rs:36:1: 77:2 (#0)",
    "pieces": [
      "indicators/sum.rs:36:1: 77:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 42,
    "source": "pub unsafe extern \"C\" fn ti_sum(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_sum_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period { sum += *input.offset(i as isize); i += 1 }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = sum;\n    i = period;\n    while i < size {\n        sum += *input.offset(i as isize);\n        sum -= *input.offset((i - period) as isize);\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = sum;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_sum_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_sum\\x00\")).as_ptr(),\n                     b\"indicators/sum.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 56 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_sum_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:1554 ~ c2rust_out[3c70]::smoke::main)",
    "span": "smoke.rs:666:1: 666:67 (#0)",
    "pieces": [
      "smoke.rs:666:1: 666:67 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 1,
    "source": "pub fn main() { unsafe { ::std::process::exit(main_0() as i32) } }",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "smoke.rs:42:1: 42:43 (#0)",
        "source": "pub use crate::indicators_index::ti_build;"
      },
      {
        "span": "smoke.rs:46:1: 46:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "smoke.rs:43:1: 43:52 (#0)",
        "source": "pub use crate::indicators_index::ti_find_indicator;"
      },
      {
        "span": "smoke.rs:45:1: 45:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "smoke.rs:41:1: 41:48 (#0)",
        "source": "pub use crate::indicators_index::ti_indicators;"
      },
      {
        "span": "smoke.rs:44:1: 44:45 (#0)",
        "source": "pub use crate::indicators_index::ti_version;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:584 ~ c2rust_out[3c70]::indicators::sinh::ti_sinh)",
    "span": "indicators/sinh.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/sinh.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_sinh(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = sinh(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:190 ~ c2rust_out[3c70]::indicators::bop::ti_bop_start)",
    "span": "indicators/bop.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/bop.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_bop_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:396 ~ c2rust_out[3c70]::indicators::linregslope::ti_linregslope_start)",
    "span": "indicators/linregslope.rs:30:1: 35:2 (#0)",
    "pieces": [
      "indicators/linregslope.rs:30:1: 35:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn ti_linregslope_start(mut options:\n                                                  *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:316 ~ c2rust_out[3c70]::indicators::exp::ti_exp)",
    "span": "indicators/exp.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/exp.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_exp(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = exp(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:159 ~ c2rust_out[3c70]::indicators::asin::ti_asin)",
    "span": "indicators/asin.rs:29:1: 45:2 (#0)",
    "pieces": [
      "indicators/asin.rs:29:1: 45:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 17,
    "source": "pub unsafe extern \"C\" fn ti_asin(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) = asin(*in1.offset(i as isize));\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:87 ~ c2rust_out[3c70]::indicators::acos::ti_acos_start)",
    "span": "indicators/acos.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/acos.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_acos_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:672 ~ c2rust_out[3c70]::indicators::todeg::ti_todeg)",
    "span": "indicators/todeg.rs:25:1: 43:2 (#0)",
    "pieces": [
      "indicators/todeg.rs:25:1: 43:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 19,
    "source": "pub unsafe extern \"C\" fn ti_todeg(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            *in1.offset(i as isize) *\n                (180.0f64 / 3.14159265358979323846264338327950288f64);\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:424 ~ c2rust_out[3c70]::indicators::marketfi::ti_marketfi_start)",
    "span": "indicators/marketfi.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/marketfi.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_marketfi_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:520 ~ c2rust_out[3c70]::indicators::obv::ti_obv_start)",
    "span": "indicators/obv.rs:25:1: 28:2 (#0)",
    "pieces": [
      "indicators/obv.rs:25:1: 28:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_obv_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:264 ~ c2rust_out[3c70]::indicators::di::ti_di)",
    "span": "indicators/di.rs:38:1: 163:2 (#0)",
    "pieces": [
      "indicators/di.rs:38:1: 163:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 126,
    "source": "pub unsafe extern \"C\" fn ti_di(mut size: std::os::raw::c_int,\n                               mut inputs: *const *const std::os::raw::c_double,\n                               mut options: *const std::os::raw::c_double,\n                               mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut plus_di: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut minus_di: *mut std::os::raw::c_double =\n        *outputs.offset(1 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_di_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double =\n        (period as std::os::raw::c_double - 1 as std::os::raw::c_int as std::os::raw::c_double) /\n            period as std::os::raw::c_double;\n    let mut atr: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut dmup: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut dmdown: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < period {\n        let mut truerange: std::os::raw::c_double = 0.;\n        let l: std::os::raw::c_double = *low.offset(i as isize);\n        let h: std::os::raw::c_double = *high.offset(i as isize);\n        let c: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych: std::os::raw::c_double = fabs(h - c);\n        let ycl: std::os::raw::c_double = fabs(l - c);\n        let mut v: std::os::raw::c_double = h - l;\n        if ych > v { v = ych }\n        if ycl > v { v = ycl }\n        truerange = v;\n        atr += truerange;\n        let mut dp: std::os::raw::c_double = 0.;\n        let mut dm: std::os::raw::c_double = 0.;\n        dp =\n            *high.offset(i as isize) -\n                *high.offset((i - 1 as std::os::raw::c_int) as isize);\n        dm =\n            *low.offset((i - 1 as std::os::raw::c_int) as isize) -\n                *low.offset(i as isize);\n        if dp < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dp = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dp > dm { dm = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        if dm < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dm = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dm > dp { dp = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        dmup += dp;\n        dmdown += dm;\n        i += 1\n    }\n    let fresh0 = plus_di;\n    plus_di = plus_di.offset(1);\n    *fresh0 = 100.0f64 * dmup / atr;\n    let fresh1 = minus_di;\n    minus_di = minus_di.offset(1);\n    *fresh1 = 100.0f64 * dmdown / atr;\n    i = period;\n    while i < size {\n        let mut truerange_0: std::os::raw::c_double = 0.;\n        let l_0: std::os::raw::c_double = *low.offset(i as isize);\n        let h_0: std::os::raw::c_double = *high.offset(i as isize);\n        let c_0: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych_0: std::os::raw::c_double = fabs(h_0 - c_0);\n        let ycl_0: std::os::raw::c_double = fabs(l_0 - c_0);\n        let mut v_0: std::os::raw::c_double = h_0 - l_0;\n        if ych_0 > v_0 { v_0 = ych_0 }\n        if ycl_0 > v_0 { v_0 = ycl_0 }\n        truerange_0 = v_0;\n        atr = atr * per + truerange_0;\n        let mut dp_0: std::os::raw::c_double = 0.;\n        let mut dm_0: std::os::raw::c_double = 0.;\n        dp_0 =\n            *high.offset(i as isize) -\n                *high.offset((i - 1 as std::os::raw::c_int) as isize);\n        dm_0 =\n            *low.offset((i - 1 as std::os::raw::c_int) as isize) -\n                *low.offset(i as isize);\n        if dp_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dp_0 > dm_0 { dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        if dm_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dm_0 > dp_0 { dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        dmup = dmup * per + dp_0;\n        dmdown = dmdown * per + dm_0;\n        let fresh2 = plus_di;\n        plus_di = plus_di.offset(1);\n        *fresh2 = 100.0f64 * dmup / atr;\n        let fresh3 = minus_di;\n        minus_di = minus_di.offset(1);\n        *fresh3 = 100.0f64 * dmdown / atr;\n        i += 1\n    }\n    if !(plus_di.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                          isize)) as\n             std::os::raw::c_long == (size - ti_di_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 6],\n                                               &[std::os::raw::c_char; 6]>(b\"ti_di\\x00\")).as_ptr(),\n                     b\"indicators/di.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 88 as std::os::raw::c_int,\n                     b\"plus_di - outputs[0] == size - ti_di_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    if !(minus_di.offset_from(*outputs.offset(1 as std::os::raw::c_int as\n                                                           isize)) as\n             std::os::raw::c_long == (size - ti_di_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 6],\n                                               &[std::os::raw::c_char; 6]>(b\"ti_di\\x00\")).as_ptr(),\n                     b\"indicators/di.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 89 as std::os::raw::c_int,\n                     b\"minus_di - outputs[1] == size - ti_di_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:645 ~ c2rust_out[3c70]::indicators::sub::ti_sub)",
    "span": "indicators/sub.rs:25:1: 44:2 (#0)",
    "pieces": [
      "indicators/sub.rs:25:1: 44:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 20,
    "source": "pub unsafe extern \"C\" fn ti_sub(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut in2: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            *in1.offset(i as isize) - *in2.offset(i as isize);\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:270 ~ c2rust_out[3c70]::indicators::div::ti_div)",
    "span": "indicators/div.rs:25:1: 44:2 (#0)",
    "pieces": [
      "indicators/div.rs:25:1: 44:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 20,
    "source": "pub unsafe extern \"C\" fn ti_div(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in1: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut in2: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            *in1.offset(i as isize) / *in2.offset(i as isize);\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:317 ~ c2rust_out[3c70]::indicators::exp::ti_exp_start)",
    "span": "indicators/exp.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/exp.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_exp_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:603 ~ c2rust_out[3c70]::indicators::stddev::ti_stddev)",
    "span": "indicators/stddev.rs:38:1: 95:2 (#0)",
    "pieces": [
      "indicators/stddev.rs:38:1: 95:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 58,
    "source": "pub unsafe extern \"C\" fn ti_stddev(mut size: std::os::raw::c_int,\n                                   mut inputs: *const *const std::os::raw::c_double,\n                                   mut options: *const std::os::raw::c_double,\n                                   mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_stddev_start(options) { return 0 as std::os::raw::c_int }\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut sum2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period {\n        sum += *input.offset(i as isize);\n        sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        i += 1\n    }\n    let mut s2s2: std::os::raw::c_double = sum2 * scale - sum * scale * (sum * scale);\n    if s2s2 > 0.0f64 { s2s2 = sqrt(s2s2) }\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = s2s2;\n    i = period;\n    while i < size {\n        sum += *input.offset(i as isize);\n        sum2 += *input.offset(i as isize) * *input.offset(i as isize);\n        sum -= *input.offset((i - period) as isize);\n        sum2 -=\n            *input.offset((i - period) as isize) *\n                *input.offset((i - period) as isize);\n        let mut s2s2_0: std::os::raw::c_double =\n            sum2 * scale - sum * scale * (sum * scale);\n        if s2s2_0 > 0.0f64 { s2s2_0 = sqrt(s2s2_0) }\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = s2s2_0;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_stddev_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 10],\n                                               &[std::os::raw::c_char; 10]>(b\"ti_stddev\\x00\")).as_ptr(),\n                     b\"indicators/stddev.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 68 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_stddev_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:409 ~ c2rust_out[3c70]::indicators::log10::ti_log10_start)",
    "span": "indicators/log10.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/log10.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_log10_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:228 ~ c2rust_out[3c70]::indicators::cosh::ti_cosh_start)",
    "span": "indicators/cosh.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/cosh.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_cosh_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:478 ~ c2rust_out[3c70]::indicators::min::ti_min)",
    "span": "indicators/min.rs:36:1: 86:2 (#0)",
    "pieces": [
      "indicators/min.rs:36:1: 86:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 51,
    "source": "pub unsafe extern \"C\" fn ti_min(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_min_start(options) { return 0 as std::os::raw::c_int }\n    let mut trail: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut mini: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut min: std::os::raw::c_double = *input.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        let mut bar: std::os::raw::c_double = *input.offset(i as isize);\n        if mini < trail {\n            mini = trail;\n            min = *input.offset(mini as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *input.offset(j as isize);\n                if bar <= min { min = bar; mini = j }\n            }\n        } else if bar <= min { mini = i; min = bar }\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = min;\n        i += 1;\n        trail += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_min_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_min\\x00\")).as_ptr(),\n                     b\"indicators/min.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 66 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_min_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:762 ~ c2rust_out[3c70]::indicators::vosc::ti_vosc_start)",
    "span": "indicators/vosc.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/vosc.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_vosc_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:740 ~ c2rust_out[3c70]::indicators::vhf::ti_vhf)",
    "span": "indicators/vhf.rs:37:1: 124:2 (#0)",
    "pieces": [
      "indicators/vhf.rs:37:1: 124:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 88,
    "source": "pub unsafe extern \"C\" fn ti_vhf(mut size: std::os::raw::c_int,\n                                mut inputs: *const *const std::os::raw::c_double,\n                                mut options: *const std::os::raw::c_double,\n                                mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut in_0: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_vhf_start(options) { return 0 as std::os::raw::c_int }\n    let mut trail: std::os::raw::c_int = 1 as std::os::raw::c_int;\n    let mut maxi: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut mini: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut max: std::os::raw::c_double = *in_0.offset(0 as std::os::raw::c_int as isize);\n    let mut min: std::os::raw::c_double = *in_0.offset(0 as std::os::raw::c_int as isize);\n    let mut bar: std::os::raw::c_double = 0.;\n    let mut sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    let mut yc: std::os::raw::c_double = *in_0.offset(0 as std::os::raw::c_int as isize);\n    let mut c: std::os::raw::c_double = 0.;\n    i = 1 as std::os::raw::c_int;\n    while i < period {\n        c = *in_0.offset(i as isize);\n        sum += fabs(c - yc);\n        yc = c;\n        i += 1\n    }\n    i = period;\n    while i < size {\n        c = *in_0.offset(i as isize);\n        sum += fabs(c - yc);\n        yc = c;\n        if i > period {\n            sum -=\n                fabs(*in_0.offset((i - period) as isize) -\n                         *in_0.offset((i - period - 1 as std::os::raw::c_int) as\n                                          isize))\n        }\n        /* Maintain highest. */\n        bar = c;\n        if maxi < trail {\n            maxi = trail;\n            max = *in_0.offset(maxi as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *in_0.offset(j as isize);\n                if bar >= max { max = bar; maxi = j }\n            }\n        } else if bar >= max { maxi = i; max = bar }\n        /* Maintain lowest. */\n        bar = c;\n        if mini < trail {\n            mini = trail;\n            min = *in_0.offset(mini as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *in_0.offset(j as isize);\n                if bar <= min { min = bar; mini = j }\n            }\n        } else if bar <= min { mini = i; min = bar }\n        /* Calculate it. */\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = fabs(max - min) / sum;\n        i += 1;\n        trail += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_vhf_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 7],\n                                               &[std::os::raw::c_char; 7]>(b\"ti_vhf\\x00\")).as_ptr(),\n                     b\"indicators/vhf.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 106 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_vhf_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:337 ~ c2rust_out[3c70]::indicators::fosc::ti_fosc)",
    "span": "indicators/fosc.rs:35:1: 101:2 (#0)",
    "pieces": [
      "indicators/fosc.rs:35:1: 101:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 67,
    "source": "pub unsafe extern \"C\" fn ti_fosc(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_fosc_start(options) { return 0 as std::os::raw::c_int }\n    let mut x: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut x2: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut y: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut xy: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let p: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let mut tsf: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < period - 1 as std::os::raw::c_int {\n        x += (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        x2 +=\n            ((i + 1 as std::os::raw::c_int) * (i + 1 as std::os::raw::c_int)) as\n                std::os::raw::c_double;\n        xy +=\n            *input.offset(i as isize) *\n                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        y += *input.offset(i as isize);\n        i += 1\n    }\n    x += period as std::os::raw::c_double;\n    x2 += (period * period) as std::os::raw::c_double;\n    let bd: std::os::raw::c_double = 1.0f64 / (period as std::os::raw::c_double * x2 - x * x);\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        xy += *input.offset(i as isize) * period as std::os::raw::c_double;\n        y += *input.offset(i as isize);\n        let b: std::os::raw::c_double = (period as std::os::raw::c_double * xy - x * y) * bd;\n        let a: std::os::raw::c_double = (y - b * x) * p;\n        if i >= period {\n            let fresh0 = output;\n            output = output.offset(1);\n            *fresh0 =\n                100 as std::os::raw::c_int as std::os::raw::c_double *\n                    (*input.offset(i as isize) - tsf) /\n                    *input.offset(i as isize)\n        }\n        tsf = a + b * (period + 1 as std::os::raw::c_int) as std::os::raw::c_double;\n        xy -= y;\n        y -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_fosc_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_fosc\\x00\")).as_ptr(),\n                     b\"indicators/fosc.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 54 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_fosc_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:707 ~ c2rust_out[3c70]::indicators::tsf::ti_tsf_start)",
    "span": "indicators/tsf.rs:30:1: 34:2 (#0)",
    "pieces": [
      "indicators/tsf.rs:30:1: 34:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_tsf_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:293 ~ c2rust_out[3c70]::indicators::dx::ti_dx)",
    "span": "indicators/dx.rs:38:1: 156:2 (#0)",
    "pieces": [
      "indicators/dx.rs:38:1: 156:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 119,
    "source": "pub unsafe extern \"C\" fn ti_dx(mut size: std::os::raw::c_int,\n                               mut inputs: *const *const std::os::raw::c_double,\n                               mut options: *const std::os::raw::c_double,\n                               mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_dx_start(options) { return 0 as std::os::raw::c_int }\n    let per: std::os::raw::c_double =\n        (period as std::os::raw::c_double - 1 as std::os::raw::c_int as std::os::raw::c_double) /\n            period as std::os::raw::c_double;\n    let mut atr: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut dmup: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut dmdown: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < period {\n        let mut truerange: std::os::raw::c_double = 0.;\n        let l: std::os::raw::c_double = *low.offset(i as isize);\n        let h: std::os::raw::c_double = *high.offset(i as isize);\n        let c: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych: std::os::raw::c_double = fabs(h - c);\n        let ycl: std::os::raw::c_double = fabs(l - c);\n        let mut v: std::os::raw::c_double = h - l;\n        if ych > v { v = ych }\n        if ycl > v { v = ycl }\n        truerange = v;\n        atr += truerange;\n        let mut dp: std::os::raw::c_double = 0.;\n        let mut dm: std::os::raw::c_double = 0.;\n        dp =\n            *high.offset(i as isize) -\n                *high.offset((i - 1 as std::os::raw::c_int) as isize);\n        dm =\n            *low.offset((i - 1 as std::os::raw::c_int) as isize) -\n                *low.offset(i as isize);\n        if dp < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dp = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dp > dm { dm = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        if dm < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dm = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dm > dp { dp = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        dmup += dp;\n        dmdown += dm;\n        i += 1\n    }\n    let mut di_up: std::os::raw::c_double = dmup / atr;\n    let mut di_down: std::os::raw::c_double = dmdown / atr;\n    let mut dm_diff: std::os::raw::c_double = fabs(di_up - di_down);\n    let mut dm_sum: std::os::raw::c_double = di_up + di_down;\n    let mut dx: std::os::raw::c_double =\n        dm_diff / dm_sum * 100 as std::os::raw::c_int as std::os::raw::c_double;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = dx;\n    i = period;\n    while i < size {\n        let mut truerange_0: std::os::raw::c_double = 0.;\n        let l_0: std::os::raw::c_double = *low.offset(i as isize);\n        let h_0: std::os::raw::c_double = *high.offset(i as isize);\n        let c_0: std::os::raw::c_double =\n            *close.offset((i - 1 as std::os::raw::c_int) as isize);\n        let ych_0: std::os::raw::c_double = fabs(h_0 - c_0);\n        let ycl_0: std::os::raw::c_double = fabs(l_0 - c_0);\n        let mut v_0: std::os::raw::c_double = h_0 - l_0;\n        if ych_0 > v_0 { v_0 = ych_0 }\n        if ycl_0 > v_0 { v_0 = ycl_0 }\n        truerange_0 = v_0;\n        atr = atr * per + truerange_0;\n        let mut dp_0: std::os::raw::c_double = 0.;\n        let mut dm_0: std::os::raw::c_double = 0.;\n        dp_0 =\n            *high.offset(i as isize) -\n                *high.offset((i - 1 as std::os::raw::c_int) as isize);\n        dm_0 =\n            *low.offset((i - 1 as std::os::raw::c_int) as isize) -\n                *low.offset(i as isize);\n        if dp_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dp_0 > dm_0 { dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        if dm_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {\n            dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double\n        } else if dm_0 > dp_0 { dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }\n        dmup = dmup * per + dp_0;\n        dmdown = dmdown * per + dm_0;\n        let mut di_up_0: std::os::raw::c_double = dmup / atr;\n        let mut di_down_0: std::os::raw::c_double = dmdown / atr;\n        let mut dm_diff_0: std::os::raw::c_double = fabs(di_up_0 - di_down_0);\n        let mut dm_sum_0: std::os::raw::c_double = di_up_0 + di_down_0;\n        let mut dx_0: std::os::raw::c_double =\n            dm_diff_0 / dm_sum_0 * 100 as std::os::raw::c_int as std::os::raw::c_double;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 = dx_0;\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_dx_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 6],\n                                               &[std::os::raw::c_char; 6]>(b\"ti_dx\\x00\")).as_ptr(),\n                     b\"indicators/dx.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 101 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_dx_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:453 ~ c2rust_out[3c70]::indicators::md::ti_md_start)",
    "span": "indicators/md.rs:32:1: 36:2 (#0)",
    "pieces": [
      "indicators/md.rs:32:1: 36:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 5,
    "source": "pub unsafe extern \"C\" fn ti_md_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:572 ~ c2rust_out[3c70]::indicators::rsi::ti_rsi_start)",
    "span": "indicators/rsi.rs:30:1: 33:2 (#0)",
    "pieces": [
      "indicators/rsi.rs:30:1: 33:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub unsafe extern \"C\" fn ti_rsi_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:439 ~ c2rust_out[3c70]::indicators::mass::ti_mass)",
    "span": "indicators/mass.rs:49:1: 121:2 (#0)",
    "pieces": [
      "indicators/mass.rs:49:1: 121:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 73,
    "source": "pub unsafe extern \"C\" fn ti_mass(mut size: std::os::raw::c_int,\n                                 mut inputs: *const *const std::os::raw::c_double,\n                                 mut options: *const std::os::raw::c_double,\n                                 mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_mass_start(options) { return 0 as std::os::raw::c_int }\n    /*mass uses a hard-coded 9 period for the ema*/\n    let per: std::os::raw::c_double =\n        2 as std::os::raw::c_int as std::os::raw::c_double /\n            (9.0f64 + 1 as std::os::raw::c_int as std::os::raw::c_double);\n    let per1: std::os::raw::c_double = 1.0f64 - per;\n    /*Calculate EMA(h-l)*/\n    let mut ema: std::os::raw::c_double =\n        *high.offset(0 as std::os::raw::c_int as isize) -\n            *low.offset(0 as std::os::raw::c_int as isize);\n    /*Calculate EMA(EMA(h-l))*/\n    let mut ema2: std::os::raw::c_double = ema;\n    let mut sum: *mut ti_buffer = ti_buffer_new(period);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        let mut hl: std::os::raw::c_double =\n            *high.offset(i as isize) - *low.offset(i as isize);\n        ema = ema * per1 + hl * per;\n        if i == 8 as std::os::raw::c_int { ema2 = ema }\n        if i >= 8 as std::os::raw::c_int {\n            ema2 = ema2 * per1 + ema * per;\n            if i >= 16 as std::os::raw::c_int {\n                if (*sum).pushes >= (*sum).size {\n                    (*sum).sum -=\n                        *(*sum).vals.as_mut_ptr().offset((*sum).index as\n                                                             isize)\n                }\n                (*sum).sum += ema / ema2;\n                *(*sum).vals.as_mut_ptr().offset((*sum).index as isize) =\n                    ema / ema2;\n                (*sum).pushes += 1 as std::os::raw::c_int;\n                (*sum).index = (*sum).index + 1 as std::os::raw::c_int;\n                if (*sum).index >= (*sum).size {\n                    (*sum).index = 0 as std::os::raw::c_int\n                }\n                if i >= 16 as std::os::raw::c_int + period - 1 as std::os::raw::c_int {\n                    let fresh0 = output;\n                    output = output.offset(1);\n                    *fresh0 = (*sum).sum\n                }\n            }\n        }\n        i += 1\n    }\n    ti_buffer_free(sum);\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_mass_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 8],\n                                               &[std::os::raw::c_char; 8]>(b\"ti_mass\\x00\")).as_ptr(),\n                     b\"indicators/mass.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 80 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_mass_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/mass.rs:12:1: 12:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      },
      {
        "span": "indicators/mass.rs:11:1: 11:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:141 ~ c2rust_out[3c70]::indicators::aroon::ti_aroon)",
    "span": "indicators/aroon.rs:35:1: 124:2 (#0)",
    "pieces": [
      "indicators/aroon.rs:35:1: 124:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 90,
    "source": "pub unsafe extern \"C\" fn ti_aroon(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut adown: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut aup: *mut std::os::raw::c_double =\n        *outputs.offset(1 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_aroon_start(options) { return 0 as std::os::raw::c_int }\n    let scale: std::os::raw::c_double = 100.0f64 / period as std::os::raw::c_double;\n    let mut trail: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut maxi: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut mini: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut max: std::os::raw::c_double = *high.offset(0 as std::os::raw::c_int as isize);\n    let mut min: std::os::raw::c_double = *low.offset(0 as std::os::raw::c_int as isize);\n    let mut bar: std::os::raw::c_double = 0.;\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = period;\n    while i < size {\n        /* Maintain highest. */\n        bar = *high.offset(i as isize);\n        if maxi < trail {\n            maxi = trail;\n            max = *high.offset(maxi as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *high.offset(j as isize);\n                if bar >= max { max = bar; maxi = j }\n            }\n        } else if bar >= max { maxi = i; max = bar }\n        /* Maintain lowest. */\n        bar = *low.offset(i as isize);\n        if mini < trail {\n            mini = trail;\n            min = *low.offset(mini as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *low.offset(j as isize);\n                if bar <= min { min = bar; mini = j }\n            }\n        } else if bar <= min { mini = i; min = bar }\n        /* Calculate the indicator. */\n        let fresh0 = adown;\n        adown = adown.offset(1);\n        *fresh0 =\n            (period as std::os::raw::c_double - (i - mini) as std::os::raw::c_double) * scale;\n        let fresh1 = aup;\n        aup = aup.offset(1);\n        *fresh1 =\n            (period as std::os::raw::c_double - (i - maxi) as std::os::raw::c_double) * scale;\n        i += 1;\n        trail += 1\n    }\n    if !(adown.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                        isize)) as\n             std::os::raw::c_long == (size - ti_aroon_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 9],\n                                               &[std::os::raw::c_char; 9]>(b\"ti_aroon\\x00\")).as_ptr(),\n                     b\"indicators/aroon.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 96 as std::os::raw::c_int,\n                     b\"adown - outputs[0] == size - ti_aroon_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    if !(aup.offset_from(*outputs.offset(1 as std::os::raw::c_int as isize))\n             as std::os::raw::c_long ==\n             (size - ti_aroon_start(options)) as std::os::raw::c_long) as std::os::raw::c_int\n           as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 9],\n                                               &[std::os::raw::c_char; 9]>(b\"ti_aroon\\x00\")).as_ptr(),\n                     b\"indicators/aroon.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 97 as std::os::raw::c_int,\n                     b\"aup - outputs[1] == size - ti_aroon_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:160 ~ c2rust_out[3c70]::indicators::asin::ti_asin_start)",
    "span": "indicators/asin.rs:47:1: 50:2 (#0)",
    "pieces": [
      "indicators/asin.rs:47:1: 50:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_asin_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:782 ~ c2rust_out[3c70]::indicators::wcprice::ti_wcprice)",
    "span": "indicators/wcprice.rs:30:1: 53:2 (#0)",
    "pieces": [
      "indicators/wcprice.rs:30:1: 53:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 24,
    "source": "pub unsafe extern \"C\" fn ti_wcprice(mut size: std::os::raw::c_int,\n                                    mut inputs: *const *const std::os::raw::c_double,\n                                    mut options: *const std::os::raw::c_double,\n                                    mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut close: *const std::os::raw::c_double =\n        *inputs.offset(2 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 0 as std::os::raw::c_int;\n    while i < size {\n        *output.offset(i as isize) =\n            (*high.offset(i as isize) + *low.offset(i as isize) +\n                 *close.offset(i as isize) + *close.offset(i as isize)) *\n                0.25f64;\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:389 ~ c2rust_out[3c70]::indicators::linregintercept::ti_linregintercept_start)",
    "span": "indicators/linregintercept.rs:30:1: 35:2 (#0)",
    "pieces": [
      "indicators/linregintercept.rs:30:1: 35:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn ti_linregintercept_start(mut options:\n                                                      *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -\n               1 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:251 ~ c2rust_out[3c70]::indicators::decay::ti_decay)",
    "span": "indicators/decay.rs:30:1: 59:2 (#0)",
    "pieces": [
      "indicators/decay.rs:30:1: 59:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 30,
    "source": "pub unsafe extern \"C\" fn ti_decay(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let scale: std::os::raw::c_double = 1.0f64 / period as std::os::raw::c_double;\n    let fresh0 = output;\n    output = output.offset(1);\n    *fresh0 = *input.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    i = 1 as std::os::raw::c_int;\n    while i < size {\n        let mut d: std::os::raw::c_double =\n            *output.offset(-(1 as std::os::raw::c_int) as isize) - scale;\n        let fresh1 = output;\n        output = output.offset(1);\n        *fresh1 =\n            if *input.offset(i as isize) > d {\n                *input.offset(i as isize)\n            } else { d };\n        i += 1\n    }\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:203 ~ c2rust_out[3c70]::indicators::cci::ti_cci_start)",
    "span": "indicators/cci.rs:19:1: 24:2 (#0)",
    "pieces": [
      "indicators/cci.rs:19:1: 24:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 6,
    "source": "pub unsafe extern \"C\" fn ti_cci_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    return (period - 1 as std::os::raw::c_int) * 2 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/cci.rs:13:1: 13:46 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_free;"
      },
      {
        "span": "indicators/cci.rs:14:1: 14:45 (#0)",
        "source": "pub use crate::utils::buffer::ti_buffer_new;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:689 ~ c2rust_out[3c70]::indicators::trima::ti_trima)",
    "span": "indicators/trima.rs:39:1: 146:2 (#0)",
    "pieces": [
      "indicators/trima.rs:39:1: 146:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 108,
    "source": "pub unsafe extern \"C\" fn ti_trima(mut size: std::os::raw::c_int,\n                                  mut inputs: *const *const std::os::raw::c_double,\n                                  mut options: *const std::os::raw::c_double,\n                                  mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut input: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_trima_start(options) { return 0 as std::os::raw::c_int }\n    if period <= 2 as std::os::raw::c_int {\n        return ti_sma(size, inputs, options, outputs)\n    }\n    /* Weights for 6 period TRIMA:\n     * 1 2 3 3 2 1 = 12\n     *\n     * Weights for 7 period TRIMA:\n     * 1 2 3 4 3 2 1 = 16\n     */\n    let mut weights: std::os::raw::c_double =\n        1 as std::os::raw::c_int as std::os::raw::c_double /\n            (if period % 2 as std::os::raw::c_int != 0 {\n                 (period / 2 as std::os::raw::c_int + 1 as std::os::raw::c_int) *\n                     (period / 2 as std::os::raw::c_int + 1 as std::os::raw::c_int)\n             } else {\n                 (period / 2 as std::os::raw::c_int + 1 as std::os::raw::c_int) *\n                     (period / 2 as std::os::raw::c_int)\n             }) as\n                std::os::raw::c_double; /* Weighted sum of previous numbers, spans one period back. */\n    let mut weight_sum: std::os::raw::c_double =\n        0 as std::os::raw::c_int as\n            std::os::raw::c_double; /* Flat sum of most recent numbers. */\n    let mut lead_sum: std::os::raw::c_double =\n        0 as std::os::raw::c_int as std::os::raw::c_double; /* Flat sum of oldest numbers. */\n    let mut trail_sum: std::os::raw::c_double = 0 as std::os::raw::c_int as std::os::raw::c_double;\n    /* example for period of 9 */\n    /* weight_sum       1 2 3 4 5 4 3 2 1 */\n    /* lead_sum                   1 1 1 1 */\n    /* trail_sum        1 1 1 1 1        */\n    let lead_period: std::os::raw::c_int =\n        if period % 2 as std::os::raw::c_int != 0 {\n            (period) / 2 as std::os::raw::c_int\n        } else { (period / 2 as std::os::raw::c_int) - 1 as std::os::raw::c_int };\n    let trail_period: std::os::raw::c_int = lead_period + 1 as std::os::raw::c_int;\n    let mut i: std::os::raw::c_int = 0;\n    let mut w: std::os::raw::c_int = 1 as std::os::raw::c_int;\n    /* Initialize until before the first value. */\n    i = 0 as std::os::raw::c_int;\n    while i < period - 1 as std::os::raw::c_int {\n        weight_sum += *input.offset(i as isize) * w as std::os::raw::c_double;\n        if i + 1 as std::os::raw::c_int > period - lead_period {\n            lead_sum += *input.offset(i as isize)\n        }\n        if i + 1 as std::os::raw::c_int <= trail_period {\n            trail_sum += *input.offset(i as isize)\n        }\n        if (i + 1 as std::os::raw::c_int) < trail_period { w += 1 }\n        if i + 1 as std::os::raw::c_int >= period - lead_period { w -= 1 }\n        i += 1\n    }\n    let mut lsi: std::os::raw::c_int =\n        period - 1 as std::os::raw::c_int - lead_period + 1 as std::os::raw::c_int;\n    let mut tsi1: std::os::raw::c_int =\n        period - 1 as std::os::raw::c_int - period + 1 as std::os::raw::c_int + trail_period;\n    let mut tsi2: std::os::raw::c_int =\n        period - 1 as std::os::raw::c_int - period + 1 as std::os::raw::c_int;\n    i = period - 1 as std::os::raw::c_int;\n    while i < size {\n        weight_sum += *input.offset(i as isize);\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = weight_sum * weights;\n        lead_sum += *input.offset(i as isize);\n        /* 1 2 3 4 5 4 3 2 1 */\n        weight_sum += lead_sum;\n        /* 1 2 3 4 5 5 4 3 2 */\n        weight_sum -= trail_sum;\n        /*   1 2 3 4 5 4 3 2 */\n        /* weight_sum       1 2 3 4 5 4 3 2 1 */\n        /* lead_sum                   1 1 1 1 */\n        /* trail_sum        1 1 1 1 1        */\n        let fresh1 = lsi;\n        lsi = lsi + 1;\n        lead_sum -= *input.offset(fresh1 as isize);\n        let fresh2 = tsi1;\n        tsi1 = tsi1 + 1;\n        trail_sum += *input.offset(fresh2 as isize);\n        let fresh3 = tsi2;\n        tsi2 = tsi2 + 1;\n        trail_sum -= *input.offset(fresh3 as isize);\n        i += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long == (size - ti_trima_start(options)) as std::os::raw::c_long)\n           as std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 9],\n                                               &[std::os::raw::c_char; 9]>(b\"ti_trima\\x00\")).as_ptr(),\n                     b\"indicators/trima.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 103 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_trima_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/trima.rs:9:1: 9:40 (#0)",
        "source": "pub use crate::indicators::sma::ti_sma;"
      }
    ],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:673 ~ c2rust_out[3c70]::indicators::todeg::ti_todeg_start)",
    "span": "indicators/todeg.rs:45:1: 48:2 (#0)",
    "pieces": [
      "indicators/todeg.rs:45:1: 48:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 4,
    "source": "pub extern \"C\" fn ti_todeg_start(mut options: *const std::os::raw::c_double)\n -> std::os::raw::c_int {\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [],
    "chunks": []
  },
  {
    "func_defid": "DefId(0:153 ~ c2rust_out[3c70]::indicators::aroonosc::ti_aroonosc)",
    "span": "indicators/aroonosc.rs:38:1: 116:2 (#0)",
    "pieces": [
      "indicators/aroonosc.rs:38:1: 116:2 (#0)"
    ],
    "sub_chunks": [],
    "num_lines": 79,
    "source": "pub unsafe extern \"C\" fn ti_aroonosc(mut size: std::os::raw::c_int,\n                                     mut inputs: *const *const std::os::raw::c_double,\n                                     mut options: *const std::os::raw::c_double,\n                                     mut outputs: *const *mut std::os::raw::c_double)\n -> std::os::raw::c_int {\n    let mut high: *const std::os::raw::c_double =\n        *inputs.offset(0 as std::os::raw::c_int as isize);\n    let mut low: *const std::os::raw::c_double =\n        *inputs.offset(1 as std::os::raw::c_int as isize);\n    let mut output: *mut std::os::raw::c_double =\n        *outputs.offset(0 as std::os::raw::c_int as isize);\n    let period: std::os::raw::c_int =\n        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;\n    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }\n    if size <= ti_aroon_start(options) { return 0 as std::os::raw::c_int }\n    let scale: std::os::raw::c_double = 100.0f64 / period as std::os::raw::c_double;\n    let mut trail: std::os::raw::c_int = 0 as std::os::raw::c_int;\n    let mut maxi: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut mini: std::os::raw::c_int = -(1 as std::os::raw::c_int);\n    let mut max: std::os::raw::c_double = *high.offset(0 as std::os::raw::c_int as isize);\n    let mut min: std::os::raw::c_double = *low.offset(0 as std::os::raw::c_int as isize);\n    let mut i: std::os::raw::c_int = 0;\n    let mut j: std::os::raw::c_int = 0;\n    i = period;\n    while i < size {\n        /* Maintain highest. */\n        let mut bar: std::os::raw::c_double = *high.offset(i as isize);\n        if maxi < trail {\n            maxi = trail;\n            max = *high.offset(maxi as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *high.offset(j as isize);\n                if bar >= max { max = bar; maxi = j }\n            }\n        } else if bar >= max { maxi = i; max = bar }\n        /* Maintain lowest. */\n        bar = *low.offset(i as isize);\n        if mini < trail {\n            mini = trail;\n            min = *low.offset(mini as isize);\n            j = trail;\n            loop  {\n                j += 1;\n                if !(j <= i) { break ; }\n                bar = *low.offset(j as isize);\n                if bar <= min { min = bar; mini = j }\n            }\n        } else if bar <= min { mini = i; min = bar }\n        /* Calculate the indicator. */\n        /*\n            const TI_REAL adown = ((TI_REAL)period - (i-mini)) * scale;\n            const TI_REAL aup = ((TI_REAL)period - (i-maxi)) * scale;\n            *output = aup - adown\n        That simplifies to:\n            (maxi-mini) * scale\n        */\n        let fresh0 = output;\n        output = output.offset(1);\n        *fresh0 = (maxi - mini) as std::os::raw::c_double * scale;\n        i += 1;\n        trail += 1\n    }\n    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as\n                                                         isize)) as\n             std::os::raw::c_long ==\n             (size - ti_aroonosc_start(options)) as std::os::raw::c_long) as\n           std::os::raw::c_int as std::os::raw::c_long != 0 {\n        __assert_rtn((*::std::mem::transmute::<&[u8; 12],\n                                               &[std::os::raw::c_char; 12]>(b\"ti_aroonosc\\x00\")).as_ptr(),\n                     b\"indicators/aroonosc.c\\x00\" as *const u8 as\n                         *const std::os::raw::c_char, 102 as std::os::raw::c_int,\n                     b\"output - outputs[0] == size - ti_aroonosc_start(options)\\x00\"\n                         as *const u8 as *const std::os::raw::c_char);\n    } else { };\n    return 0 as std::os::raw::c_int;\n}",
    "calls": [],
    "globals": [],
    "imports": [
      {
        "span": "indicators/aroonosc.rs:9:1: 9:50 (#0)",
        "source": "pub use crate::indicators::aroon::ti_aroon_start;"
      }
    ],
    "chunks": []
  }
]