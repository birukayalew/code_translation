example1.rs:40:1: 51:2
pub unsafe extern "C" fn print_array(mut p: * const std::os::raw::c_double,
                                     size: std::os::raw::c_int) {
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        if i != 0 { printf(b", \x00" as *const u8 as *const std::os::raw::c_char); }
        printf(b"%.1f\x00" as *const u8 as *const std::os::raw::c_char,
               *p.offset(i as isize));
        i += 1
    }
    printf(b"\n\x00" as *const u8 as *const std::os::raw::c_char);
}
example1.rs:52:1: 111:2
unsafe fn main_0() -> std::os::raw::c_int {
    let data_in: [f64; 10] =
        [5 as std::os::raw::c_int as std::os::raw::c_double,
         8 as std::os::raw::c_int as std::os::raw::c_double,
         12 as std::os::raw::c_int as std::os::raw::c_double,
         11 as std::os::raw::c_int as std::os::raw::c_double,
         9 as std::os::raw::c_int as std::os::raw::c_double,
         8 as std::os::raw::c_int as std::os::raw::c_double,
         7 as std::os::raw::c_int as std::os::raw::c_double,
         10 as std::os::raw::c_int as std::os::raw::c_double,
         11 as std::os::raw::c_int as std::os::raw::c_double,
         13 as std::os::raw::c_int as std::os::raw::c_double];
    let input_length: i32 =
        (::std::mem::size_of::<[std::os::raw::c_double; 10]>() as
             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<std::os::raw::c_double>()
                                             as std::os::raw::c_ulong) as std::os::raw::c_int;
    printf(b"We have %d bars of input data.\n\x00" as *const u8 as
               *const std::os::raw::c_char, input_length);
    print_array(data_in.as_ptr(), input_length);
    let options: [f64; 1] = [3 as std::os::raw::c_int as std::os::raw::c_double];
    printf(b"Our option array is: \x00" as *const u8 as *const std::os::raw::c_char);
    print_array(options.as_ptr(),
                (::std::mem::size_of::<[std::os::raw::c_double; 1]>() as
                     std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<std::os::raw::c_double>()
                                                     as std::os::raw::c_ulong) as
                    std::os::raw::c_int);
    let start: i32 = ti_sma_start(options.as_ptr());
    printf(b"The start amount is: %d\n\x00" as *const u8 as
               *const std::os::raw::c_char, start);
    let output_length: i32 = input_length - start;
    let mut data_out: * mut f64 =
        malloc((output_length as std::os::raw::c_uint as
                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_double>()
                                                    as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_double;
    if data_out.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"example1.c\x00" as *const u8 as *const std::os::raw::c_char,
                     56 as std::os::raw::c_int,
                     b"data_out != 0\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    printf(b"The output length is: %d\n\x00" as *const u8 as
               *const std::os::raw::c_char, output_length);
    let mut all_inputs: [* const f64; 1] = [data_in.as_ptr()];
    let mut all_outputs: [* mut f64; 1] = [data_out];
    let mut error: i32 =
        ti_sma(input_length, all_inputs.as_mut_ptr(), options.as_ptr(),
               all_outputs.as_mut_ptr());
    if !(error == 0 as std::os::raw::c_int) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"example1.c\x00" as *const u8 as *const std::os::raw::c_char,
                     62 as std::os::raw::c_int,
                     b"error == TI_OKAY\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    printf(b"The output data is: \x00" as *const u8 as *const std::os::raw::c_char);
    print_array(data_out, output_length);
    return 0 as std::os::raw::c_int;
}
example1.rs:112:17: 112:65
unsafe { ::std::process::exit(main_0() as i32) }
example2.rs:74:1: 126:2
unsafe fn main_0() -> std::os::raw::c_int {
    printf(b"This program is an example of looping through\n\x00" as *const u8
               as *const std::os::raw::c_char);
    printf(b"each of the available indicators.\n\n\x00" as *const u8 as
               *const std::os::raw::c_char);
    /* Set info to first indicators in array. */
    let mut info: * const crate::example2::ti_indicator_info = ti_indicators.as_mut_ptr();
    /* The last item is all zeros, so we'll stop when we get there. */
    while !(*info).name.is_null() {
        let mut i: i32 = 0;
        printf(b"%s (%s) has type %d with: %d inputs, %d options, %d outputs.\n\x00"
                   as *const u8 as *const std::os::raw::c_char, (*info).name,
               (*info).full_name, (*info).type_0, (*info).inputs,
               (*info).options, (*info).outputs);
        printf(b"   inputs: \x00" as *const u8 as *const std::os::raw::c_char);
        i = 0 as std::os::raw::c_int;
        while i < (*info).inputs {
            printf(b"%s%s\x00" as *const u8 as *const std::os::raw::c_char,
                   if i != 0 {
                       b", \x00" as *const u8 as *const std::os::raw::c_char
                   } else { b"\x00" as *const u8 as *const std::os::raw::c_char },
                   (*info).input_names[i as usize]);
            i += 1
        }
        printf(b"\n\x00" as *const u8 as *const std::os::raw::c_char);
        printf(b"   options: \x00" as *const u8 as *const std::os::raw::c_char);
        i = 0 as std::os::raw::c_int;
        while i < (*info).options {
            printf(b"%s%s\x00" as *const u8 as *const std::os::raw::c_char,
                   if i != 0 {
                       b", \x00" as *const u8 as *const std::os::raw::c_char
                   } else { b"\x00" as *const u8 as *const std::os::raw::c_char },
                   (*info).option_names[i as usize]);
            i += 1
        }
        printf(b"\n\x00" as *const u8 as *const std::os::raw::c_char);
        printf(b"   outputs: \x00" as *const u8 as *const std::os::raw::c_char);
        i = 0 as std::os::raw::c_int;
        while i < (*info).outputs {
            printf(b"%s%s\x00" as *const u8 as *const std::os::raw::c_char,
                   if i != 0 {
                       b", \x00" as *const u8 as *const std::os::raw::c_char
                   } else { b"\x00" as *const u8 as *const std::os::raw::c_char },
                   (*info).output_names[i as usize]);
            i += 1
        }
        printf(b"\n\x00" as *const u8 as *const std::os::raw::c_char);
        /* Next indicator. */
        printf(b"\n\x00" as *const u8 as *const std::os::raw::c_char);
        info = info.offset(1)
    }
    return 0 as std::os::raw::c_int;
}
example2.rs:127:17: 127:65
unsafe { ::std::process::exit(main_0() as i32) }
fuzzer.rs:48:125: 63:61
unsafe fn laertes_init_optionsd() {
optionsd = [-(20 as std::os::raw::c_int) as std::os::raw::c_double,
     -(1 as std::os::raw::c_int) as std::os::raw::c_double,
     0 as std::os::raw::c_int as std::os::raw::c_double, 0.1f64, 0.5f64, 0.7f64,
     1 as std::os::raw::c_int as std::os::raw::c_double, 2 as std::os::raw::c_int as std::os::raw::c_double,
     2.5f64, 3 as std::os::raw::c_int as std::os::raw::c_double,
     4 as std::os::raw::c_int as std::os::raw::c_double, 5 as std::os::raw::c_int as std::os::raw::c_double,
     6 as std::os::raw::c_int as std::os::raw::c_double, 7 as std::os::raw::c_int as std::os::raw::c_double,
     8 as std::os::raw::c_int as std::os::raw::c_double, 9 as std::os::raw::c_int as std::os::raw::c_double,
     10 as std::os::raw::c_int as std::os::raw::c_double, 11 as std::os::raw::c_int as std::os::raw::c_double,
     17 as std::os::raw::c_int as std::os::raw::c_double, 18 as std::os::raw::c_int as std::os::raw::c_double,
     19 as std::os::raw::c_int as std::os::raw::c_double, 20 as std::os::raw::c_int as std::os::raw::c_double,
     21 as std::os::raw::c_int as std::os::raw::c_double, 22 as std::os::raw::c_int as std::os::raw::c_double,
     23 as std::os::raw::c_int as std::os::raw::c_double, 24 as std::os::raw::c_int as std::os::raw::c_double,
     25 as std::os::raw::c_int as std::os::raw::c_double, 26 as std::os::raw::c_int as std::os::raw::c_double,
     100 as std::os::raw::c_int as std::os::raw::c_double];}
fuzzer.rs:66:89: 77:60
unsafe fn laertes_init_dummy_in() {
dummy_in = [1 as std::os::raw::c_int as std::os::raw::c_double, 2 as std::os::raw::c_int as std::os::raw::c_double,
     3 as std::os::raw::c_int as std::os::raw::c_double, 4 as std::os::raw::c_int as std::os::raw::c_double,
     5 as std::os::raw::c_int as std::os::raw::c_double, 6 as std::os::raw::c_int as std::os::raw::c_double,
     7 as std::os::raw::c_int as std::os::raw::c_double, 8 as std::os::raw::c_int as std::os::raw::c_double,
     9 as std::os::raw::c_int as std::os::raw::c_double, 10 as std::os::raw::c_int as std::os::raw::c_double,
     11 as std::os::raw::c_int as std::os::raw::c_double, 12 as std::os::raw::c_int as std::os::raw::c_double,
     13 as std::os::raw::c_int as std::os::raw::c_double, 14 as std::os::raw::c_int as std::os::raw::c_double,
     15 as std::os::raw::c_int as std::os::raw::c_double, 16 as std::os::raw::c_int as std::os::raw::c_double,
     17 as std::os::raw::c_int as std::os::raw::c_double, 18 as std::os::raw::c_int as std::os::raw::c_double,
     19 as std::os::raw::c_int as std::os::raw::c_double,
     20 as std::os::raw::c_int as std::os::raw::c_double];}
fuzzer.rs:80:89: 90:111
unsafe fn laertes_init_dummy_in0() {
dummy_in0 = [0 as std::os::raw::c_int as std::os::raw::c_double, 0 as std::os::raw::c_int as std::os::raw::c_double,
     0 as std::os::raw::c_int as std::os::raw::c_double, 0 as std::os::raw::c_int as std::os::raw::c_double,
     0 as std::os::raw::c_int as std::os::raw::c_double, 0 as std::os::raw::c_int as std::os::raw::c_double,
     0 as std::os::raw::c_int as std::os::raw::c_double, 0 as std::os::raw::c_int as std::os::raw::c_double,
     0 as std::os::raw::c_int as std::os::raw::c_double, 0 as std::os::raw::c_int as std::os::raw::c_double,
     0 as std::os::raw::c_int as std::os::raw::c_double, 0 as std::os::raw::c_int as std::os::raw::c_double,
     0 as std::os::raw::c_int as std::os::raw::c_double, 0 as std::os::raw::c_int as std::os::raw::c_double,
     0 as std::os::raw::c_int as std::os::raw::c_double, 0 as std::os::raw::c_int as std::os::raw::c_double,
     0 as std::os::raw::c_int as std::os::raw::c_double, 0 as std::os::raw::c_int as std::os::raw::c_double,
     0 as std::os::raw::c_int as std::os::raw::c_double, 0 as std::os::raw::c_int as std::os::raw::c_double];}
fuzzer.rs:93:89: 104:60
unsafe fn laertes_init_dummy_ot() {
dummy_ot = [1 as std::os::raw::c_int as std::os::raw::c_double, 2 as std::os::raw::c_int as std::os::raw::c_double,
     3 as std::os::raw::c_int as std::os::raw::c_double, 4 as std::os::raw::c_int as std::os::raw::c_double,
     5 as std::os::raw::c_int as std::os::raw::c_double, 6 as std::os::raw::c_int as std::os::raw::c_double,
     7 as std::os::raw::c_int as std::os::raw::c_double, 8 as std::os::raw::c_int as std::os::raw::c_double,
     9 as std::os::raw::c_int as std::os::raw::c_double, 10 as std::os::raw::c_int as std::os::raw::c_double,
     11 as std::os::raw::c_int as std::os::raw::c_double, 12 as std::os::raw::c_int as std::os::raw::c_double,
     13 as std::os::raw::c_int as std::os::raw::c_double, 14 as std::os::raw::c_int as std::os::raw::c_double,
     15 as std::os::raw::c_int as std::os::raw::c_double, 16 as std::os::raw::c_int as std::os::raw::c_double,
     17 as std::os::raw::c_int as std::os::raw::c_double, 18 as std::os::raw::c_int as std::os::raw::c_double,
     19 as std::os::raw::c_int as std::os::raw::c_double,
     20 as std::os::raw::c_int as std::os::raw::c_double];}
fuzzer.rs:106:1: 125:2
pub unsafe extern "C" fn banner() {
    printf(b"  ______ _    _ __________________ _____  \n\x00" as *const u8 as
               *const std::os::raw::c_char);
    printf(b" |  ____| |  | |___  /___  /  ____|  __ \\ \n\x00" as *const u8
               as *const std::os::raw::c_char);
    printf(b" | |__  | |  | |  / /   / /| |__  | |__) |\n\x00" as *const u8 as
               *const std::os::raw::c_char);
    printf(b" |  __| | |  | | / /   / / |  __| |  _  / \n\x00" as *const u8 as
               *const std::os::raw::c_char);
    printf(b" | |    | |__| |/ /__ / /__| |____| | \\ \\ \n\x00" as *const u8
               as *const std::os::raw::c_char);
    printf(b" |_|     \\____//_____/_____|______|_|  \\_\\\n\n\x00" as
               *const u8 as *const std::os::raw::c_char);
    printf(b"This program tries each indicator with a lot of options.\n\x00"
               as *const u8 as *const std::os::raw::c_char);
    printf(b"It\'s good for checking for crashes or assertion failures.\n\x00"
               as *const u8 as *const std::os::raw::c_char);
    printf(b"Use with a memory tool to check for memory errors in ti.\n\n\x00"
               as *const u8 as *const std::os::raw::c_char);
}
fuzzer.rs:127:1: 216:2
pub unsafe extern "C" fn check_output(mut info: * const crate::example2::ti_indicator_info,
                                      mut size: std::os::raw::c_int,
                                      mut inputs:
                                          * const * const std::os::raw::c_double,
                                      mut options: * const std::os::raw::c_double,
                                      mut outputs:
                                          * const * mut std::os::raw::c_double) {
    let mut s: i32 = 0;
    s = (*info).start.expect("non-null function pointer")(options);
    let mut o: i32 = 0;
    o = 0 as std::os::raw::c_int;
    while o < (*info).outputs {
        let mut max: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
        let mut min: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
        let mut i: i32 = 0;
        i = 0 as std::os::raw::c_int;
        while i < size - s {
            let op: f64 =
                *(*outputs.offset(o as isize)).offset(i as isize);
            let in_0: f64 =
                *(*inputs.offset(0 as std::os::raw::c_int as
                                     isize)).offset((i + s) as isize);
            max = if in_0 > max { in_0 } else { max };
            min = if in_0 < min { in_0 } else { min };
            match (*info).type_0 {
                1 => {
                    if op > max * 1.5f64 + 2 as std::os::raw::c_int as std::os::raw::c_double
                           ||
                           op <
                               min * 0.5f64 -
                                   2 as std::os::raw::c_int as std::os::raw::c_double {
                        let mut k: i32 = 0;
                        let mut j: i32 = 0;
                        printf(b"\nInputs:\x00" as *const u8 as
                                   *const std::os::raw::c_char);
                        k = 0 as std::os::raw::c_int;
                        while k < size {
                            printf(b" %f\x00" as *const u8 as
                                       *const std::os::raw::c_char,
                                   *(*inputs.offset(0 as std::os::raw::c_int as
                                                        isize)).offset(k as
                                                                           isize));
                            k += 1
                        }
                        printf(b"\nOptions:\x00" as *const u8 as
                                   *const std::os::raw::c_char);
                        k = 0 as std::os::raw::c_int;
                        while k < (*info).options {
                            printf(b" %f\x00" as *const u8 as
                                       *const std::os::raw::c_char,
                                   *options.offset(k as isize));
                            k += 1
                        }
                        j = 0 as std::os::raw::c_int;
                        while j < (*info).outputs {
                            printf(b"\nOutput[%d]:\x00" as *const u8 as
                                       *const std::os::raw::c_char, j);
                            k = 0 as std::os::raw::c_int;
                            while k < size {
                                printf(b" %f\x00" as *const u8 as
                                           *const std::os::raw::c_char,
                                       *(*outputs.offset(j as
                                                             isize)).offset(k
                                                                                as
                                                                                isize));
                                k += 1
                            }
                            j += 1
                        }
                        printf(b"\nERROR Output is out of range for input: input: %f output: %f\n\x00"
                                   as *const u8 as *const std::os::raw::c_char, in_0,
                               op);
                        if (0 as std::os::raw::c_int == 0) as std::os::raw::c_int as
                               std::os::raw::c_long != 0 {
                            __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 13], &'_ [i8; 13]>(b"check_output\x00")).as_ptr(),
                                         b"fuzzer.c\x00" as *const u8 as
                                             *const std::os::raw::c_char,
                                         94 as std::os::raw::c_int,
                                         b"0\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                        } else { };
                    }
                }
                _ => { }
            }
            i += 1
        }
        o += 1
    };
}
fuzzer.rs:218:1: 370:2
pub unsafe extern "C" fn stress(mut info: * const crate::example2::ti_indicator_info) {
    let opt_count: i32 = (*info).options;
    printf(b"%s (%s) (%d options)\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*info).name, (*info).full_name, opt_count);
    let mut inputs: [* const f64; 10] =
        [0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,
         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,
         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,
         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,
         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double];
    let mut inputs0: [* const f64; 10] =
        [0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,
         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,
         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,
         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,
         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double];
    let mut outputs: [* mut f64; 10] =
        [0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double];
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < 10 as std::os::raw::c_int {
        inputs[i as usize] =
            if i < (*info).inputs {
                dummy_in.as_mut_ptr()
            } else { 0 as *mut std::os::raw::c_double };
        inputs0[i as usize] =
            if i < (*info).inputs {
                dummy_in0.as_mut_ptr()
            } else { 0 as *mut std::os::raw::c_double };
        outputs[i as usize] =
            if i < (*info).outputs {
                dummy_ot.as_mut_ptr()
            } else { 0 as *mut std::os::raw::c_double };
        i += 1
    }
    let mut options_index: [i32; 11] =
        [0 as std::os::raw::c_int, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let mut options: [f64; 10] = [0.; 10];
    let mut choices: i32 =
        (::std::mem::size_of::<[std::os::raw::c_double; 29]>() as
             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<std::os::raw::c_double>()
                                             as std::os::raw::c_ulong) as std::os::raw::c_int;
    let mut size: i32 =
        (::std::mem::size_of::<[std::os::raw::c_double; 20]>() as
             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<std::os::raw::c_double>()
                                             as std::os::raw::c_ulong) as std::os::raw::c_int;
    let mut j: i32 = 0;
    let mut count: i32 = 0 as std::os::raw::c_int;
    loop  {
        count += 1;
        j = 0 as std::os::raw::c_int;
        while j < opt_count {
            options[j as usize] =
                optionsd[options_index[j as usize] as usize];
            printf(b" %f\x00" as *const u8 as *const std::os::raw::c_char,
                   options[j as usize]);
            j += 1
        }
        let mut r: i32 = 0;
        printf(b" 0\x00" as *const u8 as *const std::os::raw::c_char);
        r =
            (*info).indicator.expect("non-null function pointer")(0 as
                                                                      std::os::raw::c_int,
                                                                  inputs.as_mut_ptr(),
                                                                  options.as_mut_ptr(),
                                                                  outputs.as_mut_ptr());
        if r == 0 as std::os::raw::c_int {
            check_output(info, 0 as std::os::raw::c_int, inputs.as_mut_ptr(),
                         options.as_mut_ptr(), outputs.as_mut_ptr());
        }
        printf(b" 1\x00" as *const u8 as *const std::os::raw::c_char);
        r =
            (*info).indicator.expect("non-null function pointer")(1 as
                                                                      std::os::raw::c_int,
                                                                  inputs.as_mut_ptr(),
                                                                  options.as_mut_ptr(),
                                                                  outputs.as_mut_ptr());
        if r == 0 as std::os::raw::c_int {
            check_output(info, 1 as std::os::raw::c_int, inputs.as_mut_ptr(),
                         options.as_mut_ptr(), outputs.as_mut_ptr());
        }
        printf(b" 2\x00" as *const u8 as *const std::os::raw::c_char);
        r =
            (*info).indicator.expect("non-null function pointer")(2 as
                                                                      std::os::raw::c_int,
                                                                  inputs.as_mut_ptr(),
                                                                  options.as_mut_ptr(),
                                                                  outputs.as_mut_ptr());
        if r == 0 as std::os::raw::c_int {
            check_output(info, 2 as std::os::raw::c_int, inputs.as_mut_ptr(),
                         options.as_mut_ptr(), outputs.as_mut_ptr());
        }
        printf(b" 3\x00" as *const u8 as *const std::os::raw::c_char);
        r =
            (*info).indicator.expect("non-null function pointer")(3 as
                                                                      std::os::raw::c_int,
                                                                  inputs.as_mut_ptr(),
                                                                  options.as_mut_ptr(),
                                                                  outputs.as_mut_ptr());
        if r == 0 as std::os::raw::c_int {
            check_output(info, 3 as std::os::raw::c_int, inputs.as_mut_ptr(),
                         options.as_mut_ptr(), outputs.as_mut_ptr());
        }
        printf(b" %d\x00" as *const u8 as *const std::os::raw::c_char, size);
        r =
            (*info).indicator.expect("non-null function pointer")(size,
                                                                  inputs.as_mut_ptr(),
                                                                  options.as_mut_ptr(),
                                                                  outputs.as_mut_ptr());
        if r == 0 as std::os::raw::c_int {
            check_output(info, size, inputs.as_mut_ptr(),
                         options.as_mut_ptr(), outputs.as_mut_ptr());
        }
        printf(b" 0s\x00" as *const u8 as *const std::os::raw::c_char);
        r =
            (*info).indicator.expect("non-null function pointer")(size,
                                                                  inputs0.as_mut_ptr(),
                                                                  options.as_mut_ptr(),
                                                                  outputs.as_mut_ptr());
        if r == 0 as std::os::raw::c_int {
            check_output(info, size, inputs0.as_mut_ptr(),
                         options.as_mut_ptr(), outputs.as_mut_ptr());
        }
        printf(b"\r                                                  \r\x00"
                   as *const u8 as *const std::os::raw::c_char);
        j = 0 as std::os::raw::c_int;
        loop  {
            options_index[j as usize] =
                (options_index[j as usize] + 1 as std::os::raw::c_int) % choices;
            let mut fresh0 = j;
            j = j + 1;
            if !(options_index[fresh0 as usize] == 0 as std::os::raw::c_int) {
                break ;
            }
        }
        if !(j <= opt_count) { break ; }
    }
    if !(0.1f64 >
             fabs(count as std::os::raw::c_double -
                      pow(choices as std::os::raw::c_double,
                          opt_count as std::os::raw::c_double))) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"stress\x00")).as_ptr(),
                     b"fuzzer.c\x00" as *const u8 as *const std::os::raw::c_char,
                     154 as std::os::raw::c_int,
                     b".1 > fabs(count - (pow(choices, opt_count)))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
}
fuzzer.rs:371:1: 389:2
unsafe fn main_0(mut argc: std::os::raw::c_int, mut argv: * mut * mut std::os::raw::c_char)
 -> std::os::raw::c_int {
    banner();
    if argc > 1 as std::os::raw::c_int {
        let mut info: * const crate::example2::ti_indicator_info =
            ti_find_indicator(*argv.offset(1 as std::os::raw::c_int as isize));
        if !info.is_null() { stress(info); }
    } else {
        let mut info_0: * const crate::example2::ti_indicator_info = ti_indicators.as_mut_ptr();
        loop  {
            stress(info_0);
            info_0 = info_0.offset(1);
            if (*info_0).name.is_null() { break ; }
        }
    }
    printf(b"\r                                                  \rDone\n\x00"
               as *const u8 as *const std::os::raw::c_char);
    return 0 as std::os::raw::c_int;
}
fuzzer.rs:396:5: 400:6
unsafe {
        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,
                                    args.as_mut_ptr() as
                                        *mut *mut std::os::raw::c_char) as i32)
    }
indicators/abs.rs:29:1: 45:2
pub unsafe extern "C" fn ti_abs(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = fabs(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/acos.rs:29:1: 45:2
pub unsafe extern "C" fn ti_acos(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = acos(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/ad.rs:30:1: 61:2
pub unsafe extern "C" fn ti_ad(mut size: std::os::raw::c_int,
                               mut inputs: * const * const std::os::raw::c_double,
                               mut options: * const std::os::raw::c_double,
                               mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut volume: * const f64 =
        *inputs.offset(3 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        let hl: f64 =
            *high.offset(i as isize) - *low.offset(i as isize);
        if hl != 0.0f64 {
            sum +=
                (*close.offset(i as isize) - *low.offset(i as isize) -
                     *high.offset(i as isize) + *close.offset(i as isize)) /
                    hl * *volume.offset(i as isize)
        }
        *output.offset(i as isize) = sum;
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/add.rs:25:1: 44:2
pub unsafe extern "C" fn ti_add(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut in2: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            *in1.offset(i as isize) + *in2.offset(i as isize);
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/adosc.rs:30:1: 34:2
pub unsafe extern "C" fn ti_adosc_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/adosc.rs:36:1: 106:2
pub unsafe extern "C" fn ti_adosc(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut volume: * const f64 =
        *inputs.offset(3 as std::os::raw::c_int as isize);
    let short_period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let long_period: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let start: i32 = long_period - 1 as std::os::raw::c_int;
    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if long_period < short_period { return 1 as std::os::raw::c_int }
    if size <= ti_adosc_start(options) { return 0 as std::os::raw::c_int }
    let short_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (short_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    let long_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (long_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut short_ema: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut long_ema: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        let hl: f64 =
            *high.offset(i as isize) - *low.offset(i as isize);
        if hl != 0.0f64 {
            sum +=
                (*close.offset(i as isize) - *low.offset(i as isize) -
                     *high.offset(i as isize) + *close.offset(i as isize)) /
                    hl * *volume.offset(i as isize)
        }
        if i == 0 as std::os::raw::c_int {
            short_ema = sum;
            long_ema = sum
        } else {
            short_ema = (sum - short_ema) * short_per + short_ema;
            long_ema = (sum - long_ema) * long_per + long_ema
        }
        if i >= start {
            let mut fresh0 = output;
            output = output.offset(1);
            *fresh0 = short_ema - long_ema
        }
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_adosc_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 9], &'_ [i8; 9]>(b"ti_adosc\x00")).as_ptr(),
                     b"indicators/adosc.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 73 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_adosc_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/adx.rs:32:1: 36:2
pub unsafe extern "C" fn ti_adx_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return (*options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
                1 as std::os::raw::c_int) * 2 as std::os::raw::c_int;
}
indicators/adx.rs:38:1: 165:2
pub unsafe extern "C" fn ti_adx(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_adx_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 =
        (period as std::os::raw::c_double - 1 as std::os::raw::c_int as std::os::raw::c_double) /
            period as std::os::raw::c_double;
    let invper: f64 = 1.0f64 / period as std::os::raw::c_double;
    let mut atr: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut dmup: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut dmdown: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < period {
        let mut truerange: f64 = 0.;
        let l: f64 = *low.offset(i as isize);
        let h: f64 = *high.offset(i as isize);
        let c: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych: f64 = fabs(h - c);
        let ycl: f64 = fabs(l - c);
        let mut v: f64 = h - l;
        if ych > v { v = ych }
        if ycl > v { v = ycl }
        truerange = v;
        atr += truerange;
        let mut dp: f64 = 0.;
        let mut dm: f64 = 0.;
        dp =
            *high.offset(i as isize) -
                *high.offset((i - 1 as std::os::raw::c_int) as isize);
        dm =
            *low.offset((i - 1 as std::os::raw::c_int) as isize) -
                *low.offset(i as isize);
        if dp < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dp = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dp > dm { dm = 0 as std::os::raw::c_int as std::os::raw::c_double }
        if dm < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dm = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dm > dp { dp = 0 as std::os::raw::c_int as std::os::raw::c_double }
        dmup += dp;
        dmdown += dm;
        i += 1
    }
    let mut adx: f64 = 0.0f64;
    let mut di_up: f64 = dmup / atr;
    let mut di_down: f64 = dmdown / atr;
    let mut dm_diff: f64 = fabs(di_up - di_down);
    let mut dm_sum: f64 = di_up + di_down;
    let mut dx: f64 =
        dm_diff / dm_sum * 100 as std::os::raw::c_int as std::os::raw::c_double;
    adx += dx;
    i = period;
    while i < size {
        let mut truerange_0: f64 = 0.;
        let l_0: f64 = *low.offset(i as isize);
        let h_0: f64 = *high.offset(i as isize);
        let c_0: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych_0: f64 = fabs(h_0 - c_0);
        let ycl_0: f64 = fabs(l_0 - c_0);
        let mut v_0: f64 = h_0 - l_0;
        if ych_0 > v_0 { v_0 = ych_0 }
        if ycl_0 > v_0 { v_0 = ycl_0 }
        truerange_0 = v_0;
        atr = atr * per + truerange_0;
        let mut dp_0: f64 = 0.;
        let mut dm_0: f64 = 0.;
        dp_0 =
            *high.offset(i as isize) -
                *high.offset((i - 1 as std::os::raw::c_int) as isize);
        dm_0 =
            *low.offset((i - 1 as std::os::raw::c_int) as isize) -
                *low.offset(i as isize);
        if dp_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dp_0 > dm_0 { dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        if dm_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dm_0 > dp_0 { dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        dmup = dmup * per + dp_0;
        dmdown = dmdown * per + dm_0;
        let mut di_up_0: f64 = dmup / atr;
        let mut di_down_0: f64 = dmdown / atr;
        let mut dm_diff_0: f64 = fabs(di_up_0 - di_down_0);
        let mut dm_sum_0: f64 = di_up_0 + di_down_0;
        let mut dx_0: f64 =
            dm_diff_0 / dm_sum_0 * 100 as std::os::raw::c_int as std::os::raw::c_double;
        if i - period < period - 2 as std::os::raw::c_int {
            adx += dx_0
        } else if i - period == period - 2 as std::os::raw::c_int {
            adx += dx_0;
            let mut fresh0 = output;
            output = output.offset(1);
            *fresh0 = adx * invper
        } else {
            adx = adx * per + dx_0;
            let mut fresh1 = output;
            output = output.offset(1);
            *fresh1 = adx * invper
        }
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_adx_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_adx\x00")).as_ptr(),
                     b"indicators/adx.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 112 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_adx_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/adxr.rs:63:1: 67:2
pub unsafe extern "C" fn ti_adxr_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return (*options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
                1 as std::os::raw::c_int) * 3 as std::os::raw::c_int;
}
indicators/adxr.rs:69:1: 224:2
pub unsafe extern "C" fn ti_adxr(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_adxr_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 =
        (period as std::os::raw::c_double - 1 as std::os::raw::c_int as std::os::raw::c_double) /
            period as std::os::raw::c_double;
    let invper: f64 = 1.0f64 / period as std::os::raw::c_double;
    let mut atr: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut dmup: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut dmdown: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < period {
        let mut truerange: f64 = 0.;
        let l: f64 = *low.offset(i as isize);
        let h: f64 = *high.offset(i as isize);
        let c: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych: f64 = fabs(h - c);
        let ycl: f64 = fabs(l - c);
        let mut v: f64 = h - l;
        if ych > v { v = ych }
        if ycl > v { v = ycl }
        truerange = v;
        atr += truerange;
        let mut dp: f64 = 0.;
        let mut dm: f64 = 0.;
        dp =
            *high.offset(i as isize) -
                *high.offset((i - 1 as std::os::raw::c_int) as isize);
        dm =
            *low.offset((i - 1 as std::os::raw::c_int) as isize) -
                *low.offset(i as isize);
        if dp < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dp = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dp > dm { dm = 0 as std::os::raw::c_int as std::os::raw::c_double }
        if dm < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dm = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dm > dp { dp = 0 as std::os::raw::c_int as std::os::raw::c_double }
        dmup += dp;
        dmdown += dm;
        i += 1
    }
    let mut adx: f64 = 0.0f64;
    let mut di_up: f64 = dmup / atr;
    let mut di_down: f64 = dmdown / atr;
    let mut dm_diff: f64 = fabs(di_up - di_down);
    let mut dm_sum: f64 = di_up + di_down;
    let mut dx: f64 =
        dm_diff / dm_sum * 100 as std::os::raw::c_int as std::os::raw::c_double;
    adx += dx;
    let mut adxr: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(period - 1 as std::os::raw::c_int);
    let first_adxr: i32 = ti_adxr_start(options);
    i = period;
    while i < size {
        let mut truerange_0: f64 = 0.;
        let l_0: f64 = *low.offset(i as isize);
        let h_0: f64 = *high.offset(i as isize);
        let c_0: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych_0: f64 = fabs(h_0 - c_0);
        let ycl_0: f64 = fabs(l_0 - c_0);
        let mut v_0: f64 = h_0 - l_0;
        if ych_0 > v_0 { v_0 = ych_0 }
        if ycl_0 > v_0 { v_0 = ycl_0 }
        truerange_0 = v_0;
        atr = atr * per + truerange_0;
        let mut dp_0: f64 = 0.;
        let mut dm_0: f64 = 0.;
        dp_0 =
            *high.offset(i as isize) -
                *high.offset((i - 1 as std::os::raw::c_int) as isize);
        dm_0 =
            *low.offset((i - 1 as std::os::raw::c_int) as isize) -
                *low.offset(i as isize);
        if dp_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dp_0 > dm_0 { dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        if dm_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dm_0 > dp_0 { dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        dmup = dmup * per + dp_0;
        dmdown = dmdown * per + dm_0;
        let mut di_up_0: f64 = dmup / atr;
        let mut di_down_0: f64 = dmdown / atr;
        let mut dm_diff_0: f64 = fabs(di_up_0 - di_down_0);
        let mut dm_sum_0: f64 = di_up_0 + di_down_0;
        let mut dx_0: f64 =
            dm_diff_0 / dm_sum_0 * 100 as std::os::raw::c_int as std::os::raw::c_double;
        if i - period < period - 2 as std::os::raw::c_int {
            adx += dx_0
        } else if i - period == period - 2 as std::os::raw::c_int {
            adx += dx_0;
            *(*adxr).vals.as_mut_ptr().offset((*adxr).index as isize) =
                adx * invper;
            (*adxr).index = (*adxr).index + 1 as std::os::raw::c_int;
            if (*adxr).index >= (*adxr).size {
                (*adxr).index = 0 as std::os::raw::c_int
            }
        } else {
            adx = adx * per + dx_0;
            if i >= first_adxr {
                let mut fresh0 = output;
                output = output.offset(1);
                *fresh0 =
                    0.5f64 *
                        (adx * invper +
                             *(*adxr).vals.as_mut_ptr().offset((((*adxr).index
                                                                     +
                                                                     (*adxr).size
                                                                     -
                                                                     1 as
                                                                         std::os::raw::c_int
                                                                     +
                                                                     1 as
                                                                         std::os::raw::c_int)
                                                                    %
                                                                    (*adxr).size)
                                                                   as isize))
            }
            *(*adxr).vals.as_mut_ptr().offset((*adxr).index as isize) =
                adx * invper;
            (*adxr).index = (*adxr).index + 1 as std::os::raw::c_int;
            if (*adxr).index >= (*adxr).size {
                (*adxr).index = 0 as std::os::raw::c_int
            }
        }
        i += 1
    }
    ti_buffer_free(adxr);
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_adxr_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_adxr\x00")).as_ptr(),
                     b"indicators/adxr.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 122 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_adxr_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/ao.rs:35:1: 94:2
pub unsafe extern "C" fn ti_ao(mut size: std::os::raw::c_int,
                               mut inputs: * const * const std::os::raw::c_double,
                               mut options: * const std::os::raw::c_double,
                               mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let period: i32 = 34 as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if size <= ti_ao_start(options) { return 0 as std::os::raw::c_int }
    let mut sum34: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut sum5: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let per34: f64 = 1.0f64 / 34.0f64;
    let per5: f64 = 1.0f64 / 5.0f64;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < 34 as std::os::raw::c_int {
        let mut hl: f64 =
            0.5f64 * (*high.offset(i as isize) + *low.offset(i as isize));
        sum34 += hl;
        if i >= 29 as std::os::raw::c_int { sum5 += hl }
        i += 1
    }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = per5 * sum5 - per34 * sum34;
    i = period;
    while i < size {
        let mut hl_0: f64 =
            0.5f64 * (*high.offset(i as isize) + *low.offset(i as isize));
        sum34 += hl_0;
        sum5 += hl_0;
        sum34 -=
            0.5f64 *
                (*high.offset((i - 34 as std::os::raw::c_int) as isize) +
                     *low.offset((i - 34 as std::os::raw::c_int) as isize));
        sum5 -=
            0.5f64 *
                (*high.offset((i - 5 as std::os::raw::c_int) as isize) +
                     *low.offset((i - 5 as std::os::raw::c_int) as isize));
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = per5 * sum5 - per34 * sum34;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_ao_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 6], &'_ [i8; 6]>(b"ti_ao\x00")).as_ptr(),
                     b"indicators/ao.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 68 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_ao_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/apo.rs:35:1: 88:2
pub unsafe extern "C" fn ti_apo(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut apo: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let short_period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let long_period: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if long_period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if long_period < short_period { return 1 as std::os::raw::c_int }
    if size <= ti_apo_start(options) { return 0 as std::os::raw::c_int }
    let mut short_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (short_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut long_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (long_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut short_ema: f64 =
        *input.offset(0 as std::os::raw::c_int as isize);
    let mut long_ema: f64 =
        *input.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        short_ema =
            (*input.offset(i as isize) - short_ema) * short_per + short_ema;
        long_ema =
            (*input.offset(i as isize) - long_ema) * long_per + long_ema;
        let out: f64 = short_ema - long_ema;
        let mut fresh0 = apo;
        apo = apo.offset(1);
        *fresh0 = out;
        i += 1
    }
    if !(apo.offset_from(*outputs.offset(0 as std::os::raw::c_int as isize))
             as std::os::raw::c_long ==
             (size - ti_apo_start(options)) as std::os::raw::c_long) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_apo\x00")).as_ptr(),
                     b"indicators/apo.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 63 as std::os::raw::c_int,
                     b"apo - outputs[0] == size - ti_apo_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/aroon.rs:30:1: 33:2
pub unsafe extern "C" fn ti_aroon_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/aroon.rs:35:1: 122:2
pub unsafe extern "C" fn ti_aroon(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut adown: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut aup: * mut f64 =
        *outputs.offset(1 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_aroon_start(options) { return 0 as std::os::raw::c_int }
    let scale: f64 = 100.0f64 / period as std::os::raw::c_double;
    let mut trail: i32 = 0 as std::os::raw::c_int;
    let mut maxi: i32 = -(1 as std::os::raw::c_int);
    let mut mini: i32 = -(1 as std::os::raw::c_int);
    let mut max: f64 = *high.offset(0 as std::os::raw::c_int as isize);
    let mut min: f64 = *low.offset(0 as std::os::raw::c_int as isize);
    let mut bar: f64 = 0.;
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    i = period;
    while i < size {
        /* Maintain highest. */
        bar = *high.offset(i as isize);
        if maxi < trail {
            maxi = trail;
            max = *high.offset(maxi as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *high.offset(j as isize);
                if bar >= max { max = bar; maxi = j }
            }
        } else if bar >= max { maxi = i; max = bar }
        /* Maintain lowest. */
        bar = *low.offset(i as isize);
        if mini < trail {
            mini = trail;
            min = *low.offset(mini as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *low.offset(j as isize);
                if bar <= min { min = bar; mini = j }
            }
        } else if bar <= min { mini = i; min = bar }
        /* Calculate the indicator. */
        let mut fresh0 = adown;
        adown = adown.offset(1);
        *fresh0 =
            (period as std::os::raw::c_double - (i - mini) as std::os::raw::c_double) * scale;
        let mut fresh1 = aup;
        aup = aup.offset(1);
        *fresh1 =
            (period as std::os::raw::c_double - (i - maxi) as std::os::raw::c_double) * scale;
        i += 1;
        trail += 1
    }
    if !(adown.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                        isize)) as
             std::os::raw::c_long == (size - ti_aroon_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 9], &'_ [i8; 9]>(b"ti_aroon\x00")).as_ptr(),
                     b"indicators/aroon.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 96 as std::os::raw::c_int,
                     b"adown - outputs[0] == size - ti_aroon_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(aup.offset_from(*outputs.offset(1 as std::os::raw::c_int as isize))
             as std::os::raw::c_long ==
             (size - ti_aroon_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 9], &'_ [i8; 9]>(b"ti_aroon\x00")).as_ptr(),
                     b"indicators/aroon.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 97 as std::os::raw::c_int,
                     b"aup - outputs[1] == size - ti_aroon_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/aroonosc.rs:33:1: 36:2
pub unsafe extern "C" fn ti_aroonosc_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/aroonosc.rs:38:1: 115:2
pub unsafe extern "C" fn ti_aroonosc(mut size: std::os::raw::c_int,
                                     mut inputs: * const * const std::os::raw::c_double,
                                     mut options: * const std::os::raw::c_double,
                                     mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_aroon_start(options) { return 0 as std::os::raw::c_int }
    let scale: f64 = 100.0f64 / period as std::os::raw::c_double;
    let mut trail: i32 = 0 as std::os::raw::c_int;
    let mut maxi: i32 = -(1 as std::os::raw::c_int);
    let mut mini: i32 = -(1 as std::os::raw::c_int);
    let mut max: f64 = *high.offset(0 as std::os::raw::c_int as isize);
    let mut min: f64 = *low.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    i = period;
    while i < size {
        /* Maintain highest. */
        let mut bar: f64 = *high.offset(i as isize);
        if maxi < trail {
            maxi = trail;
            max = *high.offset(maxi as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *high.offset(j as isize);
                if bar >= max { max = bar; maxi = j }
            }
        } else if bar >= max { maxi = i; max = bar }
        /* Maintain lowest. */
        bar = *low.offset(i as isize);
        if mini < trail {
            mini = trail;
            min = *low.offset(mini as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *low.offset(j as isize);
                if bar <= min { min = bar; mini = j }
            }
        } else if bar <= min { mini = i; min = bar }
        /* Calculate the indicator. */
        /*
            const TI_REAL adown = ((TI_REAL)period - (i-mini)) * scale;
            const TI_REAL aup = ((TI_REAL)period - (i-maxi)) * scale;
            *output = aup - adown
        That simplifies to:
            (maxi-mini) * scale
        */
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = (maxi - mini) as std::os::raw::c_double * scale;
        i += 1;
        trail += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_aroonosc_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 12], &'_ [i8; 12]>(b"ti_aroonosc\x00")).as_ptr(),
                     b"indicators/aroonosc.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 102 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_aroonosc_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/asin.rs:29:1: 45:2
pub unsafe extern "C" fn ti_asin(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = asin(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/atan.rs:29:1: 45:2
pub unsafe extern "C" fn ti_atan(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = atan(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/atr.rs:32:1: 36:2
pub unsafe extern "C" fn ti_atr_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/atr.rs:38:1: 110:2
pub unsafe extern "C" fn ti_atr(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_atr_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 = 1.0f64 / period as std::os::raw::c_double;
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut truerange: f64 = 0.;
    sum +=
        *high.offset(0 as std::os::raw::c_int as isize) -
            *low.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < period {
        let l: f64 = *low.offset(i as isize);
        let h: f64 = *high.offset(i as isize);
        let c: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych: f64 = fabs(h - c);
        let ycl: f64 = fabs(l - c);
        let mut v: f64 = h - l;
        if ych > v { v = ych }
        if ycl > v { v = ycl }
        truerange = v;
        sum += truerange;
        i += 1
    }
    let mut val: f64 = sum / period as std::os::raw::c_double;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = val;
    i = period;
    while i < size {
        let l_0: f64 = *low.offset(i as isize);
        let h_0: f64 = *high.offset(i as isize);
        let c_0: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych_0: f64 = fabs(h_0 - c_0);
        let ycl_0: f64 = fabs(l_0 - c_0);
        let mut v_0: f64 = h_0 - l_0;
        if ych_0 > v_0 { v_0 = ych_0 }
        if ycl_0 > v_0 { v_0 = ycl_0 }
        truerange = v_0;
        val = (truerange - val) * per + val;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = val;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_atr_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_atr\x00")).as_ptr(),
                     b"indicators/atr.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 69 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_atr_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/avgprice.rs:30:1: 55:2
pub unsafe extern "C" fn ti_avgprice(mut size: std::os::raw::c_int,
                                     mut inputs: * const * const std::os::raw::c_double,
                                     mut options: * const std::os::raw::c_double,
                                     mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut open: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut high: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(3 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            (*open.offset(i as isize) + *high.offset(i as isize) +
                 *low.offset(i as isize) + *close.offset(i as isize)) *
                0.25f64;
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/bbands.rs:32:1: 36:2
pub unsafe extern "C" fn ti_bbands_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/bbands.rs:38:1: 129:2
pub unsafe extern "C" fn ti_bbands(mut size: std::os::raw::c_int,
                                   mut inputs: * const * const std::os::raw::c_double,
                                   mut options: * const std::os::raw::c_double,
                                   mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut lower: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut middle: * mut f64 =
        *outputs.offset(1 as std::os::raw::c_int as isize);
    let mut upper: * mut f64 =
        *outputs.offset(2 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let stddev: f64 = *options.offset(1 as std::os::raw::c_int as isize);
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_bbands_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut sum2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period {
        sum += *input.offset(i as isize);
        sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        i += 1
    }
    let mut sd: f64 =
        sqrt(sum2 * scale - sum * scale * (sum * scale));
    *middle = sum * scale;
    let mut fresh0 = lower;
    lower = lower.offset(1);
    *fresh0 = *middle - stddev * sd;
    let mut fresh1 = upper;
    upper = upper.offset(1);
    *fresh1 = *middle + stddev * sd;
    middle = middle.offset(1);
    i = period;
    while i < size {
        sum += *input.offset(i as isize);
        sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        sum -= *input.offset((i - period) as isize);
        sum2 -=
            *input.offset((i - period) as isize) *
                *input.offset((i - period) as isize);
        sd = sqrt(sum2 * scale - sum * scale * (sum * scale));
        *middle = sum * scale;
        let mut fresh2 = upper;
        upper = upper.offset(1);
        *fresh2 = *middle + stddev * sd;
        let mut fresh3 = lower;
        lower = lower.offset(1);
        *fresh3 = *middle - stddev * sd;
        middle = middle.offset(1);
        i += 1
    }
    if !(lower.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                        isize)) as
             std::os::raw::c_long ==
             (size - ti_bbands_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 10], &'_ [i8; 10]>(b"ti_bbands\x00")).as_ptr(),
                     b"indicators/bbands.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 76 as std::os::raw::c_int,
                     b"lower - outputs[0] == size - ti_bbands_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(middle.offset_from(*outputs.offset(1 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_bbands_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 10], &'_ [i8; 10]>(b"ti_bbands\x00")).as_ptr(),
                     b"indicators/bbands.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 77 as std::os::raw::c_int,
                     b"middle - outputs[1] == size - ti_bbands_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(upper.offset_from(*outputs.offset(2 as std::os::raw::c_int as
                                                        isize)) as
             std::os::raw::c_long ==
             (size - ti_bbands_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 10], &'_ [i8; 10]>(b"ti_bbands\x00")).as_ptr(),
                     b"indicators/bbands.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 78 as std::os::raw::c_int,
                     b"upper - outputs[2] == size - ti_bbands_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/bop.rs:30:1: 59:2
pub unsafe extern "C" fn ti_bop(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut open: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut high: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(3 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        let mut hl: f64 =
            *high.offset(i as isize) - *low.offset(i as isize);
        if hl <= 0.0f64 {
            *output.offset(i as isize) = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else {
            *output.offset(i as isize) =
                (*close.offset(i as isize) - *open.offset(i as isize)) / hl
        }
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/cci.rs:19:1: 24:2
pub unsafe extern "C" fn ti_cci_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    return (period - 1 as std::os::raw::c_int) * 2 as std::os::raw::c_int;
}
indicators/cci.rs:26:1: 91:2
pub unsafe extern "C" fn ti_cci(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_cci_start(options) { return 0 as std::os::raw::c_int }
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut sum: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(period);
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        let today: f64 =
            (*high.offset(i as isize) + *low.offset(i as isize) +
                 *close.offset(i as isize)) * (1.0f64 / 3.0f64);
        if (*sum).pushes >= (*sum).size {
            (*sum).sum -=
                *(*sum).vals.as_mut_ptr().offset((*sum).index as isize)
        }
        (*sum).sum += today;
        *(*sum).vals.as_mut_ptr().offset((*sum).index as isize) = today;
        (*sum).pushes += 1 as std::os::raw::c_int;
        (*sum).index = (*sum).index + 1 as std::os::raw::c_int;
        if (*sum).index >= (*sum).size { (*sum).index = 0 as std::os::raw::c_int }
        let avg: f64 = (*sum).sum * scale;
        if i >= period * 2 as std::os::raw::c_int - 2 as std::os::raw::c_int {
            let mut acc: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
            j = 0 as std::os::raw::c_int;
            while j < period {
                acc +=
                    fabs(avg - *(*sum).vals.as_mut_ptr().offset(j as isize));
                j += 1
            }
            let mut cci: f64 = acc * scale;
            cci *= 0.015f64;
            cci = (today - avg) / cci;
            let mut fresh0 = output;
            output = output.offset(1);
            *fresh0 = cci
        }
        i += 1
    }
    ti_buffer_free(sum);
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_cci_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_cci\x00")).as_ptr(),
                     b"indicators/cci.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 73 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_cci_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/ceil.rs:29:1: 45:2
pub unsafe extern "C" fn ti_ceil(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = ceil(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/cmo.rs:8:1: 11:2
pub unsafe extern "C" fn ti_cmo_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/cmo.rs:13:1: 94:2
pub unsafe extern "C" fn ti_cmo(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_cmo_start(options) { return 0 as std::os::raw::c_int }
    let mut up_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut down_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i <= period {
        up_sum +=
            if *input.offset(i as isize) >
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset(i as isize)) -
                    *input.offset((i - 1 as std::os::raw::c_int) as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        down_sum +=
            if *input.offset(i as isize) <
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -
                    *input.offset(i as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        i += 1
    }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 =
        100 as std::os::raw::c_int as std::os::raw::c_double * (up_sum - down_sum) /
            (up_sum + down_sum);
    i = period + 1 as std::os::raw::c_int;
    while i < size {
        up_sum -=
            if *input.offset((i - period) as isize) >
                   *input.offset((i - period - 1 as std::os::raw::c_int) as isize) {
                (*input.offset((i - period) as isize)) -
                    *input.offset((i - period - 1 as std::os::raw::c_int) as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        down_sum -=
            if *input.offset((i - period) as isize) <
                   *input.offset((i - period - 1 as std::os::raw::c_int) as isize) {
                (*input.offset((i - period - 1 as std::os::raw::c_int) as isize)) -
                    *input.offset((i - period) as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        up_sum +=
            if *input.offset(i as isize) >
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset(i as isize)) -
                    *input.offset((i - 1 as std::os::raw::c_int) as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        down_sum +=
            if *input.offset(i as isize) <
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -
                    *input.offset(i as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 =
            100 as std::os::raw::c_int as std::os::raw::c_double * (up_sum - down_sum) /
                (up_sum + down_sum);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_cmo_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_cmo\x00")).as_ptr(),
                     b"indicators/cmo.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 64 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_cmo_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/cos.rs:29:1: 45:2
pub unsafe extern "C" fn ti_cos(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = cos(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/cosh.rs:29:1: 45:2
pub unsafe extern "C" fn ti_cosh(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = cosh(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/crossany.rs:30:1: 57:2
pub unsafe extern "C" fn ti_crossany(mut size: std::os::raw::c_int,
                                     mut inputs: * const * const std::os::raw::c_double,
                                     mut options: * const std::os::raw::c_double,
                                     mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut a: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut b: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 =
            (*a.offset(i as isize) > *b.offset(i as isize) &&
                 *a.offset((i - 1 as std::os::raw::c_int) as isize) <=
                     *b.offset((i - 1 as std::os::raw::c_int) as isize) ||
                 *a.offset(i as isize) < *b.offset(i as isize) &&
                     *a.offset((i - 1 as std::os::raw::c_int) as isize) >=
                         *b.offset((i - 1 as std::os::raw::c_int) as isize)) as
                std::os::raw::c_int as std::os::raw::c_double;
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/crossover.rs:31:1: 56:2
pub unsafe extern "C" fn ti_crossover(mut size: std::os::raw::c_int,
                                      mut inputs:
                                          * const * const std::os::raw::c_double,
                                      mut options: * const std::os::raw::c_double,
                                      mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut a: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut b: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 =
            (*a.offset(i as isize) > *b.offset(i as isize) &&
                 *a.offset((i - 1 as std::os::raw::c_int) as isize) <=
                     *b.offset((i - 1 as std::os::raw::c_int) as isize)) as
                std::os::raw::c_int as std::os::raw::c_double;
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/cvi.rs:39:1: 44:2
pub unsafe extern "C" fn ti_cvi_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    let n: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    return n * 2 as std::os::raw::c_int - 1 as std::os::raw::c_int;
}
indicators/cvi.rs:46:1: 106:2
pub unsafe extern "C" fn ti_cvi(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_cvi_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut lag: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(period);
    let mut val: f64 =
        *high.offset(0 as std::os::raw::c_int as isize) -
            *low.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < period * 2 as std::os::raw::c_int - 1 as std::os::raw::c_int {
        val =
            (*high.offset(i as isize) - *low.offset(i as isize) - val) * per +
                val;
        *(*lag).vals.as_mut_ptr().offset((*lag).index as isize) = val;
        (*lag).index = (*lag).index + 1 as std::os::raw::c_int;
        if (*lag).index >= (*lag).size { (*lag).index = 0 as std::os::raw::c_int }
        i += 1
    }
    i = period * 2 as std::os::raw::c_int - 1 as std::os::raw::c_int;
    while i < size {
        val =
            (*high.offset(i as isize) - *low.offset(i as isize) - val) * per +
                val;
        let old: f64 =
            *(*lag).vals.as_mut_ptr().offset((*lag).index as isize);
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = 100.0f64 * (val - old) / old;
        *(*lag).vals.as_mut_ptr().offset((*lag).index as isize) = val;
        (*lag).index = (*lag).index + 1 as std::os::raw::c_int;
        if (*lag).index >= (*lag).size { (*lag).index = 0 as std::os::raw::c_int }
        i += 1
    }
    ti_buffer_free(lag);
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_cvi_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_cvi\x00")).as_ptr(),
                     b"indicators/cvi.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 66 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_cvi_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/decay.rs:30:1: 59:2
pub unsafe extern "C" fn ti_decay(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = *input.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        let mut d: f64 =
            *output.offset(-(1 as std::os::raw::c_int) as isize) - scale;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 =
            if *input.offset(i as isize) > d {
                *input.offset(i as isize)
            } else { d };
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/dema.rs:30:1: 35:2
pub unsafe extern "C" fn ti_dema_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    return (period - 1 as std::os::raw::c_int) * 2 as std::os::raw::c_int;
}
indicators/dema.rs:37:1: 83:2
pub unsafe extern "C" fn ti_dema(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_dema_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);
    let per1: f64 = 1.0f64 - per;
    /*Calculate EMA(input)*/
    let mut ema: f64 = *input.offset(0 as std::os::raw::c_int as isize);
    /*Calculate EMA(EMA(input))*/
    let mut ema2: f64 = ema;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        ema = ema * per1 + *input.offset(i as isize) * per;
        if i == period - 1 as std::os::raw::c_int { ema2 = ema }
        if i >= period - 1 as std::os::raw::c_int {
            ema2 = ema2 * per1 + ema * per;
            if i >= (period - 1 as std::os::raw::c_int) * 2 as std::os::raw::c_int {
                *output = ema * 2 as std::os::raw::c_int as std::os::raw::c_double - ema2;
                output = output.offset(1)
            }
        }
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_dema_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_dema\x00")).as_ptr(),
                     b"indicators/dema.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 66 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_dema_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/di.rs:32:1: 36:2
pub unsafe extern "C" fn ti_di_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/di.rs:38:1: 161:2
pub unsafe extern "C" fn ti_di(mut size: std::os::raw::c_int,
                               mut inputs: * const * const std::os::raw::c_double,
                               mut options: * const std::os::raw::c_double,
                               mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut plus_di: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut minus_di: * mut f64 =
        *outputs.offset(1 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_di_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 =
        (period as std::os::raw::c_double - 1 as std::os::raw::c_int as std::os::raw::c_double) /
            period as std::os::raw::c_double;
    let mut atr: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut dmup: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut dmdown: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < period {
        let mut truerange: f64 = 0.;
        let l: f64 = *low.offset(i as isize);
        let h: f64 = *high.offset(i as isize);
        let c: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych: f64 = fabs(h - c);
        let ycl: f64 = fabs(l - c);
        let mut v: f64 = h - l;
        if ych > v { v = ych }
        if ycl > v { v = ycl }
        truerange = v;
        atr += truerange;
        let mut dp: f64 = 0.;
        let mut dm: f64 = 0.;
        dp =
            *high.offset(i as isize) -
                *high.offset((i - 1 as std::os::raw::c_int) as isize);
        dm =
            *low.offset((i - 1 as std::os::raw::c_int) as isize) -
                *low.offset(i as isize);
        if dp < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dp = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dp > dm { dm = 0 as std::os::raw::c_int as std::os::raw::c_double }
        if dm < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dm = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dm > dp { dp = 0 as std::os::raw::c_int as std::os::raw::c_double }
        dmup += dp;
        dmdown += dm;
        i += 1
    }
    let mut fresh0 = plus_di;
    plus_di = plus_di.offset(1);
    *fresh0 = 100.0f64 * dmup / atr;
    let mut fresh1 = minus_di;
    minus_di = minus_di.offset(1);
    *fresh1 = 100.0f64 * dmdown / atr;
    i = period;
    while i < size {
        let mut truerange_0: f64 = 0.;
        let l_0: f64 = *low.offset(i as isize);
        let h_0: f64 = *high.offset(i as isize);
        let c_0: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych_0: f64 = fabs(h_0 - c_0);
        let ycl_0: f64 = fabs(l_0 - c_0);
        let mut v_0: f64 = h_0 - l_0;
        if ych_0 > v_0 { v_0 = ych_0 }
        if ycl_0 > v_0 { v_0 = ycl_0 }
        truerange_0 = v_0;
        atr = atr * per + truerange_0;
        let mut dp_0: f64 = 0.;
        let mut dm_0: f64 = 0.;
        dp_0 =
            *high.offset(i as isize) -
                *high.offset((i - 1 as std::os::raw::c_int) as isize);
        dm_0 =
            *low.offset((i - 1 as std::os::raw::c_int) as isize) -
                *low.offset(i as isize);
        if dp_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dp_0 > dm_0 { dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        if dm_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dm_0 > dp_0 { dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        dmup = dmup * per + dp_0;
        dmdown = dmdown * per + dm_0;
        let mut fresh2 = plus_di;
        plus_di = plus_di.offset(1);
        *fresh2 = 100.0f64 * dmup / atr;
        let mut fresh3 = minus_di;
        minus_di = minus_di.offset(1);
        *fresh3 = 100.0f64 * dmdown / atr;
        i += 1
    }
    if !(plus_di.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                          isize)) as
             std::os::raw::c_long == (size - ti_di_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 6], &'_ [i8; 6]>(b"ti_di\x00")).as_ptr(),
                     b"indicators/di.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 88 as std::os::raw::c_int,
                     b"plus_di - outputs[0] == size - ti_di_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(minus_di.offset_from(*outputs.offset(1 as std::os::raw::c_int as
                                                           isize)) as
             std::os::raw::c_long == (size - ti_di_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 6], &'_ [i8; 6]>(b"ti_di\x00")).as_ptr(),
                     b"indicators/di.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 89 as std::os::raw::c_int,
                     b"minus_di - outputs[1] == size - ti_di_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/div.rs:25:1: 44:2
pub unsafe extern "C" fn ti_div(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut in2: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            *in1.offset(i as isize) / *in2.offset(i as isize);
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/dm.rs:30:1: 34:2
pub unsafe extern "C" fn ti_dm_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/dm.rs:36:1: 132:2
pub unsafe extern "C" fn ti_dm(mut size: std::os::raw::c_int,
                               mut inputs: * const * const std::os::raw::c_double,
                               mut options: * const std::os::raw::c_double,
                               mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut plus_dm: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut minus_dm: * mut f64 =
        *outputs.offset(1 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_dm_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 =
        (period as std::os::raw::c_double - 1 as std::os::raw::c_int as std::os::raw::c_double) /
            period as std::os::raw::c_double;
    let mut dmup: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut dmdown: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < period {
        let mut dp: f64 = 0.;
        let mut dm: f64 = 0.;
        dp =
            *high.offset(i as isize) -
                *high.offset((i - 1 as std::os::raw::c_int) as isize);
        dm =
            *low.offset((i - 1 as std::os::raw::c_int) as isize) -
                *low.offset(i as isize);
        if dp < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dp = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dp > dm { dm = 0 as std::os::raw::c_int as std::os::raw::c_double }
        if dm < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dm = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dm > dp { dp = 0 as std::os::raw::c_int as std::os::raw::c_double }
        dmup += dp;
        dmdown += dm;
        i += 1
    }
    let mut fresh0 = plus_dm;
    plus_dm = plus_dm.offset(1);
    *fresh0 = dmup;
    let mut fresh1 = minus_dm;
    minus_dm = minus_dm.offset(1);
    *fresh1 = dmdown;
    i = period;
    while i < size {
        let mut dp_0: f64 = 0.;
        let mut dm_0: f64 = 0.;
        dp_0 =
            *high.offset(i as isize) -
                *high.offset((i - 1 as std::os::raw::c_int) as isize);
        dm_0 =
            *low.offset((i - 1 as std::os::raw::c_int) as isize) -
                *low.offset(i as isize);
        if dp_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dp_0 > dm_0 { dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        if dm_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dm_0 > dp_0 { dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        dmup = dmup * per + dp_0;
        dmdown = dmdown * per + dm_0;
        let mut fresh2 = plus_dm;
        plus_dm = plus_dm.offset(1);
        *fresh2 = dmup;
        let mut fresh3 = minus_dm;
        minus_dm = minus_dm.offset(1);
        *fresh3 = dmdown;
        i += 1
    }
    if !(plus_dm.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                          isize)) as
             std::os::raw::c_long == (size - ti_dm_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 6], &'_ [i8; 6]>(b"ti_dm\x00")).as_ptr(),
                     b"indicators/dm.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 77 as std::os::raw::c_int,
                     b"plus_dm - outputs[0] == size - ti_dm_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(minus_dm.offset_from(*outputs.offset(1 as std::os::raw::c_int as
                                                           isize)) as
             std::os::raw::c_long == (size - ti_dm_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 6], &'_ [i8; 6]>(b"ti_dm\x00")).as_ptr(),
                     b"indicators/dm.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 78 as std::os::raw::c_int,
                     b"minus_dm - outputs[1] == size - ti_dm_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/dpo.rs:30:1: 34:2
pub unsafe extern "C" fn ti_dpo_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/dpo.rs:36:1: 80:2
pub unsafe extern "C" fn ti_dpo(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let back: i32 = period / 2 as std::os::raw::c_int + 1 as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_dpo_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period { sum += *input.offset(i as isize); i += 1 }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 =
        *input.offset((period - 1 as std::os::raw::c_int - back) as isize) -
            sum * scale;
    i = period;
    while i < size {
        sum += *input.offset(i as isize);
        sum -= *input.offset((i - period) as isize);
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = *input.offset((i - back) as isize) - sum * scale;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_dpo_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_dpo\x00")).as_ptr(),
                     b"indicators/dpo.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 60 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_dpo_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/dx.rs:32:1: 36:2
pub unsafe extern "C" fn ti_dx_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/dx.rs:38:1: 155:2
pub unsafe extern "C" fn ti_dx(mut size: std::os::raw::c_int,
                               mut inputs: * const * const std::os::raw::c_double,
                               mut options: * const std::os::raw::c_double,
                               mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_dx_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 =
        (period as std::os::raw::c_double - 1 as std::os::raw::c_int as std::os::raw::c_double) /
            period as std::os::raw::c_double;
    let mut atr: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut dmup: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut dmdown: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < period {
        let mut truerange: f64 = 0.;
        let l: f64 = *low.offset(i as isize);
        let h: f64 = *high.offset(i as isize);
        let c: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych: f64 = fabs(h - c);
        let ycl: f64 = fabs(l - c);
        let mut v: f64 = h - l;
        if ych > v { v = ych }
        if ycl > v { v = ycl }
        truerange = v;
        atr += truerange;
        let mut dp: f64 = 0.;
        let mut dm: f64 = 0.;
        dp =
            *high.offset(i as isize) -
                *high.offset((i - 1 as std::os::raw::c_int) as isize);
        dm =
            *low.offset((i - 1 as std::os::raw::c_int) as isize) -
                *low.offset(i as isize);
        if dp < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dp = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dp > dm { dm = 0 as std::os::raw::c_int as std::os::raw::c_double }
        if dm < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dm = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dm > dp { dp = 0 as std::os::raw::c_int as std::os::raw::c_double }
        dmup += dp;
        dmdown += dm;
        i += 1
    }
    let mut di_up: f64 = dmup / atr;
    let mut di_down: f64 = dmdown / atr;
    let mut dm_diff: f64 = fabs(di_up - di_down);
    let mut dm_sum: f64 = di_up + di_down;
    let mut dx: f64 =
        dm_diff / dm_sum * 100 as std::os::raw::c_int as std::os::raw::c_double;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = dx;
    i = period;
    while i < size {
        let mut truerange_0: f64 = 0.;
        let l_0: f64 = *low.offset(i as isize);
        let h_0: f64 = *high.offset(i as isize);
        let c_0: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych_0: f64 = fabs(h_0 - c_0);
        let ycl_0: f64 = fabs(l_0 - c_0);
        let mut v_0: f64 = h_0 - l_0;
        if ych_0 > v_0 { v_0 = ych_0 }
        if ycl_0 > v_0 { v_0 = ycl_0 }
        truerange_0 = v_0;
        atr = atr * per + truerange_0;
        let mut dp_0: f64 = 0.;
        let mut dm_0: f64 = 0.;
        dp_0 =
            *high.offset(i as isize) -
                *high.offset((i - 1 as std::os::raw::c_int) as isize);
        dm_0 =
            *low.offset((i - 1 as std::os::raw::c_int) as isize) -
                *low.offset(i as isize);
        if dp_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dp_0 > dm_0 { dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        if dm_0 < 0 as std::os::raw::c_int as std::os::raw::c_double {
            dm_0 = 0 as std::os::raw::c_int as std::os::raw::c_double
        } else if dm_0 > dp_0 { dp_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        dmup = dmup * per + dp_0;
        dmdown = dmdown * per + dm_0;
        let mut di_up_0: f64 = dmup / atr;
        let mut di_down_0: f64 = dmdown / atr;
        let mut dm_diff_0: f64 = fabs(di_up_0 - di_down_0);
        let mut dm_sum_0: f64 = di_up_0 + di_down_0;
        let mut dx_0: f64 =
            dm_diff_0 / dm_sum_0 * 100 as std::os::raw::c_int as std::os::raw::c_double;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = dx_0;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_dx_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 6], &'_ [i8; 6]>(b"ti_dx\x00")).as_ptr(),
                     b"indicators/dx.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 101 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_dx_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/edecay.rs:30:1: 59:2
pub unsafe extern "C" fn ti_edecay(mut size: std::os::raw::c_int,
                                   mut inputs: * const * const std::os::raw::c_double,
                                   mut options: * const std::os::raw::c_double,
                                   mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let scale: f64 = 1.0f64 - 1.0f64 / period as std::os::raw::c_double;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = *input.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        let mut d: f64 =
            *output.offset(-(1 as std::os::raw::c_int) as isize) * scale;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 =
            if *input.offset(i as isize) > d {
                *input.offset(i as isize)
            } else { d };
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/ema.rs:35:1: 75:2
pub unsafe extern "C" fn ti_ema(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_ema_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut val: f64 = *input.offset(0 as std::os::raw::c_int as isize);
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = val;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        val = (*input.offset(i as isize) - val) * per + val;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = val;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_ema_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_ema\x00")).as_ptr(),
                     b"indicators/ema.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 54 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_ema_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/emv.rs:35:1: 77:2
pub unsafe extern "C" fn ti_emv(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut volume: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if size <= ti_emv_start(options) { return 0 as std::os::raw::c_int }
    let mut last: f64 =
        (*high.offset(0 as std::os::raw::c_int as isize) +
             *low.offset(0 as std::os::raw::c_int as isize)) * 0.5f64;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        let mut hl: f64 =
            (*high.offset(i as isize) + *low.offset(i as isize)) * 0.5f64;
        let mut br: f64 =
            *volume.offset(i as isize) / 10000.0f64 /
                (*high.offset(i as isize) - *low.offset(i as isize));
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = (hl - last) / br;
        last = hl;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_emv_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_emv\x00")).as_ptr(),
                     b"indicators/emv.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 56 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_emv_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/exp.rs:29:1: 45:2
pub unsafe extern "C" fn ti_exp(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = exp(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/fisher.rs:32:1: 36:2
pub unsafe extern "C" fn ti_fisher_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/fisher.rs:38:1: 152:2
pub unsafe extern "C" fn ti_fisher(mut size: std::os::raw::c_int,
                                   mut inputs: * const * const std::os::raw::c_double,
                                   mut options: * const std::os::raw::c_double,
                                   mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut fisher: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut signal: * mut f64 =
        *outputs.offset(1 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_fisher_start(options) { return 0 as std::os::raw::c_int }
    let mut trail: i32 = 0 as std::os::raw::c_int;
    let mut maxi: i32 = -(1 as std::os::raw::c_int);
    let mut mini: i32 = -(1 as std::os::raw::c_int);
    let mut max: f64 =
        0.5f64 *
            (*high.offset(0 as std::os::raw::c_int as isize) +
                 *low.offset(0 as std::os::raw::c_int as isize));
    let mut min: f64 =
        0.5f64 *
            (*high.offset(0 as std::os::raw::c_int as isize) +
                 *low.offset(0 as std::os::raw::c_int as isize));
    let mut val1: f64 = 0.0f64;
    let mut bar: f64 = 0.;
    let mut fish: f64 = 0.0f64;
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        /* Maintain highest. */
        bar = 0.5f64 * (*high.offset(i as isize) + *low.offset(i as isize));
        if maxi < trail {
            maxi = trail;
            max =
                0.5f64 *
                    (*high.offset(maxi as isize) +
                         *low.offset(maxi as isize));
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar =
                    0.5f64 *
                        (*high.offset(j as isize) + *low.offset(j as isize));
                if bar >= max { max = bar; maxi = j }
            }
        } else if bar >= max { maxi = i; max = bar }
        /* Maintain lowest. */
        bar = 0.5f64 * (*high.offset(i as isize) + *low.offset(i as isize));
        if mini < trail {
            mini = trail;
            min =
                0.5f64 *
                    (*high.offset(mini as isize) +
                         *low.offset(mini as isize));
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar =
                    0.5f64 *
                        (*high.offset(j as isize) + *low.offset(j as isize));
                if bar <= min { min = bar; mini = j }
            }
        } else if bar <= min { mini = i; min = bar }
        let mut mm: f64 = max - min;
        if mm == 0.0f64 { mm = 0.001f64 }
        val1 =
            0.33f64 * 2.0f64 *
                ((0.5f64 *
                      (*high.offset(i as isize) + *low.offset(i as isize)) -
                      min) / mm - 0.5f64) + 0.67f64 * val1;
        if val1 > 0.99f64 { val1 = 0.999f64 }
        if val1 < -0.99f64 { val1 = -0.999f64 }
        let mut fresh0 = signal;
        signal = signal.offset(1);
        *fresh0 = fish;
        fish =
            0.5f64 * log((1.0f64 + val1) / (1.0f64 - val1)) + 0.5f64 * fish;
        let mut fresh1 = fisher;
        fisher = fisher.offset(1);
        *fresh1 = fish;
        i += 1;
        trail += 1
    }
    if !(fisher.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_fisher_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 10], &'_ [i8; 10]>(b"ti_fisher\x00")).as_ptr(),
                     b"indicators/fisher.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 103 as std::os::raw::c_int,
                     b"fisher - outputs[0] == size - ti_fisher_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(signal.offset_from(*outputs.offset(1 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_fisher_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 10], &'_ [i8; 10]>(b"ti_fisher\x00")).as_ptr(),
                     b"indicators/fisher.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 104 as std::os::raw::c_int,
                     b"signal - outputs[1] == size - ti_fisher_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/floor.rs:29:1: 45:2
pub unsafe extern "C" fn ti_floor(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = floor(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/fosc.rs:30:1: 33:2
pub unsafe extern "C" fn ti_fosc_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/fosc.rs:35:1: 100:2
pub unsafe extern "C" fn ti_fosc(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_fosc_start(options) { return 0 as std::os::raw::c_int }
    let mut x: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut x2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut y: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut xy: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let p: f64 = 1.0f64 / period as std::os::raw::c_double;
    let mut tsf: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period - 1 as std::os::raw::c_int {
        x += (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        x2 +=
            ((i + 1 as std::os::raw::c_int) * (i + 1 as std::os::raw::c_int)) as
                std::os::raw::c_double;
        xy +=
            *input.offset(i as isize) *
                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        y += *input.offset(i as isize);
        i += 1
    }
    x += period as std::os::raw::c_double;
    x2 += (period * period) as std::os::raw::c_double;
    let bd: f64 = 1.0f64 / (period as std::os::raw::c_double * x2 - x * x);
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        xy += *input.offset(i as isize) * period as std::os::raw::c_double;
        y += *input.offset(i as isize);
        let b: f64 = (period as std::os::raw::c_double * xy - x * y) * bd;
        let a: f64 = (y - b * x) * p;
        if i >= period {
            let mut fresh0 = output;
            output = output.offset(1);
            *fresh0 =
                100 as std::os::raw::c_int as std::os::raw::c_double *
                    (*input.offset(i as isize) - tsf) /
                    *input.offset(i as isize)
        }
        tsf = a + b * (period + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        xy -= y;
        y -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_fosc_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_fosc\x00")).as_ptr(),
                     b"indicators/fosc.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 54 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_fosc_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/hma.rs:41:1: 48:2
pub unsafe extern "C" fn ti_hma_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let periodsqrt: i32 =
        sqrt(period as std::os::raw::c_double) as std::os::raw::c_int;
    return period + periodsqrt - 2 as std::os::raw::c_int;
}
indicators/hma.rs:50:1: 149:2
pub unsafe extern "C" fn ti_hma(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_hma_start(options) { return 0 as std::os::raw::c_int }
    /* HMA(input, N) = WMA((2 * WMA(input, N/2) - WMA(input, N)), sqrt(N)) */
    /* Need to do three WMAs, with periods N, N/2, and sqrt N.*/
    let period2: i32 =
        period / 2 as std::os::raw::c_int; /* Flat sum of previous numbers. */
    let periodsqrt: i32 =
        sqrt(period as std::os::raw::c_double) as
            std::os::raw::c_int; /* Weighted sum of previous numbers. */
    let weights: f64 =
        (period * (period + 1 as std::os::raw::c_int) / 2 as std::os::raw::c_int) as
            std::os::raw::c_double;
    let weights2: f64 =
        (period2 * (period2 + 1 as std::os::raw::c_int) / 2 as std::os::raw::c_int) as
            std::os::raw::c_double;
    let weightssqrt: f64 =
        (periodsqrt * (periodsqrt + 1 as std::os::raw::c_int) / 2 as std::os::raw::c_int) as
            std::os::raw::c_double;
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut weight_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut sum2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut weight_sum2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut sumsqrt: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut weight_sumsqrt: f64 =
        0 as std::os::raw::c_int as std::os::raw::c_double;
    /* Setup up the WMA(period) and WMA(period/2) on the input. */
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period - 1 as std::os::raw::c_int {
        weight_sum +=
            *input.offset(i as isize) *
                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        sum += *input.offset(i as isize);
        if i >= period - period2 {
            weight_sum2 +=
                *input.offset(i as isize) *
                    (i + 1 as std::os::raw::c_int - (period - period2)) as
                        std::os::raw::c_double;
            sum2 += *input.offset(i as isize)
        }
        i += 1
    }
    let mut buff: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(periodsqrt);
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        weight_sum += *input.offset(i as isize) * period as std::os::raw::c_double;
        sum += *input.offset(i as isize);
        weight_sum2 += *input.offset(i as isize) * period2 as std::os::raw::c_double;
        sum2 += *input.offset(i as isize);
        let wma: f64 = weight_sum / weights;
        let wma2: f64 = weight_sum2 / weights2;
        let diff: f64 =
            2 as std::os::raw::c_int as std::os::raw::c_double * wma2 - wma;
        weight_sumsqrt += diff * periodsqrt as std::os::raw::c_double;
        sumsqrt += diff;
        *(*buff).vals.as_mut_ptr().offset((*buff).index as isize) = diff;
        (*buff).index = (*buff).index + 1 as std::os::raw::c_int;
        if (*buff).index >= (*buff).size { (*buff).index = 0 as std::os::raw::c_int }
        if i >= period - 1 as std::os::raw::c_int + (periodsqrt - 1 as std::os::raw::c_int) {
            let mut fresh0 = output;
            output = output.offset(1);
            *fresh0 = weight_sumsqrt / weightssqrt;
            weight_sumsqrt -= sumsqrt;
            sumsqrt -=
                *(*buff).vals.as_mut_ptr().offset((((*buff).index +
                                                        (*buff).size -
                                                        1 as std::os::raw::c_int +
                                                        1 as std::os::raw::c_int) %
                                                       (*buff).size) as isize)
        } else { weight_sumsqrt -= sumsqrt }
        weight_sum -= sum;
        sum -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);
        weight_sum2 -= sum2;
        sum2 -= *input.offset((i - period2 + 1 as std::os::raw::c_int) as isize);
        i += 1
    }
    ti_buffer_free(buff);
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_hma_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_hma\x00")).as_ptr(),
                     b"indicators/hma.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 111 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_hma_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/kama.rs:34:1: 38:2
pub unsafe extern "C" fn ti_kama_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/kama.rs:40:1: 113:2
pub unsafe extern "C" fn ti_kama(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_kama_start(options) { return 0 as std::os::raw::c_int }
    /* The caller selects the period used in the efficiency ratio.
     * The fast and slow periods are hard set by the algorithm. */
    let short_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (2.0f64 + 1 as std::os::raw::c_int as std::os::raw::c_double);
    let long_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (30.0f64 + 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < period {
        sum +=
            fabs(*input.offset(i as isize) -
                     *input.offset((i - 1 as std::os::raw::c_int) as isize));
        i += 1
    }
    let mut kama: f64 =
        *input.offset((period - 1 as std::os::raw::c_int) as isize);
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = kama;
    let mut er: f64 = 0.;
    let mut sc: f64 = 0.;
    i = period;
    while i < size {
        sum +=
            fabs(*input.offset(i as isize) -
                     *input.offset((i - 1 as std::os::raw::c_int) as isize));
        if i > period {
            sum -=
                fabs(*input.offset((i - period) as isize) -
                         *input.offset((i - period - 1 as std::os::raw::c_int) as
                                           isize))
        }
        if sum != 0.0f64 {
            er =
                fabs(*input.offset(i as isize) -
                         *input.offset((i - period) as isize)) / sum
        } else { er = 1.0f64 }
        sc =
            pow(er * (short_per - long_per) + long_per,
                2 as std::os::raw::c_int as std::os::raw::c_double);
        kama = kama + sc * (*input.offset(i as isize) - kama);
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = kama;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_kama_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_kama\x00")).as_ptr(),
                     b"indicators/kama.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 75 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_kama_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/kvo.rs:37:1: 125:2
pub unsafe extern "C" fn ti_kvo(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut volume: * const f64 =
        *inputs.offset(3 as std::os::raw::c_int as isize);
    let short_period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let long_period: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if long_period < short_period { return 1 as std::os::raw::c_int }
    if size <= ti_kvo_start(options) { return 0 as std::os::raw::c_int }
    let short_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (short_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    let long_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (long_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut cm: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut prev_hlc: f64 =
        *high.offset(0 as std::os::raw::c_int as isize) +
            *low.offset(0 as std::os::raw::c_int as isize) +
            *close.offset(0 as std::os::raw::c_int as isize);
    let mut trend: i32 = -(1 as std::os::raw::c_int);
    let mut short_ema: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut long_ema: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        let hlc: f64 =
            *high.offset(i as isize) + *low.offset(i as isize) +
                *close.offset(i as isize);
        let dm: f64 =
            *high.offset(i as isize) - *low.offset(i as isize);
        if hlc > prev_hlc && trend != 1 as std::os::raw::c_int {
            trend = 1 as std::os::raw::c_int;
            cm =
                *high.offset((i - 1 as std::os::raw::c_int) as isize) -
                    *low.offset((i - 1 as std::os::raw::c_int) as isize)
        } else if hlc < prev_hlc && trend != 0 as std::os::raw::c_int {
            trend = 0 as std::os::raw::c_int;
            cm =
                *high.offset((i - 1 as std::os::raw::c_int) as isize) -
                    *low.offset((i - 1 as std::os::raw::c_int) as isize)
        }
        cm += dm;
        let vf: f64 =
            *volume.offset(i as isize) *
                fabs(dm / cm * 2 as std::os::raw::c_int as std::os::raw::c_double -
                         1 as std::os::raw::c_int as std::os::raw::c_double) *
                100 as std::os::raw::c_int as std::os::raw::c_double *
                (if trend != 0 { 1.0f64 } else { -1.0f64 });
        if i == 1 as std::os::raw::c_int {
            short_ema = vf;
            long_ema = vf
        } else {
            short_ema = (vf - short_ema) * short_per + short_ema;
            long_ema = (vf - long_ema) * long_per + long_ema
        }
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = short_ema - long_ema;
        prev_hlc = hlc;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_kvo_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_kvo\x00")).as_ptr(),
                     b"indicators/kvo.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 88 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_kvo_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/lag.rs:30:1: 33:2
pub unsafe extern "C" fn ti_lag_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/lag.rs:35:1: 67:2
pub unsafe extern "C" fn ti_lag(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 0 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_lag_start(options) { return 0 as std::os::raw::c_int }
    let mut i: i32 = 0;
    i = period;
    while i < size {
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = *input.offset((i - period) as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_lag_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_lag\x00")).as_ptr(),
                     b"indicators/lag.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 46 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_lag_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/linreg.rs:30:1: 34:2
pub unsafe extern "C" fn ti_linreg_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/linreg.rs:36:1: 95:2
pub unsafe extern "C" fn ti_linreg(mut size: std::os::raw::c_int,
                                   mut inputs: * const * const std::os::raw::c_double,
                                   mut options: * const std::os::raw::c_double,
                                   mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_linreg_start(options) { return 0 as std::os::raw::c_int }
    let mut x: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut x2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut y: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut xy: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let p: f64 = 1.0f64 / period as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period - 1 as std::os::raw::c_int {
        x += (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        x2 +=
            ((i + 1 as std::os::raw::c_int) * (i + 1 as std::os::raw::c_int)) as
                std::os::raw::c_double;
        xy +=
            *input.offset(i as isize) *
                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        y += *input.offset(i as isize);
        i += 1
    }
    x += period as std::os::raw::c_double;
    x2 += (period * period) as std::os::raw::c_double;
    let bd: f64 = 1.0f64 / (period as std::os::raw::c_double * x2 - x * x);
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        xy += *input.offset(i as isize) * period as std::os::raw::c_double;
        y += *input.offset(i as isize);
        let b: f64 = (period as std::os::raw::c_double * xy - x * y) * bd;
        let a: f64 = (y - b * x) * p;
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = a + b * period as std::os::raw::c_double;
        xy -= y;
        y -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_linreg_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 10], &'_ [i8; 10]>(b"ti_linreg\x00")).as_ptr(),
                     b"indicators/linreg.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 43 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_linreg_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/linregintercept.rs:30:1: 35:2
pub unsafe extern "C" fn ti_linregintercept_start(mut options:
                                                      * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/linregintercept.rs:37:1: 99:2
pub unsafe extern "C" fn ti_linregintercept(mut size: std::os::raw::c_int,
                                            mut inputs:
                                                * const * const std::os::raw::c_double,
                                            mut options:
                                                * const std::os::raw::c_double,
                                            mut outputs:
                                                * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_linregintercept_start(options) { return 0 as std::os::raw::c_int }
    let mut x: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut x2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut y: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut xy: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let p: f64 = 1.0f64 / period as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period - 1 as std::os::raw::c_int {
        x += (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        x2 +=
            ((i + 1 as std::os::raw::c_int) * (i + 1 as std::os::raw::c_int)) as
                std::os::raw::c_double;
        xy +=
            *input.offset(i as isize) *
                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        y += *input.offset(i as isize);
        i += 1
    }
    x += period as std::os::raw::c_double;
    x2 += (period * period) as std::os::raw::c_double;
    let bd: f64 = 1.0f64 / (period as std::os::raw::c_double * x2 - x * x);
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        xy += *input.offset(i as isize) * period as std::os::raw::c_double;
        y += *input.offset(i as isize);
        let b: f64 = (period as std::os::raw::c_double * xy - x * y) * bd;
        let a: f64 = (y - b * x) * p;
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = a + b * 1 as std::os::raw::c_int as std::os::raw::c_double;
        xy -= y;
        y -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_linregintercept_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 19], &'_ [i8; 19]>(b"ti_linregintercept\x00")).as_ptr(),
                     b"indicators/linregintercept.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 43 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_linregintercept_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/linregslope.rs:30:1: 35:2
pub unsafe extern "C" fn ti_linregslope_start(mut options:
                                                  * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/linregslope.rs:37:1: 96:2
pub unsafe extern "C" fn ti_linregslope(mut size: std::os::raw::c_int,
                                        mut inputs:
                                            * const * const std::os::raw::c_double,
                                        mut options: * const std::os::raw::c_double,
                                        mut outputs:
                                            * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_linregslope_start(options) { return 0 as std::os::raw::c_int }
    let mut x: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut x2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut y: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut xy: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period - 1 as std::os::raw::c_int {
        x += (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        x2 +=
            ((i + 1 as std::os::raw::c_int) * (i + 1 as std::os::raw::c_int)) as
                std::os::raw::c_double;
        xy +=
            *input.offset(i as isize) *
                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        y += *input.offset(i as isize);
        i += 1
    }
    x += period as std::os::raw::c_double;
    x2 += (period * period) as std::os::raw::c_double;
    let bd: f64 = 1.0f64 / (period as std::os::raw::c_double * x2 - x * x);
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        xy += *input.offset(i as isize) * period as std::os::raw::c_double;
        y += *input.offset(i as isize);
        let b: f64 = (period as std::os::raw::c_double * xy - x * y) * bd;
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = b;
        xy -= y;
        y -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_linregslope_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 15], &'_ [i8; 15]>(b"ti_linregslope\x00")).as_ptr(),
                     b"indicators/linregslope.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 51 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_linregslope_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/ln.rs:34:1: 50:2
pub unsafe extern "C" fn ti_ln(mut size: std::os::raw::c_int,
                               mut inputs: * const * const std::os::raw::c_double,
                               mut options: * const std::os::raw::c_double,
                               mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = log(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/log10.rs:29:1: 45:2
pub unsafe extern "C" fn ti_log10(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = log10(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/macd.rs:30:1: 36:2
pub unsafe extern "C" fn ti_macd_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    /* NB we return data before signal is strictly valid. */
    let long_period: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    return long_period - 1 as std::os::raw::c_int;
}
indicators/macd.rs:38:1: 138:2
pub unsafe extern "C" fn ti_macd(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut macd: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut signal: * mut f64 =
        *outputs.offset(1 as std::os::raw::c_int as isize);
    let mut hist: * mut f64 =
        *outputs.offset(2 as std::os::raw::c_int as isize);
    let short_period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let long_period: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let signal_period: i32 =
        *options.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if long_period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if long_period < short_period { return 1 as std::os::raw::c_int }
    if signal_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_macd_start(options) { return 0 as std::os::raw::c_int }
    let mut short_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (short_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut long_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (long_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut signal_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (signal_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    if short_period == 12 as std::os::raw::c_int && long_period == 26 as std::os::raw::c_int {
        /* I don't like this, but it's what people expect. */
        short_per = 0.15f64;
        long_per = 0.075f64
    }
    let mut short_ema: f64 =
        *input.offset(0 as std::os::raw::c_int as isize);
    let mut long_ema: f64 =
        *input.offset(0 as std::os::raw::c_int as isize);
    let mut signal_ema: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        short_ema =
            (*input.offset(i as isize) - short_ema) * short_per + short_ema;
        long_ema =
            (*input.offset(i as isize) - long_ema) * long_per + long_ema;
        let out: f64 = short_ema - long_ema;
        if i == long_period - 1 as std::os::raw::c_int { signal_ema = out }
        if i >= long_period - 1 as std::os::raw::c_int {
            signal_ema = (out - signal_ema) * signal_per + signal_ema;
            let mut fresh0 = macd;
            macd = macd.offset(1);
            *fresh0 = out;
            let mut fresh1 = signal;
            signal = signal.offset(1);
            *fresh1 = signal_ema;
            let mut fresh2 = hist;
            hist = hist.offset(1);
            *fresh2 = out - signal_ema
        }
        i += 1
    }
    if !(macd.offset_from(*outputs.offset(0 as std::os::raw::c_int as isize))
             as std::os::raw::c_long ==
             (size - ti_macd_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_macd\x00")).as_ptr(),
                     b"indicators/macd.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 86 as std::os::raw::c_int,
                     b"macd - outputs[0] == size - ti_macd_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(signal.offset_from(*outputs.offset(1 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_macd_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_macd\x00")).as_ptr(),
                     b"indicators/macd.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 87 as std::os::raw::c_int,
                     b"signal - outputs[1] == size - ti_macd_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(hist.offset_from(*outputs.offset(2 as std::os::raw::c_int as isize))
             as std::os::raw::c_long ==
             (size - ti_macd_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_macd\x00")).as_ptr(),
                     b"indicators/macd.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 88 as std::os::raw::c_int,
                     b"hist - outputs[2] == size - ti_macd_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/marketfi.rs:35:1: 71:2
pub unsafe extern "C" fn ti_marketfi(mut size: std::os::raw::c_int,
                                     mut inputs: * const * const std::os::raw::c_double,
                                     mut options: * const std::os::raw::c_double,
                                     mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut volume: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if size <= ti_marketfi_start(options) { return 0 as std::os::raw::c_int }
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 =
            (*high.offset(i as isize) - *low.offset(i as isize)) /
                *volume.offset(i as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_marketfi_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 12], &'_ [i8; 12]>(b"ti_marketfi\x00")).as_ptr(),
                     b"indicators/marketfi.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 50 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_marketfi_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/mass.rs:39:1: 47:2
pub unsafe extern "C" fn ti_mass_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut sum_p: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
            1 as std::os::raw::c_int;
    /* The ema uses a hard-coded period of 9.
     * (9-1)*2 = 16 */
    return 16 as std::os::raw::c_int + sum_p;
}
indicators/mass.rs:49:1: 120:2
pub unsafe extern "C" fn ti_mass(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_mass_start(options) { return 0 as std::os::raw::c_int }
    /*mass uses a hard-coded 9 period for the ema*/
    let per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (9.0f64 + 1 as std::os::raw::c_int as std::os::raw::c_double);
    let per1: f64 = 1.0f64 - per;
    /*Calculate EMA(h-l)*/
    let mut ema: f64 =
        *high.offset(0 as std::os::raw::c_int as isize) -
            *low.offset(0 as std::os::raw::c_int as isize);
    /*Calculate EMA(EMA(h-l))*/
    let mut ema2: f64 = ema;
    let mut sum: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(period);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        let mut hl: f64 =
            *high.offset(i as isize) - *low.offset(i as isize);
        ema = ema * per1 + hl * per;
        if i == 8 as std::os::raw::c_int { ema2 = ema }
        if i >= 8 as std::os::raw::c_int {
            ema2 = ema2 * per1 + ema * per;
            if i >= 16 as std::os::raw::c_int {
                if (*sum).pushes >= (*sum).size {
                    (*sum).sum -=
                        *(*sum).vals.as_mut_ptr().offset((*sum).index as
                                                             isize)
                }
                (*sum).sum += ema / ema2;
                *(*sum).vals.as_mut_ptr().offset((*sum).index as isize) =
                    ema / ema2;
                (*sum).pushes += 1 as std::os::raw::c_int;
                (*sum).index = (*sum).index + 1 as std::os::raw::c_int;
                if (*sum).index >= (*sum).size {
                    (*sum).index = 0 as std::os::raw::c_int
                }
                if i >= 16 as std::os::raw::c_int + period - 1 as std::os::raw::c_int {
                    let mut fresh0 = output;
                    output = output.offset(1);
                    *fresh0 = (*sum).sum
                }
            }
        }
        i += 1
    }
    ti_buffer_free(sum);
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_mass_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_mass\x00")).as_ptr(),
                     b"indicators/mass.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 80 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_mass_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/max.rs:30:1: 34:2
pub unsafe extern "C" fn ti_max_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/max.rs:36:1: 85:2
pub unsafe extern "C" fn ti_max(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_max_start(options) { return 0 as std::os::raw::c_int }
    let mut trail: i32 = 0 as std::os::raw::c_int;
    let mut maxi: i32 = -(1 as std::os::raw::c_int);
    let mut max: f64 = *input.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        let mut bar: f64 = *input.offset(i as isize);
        if maxi < trail {
            maxi = trail;
            max = *input.offset(maxi as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *input.offset(j as isize);
                if bar >= max { max = bar; maxi = j }
            }
        } else if bar >= max { maxi = i; max = bar }
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = max;
        i += 1;
        trail += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_max_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_max\x00")).as_ptr(),
                     b"indicators/max.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 67 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_max_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/md.rs:32:1: 36:2
pub unsafe extern "C" fn ti_md_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/md.rs:38:1: 85:2
pub unsafe extern "C" fn ti_md(mut size: std::os::raw::c_int,
                               mut inputs: * const * const std::os::raw::c_double,
                               mut options: * const std::os::raw::c_double,
                               mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_md_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        let today: f64 = *input.offset(i as isize);
        sum += today;
        if i >= period { sum -= *input.offset((i - period) as isize) }
        let avg: f64 = sum * scale;
        if i >= period - 1 as std::os::raw::c_int {
            let mut acc: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
            j = 0 as std::os::raw::c_int;
            while j < period {
                acc += fabs(avg - *input.offset((i - j) as isize));
                j += 1
            }
            let mut fresh0 = output;
            output = output.offset(1);
            *fresh0 = acc * scale
        }
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_md_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 6], &'_ [i8; 6]>(b"ti_md\x00")).as_ptr(),
                     b"indicators/md.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 63 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_md_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/medprice.rs:30:1: 49:2
pub unsafe extern "C" fn ti_medprice(mut size: std::os::raw::c_int,
                                     mut inputs: * const * const std::os::raw::c_double,
                                     mut options: * const std::os::raw::c_double,
                                     mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            (*high.offset(i as isize) + *low.offset(i as isize)) * 0.5f64;
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/mfi.rs:17:1: 20:2
pub unsafe extern "C" fn ti_mfi_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/mfi.rs:22:1: 141:2
pub unsafe extern "C" fn ti_mfi(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut volume: * const f64 =
        *inputs.offset(3 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_mfi_start(options) { return 0 as std::os::raw::c_int }
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut ytyp: f64 =
        (*high.offset(0 as std::os::raw::c_int as isize) +
             *low.offset(0 as std::os::raw::c_int as isize) +
             *close.offset(0 as std::os::raw::c_int as isize)) * (1.0f64 / 3.0f64);
    let mut i: i32 = 0;
    let mut up: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(period);
    let mut down: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(period);
    i = 1 as std::os::raw::c_int;
    while i < size {
        let typ: f64 =
            (*high.offset(i as isize) + *low.offset(i as isize) +
                 *close.offset(i as isize)) * (1.0f64 / 3.0f64);
        let bar: f64 = typ * *volume.offset(i as isize);
        if typ > ytyp {
            if (*up).pushes >= (*up).size {
                (*up).sum -=
                    *(*up).vals.as_mut_ptr().offset((*up).index as isize)
            }
            (*up).sum += bar;
            *(*up).vals.as_mut_ptr().offset((*up).index as isize) = bar;
            (*up).pushes += 1 as std::os::raw::c_int;
            (*up).index = (*up).index + 1 as std::os::raw::c_int;
            if (*up).index >= (*up).size { (*up).index = 0 as std::os::raw::c_int }
            if (*down).pushes >= (*down).size {
                (*down).sum -=
                    *(*down).vals.as_mut_ptr().offset((*down).index as isize)
            }
            (*down).sum += 0.0f64;
            *(*down).vals.as_mut_ptr().offset((*down).index as isize) =
                0.0f64;
            (*down).pushes += 1 as std::os::raw::c_int;
            (*down).index = (*down).index + 1 as std::os::raw::c_int;
            if (*down).index >= (*down).size {
                (*down).index = 0 as std::os::raw::c_int
            }
        } else if typ < ytyp {
            if (*down).pushes >= (*down).size {
                (*down).sum -=
                    *(*down).vals.as_mut_ptr().offset((*down).index as isize)
            }
            (*down).sum += bar;
            *(*down).vals.as_mut_ptr().offset((*down).index as isize) = bar;
            (*down).pushes += 1 as std::os::raw::c_int;
            (*down).index = (*down).index + 1 as std::os::raw::c_int;
            if (*down).index >= (*down).size {
                (*down).index = 0 as std::os::raw::c_int
            }
            if (*up).pushes >= (*up).size {
                (*up).sum -=
                    *(*up).vals.as_mut_ptr().offset((*up).index as isize)
            }
            (*up).sum += 0.0f64;
            *(*up).vals.as_mut_ptr().offset((*up).index as isize) = 0.0f64;
            (*up).pushes += 1 as std::os::raw::c_int;
            (*up).index = (*up).index + 1 as std::os::raw::c_int;
            if (*up).index >= (*up).size { (*up).index = 0 as std::os::raw::c_int }
        } else {
            if (*up).pushes >= (*up).size {
                (*up).sum -=
                    *(*up).vals.as_mut_ptr().offset((*up).index as isize)
            }
            (*up).sum += 0.0f64;
            *(*up).vals.as_mut_ptr().offset((*up).index as isize) = 0.0f64;
            (*up).pushes += 1 as std::os::raw::c_int;
            (*up).index = (*up).index + 1 as std::os::raw::c_int;
            if (*up).index >= (*up).size { (*up).index = 0 as std::os::raw::c_int }
            if (*down).pushes >= (*down).size {
                (*down).sum -=
                    *(*down).vals.as_mut_ptr().offset((*down).index as isize)
            }
            (*down).sum += 0.0f64;
            *(*down).vals.as_mut_ptr().offset((*down).index as isize) =
                0.0f64;
            (*down).pushes += 1 as std::os::raw::c_int;
            (*down).index = (*down).index + 1 as std::os::raw::c_int;
            if (*down).index >= (*down).size {
                (*down).index = 0 as std::os::raw::c_int
            }
        }
        ytyp = typ;
        if i >= period {
            let mut fresh0 = output;
            output = output.offset(1);
            *fresh0 = (*up).sum / ((*up).sum + (*down).sum) * 100.0f64
        }
        i += 1
    }
    ti_buffer_free(up);
    ti_buffer_free(down);
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_mfi_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_mfi\x00")).as_ptr(),
                     b"indicators/mfi.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 78 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_mfi_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/min.rs:30:1: 34:2
pub unsafe extern "C" fn ti_min_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/min.rs:36:1: 85:2
pub unsafe extern "C" fn ti_min(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_min_start(options) { return 0 as std::os::raw::c_int }
    let mut trail: i32 = 0 as std::os::raw::c_int;
    let mut mini: i32 = -(1 as std::os::raw::c_int);
    let mut min: f64 = *input.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        let mut bar: f64 = *input.offset(i as isize);
        if mini < trail {
            mini = trail;
            min = *input.offset(mini as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *input.offset(j as isize);
                if bar <= min { min = bar; mini = j }
            }
        } else if bar <= min { mini = i; min = bar }
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = min;
        i += 1;
        trail += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_min_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_min\x00")).as_ptr(),
                     b"indicators/min.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 66 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_min_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/mom.rs:30:1: 33:2
pub unsafe extern "C" fn ti_mom_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/mom.rs:35:1: 68:2
pub unsafe extern "C" fn ti_mom(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_mom_start(options) { return 0 as std::os::raw::c_int }
    let mut i: i32 = 0;
    i = period;
    while i < size {
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 =
            *input.offset(i as isize) - *input.offset((i - period) as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_mom_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_mom\x00")).as_ptr(),
                     b"indicators/mom.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 46 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_mom_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/msw.rs:38:1: 41:2
pub unsafe extern "C" fn ti_msw_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/msw.rs:43:1: 126:2
pub unsafe extern "C" fn ti_msw(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut sine: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut lead: * mut f64 =
        *outputs.offset(1 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_msw_start(options) { return 0 as std::os::raw::c_int }
    let pi: f64 = 3.1415926f64;
    let tpi: f64 = 2 as std::os::raw::c_int as std::os::raw::c_double * pi;
    let mut weight: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut phase: f64 = 0.;
    let mut rp: f64 = 0.;
    let mut ip: f64 = 0.;
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    i = period;
    while i < size {
        rp = 0 as std::os::raw::c_int as std::os::raw::c_double;
        ip = 0 as std::os::raw::c_int as std::os::raw::c_double;
        j = 0 as std::os::raw::c_int;
        while j < period {
            weight = *input.offset((i - j) as isize);
            rp =
                rp +
                    cos(tpi * j as std::os::raw::c_double / period as std::os::raw::c_double)
                        * weight;
            ip =
                ip +
                    sin(tpi * j as std::os::raw::c_double / period as std::os::raw::c_double)
                        * weight;
            j += 1
        }
        if fabs(rp) > 0.001f64 {
            phase = atan(ip / rp)
        } else {
            phase =
                tpi / 2.0f64 *
                    (if ip < 0 as std::os::raw::c_int as std::os::raw::c_double {
                         -1.0f64
                     } else { 1.0f64 })
        }
        if rp < 0.0f64 { phase += pi }
        phase += pi / 2.0f64;
        if phase < 0.0f64 { phase += tpi }
        if phase > tpi { phase -= tpi }
        //phase = 180 * phase / pi;
        let mut fresh0 = sine;
        sine = sine.offset(1);
        *fresh0 = sin(phase);
        let mut fresh1 = lead;
        lead = lead.offset(1);
        *fresh1 = sin(phase + pi / 4.0f64);
        i += 1
    }
    if !(sine.offset_from(*outputs.offset(0 as std::os::raw::c_int as isize))
             as std::os::raw::c_long ==
             (size - ti_msw_start(options)) as std::os::raw::c_long) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_msw\x00")).as_ptr(),
                     b"indicators/msw.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 73 as std::os::raw::c_int,
                     b"sine - outputs[0] == size - ti_msw_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(lead.offset_from(*outputs.offset(1 as std::os::raw::c_int as isize))
             as std::os::raw::c_long ==
             (size - ti_msw_start(options)) as std::os::raw::c_long) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_msw\x00")).as_ptr(),
                     b"indicators/msw.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 74 as std::os::raw::c_int,
                     b"lead - outputs[1] == size - ti_msw_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/mul.rs:30:1: 49:2
pub unsafe extern "C" fn ti_mul(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut in2: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            *in1.offset(i as isize) * *in2.offset(i as isize);
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/natr.rs:32:1: 36:2
pub unsafe extern "C" fn ti_natr_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/natr.rs:38:1: 114:2
pub unsafe extern "C" fn ti_natr(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_natr_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 = 1.0f64 / period as std::os::raw::c_double;
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut truerange: f64 = 0.;
    sum +=
        *high.offset(0 as std::os::raw::c_int as isize) -
            *low.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < period {
        let l: f64 = *low.offset(i as isize);
        let h: f64 = *high.offset(i as isize);
        let c: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych: f64 = fabs(h - c);
        let ycl: f64 = fabs(l - c);
        let mut v: f64 = h - l;
        if ych > v { v = ych }
        if ycl > v { v = ycl }
        truerange = v;
        sum += truerange;
        i += 1
    }
    let mut val: f64 = sum / period as std::os::raw::c_double;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 =
        100 as std::os::raw::c_int as std::os::raw::c_double * val /
            *close.offset((period - 1 as std::os::raw::c_int) as isize);
    i = period;
    while i < size {
        let l_0: f64 = *low.offset(i as isize);
        let h_0: f64 = *high.offset(i as isize);
        let c_0: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych_0: f64 = fabs(h_0 - c_0);
        let ycl_0: f64 = fabs(l_0 - c_0);
        let mut v_0: f64 = h_0 - l_0;
        if ych_0 > v_0 { v_0 = ych_0 }
        if ycl_0 > v_0 { v_0 = ycl_0 }
        truerange = v_0;
        val = (truerange - val) * per + val;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 =
            100 as std::os::raw::c_int as std::os::raw::c_double * val /
                *close.offset(i as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_natr_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_natr\x00")).as_ptr(),
                     b"indicators/natr.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 69 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_natr_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/nvi.rs:35:1: 77:2
pub unsafe extern "C" fn ti_nvi(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut close: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut volume: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if size <= ti_nvi_start(options) { return 0 as std::os::raw::c_int }
    let mut nvi: f64 = 1000 as std::os::raw::c_int as std::os::raw::c_double;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = nvi;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        if *volume.offset(i as isize) <
               *volume.offset((i - 1 as std::os::raw::c_int) as isize) {
            nvi +=
                (*close.offset(i as isize) -
                     *close.offset((i - 1 as std::os::raw::c_int) as isize)) /
                    *close.offset((i - 1 as std::os::raw::c_int) as isize) * nvi
        }
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = nvi;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_nvi_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_nvi\x00")).as_ptr(),
                     b"indicators/nvi.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 56 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_nvi_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/obv.rs:30:1: 61:2
pub unsafe extern "C" fn ti_obv(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut close: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut volume: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = sum;
    let mut prev: f64 = *close.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        if *close.offset(i as isize) > prev {
            sum += *volume.offset(i as isize)
        } else if *close.offset(i as isize) < prev {
            sum -= *volume.offset(i as isize)
        }
        prev = *close.offset(i as isize);
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = sum;
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/ppo.rs:35:1: 89:2
pub unsafe extern "C" fn ti_ppo(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut ppo: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let short_period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let long_period: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if long_period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if long_period < short_period { return 1 as std::os::raw::c_int }
    if size <= ti_ppo_start(options) { return 0 as std::os::raw::c_int }
    let mut short_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (short_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut long_per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (long_period as std::os::raw::c_double +
                 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut short_ema: f64 =
        *input.offset(0 as std::os::raw::c_int as isize);
    let mut long_ema: f64 =
        *input.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        short_ema =
            (*input.offset(i as isize) - short_ema) * short_per + short_ema;
        long_ema =
            (*input.offset(i as isize) - long_ema) * long_per + long_ema;
        let out: f64 =
            100.0f64 * (short_ema - long_ema) / long_ema;
        let mut fresh0 = ppo;
        ppo = ppo.offset(1);
        *fresh0 = out;
        i += 1
    }
    if !(ppo.offset_from(*outputs.offset(0 as std::os::raw::c_int as isize))
             as std::os::raw::c_long ==
             (size - ti_ppo_start(options)) as std::os::raw::c_long) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_ppo\x00")).as_ptr(),
                     b"indicators/ppo.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 63 as std::os::raw::c_int,
                     b"ppo - outputs[0] == size - ti_ppo_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/psar.rs:35:1: 137:2
pub unsafe extern "C" fn ti_psar(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let accel_step: f64 =
        *options.offset(0 as std::os::raw::c_int as isize);
    let accel_max: f64 =
        *options.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if accel_step <= 0 as std::os::raw::c_int as std::os::raw::c_double {
        return 1 as std::os::raw::c_int
    }
    if accel_max <= accel_step { return 1 as std::os::raw::c_int }
    if size < 2 as std::os::raw::c_int { return 0 as std::os::raw::c_int }
    /* Try to choose if we start as short or long.
     * There is really no right answer here. */
    let mut lng: i32 = 0;
    if *high.offset(0 as std::os::raw::c_int as isize) +
           *low.offset(0 as std::os::raw::c_int as isize) <=
           *high.offset(1 as std::os::raw::c_int as isize) +
               *low.offset(1 as std::os::raw::c_int as isize) {
        lng = 1 as std::os::raw::c_int
    } else { lng = 0 as std::os::raw::c_int }
    let mut sar: f64 = 0.;
    let mut extreme: f64 = 0.;
    if lng != 0 {
        extreme = *high.offset(0 as std::os::raw::c_int as isize);
        sar = *low.offset(0 as std::os::raw::c_int as isize)
    } else {
        extreme = *low.offset(0 as std::os::raw::c_int as isize);
        sar = *high.offset(0 as std::os::raw::c_int as isize)
    }
    let mut accel: f64 = accel_step;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        sar = (extreme - sar) * accel + sar;
        if lng != 0 {
            if i >= 2 as std::os::raw::c_int &&
                   sar > *low.offset((i - 2 as std::os::raw::c_int) as isize) {
                sar = *low.offset((i - 2 as std::os::raw::c_int) as isize)
            }
            if sar > *low.offset((i - 1 as std::os::raw::c_int) as isize) {
                sar = *low.offset((i - 1 as std::os::raw::c_int) as isize)
            }
            if accel < accel_max && *high.offset(i as isize) > extreme {
                accel += accel_step;
                if accel > accel_max { accel = accel_max }
            }
            if *high.offset(i as isize) > extreme {
                extreme = *high.offset(i as isize)
            }
        } else {
            if i >= 2 as std::os::raw::c_int &&
                   sar < *high.offset((i - 2 as std::os::raw::c_int) as isize) {
                sar = *high.offset((i - 2 as std::os::raw::c_int) as isize)
            }
            if sar < *high.offset((i - 1 as std::os::raw::c_int) as isize) {
                sar = *high.offset((i - 1 as std::os::raw::c_int) as isize)
            }
            if accel < accel_max && *low.offset(i as isize) < extreme {
                accel += accel_step;
                if accel > accel_max { accel = accel_max }
            }
            if *low.offset(i as isize) < extreme {
                extreme = *low.offset(i as isize)
            }
        }
        if lng != 0 && *low.offset(i as isize) < sar ||
               lng == 0 && *high.offset(i as isize) > sar {
            accel = accel_step;
            sar = extreme;
            lng = (lng == 0) as std::os::raw::c_int;
            if lng == 0 {
                extreme = *low.offset(i as isize)
            } else { extreme = *high.offset(i as isize) }
        }
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = sar;
        i += 1
        /*
        printf("%s%2d %.4f %.4f %.4f %.4f %.4f %s\n", i == 1 ? "\n" : "", i, high[i], low[i], accel, extreme, sar, reverse ? (!lng ? "short" : "long") : "");
        */
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_psar_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_psar\x00")).as_ptr(),
                     b"indicators/psar.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 122 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_psar_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/pvi.rs:35:1: 77:2
pub unsafe extern "C" fn ti_pvi(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut close: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut volume: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if size <= ti_pvi_start(options) { return 0 as std::os::raw::c_int }
    let mut pvi: f64 = 1000 as std::os::raw::c_int as std::os::raw::c_double;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = pvi;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        if *volume.offset(i as isize) >
               *volume.offset((i - 1 as std::os::raw::c_int) as isize) {
            pvi +=
                (*close.offset(i as isize) -
                     *close.offset((i - 1 as std::os::raw::c_int) as isize)) /
                    *close.offset((i - 1 as std::os::raw::c_int) as isize) * pvi
        }
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = pvi;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_pvi_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_pvi\x00")).as_ptr(),
                     b"indicators/pvi.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 56 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_pvi_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/qstick.rs:30:1: 34:2
pub unsafe extern "C" fn ti_qstick_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/qstick.rs:36:1: 85:2
pub unsafe extern "C" fn ti_qstick(mut size: std::os::raw::c_int,
                                   mut inputs: * const * const std::os::raw::c_double,
                                   mut options: * const std::os::raw::c_double,
                                   mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut open: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_qstick_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period {
        sum += *close.offset(i as isize) - *open.offset(i as isize);
        i += 1
    }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = sum * scale;
    i = period;
    while i < size {
        sum += *close.offset(i as isize) - *open.offset(i as isize);
        sum -=
            *close.offset((i - period) as isize) -
                *open.offset((i - period) as isize);
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = sum * scale;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_qstick_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 10], &'_ [i8; 10]>(b"ti_qstick\x00")).as_ptr(),
                     b"indicators/qstick.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 58 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_qstick_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/roc.rs:30:1: 33:2
pub unsafe extern "C" fn ti_roc_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/roc.rs:35:1: 69:2
pub unsafe extern "C" fn ti_roc(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_roc_start(options) { return 0 as std::os::raw::c_int }
    let mut i: i32 = 0;
    i = period;
    while i < size {
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 =
            (*input.offset(i as isize) - *input.offset((i - period) as isize))
                / *input.offset((i - period) as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_roc_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_roc\x00")).as_ptr(),
                     b"indicators/roc.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 46 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_roc_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/rocr.rs:30:1: 33:2
pub unsafe extern "C" fn ti_rocr_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/rocr.rs:35:1: 68:2
pub unsafe extern "C" fn ti_rocr(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_rocr_start(options) { return 0 as std::os::raw::c_int }
    let mut i: i32 = 0;
    i = period;
    while i < size {
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 =
            *input.offset(i as isize) / *input.offset((i - period) as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_rocr_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_rocr\x00")).as_ptr(),
                     b"indicators/rocr.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 46 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_rocr_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/round.rs:29:1: 45:2
pub unsafe extern "C" fn ti_round(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = floor(*in1.offset(i as isize) + 0.5f64);
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/rsi.rs:30:1: 33:2
pub unsafe extern "C" fn ti_rsi_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/rsi.rs:35:1: 107:2
pub unsafe extern "C" fn ti_rsi(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let per: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_rsi_start(options) { return 0 as std::os::raw::c_int }
    let mut smooth_up: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut smooth_down: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i <= period {
        let upward: f64 =
            if *input.offset(i as isize) >
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset(i as isize)) -
                    *input.offset((i - 1 as std::os::raw::c_int) as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        let downward: f64 =
            if *input.offset(i as isize) <
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -
                    *input.offset(i as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        smooth_up += upward;
        smooth_down += downward;
        i += 1
    }
    smooth_up /= period as std::os::raw::c_double;
    smooth_down /= period as std::os::raw::c_double;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = 100.0f64 * (smooth_up / (smooth_up + smooth_down));
    i = period + 1 as std::os::raw::c_int;
    while i < size {
        let upward_0: f64 =
            if *input.offset(i as isize) >
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset(i as isize)) -
                    *input.offset((i - 1 as std::os::raw::c_int) as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        let downward_0: f64 =
            if *input.offset(i as isize) <
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -
                    *input.offset(i as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        smooth_up = (upward_0 - smooth_up) * per + smooth_up;
        smooth_down = (downward_0 - smooth_down) * per + smooth_down;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = 100.0f64 * (smooth_up / (smooth_up + smooth_down));
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_rsi_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_rsi\x00")).as_ptr(),
                     b"indicators/rsi.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 66 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_rsi_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/sin.rs:29:1: 45:2
pub unsafe extern "C" fn ti_sin(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = sin(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/sinh.rs:29:1: 45:2
pub unsafe extern "C" fn ti_sinh(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = sinh(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/sma.rs:30:1: 34:2
pub unsafe extern "C" fn ti_sma_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/sma.rs:36:1: 77:2
pub unsafe extern "C" fn ti_sma(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_sma_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period { sum += *input.offset(i as isize); i += 1 }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = sum * scale;
    i = period;
    while i < size {
        sum += *input.offset(i as isize);
        sum -= *input.offset((i - period) as isize);
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = sum * scale;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_sma_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_sma\x00")).as_ptr(),
                     b"indicators/sma.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 57 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_sma_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/sqrt.rs:29:1: 45:2
pub unsafe extern "C" fn ti_sqrt(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = sqrt(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/stddev.rs:32:1: 36:2
pub unsafe extern "C" fn ti_stddev_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/stddev.rs:38:1: 94:2
pub unsafe extern "C" fn ti_stddev(mut size: std::os::raw::c_int,
                                   mut inputs: * const * const std::os::raw::c_double,
                                   mut options: * const std::os::raw::c_double,
                                   mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_stddev_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut sum2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period {
        sum += *input.offset(i as isize);
        sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        i += 1
    }
    let mut s2s2: f64 = sum2 * scale - sum * scale * (sum * scale);
    if s2s2 > 0.0f64 { s2s2 = sqrt(s2s2) }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = s2s2;
    i = period;
    while i < size {
        sum += *input.offset(i as isize);
        sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        sum -= *input.offset((i - period) as isize);
        sum2 -=
            *input.offset((i - period) as isize) *
                *input.offset((i - period) as isize);
        let mut s2s2_0: f64 =
            sum2 * scale - sum * scale * (sum * scale);
        if s2s2_0 > 0.0f64 { s2s2_0 = sqrt(s2s2_0) }
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = s2s2_0;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_stddev_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 10], &'_ [i8; 10]>(b"ti_stddev\x00")).as_ptr(),
                     b"indicators/stddev.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 68 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_stddev_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/stderr.rs:32:1: 36:2
pub unsafe extern "C" fn ti_stderr_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/stderr.rs:38:1: 95:2
pub unsafe extern "C" fn ti_stderr(mut size: std::os::raw::c_int,
                                   mut inputs: * const * const std::os::raw::c_double,
                                   mut options: * const std::os::raw::c_double,
                                   mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_stderr_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut sum2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mul: f64 = 1.0f64 / sqrt(period as std::os::raw::c_double);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period {
        sum += *input.offset(i as isize);
        sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        i += 1
    }
    let mut s2s2: f64 = sum2 * scale - sum * scale * (sum * scale);
    if s2s2 > 0.0f64 { s2s2 = sqrt(s2s2) }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = mul * s2s2;
    i = period;
    while i < size {
        sum += *input.offset(i as isize);
        sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        sum -= *input.offset((i - period) as isize);
        sum2 -=
            *input.offset((i - period) as isize) *
                *input.offset((i - period) as isize);
        let mut s2s2_0: f64 =
            sum2 * scale - sum * scale * (sum * scale);
        if s2s2_0 > 0.0f64 { s2s2_0 = sqrt(s2s2_0) }
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = mul * s2s2_0;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_stderr_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 10], &'_ [i8; 10]>(b"ti_stderr\x00")).as_ptr(),
                     b"indicators/stderr.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 71 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_stderr_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/stoch.rs:39:1: 48:2
pub unsafe extern "C" fn ti_stoch_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    let kperiod: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let kslow: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let dperiod: i32 =
        *options.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    return kperiod + kslow + dperiod - 3 as std::os::raw::c_int;
}
indicators/stoch.rs:50:1: 186:2
pub unsafe extern "C" fn ti_stoch(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let kperiod: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let kslow: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let dperiod: i32 =
        *options.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let kper: f64 = 1.0f64 / kslow as std::os::raw::c_double;
    let dper: f64 = 1.0f64 / dperiod as std::os::raw::c_double;
    let mut stoch: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut stoch_ma: * mut f64 =
        *outputs.offset(1 as std::os::raw::c_int as isize);
    if kperiod < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if kslow < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if dperiod < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_stoch_start(options) { return 0 as std::os::raw::c_int }
    let mut trail: i32 = 0 as std::os::raw::c_int;
    let mut maxi: i32 = -(1 as std::os::raw::c_int);
    let mut mini: i32 = -(1 as std::os::raw::c_int);
    let mut max: f64 = *high.offset(0 as std::os::raw::c_int as isize);
    let mut min: f64 = *low.offset(0 as std::os::raw::c_int as isize);
    let mut bar: f64 = 0.;
    let mut k_sum: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(kslow);
    let mut d_sum: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(dperiod);
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        if i >= kperiod { trail += 1 }
        /* Maintain highest. */
        bar = *high.offset(i as isize);
        if maxi < trail {
            maxi = trail;
            max = *high.offset(maxi as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *high.offset(j as isize);
                if bar >= max { max = bar; maxi = j }
            }
        } else if bar >= max { maxi = i; max = bar }
        /* Maintain lowest. */
        bar = *low.offset(i as isize);
        if mini < trail {
            mini = trail;
            min = *low.offset(mini as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *low.offset(j as isize);
                if bar <= min { min = bar; mini = j }
            }
        } else if bar <= min { mini = i; min = bar }
        /* Calculate it. */
        let kdiff: f64 = max - min;
        let kfast: f64 =
            if kdiff == 0.0f64 {
                0.0f64
            } else {
                (100 as std::os::raw::c_int as std::os::raw::c_double) *
                    ((*close.offset(i as isize) - min) / kdiff)
            };
        if (*k_sum).pushes >= (*k_sum).size {
            (*k_sum).sum -=
                *(*k_sum).vals.as_mut_ptr().offset((*k_sum).index as isize)
        }
        (*k_sum).sum += kfast;
        *(*k_sum).vals.as_mut_ptr().offset((*k_sum).index as isize) = kfast;
        (*k_sum).pushes += 1 as std::os::raw::c_int;
        (*k_sum).index = (*k_sum).index + 1 as std::os::raw::c_int;
        if (*k_sum).index >= (*k_sum).size {
            (*k_sum).index = 0 as std::os::raw::c_int
        }
        if i >= kperiod - 1 as std::os::raw::c_int + kslow - 1 as std::os::raw::c_int {
            let k: f64 = (*k_sum).sum * kper;
            if (*d_sum).pushes >= (*d_sum).size {
                (*d_sum).sum -=
                    *(*d_sum).vals.as_mut_ptr().offset((*d_sum).index as
                                                           isize)
            }
            (*d_sum).sum += k;
            *(*d_sum).vals.as_mut_ptr().offset((*d_sum).index as isize) = k;
            (*d_sum).pushes += 1 as std::os::raw::c_int;
            (*d_sum).index = (*d_sum).index + 1 as std::os::raw::c_int;
            if (*d_sum).index >= (*d_sum).size {
                (*d_sum).index = 0 as std::os::raw::c_int
            }
            if i >=
                   kperiod - 1 as std::os::raw::c_int + kslow - 1 as std::os::raw::c_int +
                       dperiod - 1 as std::os::raw::c_int {
                let mut fresh0 = stoch;
                stoch = stoch.offset(1);
                *fresh0 = k;
                let mut fresh1 = stoch_ma;
                stoch_ma = stoch_ma.offset(1);
                *fresh1 = (*d_sum).sum * dper
            }
        }
        i += 1
    }
    ti_buffer_free(k_sum);
    ti_buffer_free(d_sum);
    if !(stoch.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                        isize)) as
             std::os::raw::c_long == (size - ti_stoch_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 9], &'_ [i8; 9]>(b"ti_stoch\x00")).as_ptr(),
                     b"indicators/stoch.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 125 as std::os::raw::c_int,
                     b"stoch - outputs[0] == size - ti_stoch_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(stoch_ma.offset_from(*outputs.offset(1 as std::os::raw::c_int as
                                                           isize)) as
             std::os::raw::c_long == (size - ti_stoch_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 9], &'_ [i8; 9]>(b"ti_stoch\x00")).as_ptr(),
                     b"indicators/stoch.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 126 as std::os::raw::c_int,
                     b"stoch_ma - outputs[1] == size - ti_stoch_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/stochrsi.rs:39:1: 44:2
pub unsafe extern "C" fn ti_stochrsi_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int *
               2 as std::os::raw::c_int -
               1 as std::os::raw::c_int; /* If period = 0 then min-max = 0. */
}
indicators/stochrsi.rs:46:1: 179:2
pub unsafe extern "C" fn ti_stochrsi(mut size: std::os::raw::c_int,
                                     mut inputs: * const * const std::os::raw::c_double,
                                     mut options: * const std::os::raw::c_double,
                                     mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let per: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_stochrsi_start(options) { return 0 as std::os::raw::c_int }
    let mut rsi: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(period);
    let mut smooth_up: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut smooth_down: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i <= period {
        let upward: f64 =
            if *input.offset(i as isize) >
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset(i as isize)) -
                    *input.offset((i - 1 as std::os::raw::c_int) as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        let downward: f64 =
            if *input.offset(i as isize) <
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -
                    *input.offset(i as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        smooth_up += upward;
        smooth_down += downward;
        i += 1
    }
    smooth_up /= period as std::os::raw::c_double;
    smooth_down /= period as std::os::raw::c_double;
    let mut r: f64 =
        100.0f64 * (smooth_up / (smooth_up + smooth_down));
    if (*rsi).pushes >= (*rsi).size {
        (*rsi).sum -= *(*rsi).vals.as_mut_ptr().offset((*rsi).index as isize)
    }
    (*rsi).sum += r;
    *(*rsi).vals.as_mut_ptr().offset((*rsi).index as isize) = r;
    (*rsi).pushes += 1 as std::os::raw::c_int;
    (*rsi).index = (*rsi).index + 1 as std::os::raw::c_int;
    if (*rsi).index >= (*rsi).size { (*rsi).index = 0 as std::os::raw::c_int }
    let mut min: f64 = r;
    let mut max: f64 = r;
    let mut mini: i32 = 0 as std::os::raw::c_int;
    let mut maxi: i32 = 0 as std::os::raw::c_int;
    i = period + 1 as std::os::raw::c_int;
    while i < size {
        let upward_0: f64 =
            if *input.offset(i as isize) >
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset(i as isize)) -
                    *input.offset((i - 1 as std::os::raw::c_int) as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        let downward_0: f64 =
            if *input.offset(i as isize) <
                   *input.offset((i - 1 as std::os::raw::c_int) as isize) {
                (*input.offset((i - 1 as std::os::raw::c_int) as isize)) -
                    *input.offset(i as isize)
            } else { 0 as std::os::raw::c_int as std::os::raw::c_double };
        smooth_up = (upward_0 - smooth_up) * per + smooth_up;
        smooth_down = (downward_0 - smooth_down) * per + smooth_down;
        r = 100.0f64 * (smooth_up / (smooth_up + smooth_down));
        if r > max {
            max = r;
            maxi = (*rsi).index
        } else if maxi == (*rsi).index {
            max = r;
            let mut j: i32 = 0;
            j = 0 as std::os::raw::c_int;
            while j < (*rsi).size {
                if !(j == (*rsi).index) {
                    if *(*rsi).vals.as_mut_ptr().offset(j as isize) > max {
                        max = *(*rsi).vals.as_mut_ptr().offset(j as isize);
                        maxi = j
                    }
                }
                j += 1
            }
        }
        if r < min {
            min = r;
            mini = (*rsi).index
        } else if mini == (*rsi).index {
            min = r;
            let mut j_0: i32 = 0;
            j_0 = 0 as std::os::raw::c_int;
            while j_0 < (*rsi).size {
                if !(j_0 == (*rsi).index) {
                    if *(*rsi).vals.as_mut_ptr().offset(j_0 as isize) < min {
                        min = *(*rsi).vals.as_mut_ptr().offset(j_0 as isize);
                        mini = j_0
                    }
                }
                j_0 += 1
            }
        }
        *(*rsi).vals.as_mut_ptr().offset((*rsi).index as isize) = r;
        (*rsi).index = (*rsi).index + 1 as std::os::raw::c_int;
        if (*rsi).index >= (*rsi).size { (*rsi).index = 0 as std::os::raw::c_int }
        if i > period * 2 as std::os::raw::c_int - 2 as std::os::raw::c_int {
            let diff: f64 = max - min;
            if diff == 0.0f64 {
                let mut fresh0 = output;
                output = output.offset(1);
                *fresh0 = 0.0f64
            } else {
                let mut fresh1 = output;
                output = output.offset(1);
                *fresh1 = (r - min) / diff
            }
        }
        i += 1
    }
    ti_buffer_free(rsi);
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_stochrsi_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 12], &'_ [i8; 12]>(b"ti_stochrsi\x00")).as_ptr(),
                     b"indicators/stochrsi.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 115 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_stochrsi_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/sub.rs:25:1: 44:2
pub unsafe extern "C" fn ti_sub(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut in2: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            *in1.offset(i as isize) - *in2.offset(i as isize);
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/sum.rs:30:1: 34:2
pub unsafe extern "C" fn ti_sum_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/sum.rs:36:1: 76:2
pub unsafe extern "C" fn ti_sum(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_sum_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period { sum += *input.offset(i as isize); i += 1 }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = sum;
    i = period;
    while i < size {
        sum += *input.offset(i as isize);
        sum -= *input.offset((i - period) as isize);
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = sum;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_sum_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_sum\x00")).as_ptr(),
                     b"indicators/sum.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 56 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_sum_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/tan.rs:29:1: 45:2
pub unsafe extern "C" fn ti_tan(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = tan(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/tanh.rs:29:1: 45:2
pub unsafe extern "C" fn ti_tanh(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) = tanh(*in1.offset(i as isize));
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/tema.rs:30:1: 35:2
pub unsafe extern "C" fn ti_tema_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    return (period - 1 as std::os::raw::c_int) * 3 as std::os::raw::c_int;
}
indicators/tema.rs:37:1: 93:2
pub unsafe extern "C" fn ti_tema(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_tema_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);
    let per1: f64 = 1.0f64 - per;
    /*Calculate EMA(input)*/
    let mut ema: f64 = *input.offset(0 as std::os::raw::c_int as isize);
    /*Calculate EMA(EMA(input))*/
    let mut ema2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    /*Calculate EMA(EMA(EMA(input)))*/
    let mut ema3: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        ema = ema * per1 + *input.offset(i as isize) * per;
        if i == period - 1 as std::os::raw::c_int { ema2 = ema }
        if i >= period - 1 as std::os::raw::c_int {
            ema2 = ema2 * per1 + ema * per;
            if i == (period - 1 as std::os::raw::c_int) * 2 as std::os::raw::c_int {
                ema3 = ema2
            }
            if i >= (period - 1 as std::os::raw::c_int) * 2 as std::os::raw::c_int {
                ema3 = ema3 * per1 + ema2 * per;
                if i >= (period - 1 as std::os::raw::c_int) * 3 as std::os::raw::c_int {
                    *output =
                        3 as std::os::raw::c_int as std::os::raw::c_double * ema -
                            3 as std::os::raw::c_int as std::os::raw::c_double * ema2 + ema3;
                    output = output.offset(1)
                }
            }
        }
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_tema_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_tema\x00")).as_ptr(),
                     b"indicators/tema.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 76 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_tema_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/todeg.rs:25:1: 43:2
pub unsafe extern "C" fn ti_todeg(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            *in1.offset(i as isize) *
                (180.0f64 / 3.14159265358979323846264338327950288f64);
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/torad.rs:25:1: 43:2
pub unsafe extern "C" fn ti_torad(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            *in1.offset(i as isize) *
                (3.14159265358979323846264338327950288f64 / 180.0f64);
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/tr.rs:34:1: 68:2
pub unsafe extern "C" fn ti_tr(mut size: std::os::raw::c_int,
                               mut inputs: * const * const std::os::raw::c_double,
                               mut options: * const std::os::raw::c_double,
                               mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut truerange: f64 = 0.;
    *output.offset(0 as std::os::raw::c_int as isize) =
        *high.offset(0 as std::os::raw::c_int as isize) -
            *low.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        let l: f64 = *low.offset(i as isize);
        let h: f64 = *high.offset(i as isize);
        let c: f64 =
            *close.offset((i - 1 as std::os::raw::c_int) as isize);
        let ych: f64 = fabs(h - c);
        let ycl: f64 = fabs(l - c);
        let mut v: f64 = h - l;
        if ych > v { v = ych }
        if ycl > v { v = ycl }
        truerange = v;
        *output.offset(i as isize) = truerange;
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/trima.rs:33:1: 37:2
pub unsafe extern "C" fn ti_trima_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/trima.rs:39:1: 145:2
pub unsafe extern "C" fn ti_trima(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_trima_start(options) { return 0 as std::os::raw::c_int }
    if period <= 2 as std::os::raw::c_int {
        return ti_sma(size, inputs, options, outputs)
    }
    /* Weights for 6 period TRIMA:
     * 1 2 3 3 2 1 = 12
     *
     * Weights for 7 period TRIMA:
     * 1 2 3 4 3 2 1 = 16
     */
    let mut weights: f64 =
        1 as std::os::raw::c_int as std::os::raw::c_double /
            (if period % 2 as std::os::raw::c_int != 0 {
                 (period / 2 as std::os::raw::c_int + 1 as std::os::raw::c_int) *
                     (period / 2 as std::os::raw::c_int + 1 as std::os::raw::c_int)
             } else {
                 (period / 2 as std::os::raw::c_int + 1 as std::os::raw::c_int) *
                     (period / 2 as std::os::raw::c_int)
             }) as
                std::os::raw::c_double; /* Weighted sum of previous numbers, spans one period back. */
    let mut weight_sum: f64 =
        0 as std::os::raw::c_int as
            std::os::raw::c_double; /* Flat sum of most recent numbers. */
    let mut lead_sum: f64 =
        0 as std::os::raw::c_int as std::os::raw::c_double; /* Flat sum of oldest numbers. */
    let mut trail_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    /* example for period of 9 */
    /* weight_sum       1 2 3 4 5 4 3 2 1 */
    /* lead_sum                   1 1 1 1 */
    /* trail_sum        1 1 1 1 1        */
    let lead_period: i32 =
        if period % 2 as std::os::raw::c_int != 0 {
            (period) / 2 as std::os::raw::c_int
        } else { (period / 2 as std::os::raw::c_int) - 1 as std::os::raw::c_int };
    let trail_period: i32 = lead_period + 1 as std::os::raw::c_int;
    let mut i: i32 = 0;
    let mut w: i32 = 1 as std::os::raw::c_int;
    /* Initialize until before the first value. */
    i = 0 as std::os::raw::c_int;
    while i < period - 1 as std::os::raw::c_int {
        weight_sum += *input.offset(i as isize) * w as std::os::raw::c_double;
        if i + 1 as std::os::raw::c_int > period - lead_period {
            lead_sum += *input.offset(i as isize)
        }
        if i + 1 as std::os::raw::c_int <= trail_period {
            trail_sum += *input.offset(i as isize)
        }
        if (i + 1 as std::os::raw::c_int) < trail_period { w += 1 }
        if i + 1 as std::os::raw::c_int >= period - lead_period { w -= 1 }
        i += 1
    }
    let mut lsi: i32 =
        period - 1 as std::os::raw::c_int - lead_period + 1 as std::os::raw::c_int;
    let mut tsi1: i32 =
        period - 1 as std::os::raw::c_int - period + 1 as std::os::raw::c_int + trail_period;
    let mut tsi2: i32 =
        period - 1 as std::os::raw::c_int - period + 1 as std::os::raw::c_int;
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        weight_sum += *input.offset(i as isize);
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = weight_sum * weights;
        lead_sum += *input.offset(i as isize);
        /* 1 2 3 4 5 4 3 2 1 */
        weight_sum += lead_sum;
        /* 1 2 3 4 5 5 4 3 2 */
        weight_sum -= trail_sum;
        /*   1 2 3 4 5 4 3 2 */
        /* weight_sum       1 2 3 4 5 4 3 2 1 */
        /* lead_sum                   1 1 1 1 */
        /* trail_sum        1 1 1 1 1        */
        let mut fresh1 = lsi;
        lsi = lsi + 1;
        lead_sum -= *input.offset(fresh1 as isize);
        let mut fresh2 = tsi1;
        tsi1 = tsi1 + 1;
        trail_sum += *input.offset(fresh2 as isize);
        let mut fresh3 = tsi2;
        tsi2 = tsi2 + 1;
        trail_sum -= *input.offset(fresh3 as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_trima_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 9], &'_ [i8; 9]>(b"ti_trima\x00")).as_ptr(),
                     b"indicators/trima.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 103 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_trima_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/trix.rs:30:1: 35:2
pub unsafe extern "C" fn ti_trix_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    return (period - 1 as std::os::raw::c_int) * 3 as std::os::raw::c_int + 1 as std::os::raw::c_int;
}
indicators/trix.rs:37:1: 103:2
pub unsafe extern "C" fn ti_trix(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_trix_start(options) { return 0 as std::os::raw::c_int }
    let start: i32 = period * 3 as std::os::raw::c_int - 2 as std::os::raw::c_int;
    if !(start == ti_trix_start(options)) as std::os::raw::c_int as std::os::raw::c_long != 0
       {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_trix\x00")).as_ptr(),
                     b"indicators/trix.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 43 as std::os::raw::c_int,
                     b"start == ti_trix_start(options)\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    let per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut ema1: f64 = *input.offset(0 as std::os::raw::c_int as isize);
    let mut ema2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut ema3: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < start {
        ema1 = (*input.offset(i as isize) - ema1) * per + ema1;
        if i == period - 1 as std::os::raw::c_int {
            ema2 = ema1
        } else if i > period - 1 as std::os::raw::c_int {
            ema2 = (ema1 - ema2) * per + ema2;
            if i == period * 2 as std::os::raw::c_int - 2 as std::os::raw::c_int {
                ema3 = ema2
            } else if i > period * 2 as std::os::raw::c_int - 2 as std::os::raw::c_int {
                ema3 = (ema2 - ema3) * per + ema3
            }
        }
        i += 1
    }
    i = start;
    while i < size {
        ema1 = (*input.offset(i as isize) - ema1) * per + ema1;
        ema2 = (ema1 - ema2) * per + ema2;
        let last: f64 = ema3;
        ema3 = (ema2 - ema3) * per + ema3;
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = (ema3 - last) / ema3 * 100.0f64;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_trix_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_trix\x00")).as_ptr(),
                     b"indicators/trix.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 75 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_trix_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/trunc.rs:25:1: 42:2
pub unsafe extern "C" fn ti_trunc(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in1: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            *in1.offset(i as isize) as std::os::raw::c_int as std::os::raw::c_double;
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/tsf.rs:30:1: 34:2
pub unsafe extern "C" fn ti_tsf_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/tsf.rs:36:1: 94:2
pub unsafe extern "C" fn ti_tsf(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_tsf_start(options) { return 0 as std::os::raw::c_int }
    let mut x: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut x2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut y: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut xy: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let p: f64 = 1.0f64 / period as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period - 1 as std::os::raw::c_int {
        x += (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        x2 +=
            ((i + 1 as std::os::raw::c_int) * (i + 1 as std::os::raw::c_int)) as
                std::os::raw::c_double;
        xy +=
            *input.offset(i as isize) *
                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        y += *input.offset(i as isize);
        i += 1
    }
    x += period as std::os::raw::c_double;
    x2 += (period * period) as std::os::raw::c_double;
    let bd: f64 = 1.0f64 / (period as std::os::raw::c_double * x2 - x * x);
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        xy += *input.offset(i as isize) * period as std::os::raw::c_double;
        y += *input.offset(i as isize);
        let b: f64 = (period as std::os::raw::c_double * xy - x * y) * bd;
        let a: f64 = (y - b * x) * p;
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = a + b * (period + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        xy -= y;
        y -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_tsf_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_tsf\x00")).as_ptr(),
                     b"indicators/tsf.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 44 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_tsf_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/typprice.rs:30:1: 52:2
pub unsafe extern "C" fn ti_typprice(mut size: std::os::raw::c_int,
                                     mut inputs: * const * const std::os::raw::c_double,
                                     mut options: * const std::os::raw::c_double,
                                     mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            (*high.offset(i as isize) + *low.offset(i as isize) +
                 *close.offset(i as isize)) * (1.0f64 / 3.0f64);
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/ultosc.rs:39:1: 42:2
pub unsafe extern "C" fn ti_ultosc_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/ultosc.rs:44:1: 170:2
pub unsafe extern "C" fn ti_ultosc(mut size: std::os::raw::c_int,
                                   mut inputs: * const * const std::os::raw::c_double,
                                   mut options: * const std::os::raw::c_double,
                                   mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let short_period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let medium_period: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let long_period: i32 =
        *options.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if medium_period < short_period { return 1 as std::os::raw::c_int }
    if long_period < medium_period { return 1 as std::os::raw::c_int }
    if size <= ti_ultosc_start(options) { return 0 as std::os::raw::c_int }
    let mut bp_buf: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(long_period);
    let mut r_buf: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(long_period);
    let mut bp_short_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut bp_medium_sum: f64 =
        0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut r_short_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut r_medium_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        let true_low: f64 =
            if *low.offset(i as isize) <
                   *close.offset((i - 1 as std::os::raw::c_int) as isize) {
                *low.offset(i as isize)
            } else { *close.offset((i - 1 as std::os::raw::c_int) as isize) };
        let true_high: f64 =
            if *high.offset(i as isize) >
                   *close.offset((i - 1 as std::os::raw::c_int) as isize) {
                *high.offset(i as isize)
            } else { *close.offset((i - 1 as std::os::raw::c_int) as isize) };
        let bp: f64 = *close.offset(i as isize) - true_low;
        let r: f64 = true_high - true_low;
        bp_short_sum += bp;
        bp_medium_sum += bp;
        r_short_sum += r;
        r_medium_sum += r;
        if (*bp_buf).pushes >= (*bp_buf).size {
            (*bp_buf).sum -=
                *(*bp_buf).vals.as_mut_ptr().offset((*bp_buf).index as isize)
        }
        (*bp_buf).sum += bp;
        *(*bp_buf).vals.as_mut_ptr().offset((*bp_buf).index as isize) = bp;
        (*bp_buf).pushes += 1 as std::os::raw::c_int;
        (*bp_buf).index = (*bp_buf).index + 1 as std::os::raw::c_int;
        if (*bp_buf).index >= (*bp_buf).size {
            (*bp_buf).index = 0 as std::os::raw::c_int
        }
        if (*r_buf).pushes >= (*r_buf).size {
            (*r_buf).sum -=
                *(*r_buf).vals.as_mut_ptr().offset((*r_buf).index as isize)
        }
        (*r_buf).sum += r;
        *(*r_buf).vals.as_mut_ptr().offset((*r_buf).index as isize) = r;
        (*r_buf).pushes += 1 as std::os::raw::c_int;
        (*r_buf).index = (*r_buf).index + 1 as std::os::raw::c_int;
        if (*r_buf).index >= (*r_buf).size {
            (*r_buf).index = 0 as std::os::raw::c_int
        }
        /* The long sum takes care of itself, but we're piggy-backing
         * the medium and short sums off the same buffers. */
        if i > short_period {
            let mut short_index: i32 =
                (*bp_buf).index - short_period - 1 as std::os::raw::c_int;
            if short_index < 0 as std::os::raw::c_int { short_index += long_period }
            bp_short_sum -=
                *(*bp_buf).vals.as_mut_ptr().offset(short_index as isize);
            r_short_sum -=
                *(*r_buf).vals.as_mut_ptr().offset(short_index as isize);
            if i > medium_period {
                let mut medium_index: i32 =
                    (*bp_buf).index - medium_period - 1 as std::os::raw::c_int;
                if medium_index < 0 as std::os::raw::c_int {
                    medium_index += long_period
                }
                bp_medium_sum -=
                    *(*bp_buf).vals.as_mut_ptr().offset(medium_index as
                                                            isize);
                r_medium_sum -=
                    *(*r_buf).vals.as_mut_ptr().offset(medium_index as isize)
            }
        }
        if i >= long_period {
            let first: f64 =
                4 as std::os::raw::c_int as std::os::raw::c_double * bp_short_sum /
                    r_short_sum;
            let second: f64 =
                2 as std::os::raw::c_int as std::os::raw::c_double * bp_medium_sum /
                    r_medium_sum;
            let third: f64 =
                1 as std::os::raw::c_int as std::os::raw::c_double * (*bp_buf).sum /
                    (*r_buf).sum;
            let ult: f64 =
                (first + second + third) * 100.0f64 / 7.0f64;
            let mut fresh0 = output;
            output = output.offset(1);
            *fresh0 = ult
        }
        i += 1
    }
    ti_buffer_free(bp_buf);
    ti_buffer_free(r_buf);
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_ultosc_start(options)) as std::os::raw::c_long) as std::os::raw::c_int
           as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 10], &'_ [i8; 10]>(b"ti_ultosc\x00")).as_ptr(),
                     b"indicators/ultosc.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 103 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_ultosc_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/var.rs:30:1: 34:2
pub unsafe extern "C" fn ti_var_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/var.rs:36:1: 86:2
pub unsafe extern "C" fn ti_var(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_var_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut sum2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period {
        sum += *input.offset(i as isize);
        sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        i += 1
    }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = sum2 * scale - sum * scale * (sum * scale);
    i = period;
    while i < size {
        sum += *input.offset(i as isize);
        sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        sum -= *input.offset((i - period) as isize);
        sum2 -=
            *input.offset((i - period) as isize) *
                *input.offset((i - period) as isize);
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = sum2 * scale - sum * scale * (sum * scale);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_var_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_var\x00")).as_ptr(),
                     b"indicators/var.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 64 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_var_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/vhf.rs:32:1: 35:2
pub unsafe extern "C" fn ti_vhf_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
}
indicators/vhf.rs:37:1: 123:2
pub unsafe extern "C" fn ti_vhf(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut in_0: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_vhf_start(options) { return 0 as std::os::raw::c_int }
    let mut trail: i32 = 1 as std::os::raw::c_int;
    let mut maxi: i32 = -(1 as std::os::raw::c_int);
    let mut mini: i32 = -(1 as std::os::raw::c_int);
    let mut max: f64 = *in_0.offset(0 as std::os::raw::c_int as isize);
    let mut min: f64 = *in_0.offset(0 as std::os::raw::c_int as isize);
    let mut bar: f64 = 0.;
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    let mut yc: f64 = *in_0.offset(0 as std::os::raw::c_int as isize);
    let mut c: f64 = 0.;
    i = 1 as std::os::raw::c_int;
    while i < period {
        c = *in_0.offset(i as isize);
        sum += fabs(c - yc);
        yc = c;
        i += 1
    }
    i = period;
    while i < size {
        c = *in_0.offset(i as isize);
        sum += fabs(c - yc);
        yc = c;
        if i > period {
            sum -=
                fabs(*in_0.offset((i - period) as isize) -
                         *in_0.offset((i - period - 1 as std::os::raw::c_int) as
                                          isize))
        }
        /* Maintain highest. */
        bar = c;
        if maxi < trail {
            maxi = trail;
            max = *in_0.offset(maxi as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *in_0.offset(j as isize);
                if bar >= max { max = bar; maxi = j }
            }
        } else if bar >= max { maxi = i; max = bar }
        /* Maintain lowest. */
        bar = c;
        if mini < trail {
            mini = trail;
            min = *in_0.offset(mini as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *in_0.offset(j as isize);
                if bar <= min { min = bar; mini = j }
            }
        } else if bar <= min { mini = i; min = bar }
        /* Calculate it. */
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = fabs(max - min) / sum;
        i += 1;
        trail += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_vhf_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_vhf\x00")).as_ptr(),
                     b"indicators/vhf.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 106 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_vhf_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/vidya.rs:32:1: 38:2
pub unsafe extern "C" fn ti_vidya_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               2 as
                   std::os::raw::c_int; /* In some conditions it works out that we take the sqrt(-0.0), which gives NaN.
                              That implies that k should be zero. */
}
indicators/vidya.rs:40:1: 139:2
pub unsafe extern "C" fn ti_vidya(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let short_period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let long_period: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let alpha: f64 = *options.offset(2 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let short_div: f64 = 1.0f64 / short_period as std::os::raw::c_double;
    let long_div: f64 = 1.0f64 / long_period as std::os::raw::c_double;
    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if long_period < short_period { return 1 as std::os::raw::c_int }
    if long_period < 2 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if alpha < 0.0f64 || alpha > 1.0f64 { return 1 as std::os::raw::c_int }
    if size <= ti_vidya_start(options) { return 0 as std::os::raw::c_int }
    let mut short_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut short_sum2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut long_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut long_sum2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < long_period {
        long_sum += *input.offset(i as isize);
        long_sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        if i >= long_period - short_period {
            short_sum += *input.offset(i as isize);
            short_sum2 +=
                *input.offset(i as isize) * *input.offset(i as isize)
        }
        i += 1
    }
    let mut val: f64 =
        *input.offset((long_period - 2 as std::os::raw::c_int) as isize);
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = val;
    if (long_period - 1 as std::os::raw::c_int) < size {
        let mut short_stddev: f64 =
            sqrt(short_sum2 * short_div -
                     short_sum * short_div * (short_sum * short_div));
        let mut long_stddev: f64 =
            sqrt(long_sum2 * long_div -
                     long_sum * long_div * (long_sum * long_div));
        let mut k: f64 = short_stddev / long_stddev;
        if k != k { k = 0 as std::os::raw::c_int as std::os::raw::c_double }
        k *= alpha;
        val =
            (*input.offset((long_period - 1 as std::os::raw::c_int) as isize) - val) *
                k + val;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = val
    }
    i = long_period;
    while i < size {
        long_sum += *input.offset(i as isize);
        long_sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        short_sum += *input.offset(i as isize);
        short_sum2 += *input.offset(i as isize) * *input.offset(i as isize);
        long_sum -= *input.offset((i - long_period) as isize);
        long_sum2 -=
            *input.offset((i - long_period) as isize) *
                *input.offset((i - long_period) as isize);
        short_sum -= *input.offset((i - short_period) as isize);
        short_sum2 -=
            *input.offset((i - short_period) as isize) *
                *input.offset((i - short_period) as isize);
        let mut short_stddev_0: f64 =
            sqrt(short_sum2 * short_div -
                     short_sum * short_div * (short_sum * short_div));
        let mut long_stddev_0: f64 =
            sqrt(long_sum2 * long_div -
                     long_sum * long_div * (long_sum * long_div));
        let mut k_0: f64 = short_stddev_0 / long_stddev_0;
        if k_0 != k_0 { k_0 = 0 as std::os::raw::c_int as std::os::raw::c_double }
        k_0 *= alpha;
        val = (*input.offset(i as isize) - val) * k_0 + val;
        let mut fresh2 = output;
        output = output.offset(1);
        *fresh2 = val;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_vidya_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 9], &'_ [i8; 9]>(b"ti_vidya\x00")).as_ptr(),
                     b"indicators/vidya.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 106 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_vidya_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/volatility.rs:10:1: 15:2
pub unsafe extern "C" fn ti_volatility_start(mut options:
                                                 * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as
               std::os::raw::c_int; /* Multiplier, number of trading days in year. */
}
indicators/volatility.rs:17:1: 79:2
pub unsafe extern "C" fn ti_volatility(mut size: std::os::raw::c_int,
                                       mut inputs:
                                           * const * const std::os::raw::c_double,
                                       mut options: * const std::os::raw::c_double,
                                       mut outputs:
                                           * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let scale: f64 = 1.0f64 / period as std::os::raw::c_double;
    let annual: f64 = sqrt(252 as std::os::raw::c_int as std::os::raw::c_double);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_volatility_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut sum2: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i <= period {
        let c: f64 =
            *input.offset(i as isize) /
                *input.offset((i - 1 as std::os::raw::c_int) as isize) - 1.0f64;
        sum += c;
        sum2 += c * c;
        i += 1
    }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = sqrt(sum2 * scale - sum * scale * (sum * scale)) * annual;
    i = period + 1 as std::os::raw::c_int;
    while i < size {
        let c_0: f64 =
            *input.offset(i as isize) /
                *input.offset((i - 1 as std::os::raw::c_int) as isize) - 1.0f64;
        sum += c_0;
        sum2 += c_0 * c_0;
        let cp: f64 =
            *input.offset((i - period) as isize) /
                *input.offset((i - period - 1 as std::os::raw::c_int) as isize) -
                1.0f64;
        sum -= cp;
        sum2 -= cp * cp;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = sqrt(sum2 * scale - sum * scale * (sum * scale)) * annual;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_volatility_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 14], &'_ [i8; 14]>(b"ti_volatility\x00")).as_ptr(),
                     b"indicators/volatility.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 69 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_volatility_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/vosc.rs:30:1: 34:2
pub unsafe extern "C" fn ti_vosc_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/vosc.rs:36:1: 94:2
pub unsafe extern "C" fn ti_vosc(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let short_period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let long_period: i32 =
        *options.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let short_div: f64 = 1.0f64 / short_period as std::os::raw::c_double;
    let long_div: f64 = 1.0f64 / long_period as std::os::raw::c_double;
    if short_period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if long_period < short_period { return 1 as std::os::raw::c_int }
    if size <= ti_vosc_start(options) { return 0 as std::os::raw::c_int }
    let mut short_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut long_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < long_period {
        if i >= long_period - short_period {
            short_sum += *input.offset(i as isize)
        }
        long_sum += *input.offset(i as isize);
        i += 1
    }
    let savg: f64 = short_sum * short_div;
    let lavg: f64 = long_sum * long_div;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = 100.0f64 * (savg - lavg) / lavg;
    i = long_period;
    while i < size {
        short_sum += *input.offset(i as isize);
        short_sum -= *input.offset((i - short_period) as isize);
        long_sum += *input.offset(i as isize);
        long_sum -= *input.offset((i - long_period) as isize);
        let savg_0: f64 = short_sum * short_div;
        let lavg_0: f64 = long_sum * long_div;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = 100.0f64 * (savg_0 - lavg_0) / lavg_0;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_vosc_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_vosc\x00")).as_ptr(),
                     b"indicators/vosc.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 76 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_vosc_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/vwma.rs:30:1: 34:2
pub unsafe extern "C" fn ti_vwma_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/vwma.rs:36:1: 87:2
pub unsafe extern "C" fn ti_vwma(mut size: std::os::raw::c_int,
                                 mut inputs: * const * const std::os::raw::c_double,
                                 mut options: * const std::os::raw::c_double,
                                 mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut volume: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_vwma_start(options) { return 0 as std::os::raw::c_int }
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut vsum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period {
        sum += *input.offset(i as isize) * *volume.offset(i as isize);
        vsum += *volume.offset(i as isize);
        i += 1
    }
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = sum / vsum;
    i = period;
    while i < size {
        sum += *input.offset(i as isize) * *volume.offset(i as isize);
        sum -=
            *input.offset((i - period) as isize) *
                *volume.offset((i - period) as isize);
        vsum += *volume.offset(i as isize);
        vsum -= *volume.offset((i - period) as isize);
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = sum / vsum;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_vwma_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 8], &'_ [i8; 8]>(b"ti_vwma\x00")).as_ptr(),
                     b"indicators/vwma.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 64 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_vwma_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/wad.rs:35:1: 85:2
pub unsafe extern "C" fn ti_wad(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    if size <= ti_wad_start(options) { return 0 as std::os::raw::c_int }
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut yc: f64 = *close.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 1 as std::os::raw::c_int;
    while i < size {
        let c: f64 = *close.offset(i as isize);
        if c > yc {
            sum +=
                c -
                    (if yc < *low.offset(i as isize) {
                         yc
                     } else { *low.offset(i as isize) })
        } else if c < yc {
            sum +=
                c -
                    (if yc > *high.offset(i as isize) {
                         yc
                     } else { *high.offset(i as isize) })
        }
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = sum;
        yc = *close.offset(i as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_wad_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_wad\x00")).as_ptr(),
                     b"indicators/wad.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 66 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_wad_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/wcprice.rs:30:1: 53:2
pub unsafe extern "C" fn ti_wcprice(mut size: std::os::raw::c_int,
                                    mut inputs: * const * const std::os::raw::c_double,
                                    mut options: * const std::os::raw::c_double,
                                    mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < size {
        *output.offset(i as isize) =
            (*high.offset(i as isize) + *low.offset(i as isize) +
                 *close.offset(i as isize) + *close.offset(i as isize)) *
                0.25f64;
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
indicators/wilders.rs:30:1: 34:2
pub unsafe extern "C" fn ti_wilders_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/wilders.rs:36:1: 78:2
pub unsafe extern "C" fn ti_wilders(mut size: std::os::raw::c_int,
                                    mut inputs: * const * const std::os::raw::c_double,
                                    mut options: * const std::os::raw::c_double,
                                    mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_wilders_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 = 1.0f64 / period as std::os::raw::c_double;
    let mut sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period { sum += *input.offset(i as isize); i += 1 }
    let mut val: f64 = sum / period as std::os::raw::c_double;
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = val;
    i = period;
    while i < size {
        val = (*input.offset(i as isize) - val) * per + val;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = val;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long ==
             (size - ti_wilders_start(options)) as std::os::raw::c_long) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 11], &'_ [i8; 11]>(b"ti_wilders\x00")).as_ptr(),
                     b"indicators/wilders.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 60 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_wilders_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/willr.rs:30:1: 34:2
pub unsafe extern "C" fn ti_willr_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/willr.rs:36:1: 115:2
pub unsafe extern "C" fn ti_willr(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut high: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let mut low: * const f64 =
        *inputs.offset(1 as std::os::raw::c_int as isize);
    let mut close: * const f64 =
        *inputs.offset(2 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_willr_start(options) { return 0 as std::os::raw::c_int }
    let mut trail: i32 = 0 as std::os::raw::c_int;
    let mut maxi: i32 = -(1 as std::os::raw::c_int);
    let mut mini: i32 = -(1 as std::os::raw::c_int);
    let mut max: f64 = *high.offset(0 as std::os::raw::c_int as isize);
    let mut min: f64 = *low.offset(0 as std::os::raw::c_int as isize);
    let mut bar: f64 = 0.;
    let mut i: i32 = 0;
    let mut j: i32 = 0;
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        /* Maintain highest. */
        bar = *high.offset(i as isize);
        if maxi < trail {
            maxi = trail;
            max = *high.offset(maxi as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *high.offset(j as isize);
                if bar >= max { max = bar; maxi = j }
            }
        } else if bar >= max { maxi = i; max = bar }
        /* Maintain lowest. */
        bar = *low.offset(i as isize);
        if mini < trail {
            mini = trail;
            min = *low.offset(mini as isize);
            j = trail;
            loop  {
                j += 1;
                if !(j <= i) { break ; }
                bar = *low.offset(j as isize);
                if bar <= min { min = bar; mini = j }
            }
        } else if bar <= min { mini = i; min = bar }
        /* Calculate it. */
        let highlow: f64 = max - min;
        let r: f64 =
            if highlow == 0.0f64 {
                0.0f64
            } else {
                (-(100 as std::os::raw::c_int) as std::os::raw::c_double) *
                    ((max - *close.offset(i as isize)) / highlow)
            };
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = r;
        i += 1;
        trail += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_willr_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 9], &'_ [i8; 9]>(b"ti_willr\x00")).as_ptr(),
                     b"indicators/willr.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 96 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_willr_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/wma.rs:30:1: 34:2
pub unsafe extern "C" fn ti_wma_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
               1 as std::os::raw::c_int;
}
indicators/wma.rs:36:1: 90:2
pub unsafe extern "C" fn ti_wma(mut size: std::os::raw::c_int,
                                mut inputs: * const * const std::os::raw::c_double,
                                mut options: * const std::os::raw::c_double,
                                mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_wma_start(options) { return 0 as std::os::raw::c_int }
    /* Weights for 6 period WMA:
     * 1 2 3 4 5 6
     */
    let weights: f64 =
        (period * (period + 1 as std::os::raw::c_int) / 2 as std::os::raw::c_int) as
            std::os::raw::c_double; /* Flat sum of previous numbers. */
    let mut sum: f64 =
        0 as std::os::raw::c_int as
            std::os::raw::c_double; /* Weighted sum of previous numbers. */
    let mut weight_sum: f64 = 0 as std::os::raw::c_int as std::os::raw::c_double;
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < period - 1 as std::os::raw::c_int {
        weight_sum +=
            *input.offset(i as isize) *
                (i + 1 as std::os::raw::c_int) as std::os::raw::c_double;
        sum += *input.offset(i as isize);
        i += 1
    }
    i = period - 1 as std::os::raw::c_int;
    while i < size {
        weight_sum += *input.offset(i as isize) * period as std::os::raw::c_double;
        sum += *input.offset(i as isize);
        let mut fresh0 = output;
        output = output.offset(1);
        *fresh0 = weight_sum / weights;
        weight_sum -= sum;
        sum -= *input.offset((i - period + 1 as std::os::raw::c_int) as isize);
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_wma_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 7], &'_ [i8; 7]>(b"ti_wma\x00")).as_ptr(),
                     b"indicators/wma.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 67 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_wma_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators/zlema.rs:30:1: 34:2
pub unsafe extern "C" fn ti_zlema_start(mut options: * const std::os::raw::c_double)
 -> std::os::raw::c_int {
    return (*options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int -
                1 as std::os::raw::c_int) / 2 as std::os::raw::c_int - 1 as std::os::raw::c_int;
}
indicators/zlema.rs:36:1: 80:2
pub unsafe extern "C" fn ti_zlema(mut size: std::os::raw::c_int,
                                  mut inputs: * const * const std::os::raw::c_double,
                                  mut options: * const std::os::raw::c_double,
                                  mut outputs: * const * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut input: * const f64 =
        *inputs.offset(0 as std::os::raw::c_int as isize);
    let period: i32 =
        *options.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int;
    let lag: i32 = (period - 1 as std::os::raw::c_int) / 2 as std::os::raw::c_int;
    let mut output: * mut f64 =
        *outputs.offset(0 as std::os::raw::c_int as isize);
    if period < 1 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if size <= ti_zlema_start(options) { return 0 as std::os::raw::c_int }
    let per: f64 =
        2 as std::os::raw::c_int as std::os::raw::c_double /
            (period as std::os::raw::c_double + 1 as std::os::raw::c_int as std::os::raw::c_double);
    let mut val: f64 =
        *input.offset((lag - 1 as std::os::raw::c_int) as isize);
    let mut fresh0 = output;
    output = output.offset(1);
    *fresh0 = val;
    let mut i: i32 = 0;
    i = lag;
    while i < size {
        let mut c: f64 = *input.offset(i as isize);
        let mut l: f64 = *input.offset((i - lag) as isize);
        val = (c + (c - l) - val) * per + val;
        let mut fresh1 = output;
        output = output.offset(1);
        *fresh1 = val;
        i += 1
    }
    if !(output.offset_from(*outputs.offset(0 as std::os::raw::c_int as
                                                         isize)) as
             std::os::raw::c_long == (size - ti_zlema_start(options)) as std::os::raw::c_long)
           as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 9], &'_ [i8; 9]>(b"ti_zlema\x00")).as_ptr(),
                     b"indicators/zlema.c\x00" as *const u8 as
                         *const std::os::raw::c_char, 59 as std::os::raw::c_int,
                     b"output - outputs[0] == size - ti_zlema_start(options)\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    return 0 as std::os::raw::c_int;
}
indicators_index.rs:678:4419: 9798:8
unsafe fn laertes_init_ti_indicators() {
ti_indicators = unsafe {
        [{
             let mut init =
                 ti_indicator_info{name:
                                       b"abs\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Absolute Value\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_abs_start),
                                   indicator:
                                       Some(ti_abs),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"abs\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"acos\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Arccosine\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_acos_start),
                                   indicator:
                                       Some(ti_acos),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"acos\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"ad\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Accumulation/Distribution Line\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_ad_start),
                                   indicator:
                                       Some(ti_ad),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 4 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"ad\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"add\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Addition\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_add_start),
                                   indicator:
                                       Some(ti_add),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"add\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"adosc\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Accumulation/Distribution Oscillator\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_adosc_start),
                                   indicator:
                                       Some(ti_adosc),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 4 as std::os::raw::c_int,
                                   options: 2 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"short period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"long period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"adosc\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"adx\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Average Directional Movement Index\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_adx_start),
                                   indicator:
                                       Some(ti_adx),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"dx\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"adxr\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Average Directional Movement Rating\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_adxr_start),
                                   indicator:
                                       Some(ti_adxr),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"dx\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"ao\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Awesome Oscillator\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_ao_start),
                                   indicator:
                                       Some(ti_ao),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"ao\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"apo\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Absolute Price Oscillator\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_apo_start),
                                   indicator:
                                       Some(ti_apo),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 2 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"short period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"long period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"apo\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"aroon\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Aroon\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_aroon_start),
                                   indicator:
                                       Some(ti_aroon),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 2 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"aroon_down\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"aroon_up\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"aroonosc\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Aroon Oscillator\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_aroonosc_start),
                                   indicator:
                                       Some(ti_aroonosc),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"aroonosc\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"asin\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Arcsine\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_asin_start),
                                   indicator:
                                       Some(ti_asin),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"asin\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"atan\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Arctangent\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_atan_start),
                                   indicator:
                                       Some(ti_atan),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"atan\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"atr\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Average True Range\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_atr_start),
                                   indicator:
                                       Some(ti_atr),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"atr\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"avgprice\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Average Price\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_avgprice_start),
                                   indicator:
                                       Some(ti_avgprice),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 4 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"open\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"avgprice\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"bbands\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Bollinger Bands\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_bbands_start),
                                   indicator:
                                       Some(ti_bbands),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 2 as std::os::raw::c_int,
                                   outputs: 3 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"stddev\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"bbands_lower\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"bbands_middle\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"bbands_upper\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"bop\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Balance of Power\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_bop_start),
                                   indicator:
                                       Some(ti_bop),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 4 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"open\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"bop\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"cci\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Commodity Channel Index\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_cci_start),
                                   indicator:
                                       Some(ti_cci),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"cci\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"ceil\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Ceiling\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_ceil_start),
                                   indicator:
                                       Some(ti_ceil),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"ceil\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"cmo\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Chande Momentum Oscillator\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_cmo_start),
                                   indicator:
                                       Some(ti_cmo),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"cmo\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"cos\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Cosine\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_cos_start),
                                   indicator:
                                       Some(ti_cos),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"cos\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"cosh\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Hyperbolic Cosine\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_cosh_start),
                                   indicator:
                                       Some(ti_cosh),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"cosh\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"crossany\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Crossany\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_crossany_start),
                                   indicator:
                                       Some(ti_crossany),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"crossany\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"crossover\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Crossover\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_crossover_start),
                                   indicator:
                                       Some(ti_crossover),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"crossover\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"cvi\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Chaikins Volatility\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_cvi_start),
                                   indicator:
                                       Some(ti_cvi),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"cvi\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"decay\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Linear Decay\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_decay_start),
                                   indicator:
                                       Some(ti_decay),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"decay\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"dema\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Double Exponential Moving Average\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_dema_start),
                                   indicator:
                                       Some(ti_dema),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"dema\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"di\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Directional Indicator\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_di_start),
                                   indicator:
                                       Some(ti_di),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 2 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"plus_di\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"minus_di\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"div\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Division\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_div_start),
                                   indicator:
                                       Some(ti_div),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"div\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"dm\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Directional Movement\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_dm_start),
                                   indicator:
                                       Some(ti_dm),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 2 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"plus_dm\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"minus_dm\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"dpo\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Detrended Price Oscillator\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_dpo_start),
                                   indicator:
                                       Some(ti_dpo),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"dpo\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"dx\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Directional Movement Index\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_dx_start),
                                   indicator:
                                       Some(ti_dx),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"dx\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"edecay\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Exponential Decay\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_edecay_start),
                                   indicator:
                                       Some(ti_edecay),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"edecay\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"ema\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Exponential Moving Average\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_ema_start),
                                   indicator:
                                       Some(ti_ema),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"ema\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"emv\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Ease of Movement\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_emv_start),
                                   indicator:
                                       Some(ti_emv),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"emv\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"exp\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Exponential\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_exp_start),
                                   indicator:
                                       Some(ti_exp),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"exp\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"fisher\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Fisher Transform\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_fisher_start),
                                   indicator:
                                       Some(ti_fisher),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 2 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"fisher\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"fisher_signal\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"floor\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Floor\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_floor_start),
                                   indicator:
                                       Some(ti_floor),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"floor\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"fosc\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Forecast Oscillator\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_fosc_start),
                                   indicator:
                                       Some(ti_fosc),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"fosc\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"hma\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Hull Moving Average\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_hma_start),
                                   indicator:
                                       Some(ti_hma),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"hma\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"kama\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Kaufman Adaptive Moving Average\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_kama_start),
                                   indicator:
                                       Some(ti_kama),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"kama\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"kvo\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Klinger Volume Oscillator\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_kvo_start),
                                   indicator:
                                       Some(ti_kvo),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 4 as std::os::raw::c_int,
                                   options: 2 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"short period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"long period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"kvo\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"lag\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Lag\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_lag_start),
                                   indicator:
                                       Some(ti_lag),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"lag\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"linreg\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Linear Regression\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_linreg_start),
                                   indicator:
                                       Some(ti_linreg),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"linreg\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"linregintercept\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Linear Regression Intercept\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_linregintercept_start),
                                   indicator:
                                       Some(ti_linregintercept),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"linregintercept\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"linregslope\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Linear Regression Slope\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_linregslope_start),
                                   indicator:
                                       Some(ti_linregslope),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"linregslope\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"ln\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Natural Log\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_ln_start),
                                   indicator:
                                       Some(ti_ln),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"ln\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"log10\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Base-10 Log\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_log10_start),
                                   indicator:
                                       Some(ti_log10),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"log10\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"macd\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Moving Average Convergence/Divergence\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_macd_start),
                                   indicator:
                                       Some(ti_macd),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 3 as std::os::raw::c_int,
                                   outputs: 3 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"short period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"long period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"signal period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"macd\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"macd_signal\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"macd_histogram\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"marketfi\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Market Facilitation Index\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_marketfi_start),
                                   indicator:
                                       Some(ti_marketfi),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"marketfi\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"mass\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Mass Index\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_mass_start),
                                   indicator:
                                       Some(ti_mass),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"mass\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"max\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Maximum In Period\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_max_start),
                                   indicator:
                                       Some(ti_max),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"max\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"md\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Mean Deviation Over Period\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_md_start),
                                   indicator:
                                       Some(ti_md),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"md\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"medprice\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Median Price\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_medprice_start),
                                   indicator:
                                       Some(ti_medprice),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"medprice\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"mfi\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Money Flow Index\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_mfi_start),
                                   indicator:
                                       Some(ti_mfi),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 4 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"mfi\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"min\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Minimum In Period\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_min_start),
                                   indicator:
                                       Some(ti_min),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"min\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"mom\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Momentum\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_mom_start),
                                   indicator:
                                       Some(ti_mom),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"mom\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"msw\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Mesa Sine Wave\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_msw_start),
                                   indicator:
                                       Some(ti_msw),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 2 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"msw_sine\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"msw_lead\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"mul\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Multiplication\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_mul_start),
                                   indicator:
                                       Some(ti_mul),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"mul\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"natr\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Normalized Average True Range\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_natr_start),
                                   indicator:
                                       Some(ti_natr),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"natr\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"nvi\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Negative Volume Index\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_nvi_start),
                                   indicator:
                                       Some(ti_nvi),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"nvi\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"obv\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"On Balance Volume\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_obv_start),
                                   indicator:
                                       Some(ti_obv),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"obv\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"ppo\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Percentage Price Oscillator\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_ppo_start),
                                   indicator:
                                       Some(ti_ppo),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 2 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"short period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"long period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"ppo\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"psar\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Parabolic SAR\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_psar_start),
                                   indicator:
                                       Some(ti_psar),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 2 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"acceleration factor step\x00" as
                                            *const u8 as *const std::os::raw::c_char
                                            as *mut std::os::raw::c_char,
                                        b"acceleration factor maximum\x00" as
                                            *const u8 as *const std::os::raw::c_char
                                            as *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"psar\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"pvi\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Positive Volume Index\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_pvi_start),
                                   indicator:
                                       Some(ti_pvi),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"pvi\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"qstick\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Qstick\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_qstick_start),
                                   indicator:
                                       Some(ti_qstick),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"open\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"qstick\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"roc\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Rate of Change\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_roc_start),
                                   indicator:
                                       Some(ti_roc),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"roc\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"rocr\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Rate of Change Ratio\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_rocr_start),
                                   indicator:
                                       Some(ti_rocr),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"rocr\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"round\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Round\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_round_start),
                                   indicator:
                                       Some(ti_round),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"round\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"rsi\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Relative Strength Index\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_rsi_start),
                                   indicator:
                                       Some(ti_rsi),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"rsi\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"sin\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Sine\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_sin_start),
                                   indicator:
                                       Some(ti_sin),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"sin\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"sinh\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Hyperbolic Sine\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_sinh_start),
                                   indicator:
                                       Some(ti_sinh),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"sinh\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"sma\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Simple Moving Average\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_sma_start),
                                   indicator:
                                       Some(ti_sma),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"sma\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"sqrt\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Square Root\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_sqrt_start),
                                   indicator:
                                       Some(ti_sqrt),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"sqrt\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"stddev\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Standard Deviation Over Period\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_stddev_start),
                                   indicator:
                                       Some(ti_stddev),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"stddev\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"stderr\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Standard Error Over Period\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_stderr_start),
                                   indicator:
                                       Some(ti_stderr),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"stderr\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"stoch\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Stochastic Oscillator\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_stoch_start),
                                   indicator:
                                       Some(ti_stoch),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 3 as std::os::raw::c_int,
                                   outputs: 2 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"%k period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"%k slowing period\x00" as *const u8
                                            as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"%d period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"stoch_k\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"stoch_d\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"stochrsi\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Stochastic RSI\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_stochrsi_start),
                                   indicator:
                                       Some(ti_stochrsi),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"stochrsi\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"sub\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Subtraction\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_sub_start),
                                   indicator:
                                       Some(ti_sub),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"sub\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"sum\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Sum Over Period\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_sum_start),
                                   indicator:
                                       Some(ti_sum),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"sum\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"tan\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Tangent\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_tan_start),
                                   indicator:
                                       Some(ti_tan),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"tan\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"tanh\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Hyperbolic Tangent\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_tanh_start),
                                   indicator:
                                       Some(ti_tanh),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"tanh\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"tema\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Triple Exponential Moving Average\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_tema_start),
                                   indicator:
                                       Some(ti_tema),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"tema\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"todeg\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Degree Conversion\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_todeg_start),
                                   indicator:
                                       Some(ti_todeg),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"degrees\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"torad\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Radian Conversion\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_torad_start),
                                   indicator:
                                       Some(ti_torad),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"radians\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"tr\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"True Range\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_tr_start),
                                   indicator:
                                       Some(ti_tr),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"tr\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"trima\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Triangular Moving Average\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_trima_start),
                                   indicator:
                                       Some(ti_trima),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"trima\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"trix\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Trix\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_trix_start),
                                   indicator:
                                       Some(ti_trix),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"trix\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"trunc\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vector Truncate\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_trunc_start),
                                   indicator:
                                       Some(ti_trunc),
                                   type_0: 4 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"trunc\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"tsf\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Time Series Forecast\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_tsf_start),
                                   indicator:
                                       Some(ti_tsf),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"tsf\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"typprice\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Typical Price\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_typprice_start),
                                   indicator:
                                       Some(ti_typprice),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"typprice\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"ultosc\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Ultimate Oscillator\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_ultosc_start),
                                   indicator:
                                       Some(ti_ultosc),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 3 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"short period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"medium period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"long period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"ultosc\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"var\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Variance Over Period\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_var_start),
                                   indicator:
                                       Some(ti_var),
                                   type_0: 3 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"var\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"vhf\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Vertical Horizontal Filter\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_vhf_start),
                                   indicator:
                                       Some(ti_vhf),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"vhf\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"vidya\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Variable Index Dynamic Average\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_vidya_start),
                                   indicator:
                                       Some(ti_vidya),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 3 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"short period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"long period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"alpha\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"vidya\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"volatility\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Annualized Historical Volatility\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_volatility_start),
                                   indicator:
                                       Some(ti_volatility),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"volatility\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"vosc\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Volume Oscillator\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_vosc_start),
                                   indicator:
                                       Some(ti_vosc),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 2 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"short period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"long period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"vosc\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"vwma\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Volume Weighted Moving Average\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_vwma_start),
                                   indicator:
                                       Some(ti_vwma),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 2 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"volume\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"vwma\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"wad\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Williams Accumulation/Distribution\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_wad_start),
                                   indicator:
                                       Some(ti_wad),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"wad\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"wcprice\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Weighted Close Price\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_wcprice_start),
                                   indicator:
                                       Some(ti_wcprice),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"wcprice\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"wilders\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Wilders Smoothing\x00" as *const u8
                                           as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_wilders_start),
                                   indicator:
                                       Some(ti_wilders),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"wilders\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"willr\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Williams %R\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_willr_start),
                                   indicator:
                                       Some(ti_willr),
                                   type_0: 2 as std::os::raw::c_int,
                                   inputs: 3 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"high\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"low\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        b"close\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"willr\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"wma\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Weighted Moving Average\x00" as
                                           *const u8 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_wma_start),
                                   indicator:
                                       Some(ti_wma),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"wma\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       b"zlema\x00" as *const u8 as
                                           *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       b"Zero-Lag Exponential Moving Average\x00"
                                           as *const u8 as *const std::os::raw::c_char
                                           as *mut std::os::raw::c_char,
                                   start:
                                       Some(ti_zlema_start),
                                   indicator:
                                       Some(ti_zlema),
                                   type_0: 1 as std::os::raw::c_int,
                                   inputs: 1 as std::os::raw::c_int,
                                   options: 1 as std::os::raw::c_int,
                                   outputs: 1 as std::os::raw::c_int,
                                   input_names:
                                       [b"real\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [b"period\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [b"zlema\x00" as *const u8 as
                                            *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         },
         {
             let mut init =
                 ti_indicator_info{name:
                                       0 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   full_name:
                                       0 as *const std::os::raw::c_char as
                                           *mut std::os::raw::c_char,
                                   start: None,
                                   indicator: None,
                                   type_0: 0 as std::os::raw::c_int,
                                   inputs: 0 as std::os::raw::c_int,
                                   options: 0 as std::os::raw::c_int,
                                   outputs: 0 as std::os::raw::c_int,
                                   input_names:
                                       [0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   option_names:
                                       [0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],
                                   output_names:
                                       [0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char,
                                        0 as *const std::os::raw::c_char as
                                            *mut std::os::raw::c_char],};
             init
         }]
    };}
indicators_index.rs:9800:1: 9825:2
pub unsafe extern "C" fn ti_find_indicator(mut name: * const std::os::raw::c_char)
 -> * const crate::example2::ti_indicator_info {
    let mut imin: i32 = 0 as std::os::raw::c_int;
    let mut imax: i32 =
        (::std::mem::size_of::<[ti_indicator_info; 105]>() as
             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<ti_indicator_info>()
                                             as
                                             std::os::raw::c_ulong).wrapping_sub(2 as
                                                                             std::os::raw::c_int
                                                                             as
                                                                             std::os::raw::c_ulong)
            as std::os::raw::c_int;
    /*Binary search.*/
    while imax >= imin {
        let i: i32 = imin + (imax - imin) / 2 as std::os::raw::c_int;
        let c: i32 = strcmp(name, ti_indicators[i as usize].name);
        if c == 0 as std::os::raw::c_int {
            return ti_indicators.as_mut_ptr().offset(i as isize)
        } else {
            if c > 0 as std::os::raw::c_int {
                imin = i + 1 as std::os::raw::c_int
            } else { imax = i - 1 as std::os::raw::c_int }
        }
    }
    return (0 as * const crate::example2::ti_indicator_info);
}
sample.rs:25:376: 26:22
unsafe fn laertes_init_out() {
out = [[0.; 15]; 5];}
sample.rs:30:549: 45:70
unsafe fn laertes_init_datet() {
datet = [b"2005-11-01\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-02\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-03\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-04\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-07\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-08\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-09\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-10\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-11\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-14\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-15\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-16\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-17\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-18\x00" as *const u8 as *const std::os::raw::c_char,
     b"2005-11-21\x00" as *const u8 as *const std::os::raw::c_char];}
sample.rs:48:69: 63:63
unsafe fn laertes_init_date() {
date = [51101 as std::os::raw::c_int as std::os::raw::c_double,
     51102 as std::os::raw::c_int as std::os::raw::c_double,
     51103 as std::os::raw::c_int as std::os::raw::c_double,
     51104 as std::os::raw::c_int as std::os::raw::c_double,
     51107 as std::os::raw::c_int as std::os::raw::c_double,
     51108 as std::os::raw::c_int as std::os::raw::c_double,
     51109 as std::os::raw::c_int as std::os::raw::c_double,
     51110 as std::os::raw::c_int as std::os::raw::c_double,
     51111 as std::os::raw::c_int as std::os::raw::c_double,
     51114 as std::os::raw::c_int as std::os::raw::c_double,
     51115 as std::os::raw::c_int as std::os::raw::c_double,
     51116 as std::os::raw::c_int as std::os::raw::c_double,
     51117 as std::os::raw::c_int as std::os::raw::c_double,
     51118 as std::os::raw::c_int as std::os::raw::c_double,
     51121 as std::os::raw::c_int as std::os::raw::c_double];}
sample.rs:66:69: 69:69
unsafe fn laertes_init_open() {
open = [81.85f64, 81.2f64, 81.55f64, 82.91f64, 83.1f64, 83.41f64, 82.71f64,
     82.7f64, 84.2f64, 84.25f64, 84.03f64, 85.45f64, 86.18f64,
     88 as std::os::raw::c_int as std::os::raw::c_double, 87.6f64];}
sample.rs:72:69: 75:90
unsafe fn laertes_init_high() {
high = [82.15f64, 81.89f64, 83.03f64, 83.3f64, 83.85f64, 83.9f64, 83.33f64,
     84.3f64, 84.84f64, 85 as std::os::raw::c_int as std::os::raw::c_double, 85.9f64,
     86.58f64, 86.98f64, 88 as std::os::raw::c_int as std::os::raw::c_double, 87.87f64];}
sample.rs:78:69: 81:17
unsafe fn laertes_init_low() {
low = [81.29f64, 80.64f64, 81.31f64, 82.65f64, 83.07f64, 83.11f64, 82.49f64,
     82.3f64, 84.15f64, 84.11f64, 84.03f64, 85.39f64, 85.76f64, 87.17f64,
     87.01f64];}
sample.rs:84:69: 87:47
unsafe fn laertes_init_close() {
close = [81.59f64, 81.06f64, 82.87f64, 83 as std::os::raw::c_int as std::os::raw::c_double,
     83.61f64, 83.15f64, 82.84f64, 83.99f64, 84.55f64, 84.36f64, 85.53f64,
     86.54f64, 86.89f64, 87.77f64, 87.29f64];}
sample.rs:90:69: 105:65
unsafe fn laertes_init_volume() {
volume = [5653100 as std::os::raw::c_int as std::os::raw::c_double,
     6447400 as std::os::raw::c_int as std::os::raw::c_double,
     7690900 as std::os::raw::c_int as std::os::raw::c_double,
     3831400 as std::os::raw::c_int as std::os::raw::c_double,
     4455100 as std::os::raw::c_int as std::os::raw::c_double,
     3798000 as std::os::raw::c_int as std::os::raw::c_double,
     3936200 as std::os::raw::c_int as std::os::raw::c_double,
     4732000 as std::os::raw::c_int as std::os::raw::c_double,
     4841300 as std::os::raw::c_int as std::os::raw::c_double,
     3915300 as std::os::raw::c_int as std::os::raw::c_double,
     6830800 as std::os::raw::c_int as std::os::raw::c_double,
     6694100 as std::os::raw::c_int as std::os::raw::c_double,
     5293600 as std::os::raw::c_int as std::os::raw::c_double,
     7985800 as std::os::raw::c_int as std::os::raw::c_double,
     4807900 as std::os::raw::c_int as std::os::raw::c_double];}
sample.rs:108:69: 111:41
unsafe fn laertes_init_alternative() {
alternative = [0.2f64, 0.3f64, 0.4f64, 0.3f64, 0.5f64, 0.7f64, 0.75f64, 0.9f64, 0.9f64,
     1 as std::os::raw::c_int as std::os::raw::c_double, 1 as std::os::raw::c_int as std::os::raw::c_double,
     0.2f64, 0.1f64, -0.1f64, -0.5f64];}
sample.rs:112:1: 416:2
unsafe fn main_0(mut argc: std::os::raw::c_int, mut argv: * mut * mut std::os::raw::c_char)
 -> std::os::raw::c_int {
    let mut info: * const crate::example2::ti_indicator_info = ti_indicators.as_mut_ptr();
    if argc < 2 as std::os::raw::c_int {
        printf(b"No indicator given.\n\x00" as *const u8 as
                   *const std::os::raw::c_char);
        printf(b"Example:\n\x00" as *const u8 as *const std::os::raw::c_char);
        printf(b"\tsample ma 5\x00" as *const u8 as *const std::os::raw::c_char);
        return 1 as std::os::raw::c_int
    }
    if strcmp(*argv.offset(1 as std::os::raw::c_int as isize),
              b"--version\x00" as *const u8 as *const std::os::raw::c_char) ==
           0 as std::os::raw::c_int {
        printf(b"TI VERSION: %s, TI BUILD: %d\n\x00" as *const u8 as
                   *const std::os::raw::c_char,
               b"0.8.4\x00" as *const u8 as *const std::os::raw::c_char,
               1537377628 as std::os::raw::c_int);
        return 0 as std::os::raw::c_int
    }
    if strcmp(*argv.offset(1 as std::os::raw::c_int as isize),
              b"--list\x00" as *const u8 as *const std::os::raw::c_char) ==
           0 as std::os::raw::c_int {
        loop  {
            if (*info).type_0 == 1 as std::os::raw::c_int {
                printf(b"type overlay \x00" as *const u8 as
                           *const std::os::raw::c_char);
            } else if (*info).type_0 == 2 as std::os::raw::c_int {
                printf(b"type indicator \x00" as *const u8 as
                           *const std::os::raw::c_char);
            } else if (*info).type_0 == 3 as std::os::raw::c_int {
                printf(b"type math \x00" as *const u8 as *const std::os::raw::c_char);
            } else if (*info).type_0 == 4 as std::os::raw::c_int {
                printf(b"type simple \x00" as *const u8 as
                           *const std::os::raw::c_char);
            } else {
                printf(b"type unknown \x00" as *const u8 as
                           *const std::os::raw::c_char);
            }
            printf(b"name %s \x00" as *const u8 as *const std::os::raw::c_char,
                   (*info).name);
            printf(b"full_name {%s} \x00" as *const u8 as *const std::os::raw::c_char,
                   (*info).full_name);
            let mut i: i32 = 0;
            printf(b"inputs {\x00" as *const u8 as *const std::os::raw::c_char);
            i = 0 as std::os::raw::c_int;
            while i < (*info).inputs {
                printf(b"%s%s\x00" as *const u8 as *const std::os::raw::c_char,
                       if i != 0 {
                           b" \x00" as *const u8 as *const std::os::raw::c_char
                       } else { b"\x00" as *const u8 as *const std::os::raw::c_char },
                       (*info).input_names[i as usize]);
                i += 1
            }
            printf(b"} \x00" as *const u8 as *const std::os::raw::c_char);
            printf(b"options {\x00" as *const u8 as *const std::os::raw::c_char);
            i = 0 as std::os::raw::c_int;
            while i < (*info).options {
                printf(b"%s{%s}\x00" as *const u8 as *const std::os::raw::c_char,
                       if i != 0 {
                           b" \x00" as *const u8 as *const std::os::raw::c_char
                       } else { b"\x00" as *const u8 as *const std::os::raw::c_char },
                       (*info).option_names[i as usize]);
                i += 1
            }
            printf(b"} \x00" as *const u8 as *const std::os::raw::c_char);
            printf(b"outputs {\x00" as *const u8 as *const std::os::raw::c_char);
            i = 0 as std::os::raw::c_int;
            while i < (*info).outputs {
                printf(b"%s{%s}\x00" as *const u8 as *const std::os::raw::c_char,
                       if i != 0 {
                           b" \x00" as *const u8 as *const std::os::raw::c_char
                       } else { b"\x00" as *const u8 as *const std::os::raw::c_char },
                       (*info).output_names[i as usize]);
                i += 1
            }
            printf(b"}\x00" as *const u8 as *const std::os::raw::c_char);
            printf(b"\n\x00" as *const u8 as *const std::os::raw::c_char);
            info = info.offset(1);
            if (*info).name.is_null() { break ; }
        }
        return 0 as std::os::raw::c_int
    }
    info = ti_find_indicator(*argv.offset(1 as std::os::raw::c_int as isize));
    if info.is_null() {
        printf(b"Couldn\'t find indicator: %s\n\x00" as *const u8 as
                   *const std::os::raw::c_char,
               *argv.offset(1 as std::os::raw::c_int as isize));
        return 1 as std::os::raw::c_int
    }
    let mut inputs: [* const f64; 5] =
        [0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,
         0 as *const std::os::raw::c_double, 0 as *const std::os::raw::c_double,
         0 as *const std::os::raw::c_double];
    let mut outputs: [* mut f64; 5] =
        [out[0 as std::os::raw::c_int as usize].as_mut_ptr(),
         out[1 as std::os::raw::c_int as usize].as_mut_ptr(),
         out[2 as std::os::raw::c_int as usize].as_mut_ptr(),
         out[3 as std::os::raw::c_int as usize].as_mut_ptr(),
         out[4 as std::os::raw::c_int as usize].as_mut_ptr()];
    let mut o: i32 = 0 as std::os::raw::c_int;
    let mut h: i32 = 0 as std::os::raw::c_int;
    let mut l: i32 = 0 as std::os::raw::c_int;
    let mut c: i32 = 0 as std::os::raw::c_int;
    let mut r: i32 = 0 as std::os::raw::c_int;
    let mut r2: i32 = 0 as std::os::raw::c_int;
    let mut v: i32 = 0 as std::os::raw::c_int;
    let mut a: i32 = 0 as std::os::raw::c_int;
    /* Setup the inputs. */
    let mut j: i32 = 0;
    j = 0 as std::os::raw::c_int;
    while j < (*info).inputs {
        if strcmp((*info).input_names[j as usize],
                  b"open\x00" as *const u8 as *const std::os::raw::c_char) ==
               0 as std::os::raw::c_int {
            inputs[j as usize] = open.as_mut_ptr();
            o = 1 as std::os::raw::c_int
        } else if strcmp((*info).input_names[j as usize],
                         b"high\x00" as *const u8 as *const std::os::raw::c_char) ==
                      0 as std::os::raw::c_int {
            inputs[j as usize] = high.as_mut_ptr();
            h = 1 as std::os::raw::c_int
        } else if strcmp((*info).input_names[j as usize],
                         b"low\x00" as *const u8 as *const std::os::raw::c_char) ==
                      0 as std::os::raw::c_int {
            inputs[j as usize] = low.as_mut_ptr();
            l = 1 as std::os::raw::c_int
        } else if strcmp((*info).input_names[j as usize],
                         b"close\x00" as *const u8 as *const std::os::raw::c_char) ==
                      0 as std::os::raw::c_int {
            inputs[j as usize] = close.as_mut_ptr();
            c = 1 as std::os::raw::c_int
        } else if strcmp((*info).input_names[j as usize],
                         b"volume\x00" as *const u8 as *const std::os::raw::c_char) ==
                      0 as std::os::raw::c_int {
            inputs[j as usize] = volume.as_mut_ptr();
            v = 1 as std::os::raw::c_int
        } else if strcmp((*info).input_names[j as usize],
                         b"real\x00" as *const u8 as *const std::os::raw::c_char) ==
                      0 as std::os::raw::c_int {
            if r == 0 {
                inputs[j as usize] = close.as_mut_ptr();
                r = 1 as std::os::raw::c_int
            } else {
                inputs[j as usize] = open.as_mut_ptr();
                r2 = 1 as std::os::raw::c_int
            }
        } else {
            if (0 as std::os::raw::c_int == 0) as std::os::raw::c_int as std::os::raw::c_long != 0 {
                __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                             b"sample.c\x00" as *const u8 as
                                 *const std::os::raw::c_char, 144 as std::os::raw::c_int,
                             b"0\x00" as *const u8 as *const std::os::raw::c_char);
            } else { };
        }
        j += 1
    }
    /* See if we need alternative inputs (for the indicators that can't take large numbers. */
    let mut alts: [* const i8; 8] =
        [b"acos\x00" as *const u8 as *const std::os::raw::c_char,
         b"asin\x00" as *const u8 as *const std::os::raw::c_char,
         b"atan\x00" as *const u8 as *const std::os::raw::c_char,
         b"cosh\x00" as *const u8 as *const std::os::raw::c_char,
         b"sinh\x00" as *const u8 as *const std::os::raw::c_char,
         b"tanh\x00" as *const u8 as *const std::os::raw::c_char,
         b"todeg\x00" as *const u8 as *const std::os::raw::c_char,
         0 as *const std::os::raw::c_char];
    let mut alt: * mut * const i8 = alts.as_mut_ptr();
    while !(*alt).is_null() {
        if strcmp(*alt, (*info).name) == 0 as std::os::raw::c_int {
            r = 0 as std::os::raw::c_int;
            a = 1 as std::os::raw::c_int;
            j = 0 as std::os::raw::c_int;
            while j < (*info).inputs {
                inputs[j as usize] = alternative.as_mut_ptr();
                j += 1
            }
            break ;
        } else { alt = alt.offset(1) }
    }
    /* Set options, save offset. */
    let mut options: [f64; 10] = [0.; 10];
    let mut i_0: i32 = 0;
    i_0 = 0 as std::os::raw::c_int;
    while i_0 < (*info).options {
        if argc < 3 as std::os::raw::c_int + i_0 {
            printf(b"*ERROR NOT ENOUGH OPTIONS*\n\x00" as *const u8 as
                       *const std::os::raw::c_char);
            return 1 as std::os::raw::c_int
        }
        options[i_0 as usize] =
            atof(*argv.offset((2 as std::os::raw::c_int + i_0) as isize));
        i_0 += 1
    }
    let mut start: i32 =
        (*info).start.expect("non-null function pointer")(options.as_mut_ptr());
    /* Run it. */
    let ret: i32 =
        (*info).indicator.expect("non-null function pointer")(15 as
                                                                  std::os::raw::c_int,
                                                              inputs.as_mut_ptr(),
                                                              options.as_mut_ptr(),
                                                              outputs.as_mut_ptr());
    if ret == 0 as std::os::raw::c_int {
        let mut i_1: i32 = 0;
        let mut k: i32 = 0;
        let mut bad: i32 = 0 as std::os::raw::c_int;
        printf(b"date        \x00" as *const u8 as *const std::os::raw::c_char);
        if o != 0 {
            printf(b" open   \x00" as *const u8 as *const std::os::raw::c_char);
        }
        if h != 0 {
            printf(b" high   \x00" as *const u8 as *const std::os::raw::c_char);
        }
        if l != 0 {
            printf(b" low    \x00" as *const u8 as *const std::os::raw::c_char);
        }
        if c != 0 {
            printf(b" close  \x00" as *const u8 as *const std::os::raw::c_char);
        }
        if v != 0 {
            printf(b" volume \x00" as *const u8 as *const std::os::raw::c_char);
        }
        if r != 0 {
            printf(b" input  \x00" as *const u8 as *const std::os::raw::c_char);
        }
        if r2 != 0 {
            printf(b" input2  \x00" as *const u8 as *const std::os::raw::c_char);
        }
        if a != 0 {
            printf(b" input  \x00" as *const u8 as *const std::os::raw::c_char);
        }
        i_1 = 0 as std::os::raw::c_int;
        while i_1 < (*info).outputs {
            printf(b" %s\x00" as *const u8 as *const std::os::raw::c_char,
                   (*info).output_names[i_1 as usize]);
            i_1 += 1
        }
        printf(b"\n\x00" as *const u8 as *const std::os::raw::c_char);
        i_1 = 0 as std::os::raw::c_int;
        while i_1 < 15 as std::os::raw::c_int {
            printf(b"%s\x00" as *const u8 as *const std::os::raw::c_char,
                   datet[i_1 as usize]);
            if o != 0 {
                printf(b" %8.2f\x00" as *const u8 as *const std::os::raw::c_char,
                       open[i_1 as usize]);
            }
            if h != 0 {
                printf(b" %8.2f\x00" as *const u8 as *const std::os::raw::c_char,
                       high[i_1 as usize]);
            }
            if l != 0 {
                printf(b" %8.2f\x00" as *const u8 as *const std::os::raw::c_char,
                       low[i_1 as usize]);
            }
            if c != 0 {
                printf(b" %8.2f\x00" as *const u8 as *const std::os::raw::c_char,
                       close[i_1 as usize]);
            }
            if v != 0 {
                printf(b" %8.0f\x00" as *const u8 as *const std::os::raw::c_char,
                       volume[i_1 as usize]);
            }
            if r != 0 {
                printf(b" %8.2f\x00" as *const u8 as *const std::os::raw::c_char,
                       close[i_1 as usize]);
            }
            if r2 != 0 {
                printf(b" %8.2f\x00" as *const u8 as *const std::os::raw::c_char,
                       open[i_1 as usize]);
            }
            if a != 0 {
                printf(b" %8.2f\x00" as *const u8 as *const std::os::raw::c_char,
                       alternative[i_1 as usize]);
            }
            if i_1 >= start {
                k = 0 as std::os::raw::c_int;
                while k < (*info).outputs {
                    if out[k as usize][(i_1 - start) as usize] !=
                           out[k as usize][(i_1 - start) as usize] {
                        bad = 1 as std::os::raw::c_int
                    }
                    printf(b" %8.3f\x00" as *const u8 as *const std::os::raw::c_char,
                           out[k as usize][(i_1 - start) as usize]);
                    k += 1
                }
            }
            printf(b"\n\x00" as *const u8 as *const std::os::raw::c_char);
            i_1 += 1
        }
        if bad != 0 {
            printf(b"\nERROR NaN in outputs (%s).\n\x00" as *const u8 as
                       *const std::os::raw::c_char, (*info).name);
            return 1 as std::os::raw::c_int
        }
        return 0 as std::os::raw::c_int
    } else {
        if ret == 1 as std::os::raw::c_int {
            printf(b"*ERROR INVALID OPTION*\n\x00" as *const u8 as
                       *const std::os::raw::c_char);
        } else {
            printf(b"*ERROR*\n\x00" as *const u8 as *const std::os::raw::c_char);
        }
        return 1 as std::os::raw::c_int
    };
}
sample.rs:423:5: 427:6
unsafe {
        ::std::process::exit(main_0((args.len() - 1) as std::os::raw::c_int,
                                    args.as_mut_ptr() as
                                        *mut *mut std::os::raw::c_char) as i32)
    }
smoke.rs:135:45: 136:36
unsafe fn laertes_init_lfails() {
lfails = 0 as std::os::raw::c_int;}
smoke.rs:137:45: 138:36
unsafe fn laertes_init_ltests() {
ltests = 0 as std::os::raw::c_int;}
smoke.rs:163:217: 168:46
unsafe fn laertes_init_tested() {
tested = [0 as std::os::raw::c_int, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];}
smoke.rs:171:1: 199:2
pub unsafe extern "C" fn compare_arrays(mut a: * mut std::os::raw::c_double,
                                        mut b: * mut std::os::raw::c_double,
                                        mut size_a: std::os::raw::c_int,
                                        mut size_b: std::os::raw::c_int) {
    let mut i: i32 = 0;
    ltests += 1;
    if size_a != size_b {
        lfails += 1;
        printf(b"%s:%d (%d != %d)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               36 as std::os::raw::c_int, size_a, size_b);
    }
    if size_a != size_b {
        printf(b"Size mismatch.\n\x00" as *const u8 as *const std::os::raw::c_char);
    }
    i = 0 as std::os::raw::c_int;
    while i < size_a {
        ltests += 1;
        if fabs(*a.offset(i as isize) - *b.offset(i as isize)) > 0.001f64 {
            lfails += 1;
            printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as
                       *const std::os::raw::c_char,
                   b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
                   42 as std::os::raw::c_int, *a.offset(i as isize),
                   *b.offset(i as isize));
        }
        i += 1
    };
}
smoke.rs:202:1: 220:2
pub unsafe extern "C" fn next_line(mut fp: * mut crate::smoke::__sFILE) -> * mut std::os::raw::c_char {
    static mut buf: [std::os::raw::c_char; 1024] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,]; unsafe fn laertes_init_buf() {
buf = [0; 1024];}//;
    while !fgets(buf.as_mut_ptr(), 1024 as std::os::raw::c_int, fp).is_null() {
        /*Skip Comments*/
        if buf[0 as std::os::raw::c_int as usize] as std::os::raw::c_int == '#' as i32 {
            continue ;
        }
        /*Skip blank lines*/
        if buf[0 as std::os::raw::c_int as usize] as std::os::raw::c_int == 10 as std::os::raw::c_int
               ||
               buf[0 as std::os::raw::c_int as usize] as std::os::raw::c_int ==
                   13 as std::os::raw::c_int {
            continue ;
        }
        return buf.as_mut_ptr()
    }
    return 0 as *mut std::os::raw::c_char;
}
smoke.rs:203:2104: 204:18
unsafe fn laertes_init_buf() {
buf = [0; 1024];}
smoke.rs:223:1: 253:2
pub unsafe extern "C" fn get_array(mut fp: * mut crate::smoke::__sFILE,
                                   mut s: * mut std::os::raw::c_double)
 -> std::os::raw::c_int {
    let mut line: * mut i8 = next_line(fp);
    if *line.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int != '{' as i32 {
        printf(b"Bad input\n\x00" as *const u8 as *const std::os::raw::c_char);
        ltests += 1;
        if 0 as std::os::raw::c_int == 0 {
            lfails += 1;
            printf(b"%s:%d error \n\x00" as *const u8 as *const std::os::raw::c_char,
                   b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
                   70 as std::os::raw::c_int);
        }
        return 0 as std::os::raw::c_int
    }
    //#pragma warning(disable:4996) //MSVC
    let mut num: * mut i8 =
        strtok(line.offset(1 as std::os::raw::c_int as isize),
               b",}\r\n\x00" as *const u8 as *const std::os::raw::c_char);
    if num.is_null() { return 0 as std::os::raw::c_int }
    let mut inp: * mut f64 = s;
    loop  {
        *inp = atof(num);
        inp = inp.offset(1);
        num =
            strtok(0 as *mut std::os::raw::c_char,
                   b",}\r\n\x00" as *const u8 as *const std::os::raw::c_char);
        if num.is_null() { break ; }
    }
    return inp.offset_from(s) as std::os::raw::c_long as std::os::raw::c_int;
}
smoke.rs:256:1: 383:2
pub unsafe extern "C" fn test_ind_name(mut fp: * mut crate::smoke::__sFILE,
                                       mut name: * const std::os::raw::c_char,
                                       mut count: std::os::raw::c_int) {
    /*Find indicator from name.*/
    let mut info: * const crate::example2::ti_indicator_info = ti_find_indicator(name);
    if info.is_null() {
        printf(b"Couldn\'t find indicator %s\n\x00" as *const u8 as
                   *const std::os::raw::c_char, name);
        ltests += 1;
        if 0 as std::os::raw::c_int == 0 {
            lfails += 1;
            printf(b"%s:%d error \n\x00" as *const u8 as *const std::os::raw::c_char,
                   b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
                   99 as std::os::raw::c_int);
        }
        return
    }
    let ind_num: i32 =
        info.offset_from(ti_indicators.as_mut_ptr()) as std::os::raw::c_long
            as std::os::raw::c_int;
    if count != 0 { tested[ind_num as usize] = 1 as std::os::raw::c_int }
    let mut options: [f64; 10] = [0.; 10];
    let mut o: * mut f64 = options.as_mut_ptr();
    let mut s: * const i8 = 0 as *const std::os::raw::c_char;
    loop  {
        s =
            strtok(0 as *mut std::os::raw::c_char,
                   b" \n\r\x00" as *const u8 as *const std::os::raw::c_char);
        if s.is_null() { break ; }
        *o = atof(s);
        o = o.offset(1)
    }
    ltests += 1;
    if o.offset_from(options.as_mut_ptr()) as std::os::raw::c_long as
           std::os::raw::c_int != (*info).options {
        lfails += 1;
        printf(b"%s:%d (%d != %d)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               117 as std::os::raw::c_int,
               o.offset_from(options.as_mut_ptr()) as std::os::raw::c_long as
                   std::os::raw::c_int, (*info).options);
    }
    let mut i: i32 = 0;
    let mut inputs: [* mut f64; 10] =
        [0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double];
    let mut answers: [* mut f64; 10] =
        [0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double];
    let mut outputs: [* mut f64; 10] =
        [0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double,
         0 as *mut std::os::raw::c_double, 0 as *mut std::os::raw::c_double];
    let mut input_size: i32 = 0 as std::os::raw::c_int;
    i = 0 as std::os::raw::c_int;
    while i < (*info).inputs {
        inputs[i as usize] =
            malloc((::std::mem::size_of::<std::os::raw::c_double>() as
                        std::os::raw::c_ulong).wrapping_mul(512 as std::os::raw::c_int as
                                                        std::os::raw::c_ulong)) as
                *mut std::os::raw::c_double;
        input_size = get_array(fp, inputs[i as usize]);
        i += 1
    }
    let mut answer_size: i32 = 0 as std::os::raw::c_int;
    i = 0 as std::os::raw::c_int;
    while i < (*info).outputs {
        answers[i as usize] =
            malloc((::std::mem::size_of::<std::os::raw::c_double>() as
                        std::os::raw::c_ulong).wrapping_mul(512 as std::os::raw::c_int as
                                                        std::os::raw::c_ulong)) as
                *mut std::os::raw::c_double;
        outputs[i as usize] =
            malloc((::std::mem::size_of::<std::os::raw::c_double>() as
                        std::os::raw::c_ulong).wrapping_mul(512 as std::os::raw::c_int as
                                                        std::os::raw::c_ulong)) as
                *mut std::os::raw::c_double;
        answer_size = get_array(fp, answers[i as usize]);
        i += 1
    }
    let ret: i32 =
        (*info).indicator.expect("non-null function pointer")(input_size,
                                                              inputs.as_mut_ptr()
                                                                  as
                                                                  *const *const std::os::raw::c_double,
                                                              options.as_mut_ptr(),
                                                              outputs.as_mut_ptr());
    ltests += 1;
    if !(ret == 0 as std::os::raw::c_int) {
        lfails += 1;
        printf(b"%s:%d error \n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               139 as std::os::raw::c_int);
    }
    let mut output_size: i32 =
        input_size -
            (*info).start.expect("non-null function pointer")(options.as_mut_ptr());
    if output_size < 0 as std::os::raw::c_int { output_size = 0 as std::os::raw::c_int }
    i = 0 as std::os::raw::c_int;
    while i < (*info).outputs {
        compare_arrays(answers[i as usize], outputs[i as usize], answer_size,
                       output_size);
        i += 1
    }
    i = 0 as std::os::raw::c_int;
    while i < (*info).inputs {
        free(inputs[i as usize] as *mut std::os::raw::c_void);
        i += 1
    }
    i = 0 as std::os::raw::c_int;
    while i < (*info).outputs {
        free(answers[i as usize] as *mut std::os::raw::c_void);
        i += 1
    }
    i = 0 as std::os::raw::c_int;
    while i < (*info).outputs {
        free(outputs[i as usize] as *mut std::os::raw::c_void);
        i += 1
    };
}
smoke.rs:385:1: 442:2
pub unsafe extern "C" fn test(mut fname: * const std::os::raw::c_char,
                              mut count: std::os::raw::c_int) {
    /*Read in test values from external file.*/
    printf(b"%s:\n\x00" as *const u8 as *const std::os::raw::c_char, fname);
    let mut fp: * mut crate::smoke::__sFILE =
        fopen(fname, b"r\x00" as *const u8 as *const std::os::raw::c_char);
    if fp.is_null() {
        ltests += 1;
        if 0 as std::os::raw::c_int == 0 {
            lfails += 1;
            printf(b"%s:%d error \n\x00" as *const u8 as *const std::os::raw::c_char,
                   b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
                   159 as std::os::raw::c_int);
        }
        return
    }
    let mut line: * mut i8 = 0 as *mut std::os::raw::c_char;
    loop  {
        line = next_line(fp);
        if line.is_null() { break ; }
        /*Looking for function name.*/
        if (*line.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int) <
               'a' as i32 ||
               *line.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int >
                   'z' as i32 {
            ltests += 1;
            if 0 as std::os::raw::c_int == 0 {
                lfails += 1;
                printf(b"%s:%d error \n\x00" as *const u8 as
                           *const std::os::raw::c_char,
                       b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
                       169 as std::os::raw::c_int);
            }
        } else {
            /*Found function*/
            let mut name: * mut i8 =
                strtok(line,
                       b" \n\r\x00" as *const u8 as *const std::os::raw::c_char);
            let ts: i32 = ltests;
            let fs: i32 = lfails;
            let start: u64 = clock();
            printf(b"\t%-16s\x00" as *const u8 as *const std::os::raw::c_char, name);
            test_ind_name(fp, name, count);
            printf(b"pass:%2d   fail:%2d   %4dms\n\x00" as *const u8 as
                       *const std::os::raw::c_char, ltests - ts - (lfails - fs),
                   lfails - fs,
                   clock().wrapping_sub(start).wrapping_mul(1000 as
                                                                std::os::raw::c_int as
                                                                std::os::raw::c_ulong).wrapping_div(1000000
                                                                                                as
                                                                                                std::os::raw::c_int
                                                                                                as
                                                                                                std::os::raw::c_ulong)
                       as std::os::raw::c_int);
        }
    }
    fclose(fp);
}
smoke.rs:444:1: 460:2
pub unsafe extern "C" fn test_version() {
    ltests += 1;
    if !(strcmp(b"0.8.4\x00" as *const u8 as *const std::os::raw::c_char,
                ti_version()) == 0 as std::os::raw::c_int) {
        lfails += 1;
        printf(b"%s:%d error \n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               183 as std::os::raw::c_int);
    }
    ltests += 1;
    if !(1537377628 as std::os::raw::c_int as std::os::raw::c_long == ti_build()) {
        lfails += 1;
        printf(b"%s:%d error \n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               184 as std::os::raw::c_int);
    };
}
smoke.rs:462:1: 649:2
pub unsafe extern "C" fn test_buffer() {
    let mut b: * mut crate::indicators::adxr::ti_buffer = ti_buffer_new(3 as std::os::raw::c_int);
    if (*b).pushes >= (*b).size {
        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)
    }
    (*b).sum += 5.0f64;
    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 5.0f64;
    (*b).pushes += 1 as std::os::raw::c_int;
    (*b).index = (*b).index + 1 as std::os::raw::c_int;
    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }
    ltests += 1;
    if fabs((*b).sum - 5.0f64) > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               190 as std::os::raw::c_int, (*b).sum, 5.0f64);
    }
    if (*b).pushes >= (*b).size {
        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)
    }
    (*b).sum += 5.0f64;
    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 5.0f64;
    (*b).pushes += 1 as std::os::raw::c_int;
    (*b).index = (*b).index + 1 as std::os::raw::c_int;
    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }
    ltests += 1;
    if fabs((*b).sum - 10.0f64) > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               191 as std::os::raw::c_int, (*b).sum, 10.0f64);
    }
    if (*b).pushes >= (*b).size {
        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)
    }
    (*b).sum += 1.0f64;
    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 1.0f64;
    (*b).pushes += 1 as std::os::raw::c_int;
    (*b).index = (*b).index + 1 as std::os::raw::c_int;
    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }
    ltests += 1;
    if fabs((*b).sum - 11.0f64) > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               192 as std::os::raw::c_int, (*b).sum, 11.0f64);
    }
    if (*b).pushes >= (*b).size {
        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)
    }
    (*b).sum += 1.0f64;
    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 1.0f64;
    (*b).pushes += 1 as std::os::raw::c_int;
    (*b).index = (*b).index + 1 as std::os::raw::c_int;
    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }
    ltests += 1;
    if fabs((*b).sum - 7.0f64) > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               193 as std::os::raw::c_int, (*b).sum, 7.0f64);
    }
    if (*b).pushes >= (*b).size {
        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)
    }
    (*b).sum += 3.0f64;
    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 3.0f64;
    (*b).pushes += 1 as std::os::raw::c_int;
    (*b).index = (*b).index + 1 as std::os::raw::c_int;
    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }
    ltests += 1;
    if fabs((*b).sum - 5.0f64) > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               194 as std::os::raw::c_int, (*b).sum, 5.0f64);
    }
    if (*b).pushes >= (*b).size {
        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)
    }
    (*b).sum += 1.0f64;
    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 1.0f64;
    (*b).pushes += 1 as std::os::raw::c_int;
    (*b).index = (*b).index + 1 as std::os::raw::c_int;
    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }
    ltests += 1;
    if fabs((*b).sum - 5.0f64) > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               195 as std::os::raw::c_int, (*b).sum, 5.0f64);
    }
    if (*b).pushes >= (*b).size {
        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)
    }
    (*b).sum += 2.0f64;
    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 2.0f64;
    (*b).pushes += 1 as std::os::raw::c_int;
    (*b).index = (*b).index + 1 as std::os::raw::c_int;
    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }
    ltests += 1;
    if fabs((*b).sum - 6.0f64) > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               196 as std::os::raw::c_int, (*b).sum, 6.0f64);
    }
    if (*b).pushes >= (*b).size {
        (*b).sum -= *(*b).vals.as_mut_ptr().offset((*b).index as isize)
    }
    (*b).sum += 3.0f64;
    *(*b).vals.as_mut_ptr().offset((*b).index as isize) = 3.0f64;
    (*b).pushes += 1 as std::os::raw::c_int;
    (*b).index = (*b).index + 1 as std::os::raw::c_int;
    if (*b).index >= (*b).size { (*b).index = 0 as std::os::raw::c_int }
    ltests += 1;
    if fabs((*b).sum - 6.0f64) > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               197 as std::os::raw::c_int, (*b).sum, 6.0f64);
    }
    ltests += 1;
    if fabs(*(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -
                                                 1 as std::os::raw::c_int +
                                                 0 as std::os::raw::c_int) %
                                                (*b).size) as isize) - 3.0f64)
           > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               199 as std::os::raw::c_int,
               *(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -
                                                    1 as std::os::raw::c_int +
                                                    0 as std::os::raw::c_int) %
                                                   (*b).size) as isize),
               3.0f64);
    }
    ltests += 1;
    if fabs(*(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -
                                                 1 as std::os::raw::c_int +
                                                 -(1 as std::os::raw::c_int)) %
                                                (*b).size) as isize) - 2.0f64)
           > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               200 as std::os::raw::c_int,
               *(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -
                                                    1 as std::os::raw::c_int +
                                                    -(1 as std::os::raw::c_int)) %
                                                   (*b).size) as isize),
               2.0f64);
    }
    ltests += 1;
    if fabs(*(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -
                                                 1 as std::os::raw::c_int +
                                                 -(2 as std::os::raw::c_int)) %
                                                (*b).size) as isize) - 1.0f64)
           > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               201 as std::os::raw::c_int,
               *(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -
                                                    1 as std::os::raw::c_int +
                                                    -(2 as std::os::raw::c_int)) %
                                                   (*b).size) as isize),
               1.0f64);
    }
    ltests += 1;
    if fabs(*(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -
                                                 1 as std::os::raw::c_int +
                                                 -(3 as std::os::raw::c_int)) %
                                                (*b).size) as isize) - 3.0f64)
           > 0.001f64 {
        lfails += 1;
        printf(b"%s:%d (%f != %f)\n\x00" as *const u8 as *const std::os::raw::c_char,
               b"smoke.c\x00" as *const u8 as *const std::os::raw::c_char,
               202 as std::os::raw::c_int,
               *(*b).vals.as_mut_ptr().offset((((*b).index + (*b).size -
                                                    1 as std::os::raw::c_int +
                                                    -(3 as std::os::raw::c_int)) %
                                                   (*b).size) as isize),
               3.0f64);
    }
    ti_buffer_free(b);
}
smoke.rs:650:1: 707:2
unsafe fn main_0() -> std::os::raw::c_int {
    printf(b"TI TEST SUITE\n\x00" as *const u8 as *const std::os::raw::c_char);
    let ts: i32 = ltests;
    let fs: i32 = lfails;
    let start: u64 = clock();
    printf(b"\t%-16s\x00" as *const u8 as *const std::os::raw::c_char,
           b"buffer\x00" as *const u8 as *const std::os::raw::c_char);
    test_buffer();
    printf(b"pass:%2d   fail:%2d   %4dms\n\x00" as *const u8 as
               *const std::os::raw::c_char, ltests - ts - (lfails - fs), lfails - fs,
           clock().wrapping_sub(start).wrapping_mul(1000 as std::os::raw::c_int as
                                                        std::os::raw::c_ulong).wrapping_div(1000000
                                                                                        as
                                                                                        std::os::raw::c_int
                                                                                        as
                                                                                        std::os::raw::c_ulong)
               as std::os::raw::c_int);
    let ts_0: i32 = ltests;
    let fs_0: i32 = lfails;
    let start_0: u64 = clock();
    printf(b"\t%-16s\x00" as *const u8 as *const std::os::raw::c_char,
           b"version\x00" as *const u8 as *const std::os::raw::c_char);
    test_version();
    printf(b"pass:%2d   fail:%2d   %4dms\n\x00" as *const u8 as
               *const std::os::raw::c_char, ltests - ts_0 - (lfails - fs_0),
           lfails - fs_0,
           clock().wrapping_sub(start_0).wrapping_mul(1000 as std::os::raw::c_int as
                                                          std::os::raw::c_ulong).wrapping_div(1000000
                                                                                          as
                                                                                          std::os::raw::c_int
                                                                                          as
                                                                                          std::os::raw::c_ulong)
               as std::os::raw::c_int);
    test(b"tests/untest.txt\x00" as *const u8 as *const std::os::raw::c_char,
         0 as std::os::raw::c_int);
    test(b"tests/atoz.txt\x00" as *const u8 as *const std::os::raw::c_char,
         1 as std::os::raw::c_int);
    test(b"tests/extra.txt\x00" as *const u8 as *const std::os::raw::c_char,
         1 as std::os::raw::c_int);
    let mut i: i32 = 0;
    i = 0 as std::os::raw::c_int;
    while i < 104 as std::os::raw::c_int {
        if tested[i as usize] == 0 {
            printf(b"WARNING: no test for %s\n\x00" as *const u8 as
                       *const std::os::raw::c_char,
                   (*ti_indicators.as_mut_ptr().offset(i as isize)).name);
        }
        i += 1
    }
    if lfails == 0 as std::os::raw::c_int {
        printf(b"ALL TESTS PASSED (%d/%d)\n\x00" as *const u8 as
                   *const std::os::raw::c_char, ltests, ltests);
    } else {
        printf(b"%d TESTS FAILED (of %d)\n\x00" as *const u8 as
                   *const std::os::raw::c_char, lfails, ltests);
    }
    return (lfails != 0 as std::os::raw::c_int) as std::os::raw::c_int;
}
smoke.rs:708:17: 708:65
unsafe { ::std::process::exit(main_0() as i32) }
utils/buffer.rs:34:1: 48:2
pub unsafe extern "C" fn ti_buffer_new(mut size: std::os::raw::c_int)
 -> * mut crate::indicators::adxr::ti_buffer {
    let s: i32 =
        ::std::mem::size_of::<ti_buffer>() as std::os::raw::c_ulong as std::os::raw::c_int +
            (size - 1 as std::os::raw::c_int) *
                ::std::mem::size_of::<std::os::raw::c_double>() as std::os::raw::c_ulong as
                    std::os::raw::c_int;
    let mut ret: * mut crate::indicators::adxr::ti_buffer =
        malloc(s as std::os::raw::c_uint as std::os::raw::c_ulong) as *mut ti_buffer;
    (*ret).size = size;
    (*ret).pushes = 0 as std::os::raw::c_int;
    (*ret).index = 0 as std::os::raw::c_int;
    (*ret).sum = 0 as std::os::raw::c_int as std::os::raw::c_double;
    return ret;
}
utils/buffer.rs:50:1: 52:2
pub unsafe extern "C" fn ti_buffer_free(mut buffer: * mut crate::indicators::adxr::ti_buffer) {
    free(buffer as *mut std::os::raw::c_void);
}
