src/test.rs:39:1: 64:2
pub unsafe extern "C" fn url_data_inspect(mut data: *mut url_data_t) {
    printf(b"#url =>\n\0" as *const u8 as *const libc::c_char);
    printf(b"    .href: \"%s\"\n\0" as *const u8 as *const libc::c_char, (*data).href);
    printf(
        b"    .protocol: \"%s\"\n\0" as *const u8 as *const libc::c_char,
        (*data).protocol as *const i8,
    );
    printf(b"    .host: \"%s\"\n\0" as *const u8 as *const libc::c_char, (*data).host as *const i8);
    printf(b"    .auth: \"%s\"\n\0" as *const u8 as *const libc::c_char, (*data).auth as *const i8);
    printf(
        b"    .hostname: \"%s\"\n\0" as *const u8 as *const libc::c_char,
        (*data).hostname as *const i8,
    );
    printf(
        b"    .pathname: \"%s\"\n\0" as *const u8 as *const libc::c_char,
        (*data).pathname as *const i8,
    );
    printf(
        b"    .search: \"%s\"\n\0" as *const u8 as *const libc::c_char,
        (*data).search as *const i8,
    );
    printf(b"    .path: \"%s\"\n\0" as *const u8 as *const libc::c_char, (*data).path as *const i8);
    printf(b"    .hash: \"%s\"\n\0" as *const u8 as *const libc::c_char, (*data).hash as *const i8);
    printf(b"    .query: \"%s\"\n\0" as *const u8 as *const libc::c_char, (*data).query as *const i8);
    printf(b"    .port: \"%s\"\n\0" as *const u8 as *const libc::c_char, (*data).port);
}
src/test.rs:66:1: 68:2
pub unsafe extern "C" fn url_inspect(mut url: *mut libc::c_char) {
    url_data_inspect(url_parse(url));
}
src/test.rs:70:1: 101:2
pub unsafe extern "C" fn url_free(mut data: Option<&mut url_data_t>) {
    if data.as_deref().is_none() {();
        return;
    }
    if !(*data.as_deref().unwrap()).auth.is_null() {
        free((*data.as_deref().unwrap()).auth as *mut libc::c_void);
    }else { (); }
    if !(*data.as_deref().unwrap()).protocol.is_null() {
        free((*data.as_deref().unwrap()).protocol as *mut libc::c_void);
    }else { (); }
    if !(*data.as_deref().unwrap()).hostname.is_null() {
        free((*data.as_deref().unwrap()).hostname as *mut libc::c_void);
    }else { (); }
    if !(*data.as_deref().unwrap()).host.is_null() {
        free((*data.as_deref().unwrap()).host as *mut libc::c_void);
    }else { (); }
    if !(*data.as_deref().unwrap()).pathname.is_null() {
        free((*data.as_deref().unwrap()).pathname as *mut libc::c_void);
    }else { (); }
    if !(*data.as_deref().unwrap()).path.is_null() {
        free((*data.as_deref().unwrap()).path as *mut libc::c_void);
    }else { (); }
    if !(*data.as_deref().unwrap()).hash.is_null() {
        free((*data.as_deref().unwrap()).hash as *mut libc::c_void);
    }else { (); }
    if !(*data.as_deref().unwrap()).search.is_null() {
        free((*data.as_deref().unwrap()).search as *mut libc::c_void);
    }else { (); }
    if !(*data.as_deref().unwrap()).query.is_null() {
        free((*data.as_deref().unwrap()).query as *mut libc::c_void);
    }else { (); }
}
src/test.rs:103:1: 119:2
pub unsafe extern "C" fn url_get_port(mut url: *mut libc::c_char) -> *mut libc::c_char {
    let mut port = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    let mut hostname = url_get_hostname(url);
    let mut host = url_get_host(url);
    if port.is_null() || hostname.is_null() {
        return 0 as *mut libc::c_char;
    }
    let mut tmp_hostname = strff(
        hostname,
        (strlen(host)).wrapping_add(1 as libc::c_int as libc::c_ulong) as libc::c_int,
    );
    sscanf(tmp_hostname, b"%s\0" as *const u8 as *const libc::c_char, port);
    free(hostname as *mut libc::c_void);
    free(tmp_hostname as *mut libc::c_void);
    return port;
}
src/test.rs:301:1: 441:2
pub unsafe extern "C" fn url_parse(mut url: *mut libc::c_char) -> *mut url_data_t {
    let mut data = malloc(::std::mem::size_of::<url_data_t>() as libc::c_ulong)
        as *mut url_data_t;
    if data.is_null() {();
        return 0 as *mut url_data_t;
    }
    (*data).href= url;
    let mut tmp = 0 as *mut libc::c_char;
    let mut tmp_url = strdup(url);
    let mut is_ssh = 0 as libc::c_int != 0;
    let mut protocol = url_get_protocol(tmp_url);
    if protocol.is_null() {();
        return 0 as *mut url_data_t;
    }
    let mut protocol_len = strlen(protocol) as libc::c_int + 3 as libc::c_int;
    (*data).protocol= protocol;
    is_ssh= url_is_ssh(protocol);
    let mut auth = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    let mut auth_len = 0 as libc::c_int;
    tmp= strstr(tmp_url, b"@\0" as *const u8 as *const libc::c_char);
    if !tmp.is_null() {
        auth= get_part(
            tmp_url,
            b"%[^@]\0" as *const u8 as *const libc::c_char,
            protocol_len,
        );
        auth_len= strlen(auth) as libc::c_int;
        if !auth.is_null() {
            auth_len+= 1;
        }else { (); }
    }else { (); }
    (*data).auth= auth;
    let mut hostname = 0 as *mut libc::c_char;
    hostname= if is_ssh as libc::c_int != 0 {
        get_part(
            tmp_url,
            b"%[^:]\0" as *const u8 as *const libc::c_char,
            protocol_len + auth_len,
        )
    } else {
        get_part(
            tmp_url,
            b"%[^/]\0" as *const u8 as *const libc::c_char,
            protocol_len + auth_len,
        )
    };
    if hostname.is_null() {();
        return 0 as *mut url_data_t;
    }
    let mut hostname_len = strlen(hostname) as libc::c_int;
    let mut tmp_hostname = strdup(hostname);
    (*data).hostname= hostname;
    let mut host = malloc(
        (strlen(tmp_hostname))
            .wrapping_mul(::std::mem::size_of::<libc::c_char>() as libc::c_ulong),
    ) as *mut libc::c_char;
    sscanf(tmp_hostname, b"%[^:]\0" as *const u8 as *const libc::c_char, host);
    if host.is_null() {();
        return 0 as *mut url_data_t;
    }
    let mut host_len = strlen(host) as libc::c_int;
    (*data).host= host;
    let mut tmp_path = 0 as *mut libc::c_char;
    tmp_path= if is_ssh as libc::c_int != 0 {
        get_part(
            tmp_url,
            b":%s\0" as *const u8 as *const libc::c_char,
            protocol_len + auth_len + hostname_len,
        )
    } else {
        get_part(
            tmp_url,
            b"/%s\0" as *const u8 as *const libc::c_char,
            protocol_len + auth_len + hostname_len,
        )
    };
    let mut path = malloc(
        (strlen(tmp_path))
            .wrapping_mul(::std::mem::size_of::<libc::c_char>() as libc::c_ulong),
    ) as *mut libc::c_char;
    if path.is_null() {();
        return 0 as *mut url_data_t;
    }
    let mut fmt = (if is_ssh as libc::c_int != 0 {
        b"%s\0" as *const u8 as *const libc::c_char
    } else {
        b"/%s\0" as *const u8 as *const libc::c_char
    }) as *mut libc::c_char;
    sprintf(path, fmt, tmp_path);
    (*data).path= path;
    free(tmp_path as *mut libc::c_void);
    let mut pathname = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    if pathname.is_null() {();
        return 0 as *mut url_data_t;
    }
    strcat(pathname, b"\0" as *const u8 as *const libc::c_char);
    tmp_path= strdup(path);
    sscanf(tmp_path, b"%[^? | ^#]\0" as *const u8 as *const libc::c_char, pathname);
    let mut pathname_len = strlen(pathname) as libc::c_int;
    (*data).pathname= pathname;
    let mut search = malloc(::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    if search.is_null() {();
        return 0 as *mut url_data_t;
    }
    tmp_path= strff(tmp_path, pathname_len);
    strcat(search, b"\0" as *const u8 as *const libc::c_char);
    sscanf(tmp_path, b"%[^#]\0" as *const u8 as *const libc::c_char, search);
    (*data).search= search;
    let mut search_len = strlen(search) as libc::c_int;
    free(tmp_path as *mut libc::c_void);
    let mut query = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    if query.is_null() {();
        return 0 as *mut url_data_t;
    }
    sscanf(search, b"?%s\0" as *const u8 as *const libc::c_char, query);
    (*data).query= query;
    let mut hash = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    if hash.is_null() {();
        return 0 as *mut url_data_t;
    }
    tmp_path= strff(path, pathname_len + search_len);
    strcat(hash, b"\0" as *const u8 as *const libc::c_char);
    sscanf(tmp_path, b"%s\0" as *const u8 as *const libc::c_char, hash);
    (*data).hash= hash;
    free(tmp_path as *mut libc::c_void);
    let mut port = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    if port.is_null() {();
        return 0 as *mut url_data_t;
    }
    tmp_hostname= strff(hostname, host_len + 1 as libc::c_int);
    sscanf(tmp_hostname, b"%s\0" as *const u8 as *const libc::c_char, port);
    (*data).port= port;
    free(tmp_hostname as *mut libc::c_void);
    return data;
}
src/test.rs:443:1: 451:2
pub unsafe extern "C" fn strdup(mut str: *const libc::c_char) -> *mut /* owning */ libc::c_char {
    let mut n = (strlen(str)).wrapping_add(1 as libc::c_int as libc::c_ulong)
        as libc::c_int;
    let mut dup = malloc(n as libc::c_ulong) as *mut libc::c_char;
    if !dup.is_null() {
        strcpy(dup, str);
    }else { (); }
    return dup;
}
src/test.rs:452:1: 465:2
unsafe extern "C" fn strff(
    mut ptr: *mut libc::c_char,
    mut n: libc::c_int,
) -> *mut /* owning */ libc::c_char {
    let mut y = 0 as libc::c_int;
    let mut i = 0 as libc::c_int;
    while i < n {
        let fresh11 = ptr;
        ptr= ptr.offset(1);
        y= (*fresh11) as libc::c_int;
        i+= 1;
    }
    return strdup(ptr);
}
src/test.rs:467:1: 482:2
pub unsafe extern "C" fn url_get_protocol(
    mut url: *mut libc::c_char,
) -> *mut libc::c_char {
    let mut protocol = malloc(
        (16 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<libc::c_char>() as libc::c_ulong),
    ) as *mut libc::c_char;
    if protocol.is_null() {();
        return 0 as *mut libc::c_char;
    }
    sscanf(url, b"%[^://]\0" as *const u8 as *const libc::c_char, protocol);
    if url_is_protocol(protocol) {
        return protocol;
    }
    return 0 as *mut libc::c_char;
}
src/test.rs:484:1: 496:2
pub unsafe extern "C" fn url_is_protocol(mut str: *mut libc::c_char) -> bool {
    let mut count = (::std::mem::size_of::<[*mut libc::c_char; 177]>() as libc::c_ulong)
        .wrapping_div(::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong)
        as libc::c_int;
    let mut i = 0 as libc::c_int;
    while i < count {
        if 0 as libc::c_int == strcmp(crate::src::test::URL_SCHEMES[i as usize], str) {
            return 1 as libc::c_int != 0;
        }
        i+= 1;
    }
    return 0 as libc::c_int != 0;
}
src/test.rs:497:1: 525:2
unsafe extern "C" fn get_part(
    mut url: *mut libc::c_char,
    mut format: *const libc::c_char,
    mut l: libc::c_int,
) -> *mut libc::c_char {
    let mut has = 0 as libc::c_int != 0;
    let mut tmp = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    let mut tmp_url = strdup(url);
    let mut fmt_url = strdup(url);
    let mut ret = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    if tmp.is_null() || tmp_url.is_null() || fmt_url.is_null() || ret.is_null() {
        return 0 as *mut libc::c_char;
    }
    strcpy(tmp, b"\0" as *const u8 as *const libc::c_char);
    strcpy(fmt_url, b"\0" as *const u8 as *const libc::c_char);
    fmt_url= strff(fmt_url, l);
    sscanf(fmt_url, format, tmp);
    if 0 as libc::c_int != strcmp(tmp, tmp_url) {
        has= 1 as libc::c_int != 0;
        ret= strdup(tmp);
    }
    fmt_url= strrwd(fmt_url, l);
    free(tmp as *mut libc::c_void);
    free(tmp_url as *mut libc::c_void);
    free(fmt_url as *mut libc::c_void);
    return if has as libc::c_int != 0 { ret } else { 0 as *mut libc::c_char };
}
src/test.rs:526:1: 539:2
unsafe extern "C" fn strrwd(
    mut ptr: *mut libc::c_char,
    mut n: libc::c_int,
) -> *mut /* owning */ libc::c_char {
    let mut y = 0 as libc::c_int;
    let mut i = 0 as libc::c_int;
    while i < n {
        let fresh12 = ptr;
        ptr= ptr.offset(-1);
        y= (*fresh12) as libc::c_int;
        i+= 1;
    }
    return strdup(ptr);
}
src/test.rs:541:1: 550:2
pub unsafe extern "C" fn url_is_ssh(mut str: *mut libc::c_char) -> bool {
    str= strdup(str);
    if 0 as libc::c_int == strcmp(str, b"ssh\0" as *const u8 as *const libc::c_char)
        || 0 as libc::c_int == strcmp(str, b"git\0" as *const u8 as *const libc::c_char)
    {
        free(str as *mut libc::c_void);
        return 1 as libc::c_int != 0;
    }
    return 0 as libc::c_int != 0;
}
src/test.rs:552:1: 559:2
pub unsafe extern "C" fn url_get_auth(mut url: *mut libc::c_char) -> *mut libc::c_char {
    let mut protocol = url_get_protocol(url);
    if protocol.is_null() {();
        return 0 as *mut libc::c_char;
    }
    let mut l = strlen(protocol) as libc::c_int + 3 as libc::c_int;
    return get_part(url, b"%[^@]\0" as *const u8 as *const libc::c_char, l);
}
src/test.rs:561:1: 588:2
pub unsafe extern "C" fn url_get_hostname(
    mut url: *mut libc::c_char,
) -> *mut libc::c_char {
    let mut l = 3 as libc::c_int;
    let mut protocol = url_get_protocol(url);
    let mut tmp_protocol = strdup(protocol);
    let mut auth = url_get_auth(url);
    if protocol.is_null() {();
        return 0 as *mut libc::c_char;
    }
    if !auth.is_null() {
        l= (l as libc::c_ulong)
            .wrapping_add((strlen(auth)).wrapping_add(1 as libc::c_int as libc::c_ulong))
            as libc::c_int as libc::c_int;
    }else { (); }
    if !auth.is_null() {
        free(auth as *mut libc::c_void);
    }else { (); }
    l+= strlen(protocol) as libc::c_int;
    free(protocol as *mut libc::c_void);
    let mut hostname = if url_is_ssh(tmp_protocol) as libc::c_int != 0 {
        get_part(url, b"%[^:]\0" as *const u8 as *const libc::c_char, l)
    } else {
        get_part(url, b"%[^/]\0" as *const u8 as *const libc::c_char, l)
    };
    free(tmp_protocol as *mut libc::c_void);
    return hostname;
}
src/test.rs:590:1: 600:2
pub unsafe extern "C" fn url_get_host(mut url: *mut libc::c_char) -> *mut libc::c_char {
    let mut host = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    let mut hostname = url_get_hostname(url);
    if host.is_null() || hostname.is_null() {
        return 0 as *mut libc::c_char;
    }
    sscanf(hostname, b"%[^:]\0" as *const u8 as *const libc::c_char, host);
    free(hostname as *mut libc::c_void);
    return host;
}
src/test.rs:602:1: 615:2
pub unsafe extern "C" fn url_get_pathname(
    mut url: *mut libc::c_char,
) -> *mut libc::c_char {
    let mut path = url_get_path(url);
    let mut pathname = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    if path.is_null() || pathname.is_null() {
        return 0 as *mut libc::c_char;
    }
    strcat(pathname, b"\0" as *const u8 as *const libc::c_char);
    sscanf(path, b"%[^?]\0" as *const u8 as *const libc::c_char, pathname);
    free(path as *mut libc::c_void);
    return pathname;
}
src/test.rs:617:1: 653:2
pub unsafe extern "C" fn url_get_path(mut url: *mut libc::c_char) -> *mut libc::c_char {
    let mut l = 3 as libc::c_int;
    let mut tmp_path = 0 as *mut libc::c_char;
    let mut protocol = url_get_protocol(url);
    let mut auth = url_get_auth(url);
    let mut hostname = url_get_hostname(url);
    if protocol.is_null() || hostname.is_null() {
        return 0 as *mut libc::c_char;
    }
    let mut is_ssh = url_is_ssh(protocol);
    l+= strlen(protocol) as libc::c_int + strlen(hostname) as libc::c_int;
    if !auth.is_null() {
        l+= strlen(auth) as libc::c_int + 1 as libc::c_int;
    }else { (); }
    tmp_path= if is_ssh as libc::c_int != 0 {
        get_part(url, b":%s\0" as *const u8 as *const libc::c_char, l)
    } else {
        get_part(url, b"/%s\0" as *const u8 as *const libc::c_char, l)
    };
    let mut fmt = (if is_ssh as libc::c_int != 0 {
        b"%s\0" as *const u8 as *const libc::c_char
    } else {
        b"/%s\0" as *const u8 as *const libc::c_char
    }) as *mut libc::c_char;
    let mut path = malloc(
        (strlen(tmp_path))
            .wrapping_mul(::std::mem::size_of::<libc::c_char>() as libc::c_ulong),
    ) as *mut libc::c_char;
    sprintf(path, fmt, tmp_path);
    if !auth.is_null() {
        free(auth as *mut libc::c_void);
    }else { (); }
    free(protocol as *mut libc::c_void);
    free(hostname as *mut libc::c_void);
    free(tmp_path as *mut libc::c_void);
    return path;
}
src/test.rs:655:1: 672:2
pub unsafe extern "C" fn url_get_search(
    mut url: *mut libc::c_char,
) -> *mut libc::c_char {
    let mut path = url_get_path(url);
    let mut pathname = url_get_pathname(url);
    let mut search = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    if path.is_null() || search.is_null() {
        return 0 as *mut libc::c_char;
    }
    let mut tmp_path = strff(path, strlen(pathname) as libc::c_int);
    strcat(search, b"\0" as *const u8 as *const libc::c_char);
    sscanf(tmp_path, b"%[^#]\0" as *const u8 as *const libc::c_char, search);
    tmp_path= strrwd(tmp_path, strlen(pathname) as libc::c_int);
    free(path as *mut libc::c_void);
    free(pathname as *mut libc::c_void);
    return search;
}
src/test.rs:674:1: 684:2
pub unsafe extern "C" fn url_get_query(mut url: *mut libc::c_char) -> *mut libc::c_char {
    let mut search = url_get_search(url);
    let mut query = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    if search.is_null() {();
        return 0 as *mut libc::c_char;
    }
    sscanf(search, b"?%s\0" as *const u8 as *const libc::c_char, query);
    free(search as *mut libc::c_void);
    return query;
}
src/test.rs:686:1: 714:2
pub unsafe extern "C" fn url_get_hash(mut url: *mut libc::c_char) -> *mut libc::c_char {
    let mut hash = malloc(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
        as *mut libc::c_char;
    if hash.is_null() {();
        return 0 as *mut libc::c_char;
    }
    let mut path = url_get_path(url);
    if path.is_null() {();
        return 0 as *mut libc::c_char;
    }
    let mut pathname = url_get_pathname(url);
    if pathname.is_null() {();
        return 0 as *mut libc::c_char;
    }
    let mut search = url_get_search(url);
    let mut pathname_len = strlen(pathname) as libc::c_int;
    let mut search_len = strlen(search) as libc::c_int;
    let mut tmp_path = strff(path, pathname_len + search_len);
    strcat(hash, b"\0" as *const u8 as *const libc::c_char);
    sscanf(tmp_path, b"%s\0" as *const u8 as *const libc::c_char, hash);
    tmp_path= strrwd(tmp_path, pathname_len + search_len);
    free(tmp_path as *mut libc::c_void);
    free(pathname as *mut libc::c_void);
    free(path as *mut libc::c_void);
    if !search.is_null() {
        free(search as *mut libc::c_void);
    }else { (); }
    return hash;
}
src/test.rs:715:1: 1166:2
unsafe fn main_0() -> libc::c_int {
    let mut gh_url = b"git://git@github.com:jwerle/url.h.git\0" as *const u8
        as *const libc::c_char as *mut libc::c_char;
    let mut url = b"http://user:pass@subdomain.host.com:8080/p/a/t/h?query=string#hash\0"
        as *const u8 as *const libc::c_char as *mut libc::c_char;
    let mut parsed = url_parse(url);
    let mut gh_parsed = url_parse(gh_url);
    if !parsed.is_null() {} else {();
        __assert_fail(
            b"parsed\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            15 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !gh_parsed.is_null() {} else {();
        __assert_fail(
            b"gh_parsed\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            16 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    url_data_inspect(parsed);
    url_data_inspect(gh_parsed);
    if !(*parsed).href.is_null() {} else {();
        __assert_fail(
            b"parsed->href\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            21 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*parsed).auth.is_null() {} else {();
        __assert_fail(
            b"parsed->auth\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            22 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*parsed).protocol.is_null() {} else {();
        __assert_fail(
            b"parsed->protocol\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            23 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*parsed).port.is_null() {} else {();
        __assert_fail(
            b"parsed->port\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            24 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*parsed).hostname.is_null() {} else {();
        __assert_fail(
            b"parsed->hostname\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            25 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*parsed).host.is_null() {} else {();
        __assert_fail(
            b"parsed->host\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            26 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*parsed).pathname.is_null() {} else {();
        __assert_fail(
            b"parsed->pathname\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            27 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*parsed).path.is_null() {} else {();
        __assert_fail(
            b"parsed->path\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            28 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*parsed).hash.is_null() {} else {();
        __assert_fail(
            b"parsed->hash\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            29 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*parsed).search.is_null() {} else {();
        __assert_fail(
            b"parsed->search\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            30 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*parsed).query.is_null() {} else {();
        __assert_fail(
            b"parsed->query\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            31 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*gh_parsed).href.is_null() {} else {();
        __assert_fail(
            b"gh_parsed->href\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            33 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*gh_parsed).protocol.is_null() {} else {();
        __assert_fail(
            b"gh_parsed->protocol\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            34 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*gh_parsed).host.is_null() {} else {();
        __assert_fail(
            b"gh_parsed->host\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            35 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*gh_parsed).auth.is_null() {} else {();
        __assert_fail(
            b"gh_parsed->auth\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            36 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*gh_parsed).hostname.is_null() {} else {();
        __assert_fail(
            b"gh_parsed->hostname\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            37 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*gh_parsed).pathname.is_null() {} else {();
        __assert_fail(
            b"gh_parsed->pathname\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            38 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if !(*gh_parsed).path.is_null() {} else {();
        __assert_fail(
            b"gh_parsed->path\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            39 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if url_is_protocol(
        b"http\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) as libc::c_int != 0
    {} else {
        __assert_fail(
            b"url_is_protocol(\"http\")\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            41 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if url_is_protocol(
        b"https\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) as libc::c_int != 0
    {} else {
        __assert_fail(
            b"url_is_protocol(\"https\")\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            42 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if url_is_protocol(b"git\0" as *const u8 as *const libc::c_char as *mut libc::c_char)
        as libc::c_int != 0
    {} else {
        __assert_fail(
            b"url_is_protocol(\"git\")\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            43 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if url_is_protocol(b"ssh\0" as *const u8 as *const libc::c_char as *mut libc::c_char)
        as libc::c_int != 0
    {} else {
        __assert_fail(
            b"url_is_protocol(\"ssh\")\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            44 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if url_is_protocol(
        b"sftp\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) as libc::c_int != 0
    {} else {
        __assert_fail(
            b"url_is_protocol(\"sftp\")\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            45 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if url_is_protocol(b"ftp\0" as *const u8 as *const libc::c_char as *mut libc::c_char)
        as libc::c_int != 0
    {} else {
        __assert_fail(
            b"url_is_protocol(\"ftp\")\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            46 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if url_is_protocol(
        b"javascript\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) as libc::c_int != 0
    {} else {
        __assert_fail(
            b"url_is_protocol(\"javascript\")\0" as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            47 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(b"http\0" as *const u8 as *const libc::c_char, url_get_protocol(url))
    {} else {
        __assert_fail(
            b"0 == strcmp(\"http\", url_get_protocol(url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            49 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(b"user:pass\0" as *const u8 as *const libc::c_char, url_get_auth(url))
    {} else {
        __assert_fail(
            b"0 == strcmp(\"user:pass\", url_get_auth(url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            50 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(
            b"subdomain.host.com:8080\0" as *const u8 as *const libc::c_char,
            url_get_hostname(url),
        )
    {} else {
        __assert_fail(
            b"0 == strcmp(\"subdomain.host.com:8080\", url_get_hostname(url))\0"
                as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            51 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(
            b"subdomain.host.com\0" as *const u8 as *const libc::c_char,
            url_get_host(url),
        )
    {} else {
        __assert_fail(
            b"0 == strcmp(\"subdomain.host.com\", url_get_host(url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            52 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(
            b"/p/a/t/h\0" as *const u8 as *const libc::c_char,
            url_get_pathname(url),
        )
    {} else {
        __assert_fail(
            b"0 == strcmp(\"/p/a/t/h\", url_get_pathname(url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            53 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(
            b"/p/a/t/h?query=string#hash\0" as *const u8 as *const libc::c_char,
            url_get_path(url),
        )
    {} else {
        __assert_fail(
            b"0 == strcmp(\"/p/a/t/h?query=string#hash\", url_get_path(url))\0"
                as *const u8 as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            54 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(
            b"?query=string\0" as *const u8 as *const libc::c_char,
            url_get_search(url),
        )
    {} else {
        __assert_fail(
            b"0 == strcmp(\"?query=string\", url_get_search(url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            55 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(
            b"query=string\0" as *const u8 as *const libc::c_char,
            url_get_query(url),
        )
    {} else {
        __assert_fail(
            b"0 == strcmp(\"query=string\", url_get_query(url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            56 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(b"#hash\0" as *const u8 as *const libc::c_char, url_get_hash(url))
    {} else {
        __assert_fail(
            b"0 == strcmp(\"#hash\", url_get_hash(url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            57 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(b"8080\0" as *const u8 as *const libc::c_char, url_get_port(url))
    {} else {
        __assert_fail(
            b"0 == strcmp(\"8080\", url_get_port(url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            58 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(b"git\0" as *const u8 as *const libc::c_char, url_get_protocol(gh_url))
    {} else {
        __assert_fail(
            b"0 == strcmp(\"git\", url_get_protocol(gh_url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            60 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(
            b"github.com\0" as *const u8 as *const libc::c_char,
            url_get_host(gh_url),
        )
    {} else {
        __assert_fail(
            b"0 == strcmp(\"github.com\", url_get_host(gh_url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            61 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(
            b"github.com\0" as *const u8 as *const libc::c_char,
            url_get_hostname(gh_url),
        )
    {} else {
        __assert_fail(
            b"0 == strcmp(\"github.com\", url_get_hostname(gh_url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            62 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(b"git\0" as *const u8 as *const libc::c_char, url_get_auth(gh_url))
    {} else {
        __assert_fail(
            b"0 == strcmp(\"git\", url_get_auth(gh_url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            63 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(
            b"jwerle/url.h.git\0" as *const u8 as *const libc::c_char,
            url_get_pathname(gh_url),
        )
    {} else {
        __assert_fail(
            b"0 == strcmp(\"jwerle/url.h.git\", url_get_pathname(gh_url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            64 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    if 0 as libc::c_int
        == strcmp(
            b"jwerle/url.h.git\0" as *const u8 as *const libc::c_char,
            url_get_path(gh_url),
        )
    {} else {
        __assert_fail(
            b"0 == strcmp(\"jwerle/url.h.git\", url_get_path(gh_url))\0" as *const u8
                as *const libc::c_char,
            b"test.c\0" as *const u8 as *const libc::c_char,
            65 as libc::c_int as libc::c_uint,
            b"int main(void)\0" as *const u8 as *const libc::c_char,
        );
    };
    url_free(parsed.as_mut());
    return 0 as libc::c_int;
}
