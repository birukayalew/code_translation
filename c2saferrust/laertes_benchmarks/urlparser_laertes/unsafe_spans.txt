test.rs:78:1: 87:2
pub unsafe extern "C" fn strdup(mut str: * const std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut n: i32 =
        strlen(str).wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong) as
            std::os::raw::c_int;
    let mut dup: * mut i8 =
        malloc(n as std::os::raw::c_ulong) as *mut std::os::raw::c_char;
    if !dup.is_null() { strcpy(dup, str); }
    return dup;
}
test.rs:90:6027: 290:92
unsafe fn laertes_init_URL_SCHEMES() {
URL_SCHEMES = [b"aaa\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"aaas\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"about\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"acap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"acct\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"adiumxtra\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"afp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"afs\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"aim\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"apt\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"attachment\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"aw\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"beshare\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"bitcoin\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"bolo\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"callto\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"cap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"chrome\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"crome-extension\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"com-evenbrite-attendee\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"cid\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"coap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"coaps\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"content\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"crid\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"cvs\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"data\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"dav\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"dict\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"lna-playsingle\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"dln-playcontainer\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"dns\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"dtn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"dvb\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ed2k\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"facetime\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"fax\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"feed\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"file\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"finger\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"fish\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ftp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"geo\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"gg\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"git\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"gizmoproject\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"go\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"gopher\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"gtalk\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"h323\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"hcp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"http\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"https\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"iax\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"icap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"icon\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"im\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"imap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"info\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ipn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ipp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"irc\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"irc6\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ircs\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"iris\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"iris.beep\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"iris.xpc\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"iris.xpcs\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"iris.lws\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"itms\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"jabber\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"jar\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"jms\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"keyparc\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"lastfm\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ldap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ldaps\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"magnet\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mailserver\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"mailto\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"maps\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"market\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"message\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mid\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mms\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"modem\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ms-help\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mssettings-power\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"msnim\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"msrp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"msrps\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mtqp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mumble\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mupdate\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mvn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"news\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"nfs\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ni\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"nih\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"nntp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"notes\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"oid\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"paquelocktoken\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"pack\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"palm\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"paparazzi\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"pkcs11\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"platform\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"pop\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"pres\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"prospero\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"proxy\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"psyc\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"query\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"reload\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"res\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"resource\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"rmi\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"rsync\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"rtmp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"rtsp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"secondlife\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"service\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"session\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sftp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sgn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"shttp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sieve\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sip\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sips\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"skype\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"smb\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sms\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"snews\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"snmp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"soap.beep\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"soap.beeps\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"soldat\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"spotify\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ssh\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"steam\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"svn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"tag\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"teamspeak\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"tel\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"telnet\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"tftp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"things\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"thismessage\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"tn3270\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"tip\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"tv\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"udp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"unreal\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"urn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ut2004\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"vemmi\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ventrilo\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"videotex\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"view-source\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"wais\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"webcal\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ws\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"wss\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"wtai\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"wyciwyg\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"xcon\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"xcon-userid\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"xfire\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"xmlrpc.beep\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"xmlrpc.beeps\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"xmpp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"xri\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ymsgr\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"javascript\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"jdbc\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"doi\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char];}
test.rs:292:1: 412:2
pub unsafe extern "C" fn url_parse(mut url: * mut std::os::raw::c_char)
 -> Option<Box<crate::url_data>> {
    let mut data: Option<Box<crate::url_data>> =
        Some(Box::new(crate::url_data::new()));
    if owned_as_ref(& data).is_none() { return Option::<Box<crate::url_data>>::None }
    (*(owned_as_mut(&mut data)).unwrap()).href = url;
    let mut tmp: * mut i8 = (0 as * mut i8);
    let mut tmp_url: * mut i8 = strdup(url);
    let mut is_ssh: bool = 0 as std::os::raw::c_int != 0;
    let mut protocol: * mut i8 = url_get_protocol(tmp_url);
    if protocol.is_null() { return Option::<Box<crate::url_data>>::None }
    let mut protocol_len: i32 =
        strlen(protocol) as std::os::raw::c_int + 3 as std::os::raw::c_int;
    (*(owned_as_mut(&mut data)).unwrap()).protocol = protocol;
    is_ssh = url_is_ssh(protocol);
    let mut auth: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    let mut auth_len: i32 = 0 as std::os::raw::c_int;
    tmp = strstr(tmp_url, b"@\x00" as *const u8 as *const std::os::raw::c_char);
    if !tmp.is_null() {
        auth =
            get_part(tmp_url,
                     b"%[^@]\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len);
        auth_len = strlen(auth) as std::os::raw::c_int;
        if !auth.is_null() { auth_len += 1 }
    }
    (*(owned_as_mut(&mut data)).unwrap()).auth = auth;
    let mut hostname: * mut i8 = 0 as *mut std::os::raw::c_char;
    hostname =
        if is_ssh as std::os::raw::c_int != 0 {
            get_part(tmp_url,
                     b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len)
        } else {
            get_part(tmp_url,
                     b"%[^/]\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len)
        };
    if hostname.is_null() { return Option::<Box<crate::url_data>>::None }
    let mut hostname_len: i32 = strlen(hostname) as std::os::raw::c_int;
    let mut tmp_hostname: * mut i8 = strdup(hostname);
    (*(owned_as_mut(&mut data)).unwrap()).hostname = hostname;
    let mut host: * mut i8 =
        malloc(strlen(tmp_hostname).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                     as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    sscanf(tmp_hostname, b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char,
           host);
    if host.is_null() { return Option::<Box<crate::url_data>>::None }
    let mut host_len: i32 = strlen(host) as std::os::raw::c_int;
    (*(owned_as_mut(&mut data)).unwrap()).host = host;
    let mut tmp_path: * mut i8 = 0 as *mut std::os::raw::c_char;
    tmp_path =
        if is_ssh as std::os::raw::c_int != 0 {
            get_part(tmp_url, b":%s\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len + hostname_len)
        } else {
            get_part(tmp_url, b"/%s\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len + hostname_len)
        };
    let mut path: * mut i8 =
        malloc(strlen(tmp_path).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                 as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    if path.is_null() { return Option::<Box<crate::url_data>>::None }
    let mut fmt: * mut i8 =
        if is_ssh as std::os::raw::c_int != 0 {
            b"%s\x00" as *const u8 as *const std::os::raw::c_char
        } else { b"/%s\x00" as *const u8 as *const std::os::raw::c_char } as
            *mut std::os::raw::c_char;
    sprintf(path, fmt, tmp_path);
    (*(owned_as_mut(&mut data)).unwrap()).path = path;
    free(tmp_path as *mut std::os::raw::c_void);
    let mut pathname: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if pathname.is_null() { return Option::<Box<crate::url_data>>::None }
    strcat(pathname, b"\x00" as *const u8 as *const std::os::raw::c_char);
    tmp_path = strdup(path);
    sscanf(tmp_path, b"%[^? | ^#]\x00" as *const u8 as *const std::os::raw::c_char,
           pathname);
    let mut pathname_len: i32 = strlen(pathname) as std::os::raw::c_int;
    (*(owned_as_mut(&mut data)).unwrap()).pathname = pathname;
    let mut search: * mut i8 =
        malloc(::std::mem::size_of::<*mut std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if search.is_null() { return Option::<Box<crate::url_data>>::None }
    tmp_path = strff(tmp_path, pathname_len);
    strcat(search, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(tmp_path, b"%[^#]\x00" as *const u8 as *const std::os::raw::c_char,
           search);
    (*(owned_as_mut(&mut data)).unwrap()).search = search;
    let mut search_len: i32 = strlen(search) as std::os::raw::c_int;
    free(tmp_path as *mut std::os::raw::c_void);
    let mut query: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if query.is_null() { return Option::<Box<crate::url_data>>::None }
    sscanf(search, b"?%s\x00" as *const u8 as *const std::os::raw::c_char, query);
    (*(owned_as_mut(&mut data)).unwrap()).query = query;
    let mut hash: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if hash.is_null() { return Option::<Box<crate::url_data>>::None }
    tmp_path = strff(path, pathname_len + search_len);
    strcat(hash, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(tmp_path, b"%s\x00" as *const u8 as *const std::os::raw::c_char, hash);
    (*(owned_as_mut(&mut data)).unwrap()).hash = hash;
    free(tmp_path as *mut std::os::raw::c_void);
    let mut port: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if port.is_null() { return Option::<Box<crate::url_data>>::None }
    tmp_hostname = strff(hostname, host_len + 1 as std::os::raw::c_int);
    sscanf(tmp_hostname, b"%s\x00" as *const u8 as *const std::os::raw::c_char, port);
    (*(owned_as_mut(&mut data)).unwrap()).port = port;
    free(tmp_hostname as *mut std::os::raw::c_void);
    return data;
}
test.rs:413:1: 424:2
unsafe extern "C" fn strff(mut ptr: * mut std::os::raw::c_char, mut n: std::os::raw::c_int)
 -> * mut std::os::raw::c_char {
    let mut y: i32 = 0 as std::os::raw::c_int;
    let mut i: i32 = 0 as std::os::raw::c_int;
    while i < n {
        let mut fresh0 = ptr;
        ptr = ptr.offset(1);
        y = *fresh0 as std::os::raw::c_int;
        i += 1
    }
    return strdup(ptr);
}
test.rs:426:1: 437:2
pub unsafe extern "C" fn url_get_protocol(mut url: * mut std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut protocol: * mut i8 =
        malloc((16 as std::os::raw::c_int as
                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                    as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    if protocol.is_null() { return 0 as *mut std::os::raw::c_char }
    sscanf(url, b"%[^://]\x00" as *const u8 as *const std::os::raw::c_char, protocol);
    if url_is_protocol(protocol) { return protocol }
    return 0 as *mut std::os::raw::c_char;
}
test.rs:439:1: 452:2
pub unsafe extern "C" fn url_is_protocol(mut str: * mut std::os::raw::c_char) -> bool {
    let mut count: i32 =
        (::std::mem::size_of::<[*mut std::os::raw::c_char; 177]>() as
             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<*mut std::os::raw::c_char>()
                                             as std::os::raw::c_ulong) as std::os::raw::c_int;
    let mut i: i32 = 0 as std::os::raw::c_int;
    while i < count {
        if 0 as std::os::raw::c_int == strcmp(URL_SCHEMES[i as usize], str) {
            return 1 as std::os::raw::c_int != 0
        }
        i += 1
    }
    return 0 as std::os::raw::c_int != 0;
}
test.rs:453:1: 482:2
unsafe extern "C" fn get_part(mut url: * mut std::os::raw::c_char,
                              mut format: * const std::os::raw::c_char,
                              mut l: std::os::raw::c_int) -> * mut std::os::raw::c_char {
    let mut has: bool = 0 as std::os::raw::c_int != 0;
    let mut tmp: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    let mut tmp_url: * mut i8 = strdup(url);
    let mut fmt_url: * mut i8 = strdup(url);
    let mut ret: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if tmp.is_null() || tmp_url.is_null() || fmt_url.is_null() ||
           ret.is_null() {
        return 0 as *mut std::os::raw::c_char
    }
    strcpy(tmp, b"\x00" as *const u8 as *const std::os::raw::c_char);
    strcpy(fmt_url, b"\x00" as *const u8 as *const std::os::raw::c_char);
    fmt_url = strff(fmt_url, l);
    sscanf(fmt_url, format, tmp);
    if 0 as std::os::raw::c_int != strcmp(tmp, tmp_url) {
        has = 1 as std::os::raw::c_int != 0;
        ret = strdup(tmp)
    }
    fmt_url = strrwd(fmt_url, l);
    free(tmp as *mut std::os::raw::c_void);
    free(tmp_url as *mut std::os::raw::c_void);
    free(fmt_url as *mut std::os::raw::c_void);
    return if has as std::os::raw::c_int != 0 { ret } else { 0 as *mut std::os::raw::c_char };
}
test.rs:483:1: 494:2
unsafe extern "C" fn strrwd(mut ptr: * mut std::os::raw::c_char, mut n: std::os::raw::c_int)
 -> * mut std::os::raw::c_char {
    let mut y: i32 = 0 as std::os::raw::c_int;
    let mut i: i32 = 0 as std::os::raw::c_int;
    while i < n {
        let mut fresh1 = ptr;
        ptr = ptr.offset(-1);
        y = *fresh1 as std::os::raw::c_int;
        i += 1
    }
    return strdup(ptr);
}
test.rs:496:1: 506:2
pub unsafe extern "C" fn url_is_ssh(mut str: * mut std::os::raw::c_char) -> bool {
    str = strdup(str);
    if 0 as std::os::raw::c_int ==
           strcmp(str, b"ssh\x00" as *const u8 as *const std::os::raw::c_char) ||
           0 as std::os::raw::c_int ==
               strcmp(str, b"git\x00" as *const u8 as *const std::os::raw::c_char) {
        free(str as *mut std::os::raw::c_void);
        return 1 as std::os::raw::c_int != 0
    }
    return 0 as std::os::raw::c_int != 0;
}
test.rs:508:1: 515:2
pub unsafe extern "C" fn url_get_auth(mut url: * mut std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut protocol: * mut i8 = url_get_protocol(url);
    if protocol.is_null() { return 0 as *mut std::os::raw::c_char }
    let mut l: i32 =
        strlen(protocol) as std::os::raw::c_int + 3 as std::os::raw::c_int;
    return get_part(url, b"%[^@]\x00" as *const u8 as *const std::os::raw::c_char, l);
}
test.rs:517:1: 544:2
pub unsafe extern "C" fn url_get_hostname(mut url: * mut std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut l: i32 = 3 as std::os::raw::c_int;
    let mut protocol: * mut i8 = url_get_protocol(url);
    let mut tmp_protocol: * mut i8 = strdup(protocol);
    let mut auth: * mut i8 = url_get_auth(url);
    if protocol.is_null() { return 0 as *mut std::os::raw::c_char }
    if !auth.is_null() {
        l =
            (l as
                 std::os::raw::c_ulong).wrapping_add(strlen(auth).wrapping_add(1 as
                                                                           std::os::raw::c_int
                                                                           as
                                                                           std::os::raw::c_ulong))
                as std::os::raw::c_int as std::os::raw::c_int
    }
    if !auth.is_null() { free(auth as *mut std::os::raw::c_void); }
    l += strlen(protocol) as std::os::raw::c_int;
    free(protocol as *mut std::os::raw::c_void);
    let mut hostname: * mut i8 =
        if url_is_ssh(tmp_protocol) as std::os::raw::c_int != 0 {
            get_part(url, b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char, l)
        } else {
            get_part(url, b"%[^/]\x00" as *const u8 as *const std::os::raw::c_char, l)
        };
    free(tmp_protocol as *mut std::os::raw::c_void);
    return hostname;
}
test.rs:546:1: 556:2
pub unsafe extern "C" fn url_get_host(mut url: * mut std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut host: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    let mut hostname: * mut i8 = url_get_hostname(url);
    if host.is_null() || hostname.is_null() { return 0 as *mut std::os::raw::c_char }
    sscanf(hostname, b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char, host);
    free(hostname as *mut std::os::raw::c_void);
    return host;
}
test.rs:558:1: 569:2
pub unsafe extern "C" fn url_get_pathname(mut url: * mut std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut path: * mut i8 = url_get_path(url);
    let mut pathname: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if path.is_null() || pathname.is_null() { return 0 as *mut std::os::raw::c_char }
    strcat(pathname, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(path, b"%[^?]\x00" as *const u8 as *const std::os::raw::c_char, pathname);
    free(path as *mut std::os::raw::c_void);
    return pathname;
}
test.rs:571:1: 605:2
pub unsafe extern "C" fn url_get_path(mut url: * mut std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut l: i32 = 3 as std::os::raw::c_int;
    let mut tmp_path: * mut i8 = 0 as *mut std::os::raw::c_char;
    let mut protocol: * mut i8 = url_get_protocol(url);
    let mut auth: * mut i8 = url_get_auth(url);
    let mut hostname: * mut i8 = url_get_hostname(url);
    if protocol.is_null() || hostname.is_null() {
        return 0 as *mut std::os::raw::c_char
    }
    let mut is_ssh: bool = url_is_ssh(protocol);
    l += strlen(protocol) as std::os::raw::c_int + strlen(hostname) as std::os::raw::c_int;
    if !auth.is_null() { l += strlen(auth) as std::os::raw::c_int + 1 as std::os::raw::c_int }
    tmp_path =
        if is_ssh as std::os::raw::c_int != 0 {
            get_part(url, b":%s\x00" as *const u8 as *const std::os::raw::c_char, l)
        } else {
            get_part(url, b"/%s\x00" as *const u8 as *const std::os::raw::c_char, l)
        };
    let mut fmt: * mut i8 =
        if is_ssh as std::os::raw::c_int != 0 {
            b"%s\x00" as *const u8 as *const std::os::raw::c_char
        } else { b"/%s\x00" as *const u8 as *const std::os::raw::c_char } as
            *mut std::os::raw::c_char;
    let mut path: * mut i8 =
        malloc(strlen(tmp_path).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                 as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    sprintf(path, fmt, tmp_path);
    if !auth.is_null() { free(auth as *mut std::os::raw::c_void); }
    free(protocol as *mut std::os::raw::c_void);
    free(hostname as *mut std::os::raw::c_void);
    free(tmp_path as *mut std::os::raw::c_void);
    return path;
}
test.rs:607:1: 624:2
pub unsafe extern "C" fn url_get_search(mut url: * mut std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut path: * mut i8 = url_get_path(url);
    let mut pathname: * mut i8 = url_get_pathname(url);
    let mut search: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if path.is_null() || search.is_null() { return 0 as *mut std::os::raw::c_char }
    let mut tmp_path: * mut i8 =
        strff(path, strlen(pathname) as std::os::raw::c_int);
    strcat(search, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(tmp_path, b"%[^#]\x00" as *const u8 as *const std::os::raw::c_char,
           search);
    tmp_path = strrwd(tmp_path, strlen(pathname) as std::os::raw::c_int);
    free(path as *mut std::os::raw::c_void);
    free(pathname as *mut std::os::raw::c_void);
    return search;
}
test.rs:626:1: 636:2
pub unsafe extern "C" fn url_get_query(mut url: * mut std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut search: * mut i8 = url_get_search(url);
    let mut query: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if search.is_null() { return 0 as *mut std::os::raw::c_char }
    sscanf(search, b"?%s\x00" as *const u8 as *const std::os::raw::c_char, query);
    free(search as *mut std::os::raw::c_void);
    return query;
}
test.rs:638:1: 661:2
pub unsafe extern "C" fn url_get_hash(mut url: * mut std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut hash: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if hash.is_null() { return 0 as *mut std::os::raw::c_char }
    let mut path: * mut i8 = url_get_path(url);
    if path.is_null() { return 0 as *mut std::os::raw::c_char }
    let mut pathname: * mut i8 = url_get_pathname(url);
    if pathname.is_null() { return 0 as *mut std::os::raw::c_char }
    let mut search: * mut i8 = url_get_search(url);
    let mut pathname_len: i32 = strlen(pathname) as std::os::raw::c_int;
    let mut search_len: i32 = strlen(search) as std::os::raw::c_int;
    let mut tmp_path: * mut i8 =
        strff(path, pathname_len + search_len);
    strcat(hash, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(tmp_path, b"%s\x00" as *const u8 as *const std::os::raw::c_char, hash);
    tmp_path = strrwd(tmp_path, pathname_len + search_len);
    free(tmp_path as *mut std::os::raw::c_void);
    free(pathname as *mut std::os::raw::c_void);
    free(path as *mut std::os::raw::c_void);
    if !search.is_null() { free(search as *mut std::os::raw::c_void); }
    return hash;
}
test.rs:663:1: 679:2
pub unsafe extern "C" fn url_get_port(mut url: * mut std::os::raw::c_char)
 -> * mut std::os::raw::c_char {
    let mut port: * mut i8 =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    let mut hostname: * mut i8 = url_get_hostname(url);
    let mut host: * mut i8 = url_get_host(url);
    if port.is_null() || hostname.is_null() { return 0 as *mut std::os::raw::c_char }
    let mut tmp_hostname: * mut i8 =
        strff(hostname,
              strlen(host).wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong) as
                  std::os::raw::c_int);
    sscanf(tmp_hostname, b"%s\x00" as *const u8 as *const std::os::raw::c_char, port);
    free(hostname as *mut std::os::raw::c_void);
    free(tmp_hostname as *mut std::os::raw::c_void);
    return port;
}
test.rs:681:1: 700:2
pub unsafe extern "C" fn url_free<'a1>(mut data: Option<&'a1 mut crate::url_data>) {
    if borrow(& data).is_none() { return }
    if !(*(borrow_mut(&mut data)).unwrap()).auth.is_null() { free((*(borrow_mut(&mut data)).unwrap()).auth as *mut std::os::raw::c_void); }
    if !(*(borrow_mut(&mut data)).unwrap()).protocol.is_null() {
        free((*(borrow_mut(&mut data)).unwrap()).protocol as *mut std::os::raw::c_void);
    }
    if !(*(borrow_mut(&mut data)).unwrap()).hostname.is_null() {
        free((*(borrow_mut(&mut data)).unwrap()).hostname as *mut std::os::raw::c_void);
    }
    if !(*(borrow_mut(&mut data)).unwrap()).host.is_null() { free((*(borrow_mut(&mut data)).unwrap()).host as *mut std::os::raw::c_void); }
    if !(*(borrow_mut(&mut data)).unwrap()).pathname.is_null() {
        free((*(borrow_mut(&mut data)).unwrap()).pathname as *mut std::os::raw::c_void);
    }
    if !(*(borrow_mut(&mut data)).unwrap()).path.is_null() { free((*(borrow_mut(&mut data)).unwrap()).path as *mut std::os::raw::c_void); }
    if !(*(borrow_mut(&mut data)).unwrap()).hash.is_null() { free((*(borrow_mut(&mut data)).unwrap()).hash as *mut std::os::raw::c_void); }
    if !(*(borrow_mut(&mut data)).unwrap()).search.is_null() {
        free((*(borrow_mut(&mut data)).unwrap()).search as *mut std::os::raw::c_void);
    }
    if !(*(borrow_mut(&mut data)).unwrap()).query.is_null() { free((*(borrow_mut(&mut data)).unwrap()).query as *mut std::os::raw::c_void); };
}
test.rs:702:1: 704:2
pub unsafe extern "C" fn url_inspect(mut url: * mut std::os::raw::c_char) {
    url_data_inspect(owned_as_mut(&mut url_parse(url)));
}
test.rs:706:1: 730:2
pub unsafe extern "C" fn url_data_inspect<'a1>(mut data: Option<&'a1 mut crate::url_data>) {
    printf(b"#url =>\n\x00" as *const u8 as *const std::os::raw::c_char);
    printf(b"    .href: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).href);
    printf(b"    .protocol: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).protocol);
    printf(b"    .host: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).host);
    printf(b"    .auth: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).auth);
    printf(b"    .hostname: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).hostname);
    printf(b"    .pathname: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).pathname);
    printf(b"    .search: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).search);
    printf(b"    .path: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).path);
    printf(b"    .hash: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).hash);
    printf(b"    .query: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).query);
    printf(b"    .port: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*(borrow(& data)).unwrap()).port);
}
test.rs:731:1: 1096:2
unsafe fn main_0() -> std::os::raw::c_int {
    //url_inspect("https://google.com/search?q=github");
    let mut gh_url: * mut i8 =
        b"git://git@github.com:jwerle/url.h.git\x00" as *const u8 as
            *const std::os::raw::c_char as *mut std::os::raw::c_char;
    let mut url: * mut i8 =
        b"http://user:pass@subdomain.host.com:8080/p/a/t/h?query=string#hash\x00"
            as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char;
    let mut parsed: Option<Box<crate::url_data>> = url_parse(url);
    let mut gh_parsed: Option<Box<crate::url_data>> = url_parse(gh_url);
    if owned_as_ref(& parsed).is_none() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     15 as std::os::raw::c_int,
                     b"parsed\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if owned_as_ref(& gh_parsed).is_none() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     16 as std::os::raw::c_int,
                     b"gh_parsed\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    url_data_inspect(owned_as_mut(&mut parsed));
    url_data_inspect(owned_as_mut(&mut gh_parsed));
    if (*(owned_as_mut(&mut parsed)).unwrap()).href.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     21 as std::os::raw::c_int,
                     b"parsed->href\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut parsed)).unwrap()).auth.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     22 as std::os::raw::c_int,
                     b"parsed->auth\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut parsed)).unwrap()).protocol.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     23 as std::os::raw::c_int,
                     b"parsed->protocol\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut parsed)).unwrap()).port.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     24 as std::os::raw::c_int,
                     b"parsed->port\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut parsed)).unwrap()).hostname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     25 as std::os::raw::c_int,
                     b"parsed->hostname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut parsed)).unwrap()).host.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     26 as std::os::raw::c_int,
                     b"parsed->host\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut parsed)).unwrap()).pathname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     27 as std::os::raw::c_int,
                     b"parsed->pathname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut parsed)).unwrap()).path.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     28 as std::os::raw::c_int,
                     b"parsed->path\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut parsed)).unwrap()).hash.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     29 as std::os::raw::c_int,
                     b"parsed->hash\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut parsed)).unwrap()).search.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     30 as std::os::raw::c_int,
                     b"parsed->search\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut parsed)).unwrap()).query.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     31 as std::os::raw::c_int,
                     b"parsed->query\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut gh_parsed)).unwrap()).href.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     33 as std::os::raw::c_int,
                     b"gh_parsed->href\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut gh_parsed)).unwrap()).protocol.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     34 as std::os::raw::c_int,
                     b"gh_parsed->protocol\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut gh_parsed)).unwrap()).host.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     35 as std::os::raw::c_int,
                     b"gh_parsed->host\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut gh_parsed)).unwrap()).auth.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     36 as std::os::raw::c_int,
                     b"gh_parsed->auth\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut gh_parsed)).unwrap()).hostname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     37 as std::os::raw::c_int,
                     b"gh_parsed->hostname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut gh_parsed)).unwrap()).pathname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     38 as std::os::raw::c_int,
                     b"gh_parsed->pathname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*(owned_as_mut(&mut gh_parsed)).unwrap()).path.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     39 as std::os::raw::c_int,
                     b"gh_parsed->path\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"http\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     41 as std::os::raw::c_int,
                     b"url_is_protocol(\"http\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"https\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     42 as std::os::raw::c_int,
                     b"url_is_protocol(\"https\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"git\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     43 as std::os::raw::c_int,
                     b"url_is_protocol(\"git\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"ssh\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     44 as std::os::raw::c_int,
                     b"url_is_protocol(\"ssh\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"sftp\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     45 as std::os::raw::c_int,
                     b"url_is_protocol(\"sftp\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"ftp\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     46 as std::os::raw::c_int,
                     b"url_is_protocol(\"ftp\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"javascript\x00" as *const u8 as *const std::os::raw::c_char
                            as *mut std::os::raw::c_char) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     47 as std::os::raw::c_int,
                     b"url_is_protocol(\"javascript\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"http\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_protocol(url))) as std::os::raw::c_int as std::os::raw::c_long !=
           0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     49 as std::os::raw::c_int,
                     b"0 == strcmp(\"http\", url_get_protocol(url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"user:pass\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_auth(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     50 as std::os::raw::c_int,
                     b"0 == strcmp(\"user:pass\", url_get_auth(url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"subdomain.host.com:8080\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_hostname(url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     51 as std::os::raw::c_int,
                     b"0 == strcmp(\"subdomain.host.com:8080\", url_get_hostname(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"subdomain.host.com\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_host(url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     52 as std::os::raw::c_int,
                     b"0 == strcmp(\"subdomain.host.com\", url_get_host(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"/p/a/t/h\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_pathname(url))) as std::os::raw::c_int as std::os::raw::c_long !=
           0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     53 as std::os::raw::c_int,
                     b"0 == strcmp(\"/p/a/t/h\", url_get_pathname(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"/p/a/t/h?query=string#hash\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_path(url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     54 as std::os::raw::c_int,
                     b"0 == strcmp(\"/p/a/t/h?query=string#hash\", url_get_path(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"?query=string\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_search(url))) as std::os::raw::c_int as std::os::raw::c_long != 0
       {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     55 as std::os::raw::c_int,
                     b"0 == strcmp(\"?query=string\", url_get_search(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"query=string\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_query(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     56 as std::os::raw::c_int,
                     b"0 == strcmp(\"query=string\", url_get_query(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"#hash\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_hash(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     57 as std::os::raw::c_int,
                     b"0 == strcmp(\"#hash\", url_get_hash(url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"8080\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_port(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     58 as std::os::raw::c_int,
                     b"0 == strcmp(\"8080\", url_get_port(url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"git\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_protocol(gh_url))) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     60 as std::os::raw::c_int,
                     b"0 == strcmp(\"git\", url_get_protocol(gh_url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"github.com\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_host(gh_url))) as std::os::raw::c_int as std::os::raw::c_long != 0
       {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     61 as std::os::raw::c_int,
                     b"0 == strcmp(\"github.com\", url_get_host(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"github.com\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_hostname(gh_url))) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     62 as std::os::raw::c_int,
                     b"0 == strcmp(\"github.com\", url_get_hostname(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"git\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_auth(gh_url))) as std::os::raw::c_int as std::os::raw::c_long != 0
       {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     63 as std::os::raw::c_int,
                     b"0 == strcmp(\"git\", url_get_auth(gh_url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"jwerle/url.h.git\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_pathname(gh_url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     64 as std::os::raw::c_int,
                     b"0 == strcmp(\"jwerle/url.h.git\", url_get_pathname(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"jwerle/url.h.git\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_path(gh_url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn((*core::intrinsics::transmute::<&'_ [u8; 5], &'_ [i8; 5]>(b"main\x00")).as_ptr(),
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     65 as std::os::raw::c_int,
                     b"0 == strcmp(\"jwerle/url.h.git\", url_get_path(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    url_free(owned_as_mut(&mut parsed));
    return 0 as std::os::raw::c_int;
}
test.rs:1097:17: 1097:65
unsafe { ::std::process::exit(main_0() as i32) }
