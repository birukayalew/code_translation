src/truncate.rs:264:5: 266:6
unsafe {
        lc_messages = setlocale(5, std::ptr::null());
    }
src/truncate.rs:269:31: 269:69
unsafe { CStr::from_ptr(lc_messages) }
src/truncate.rs:299:9: 299:40
unsafe { CStr::from_ptr(node) }
src/truncate.rs:318:30: 318:89
unsafe { gettext(message.as_ptr() as *const libc::c_char) }
src/truncate.rs:319:41: 319:107
unsafe { std::ffi::CStr::from_ptr(translated_message).to_bytes() }
src/truncate.rs:395:13: 395:198
unsafe { CStr::from_ptr(gettext(format!("Try '{} --help' for more information.\n", unsafe { CStr::from_ptr(program_name).to_string_lossy() }).as_ptr() as *const i8)).to_string_lossy() }
src/truncate.rs:400:13: 400:188
unsafe { CStr::from_ptr(gettext(format!("Usage: {} OPTION... FILE...\n", unsafe { CStr::from_ptr(program_name).to_string_lossy() }).as_ptr() as *const i8)).to_string_lossy() }
src/truncate.rs:404:13: 404:372
unsafe { CStr::from_ptr(gettext("Shrink or extend the size of each FILE to the specified size\n\nA FILE argument that does not exist is created.\n\nIf a FILE is larger than the specified size, the extra data is lost.\nIf a FILE is shorter, it is extended and the sparse extended part (hole)\nreads as zero bytes.\n".as_ptr() as *const i8)).to_string_lossy() }
src/truncate.rs:409:13: 409:141
unsafe { CStr::from_ptr(gettext("  -c, --no-create        do not create any files\n".as_ptr() as *const i8)).to_string_lossy() }
src/truncate.rs:413:13: 413:168
unsafe { CStr::from_ptr(gettext("  -o, --io-blocks        treat SIZE as number of IO blocks instead of bytes\n".as_ptr() as *const i8)).to_string_lossy() }
src/truncate.rs:417:13: 417:204
unsafe { CStr::from_ptr(gettext("  -r, --reference=RFILE  base size on RFILE\n  -s, --size=SIZE        set or adjust the file size by SIZE bytes\n".as_ptr() as *const i8)).to_string_lossy() }
src/truncate.rs:421:13: 421:139
unsafe { CStr::from_ptr(gettext("      --help        display this help and exit\n".as_ptr() as *const i8)).to_string_lossy() }
src/truncate.rs:425:13: 425:148
unsafe { CStr::from_ptr(gettext("      --version     output version information and exit\n".as_ptr() as *const i8)).to_string_lossy() }
src/truncate.rs:430:13: 430:285
unsafe { CStr::from_ptr(gettext("\nSIZE may also be prefixed by one of the following modifying characters:\n'+' extend by, '-' reduce by, '<' at most, '>' at least,\n'/' round down to multiple of, '%' round up to multiple of.\n".as_ptr() as *const i8)).to_string_lossy() }
src/truncate.rs:437:1: 998:2
unsafe extern "C" fn do_ftruncate(
    mut fd: libc::c_int,
    mut fname: *const libc::c_char,
    mut ssize: off_t,
    mut rsize: off_t,
    mut rel_mode: rel_mode_t,
) -> bool {
    let mut sb: stat = stat {
        st_dev: 0,
        st_ino: 0,
        st_mode: 0,
        st_nlink: 0,
        st_uid: 0,
        st_gid: 0,
        st_rdev: 0,
        __pad1: 0,
        st_size: 0,
        st_blksize: 0,
        __pad2: 0,
        st_blocks: 0,
        st_atim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_mtim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_ctim: timespec { tv_sec: 0, tv_nsec: 0 },
        __glibc_reserved: [0; 2],
    };
    let mut nsize: off_t = 0;
    if (block_mode as libc::c_int != 0
        || rel_mode as libc::c_uint != 0 && rsize < 0 as libc::c_int as libc::c_long)
        && fstat(fd, &mut sb) != 0 as libc::c_int
    {
        if 0 != 0 {
            error(
                0 as libc::c_int,
                *__errno_location(),
                gettext(b"cannot fstat %s\0" as *const u8 as *const libc::c_char),
                quotearg_style(shell_escape_always_quoting_style, fname),
            );
            if 0 as libc::c_int != 0 as libc::c_int {
                unreachable!();
            } else {};
        } else {
            ({
                let __errstatus: libc::c_int = 0 as libc::c_int;
                error(
                    __errstatus,
                    *__errno_location(),
                    gettext(b"cannot fstat %s\0" as *const u8 as *const libc::c_char),
                    quotearg_style(shell_escape_always_quoting_style, fname),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
            ({
                let __errstatus: libc::c_int = 0 as libc::c_int;
                error(
                    __errstatus,
                    *__errno_location(),
                    gettext(b"cannot fstat %s\0" as *const u8 as *const libc::c_char),
                    quotearg_style(shell_escape_always_quoting_style, fname),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
        };
        return 0 as libc::c_int != 0;
    }
    if block_mode {
        let mut blksize: ptrdiff_t = (if (0 as libc::c_int) < sb.st_blksize
            && sb.st_blksize as libc::c_ulong
                <= (-(1 as libc::c_int) as size_t)
                    .wrapping_div(8 as libc::c_int as libc::c_ulong)
                    .wrapping_add(1 as libc::c_int as libc::c_ulong)
        {
            sb.st_blksize
        } else {
            512 as libc::c_int
        }) as ptrdiff_t;
        let mut ssize0: intmax_t = ssize;
        if if (0 as libc::c_int as off_t) < -(1 as libc::c_int) as off_t
            && ((if 1 as libc::c_int != 0 {
                0 as libc::c_int as libc::c_long
            } else {
                ssize
            }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
            && ((if 1 as libc::c_int != 0 {
                0 as libc::c_int as libc::c_long
            } else {
                blksize
            }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
            && (if blksize < 0 as libc::c_int as libc::c_long {
                if ssize < 0 as libc::c_int as libc::c_long {
                    if ((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            -(1 as libc::c_int) as off_t
                        }) + blksize
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    {
                        (ssize < -(1 as libc::c_int) as off_t / blksize) as libc::c_int
                    } else {
                        ((if (if (if ((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            blksize
                        }) - 1 as libc::c_int as libc::c_long)
                            < 0 as libc::c_int as libc::c_long
                        {
                            !(((((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                blksize
                            }) + 1 as libc::c_int as libc::c_long)
                                << (::core::mem::size_of::<ptrdiff_t>() as libc::c_ulong)
                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                - 1 as libc::c_int as libc::c_long)
                                * 2 as libc::c_int as libc::c_long
                                + 1 as libc::c_int as libc::c_long)
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                blksize
                            }) + 0 as libc::c_int as libc::c_long
                        }) < 0 as libc::c_int as libc::c_long
                        {
                            (blksize
                                < -(if ((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    blksize
                                }) - 1 as libc::c_int as libc::c_long)
                                    < 0 as libc::c_int as libc::c_long
                                {
                                    ((((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        blksize
                                    }) + 1 as libc::c_int as libc::c_long)
                                        << (::core::mem::size_of::<ptrdiff_t>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                        - 1 as libc::c_int as libc::c_long)
                                        * 2 as libc::c_int as libc::c_long
                                        + 1 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        blksize
                                    }) - 1 as libc::c_int as libc::c_long
                                })) as libc::c_int
                        } else {
                            ((0 as libc::c_int as libc::c_long) < blksize) as libc::c_int
                        }) != 0
                        {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                blksize
                            }) + -(1 as libc::c_int) as off_t
                                >> (::core::mem::size_of::<ptrdiff_t>() as libc::c_ulong)
                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                    .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                        } else {
                            -(1 as libc::c_int) as off_t / -blksize
                        }) <= -(1 as libc::c_int) as libc::c_long - ssize) as libc::c_int
                    }
                } else {
                    if (if (if ((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            blksize
                        }) + 0 as libc::c_int as off_t
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    {
                        !(((((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                blksize
                            }) + 0 as libc::c_int as off_t
                        }) + 1 as libc::c_int as libc::c_long)
                            << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                            - 1 as libc::c_int as libc::c_long)
                            * 2 as libc::c_int as libc::c_long
                            + 1 as libc::c_int as libc::c_long)
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                blksize
                            }) + 0 as libc::c_int as off_t
                        }) + 0 as libc::c_int as libc::c_long
                    }) < 0 as libc::c_int as libc::c_long
                    {
                        (((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            blksize
                        }) + 0 as libc::c_int as off_t)
                            < -(if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    blksize
                                }) + 0 as libc::c_int as off_t
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                ((((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        blksize
                                    }) + 0 as libc::c_int as off_t
                                }) + 1 as libc::c_int as libc::c_long)
                                    << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                    - 1 as libc::c_int as libc::c_long)
                                    * 2 as libc::c_int as libc::c_long
                                    + 1 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        blksize
                                    }) + 0 as libc::c_int as off_t
                                }) - 1 as libc::c_int as libc::c_long
                            })) as libc::c_int
                    } else {
                        ((0 as libc::c_int as libc::c_long)
                            < (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                blksize
                            }) + 0 as libc::c_int as off_t) as libc::c_int
                    }) != 0 && blksize == -(1 as libc::c_int) as libc::c_long
                    {
                        if ((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            ssize
                        }) - 1 as libc::c_int as libc::c_long)
                            < 0 as libc::c_int as libc::c_long
                        {
                            ((0 as libc::c_int as libc::c_long)
                                < ssize + 0 as libc::c_int as off_t) as libc::c_int
                        } else {
                            ((0 as libc::c_int as libc::c_long) < ssize
                                && (-(1 as libc::c_int) as libc::c_long
                                    - 0 as libc::c_int as off_t)
                                    < ssize - 1 as libc::c_int as libc::c_long) as libc::c_int
                        }
                    } else {
                        (0 as libc::c_int as off_t / blksize < ssize) as libc::c_int
                    }
                }
            } else {
                if blksize == 0 as libc::c_int as libc::c_long {
                    0 as libc::c_int
                } else {
                    if ssize < 0 as libc::c_int as libc::c_long {
                        if (if (if ((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                ssize
                            }) + 0 as libc::c_int as off_t
                        }) - 1 as libc::c_int as libc::c_long)
                            < 0 as libc::c_int as libc::c_long
                        {
                            !(((((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    ssize
                                }) + 0 as libc::c_int as off_t
                            }) + 1 as libc::c_int as libc::c_long)
                                << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                - 1 as libc::c_int as libc::c_long)
                                * 2 as libc::c_int as libc::c_long
                                + 1 as libc::c_int as libc::c_long)
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    ssize
                                }) + 0 as libc::c_int as off_t
                            }) + 0 as libc::c_int as libc::c_long
                        }) < 0 as libc::c_int as libc::c_long
                        {
                            (((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                ssize
                            }) + 0 as libc::c_int as off_t)
                                < -(if ((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        ssize
                                    }) + 0 as libc::c_int as off_t
                                }) - 1 as libc::c_int as libc::c_long)
                                    < 0 as libc::c_int as libc::c_long
                                {
                                    ((((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            ssize
                                        }) + 0 as libc::c_int as off_t
                                    }) + 1 as libc::c_int as libc::c_long)
                                        << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                        - 1 as libc::c_int as libc::c_long)
                                        * 2 as libc::c_int as libc::c_long
                                        + 1 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            ssize
                                        }) + 0 as libc::c_int as off_t
                                    }) - 1 as libc::c_int as libc::c_long
                                })) as libc::c_int
                        } else {
                            ((0 as libc::c_int as libc::c_long)
                                < (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    ssize
                                }) + 0 as libc::c_int as off_t) as libc::c_int
                        }) != 0 && ssize == -(1 as libc::c_int) as libc::c_long
                        {
                            if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                blksize
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                ((0 as libc::c_int as libc::c_long)
                                    < blksize + 0 as libc::c_int as off_t) as libc::c_int
                            } else {
                                ((-(1 as libc::c_int) as libc::c_long
                                    - 0 as libc::c_int as off_t)
                                    < blksize - 1 as libc::c_int as libc::c_long) as libc::c_int
                            }
                        } else {
                            (0 as libc::c_int as off_t / ssize < blksize) as libc::c_int
                        }
                    } else {
                        (-(1 as libc::c_int) as off_t / blksize < ssize) as libc::c_int
                    }
                }
            }) != 0
        {
            let (fresh4, _fresh5) = ssize.overflowing_mul(blksize);
            *(&mut ssize as *mut off_t) = fresh4;
            1 as libc::c_int
        } else {
            let (fresh6, fresh7) = ssize.overflowing_mul(blksize);
            *(&mut ssize as *mut off_t) = fresh6;
            fresh7 as libc::c_int
        } != 0
        {
            if false {
    error(
        0,
        0,
        gettext(b"overflow in %jd * %td byte blocks for file %s\0" as *const u8 as *const libc::c_char),
        ssize0,
        blksize,
        quotearg_style(shell_escape_always_quoting_style, fname),
    );
    unreachable!();
} else {
    let __errstatus: i32 = 0;
    error(
        __errstatus,
        0,
        gettext(b"overflow in %jd * %td byte blocks for file %s\0" as *const u8 as *const libc::c_char),
        ssize0,
        blksize,
        quotearg_style(shell_escape_always_quoting_style, fname),
    );
    unreachable!();
    
    let __errstatus: i32 = 0;
    error(
        __errstatus,
        0,
        gettext(b"overflow in %jd * %td byte blocks for file %s\0" as *const u8 as *const libc::c_char),
        ssize0,
        blksize,
        quotearg_style(shell_escape_always_quoting_style, fname),
    );
    unreachable!();
}
return false;

        }
    }
    if rel_mode as u64 != 0 {
        let mut fsize: i64 = 0;
if rsize >= 0 {
    fsize = rsize;
} else if usable_st_size(&sb) {
    fsize = sb.st_size;
    if fsize < 0 {
        error(
            0,
            0,
            gettext(b"%s has unusable, apparently negative size\0" as *const u8 as *const libc::c_char),
            quotearg_style(shell_escape_always_quoting_style, fname),
        );
        return false;
    }
} else {
    fsize = lseek(fd, 0, 2);
    if fsize < 0 {
        error(
            0,
            *__errno_location(),
            gettext(b"cannot get the size of %s\0" as *const u8 as *const libc::c_char),
            quotearg_style(shell_escape_always_quoting_style, fname),
        );
        return false;
    }
}

        if rel_mode == rm_min {
    nsize = fsize.max(ssize);
} else if rel_mode == rm_max {
    nsize = fsize.min(ssize);
} else if rel_mode == rm_rdn {
    nsize = fsize - fsize % ssize;
} else {
    if rel_mode == rm_rup {
        let r: i64 = fsize % ssize;
        ssize = if r == 0 { 0 } else { ssize - r };
    }
    let (new_nsize, overflowed) = fsize.overflowing_add(ssize);
    nsize = new_nsize;
    if overflowed {
        let __errstatus: i32 = 0;
        error(
            __errstatus,
            0,
            gettext(b"overflow extending size of file %s\0" as *const u8 as *const libc::c_char),
            quotearg_style(shell_escape_always_quoting_style, fname),
        );
        return false as i32 != 0;
    }
}

    } else {
        nsize = ssize;
    }
    if nsize < 0 as libc::c_int as libc::c_long {
        nsize = 0 as libc::c_int as off_t;
    }
    if ftruncate(fd, nsize) != 0 as libc::c_int {
        if 0 != 0 {
            error(
                0 as libc::c_int,
                *__errno_location(),
                gettext(
                    b"failed to truncate %s at %jd bytes\0" as *const u8
                        as *const libc::c_char,
                ),
                quotearg_style(shell_escape_always_quoting_style, fname),
                nsize,
            );
            if 0 as libc::c_int != 0 as libc::c_int {
                unreachable!();
            } else {};
        } else {
            ({
                let __errstatus: libc::c_int = 0 as libc::c_int;
                error(
                    __errstatus,
                    *__errno_location(),
                    gettext(
                        b"failed to truncate %s at %jd bytes\0" as *const u8
                            as *const libc::c_char,
                    ),
                    quotearg_style(shell_escape_always_quoting_style, fname),
                    nsize,
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
            ({
                let __errstatus: libc::c_int = 0 as libc::c_int;
                error(
                    __errstatus,
                    *__errno_location(),
                    gettext(
                        b"failed to truncate %s at %jd bytes\0" as *const u8
                            as *const libc::c_char,
                    ),
                    quotearg_style(shell_escape_always_quoting_style, fname),
                    nsize,
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
        };
        return 0 as libc::c_int != 0;
    }
    return 1 as libc::c_int != 0;
}
src/truncate.rs:999:1: 1515:2
unsafe fn main_0(
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) -> libc::c_int {
    let mut got_size: bool = 0 as libc::c_int != 0;
    let mut size: off_t = 0 as libc::c_int as off_t;
    let mut rsize: off_t = -(1 as libc::c_int) as off_t;
    let mut rel_mode: rel_mode_t = rm_abs;
    let mut c: libc::c_int = 0;
    set_program_name(*argv.offset(0 as libc::c_int as isize));
    setlocale(6 as libc::c_int, b"\0" as *const u8 as *const libc::c_char);
    bindtextdomain(
        b"coreutils\0" as *const u8 as *const libc::c_char,
        b"/usr/local/share/locale\0" as *const u8 as *const libc::c_char,
    );
    textdomain(b"coreutils\0" as *const u8 as *const libc::c_char);
    atexit(Some(close_stdout as unsafe extern "C" fn() -> ()));
    loop {
        c = getopt_long(
            argc,
            argv,
            b"cor:s:\0" as *const u8 as *const libc::c_char,
            longopts.as_ptr(),
            0 as *mut libc::c_int,
        );
        if !(c != -(1 as libc::c_int)) {
            break;
        }
        match c {
            99 => {
                no_create = 1 as libc::c_int != 0;
            }
            111 => {
                block_mode = 1 as libc::c_int != 0;
            }
            114 => {
                ref_file = optarg;
            }
            115 => {
                while *(*__ctype_b_loc())
                    .offset(to_uchar(*optarg) as libc::c_int as isize) as libc::c_int
                    & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
                {
                    optarg = optarg.offset(1);
                    optarg;
                }
                match *optarg as libc::c_int {
                    60 => {
                        rel_mode = rm_max;
                        optarg = optarg.offset(1);
                        optarg;
                    }
                    62 => {
                        rel_mode = rm_min;
                        optarg = optarg.offset(1);
                        optarg;
                    }
                    47 => {
                        rel_mode = rm_rdn;
                        optarg = optarg.offset(1);
                        optarg;
                    }
                    37 => {
                        rel_mode = rm_rup;
                        optarg = optarg.offset(1);
                        optarg;
                    }
                    _ => {}
                }
                while *(*__ctype_b_loc())
                    .offset(to_uchar(*optarg) as libc::c_int as isize) as libc::c_int
                    & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
                {
                    optarg = optarg.offset(1);
                    optarg;
                }
                if *optarg as libc::c_int == '+' as i32
                    || *optarg as libc::c_int == '-' as i32
                {
                    if rel_mode as u64 != 0 {
                        if 0 != 0 {
                            error(
                                0 as libc::c_int,
                                0 as libc::c_int,
                                gettext(
                                    b"multiple relative modifiers specified\0" as *const u8
                                        as *const libc::c_char,
                                ),
                            );
                            if 0 as libc::c_int != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                        } else {
                            ({
                                let __errstatus: libc::c_int = 0 as libc::c_int;
                                error(
                                    __errstatus,
                                    0 as libc::c_int,
                                    gettext(
                                        b"multiple relative modifiers specified\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                );
                                if __errstatus != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                                
                            });
                            ({
                                let __errstatus: libc::c_int = 0 as libc::c_int;
                                error(
                                    __errstatus,
                                    0 as libc::c_int,
                                    gettext(
                                        b"multiple relative modifiers specified\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                );
                                if __errstatus != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                                
                            });
                        };
                        usage(1);
                    }
                    rel_mode = rm_rel;
                }
                size = xdectoimax(
                    optarg,
                    !if (0 as libc::c_int as off_t) < -(1 as libc::c_int) as off_t {
                        -(1 as libc::c_int) as off_t
                    } else {
                        (((1 as libc::c_int as off_t)
                            << (::core::mem::size_of::<off_t>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                            - 1 as libc::c_int as libc::c_long)
                            * 2 as libc::c_int as libc::c_long
                            + 1 as libc::c_int as libc::c_long
                    },
                    if (0 as libc::c_int as off_t) < -(1 as libc::c_int) as off_t {
                        -(1 as libc::c_int) as off_t
                    } else {
                        (((1 as libc::c_int as off_t)
                            << (::core::mem::size_of::<off_t>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                            - 1 as libc::c_int as libc::c_long)
                            * 2 as libc::c_int as libc::c_long
                            + 1 as libc::c_int as libc::c_long
                    },
                    b"EgGkKmMPQRtTYZ0\0" as *const u8 as *const libc::c_char,
                    gettext(b"Invalid number\0" as *const u8 as *const libc::c_char),
                    0 as libc::c_int,
                );
                if (rel_mode == rm_rup || rel_mode == rm_rdn) && size == 0 {
    if 0 != 0 {
        error(
            1,
            0,
            gettext(b"division by zero\0".as_ptr() as *const libc::c_char),
        );
        if true {
            unreachable!();
        }
    } else {
        let __errstatus: i32 = 1;
        error(
            __errstatus,
            0,
            gettext(b"division by zero\0".as_ptr() as *const libc::c_char),
        );
        if __errstatus != 0 {
            unreachable!();
        }

        let __errstatus: i32 = 1;
        error(
            __errstatus,
            0,
            gettext(b"division by zero\0".as_ptr() as *const libc::c_char),
        );
        if __errstatus != 0 {
            unreachable!();
        }
    }
}
got_size = true;

            }
            -2 => {
                usage(0);
            }
            -3 => {
                version_etc(
    stdout,
    CString::new("truncate").unwrap().as_ptr(),
    CString::new("GNU coreutils").unwrap().as_ptr(),
    Version,
    proper_name_lite(
        CString::new("Padraig Brady").unwrap().as_ptr(),
        CString::new("Pádraig Brady").unwrap().as_ptr(),
    ),
    std::ptr::null_mut::<libc::c_char>(),
);
std::process::exit(0);

            }
            _ => {
                usage(1);
            }
        }
    }
    argv = argv.offset(optind as isize);
    argc -= optind;
    if ref_file.is_null() && !got_size {
        if 0 != 0 {
            error(
                0 as libc::c_int,
                0 as libc::c_int,
                gettext(
                    b"you must specify either %s or %s\0" as *const u8
                        as *const libc::c_char,
                ),
                quote_n(
                    0 as libc::c_int,
                    b"--size\0" as *const u8 as *const libc::c_char,
                ),
                quote_n(
                    1 as libc::c_int,
                    b"--reference\0" as *const u8 as *const libc::c_char,
                ),
            );
            if 0 as libc::c_int != 0 as libc::c_int {
                unreachable!();
            } else {};
        } else {
            ({
                let __errstatus: libc::c_int = 0 as libc::c_int;
                error(
                    __errstatus,
                    0 as libc::c_int,
                    gettext(
                        b"you must specify either %s or %s\0" as *const u8
                            as *const libc::c_char,
                    ),
                    quote_n(
                        0 as libc::c_int,
                        b"--size\0" as *const u8 as *const libc::c_char,
                    ),
                    quote_n(
                        1 as libc::c_int,
                        b"--reference\0" as *const u8 as *const libc::c_char,
                    ),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
            ({
                let __errstatus: libc::c_int = 0 as libc::c_int;
                error(
                    __errstatus,
                    0 as libc::c_int,
                    gettext(
                        b"you must specify either %s or %s\0" as *const u8
                            as *const libc::c_char,
                    ),
                    quote_n(
                        0 as libc::c_int,
                        b"--size\0" as *const u8 as *const libc::c_char,
                    ),
                    quote_n(
                        1 as libc::c_int,
                        b"--reference\0" as *const u8 as *const libc::c_char,
                    ),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
        };
        usage(1);
    }
    if !ref_file.is_null() && got_size as libc::c_int != 0 && rel_mode as u64 == 0 {
        if 0 != 0 {
            error(
                0 as libc::c_int,
                0 as libc::c_int,
                gettext(
                    b"you must specify a relative %s with %s\0" as *const u8
                        as *const libc::c_char,
                ),
                quote_n(
                    0 as libc::c_int,
                    b"--size\0" as *const u8 as *const libc::c_char,
                ),
                quote_n(
                    1 as libc::c_int,
                    b"--reference\0" as *const u8 as *const libc::c_char,
                ),
            );
            if 0 as libc::c_int != 0 as libc::c_int {
                unreachable!();
            } else {};
        } else {
            ({
                let __errstatus: libc::c_int = 0 as libc::c_int;
                error(
                    __errstatus,
                    0 as libc::c_int,
                    gettext(
                        b"you must specify a relative %s with %s\0" as *const u8
                            as *const libc::c_char,
                    ),
                    quote_n(
                        0 as libc::c_int,
                        b"--size\0" as *const u8 as *const libc::c_char,
                    ),
                    quote_n(
                        1 as libc::c_int,
                        b"--reference\0" as *const u8 as *const libc::c_char,
                    ),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
            ({
                let __errstatus: libc::c_int = 0 as libc::c_int;
                error(
                    __errstatus,
                    0 as libc::c_int,
                    gettext(
                        b"you must specify a relative %s with %s\0" as *const u8
                            as *const libc::c_char,
                    ),
                    quote_n(
                        0 as libc::c_int,
                        b"--size\0" as *const u8 as *const libc::c_char,
                    ),
                    quote_n(
                        1 as libc::c_int,
                        b"--reference\0" as *const u8 as *const libc::c_char,
                    ),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
        };
        usage(1);
    }
    if block_mode as libc::c_int != 0 && !got_size {
        if 0 != 0 {
            error(
                0 as libc::c_int,
                0 as libc::c_int,
                gettext(
                    b"%s was specified but %s was not\0" as *const u8
                        as *const libc::c_char,
                ),
                quote_n(
                    0 as libc::c_int,
                    b"--io-blocks\0" as *const u8 as *const libc::c_char,
                ),
                quote_n(
                    1 as libc::c_int,
                    b"--size\0" as *const u8 as *const libc::c_char,
                ),
            );
            if 0 as libc::c_int != 0 as libc::c_int {
                unreachable!();
            } else {};
        } else {
            ({
                let __errstatus: libc::c_int = 0 as libc::c_int;
                error(
                    __errstatus,
                    0 as libc::c_int,
                    gettext(
                        b"%s was specified but %s was not\0" as *const u8
                            as *const libc::c_char,
                    ),
                    quote_n(
                        0 as libc::c_int,
                        b"--io-blocks\0" as *const u8 as *const libc::c_char,
                    ),
                    quote_n(
                        1 as libc::c_int,
                        b"--size\0" as *const u8 as *const libc::c_char,
                    ),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
            ({
                let __errstatus: libc::c_int = 0 as libc::c_int;
                error(
                    __errstatus,
                    0 as libc::c_int,
                    gettext(
                        b"%s was specified but %s was not\0" as *const u8
                            as *const libc::c_char,
                    ),
                    quote_n(
                        0 as libc::c_int,
                        b"--io-blocks\0" as *const u8 as *const libc::c_char,
                    ),
                    quote_n(
                        1 as libc::c_int,
                        b"--size\0" as *const u8 as *const libc::c_char,
                    ),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
        };
        usage(1);
    }
    if argc < 1 {
    let errstatus = 0;
    error(errstatus, 0, gettext(b"missing file operand\0".as_ptr() as *const libc::c_char));
    if errstatus != 0 {
        unreachable!();
    }
    usage(1);
}

    if !ref_file.is_null() {
    let ref_file_str = unsafe { std::ffi::CStr::from_ptr(ref_file) };
    let ref_file_path = ref_file_str.to_str().unwrap();

    let sb = std::fs::metadata(ref_file_path).map_err(|e| {
        error(
            1,
            e.raw_os_error().unwrap_or(0),
            gettext(b"cannot stat %s\0" as *const u8 as *const libc::c_char),
            quotearg_style(shell_escape_always_quoting_style, ref_file),
        );
    });

    let mut file_size: i64 = -1;
    if let Ok(metadata) = sb {
        file_size = metadata.len() as i64;
    } else {
        let ref_fd = open(ref_file, 0);
        if ref_fd >= 0 {
            let file_end = unsafe { lseek(ref_fd, 0, 2) };
            let saved_errno = std::io::Error::last_os_error().raw_os_error().unwrap_or(0);
            unsafe { close(ref_fd) };
            if file_end >= 0 {
                file_size = file_end;
            } else {
                // Note: We cannot set errno directly in safe Rust.
                // This is a workaround to handle the error appropriately.
                std::process::exit(saved_errno);
            }
        }
    }

    if file_size < 0 {
        error(
            1,
            std::io::Error::last_os_error().raw_os_error().unwrap_or(0),
            gettext(b"cannot get the size of %s\0" as *const u8 as *const libc::c_char),
            quotearg_style(shell_escape_always_quoting_style, ref_file),
        );
    }

    if !got_size {
        size = file_size;
    } else {
        rsize = file_size;
    }
}

let oflags = 0o1 | if no_create { 0 } else { 0o100 } | 0o4000;
let mut errors = false;
let mut fname: *const libc::c_char = std::ptr::null();

    loop {
    let fname = match unsafe { *argv } {
        ptr if ptr.is_null() => break,
        ptr => ptr,
    };

    let fd = open(fname, oflags, 0o400 | 0o200 | 0o400 >> 3 | 0o200 >> 3 | 0o400 >> 6 | 0o200 >> 6);
    
    if fd < 0 {
        if !(no_create && unsafe { *__errno_location() } == 2) {
            let error_message = gettext(b"cannot open %s for writing\0" as *const u8 as *const libc::c_char);
            error(0, unsafe { *__errno_location() }, error_message, quotearg_style(shell_escape_always_quoting_style, fname));
            errors = true;
        }
    } else {
        errors |= !do_ftruncate(fd, fname, size, rsize, rel_mode);
        if close(fd) != 0 {
            let error_message = gettext(b"failed to close %s\0" as *const u8 as *const libc::c_char);
            error(0, unsafe { *__errno_location() }, error_message, quotearg_style(shell_escape_always_quoting_style, fname));
            errors = true;
        }
    }
    argv = argv.add(1);
}
return if errors { 1 } else { 0 };

}
src/truncate.rs:1527:18: 1527:82
unsafe { main_0(argc, argv.as_ptr() as *mut *mut libc::c_char) }
