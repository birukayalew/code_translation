-----------DefId(0:799 ~ rust[fc84]::src::quotearg::quotearg_buffer_restyled)---------------
About to walk this statement: src/quotearg.rs:321:5: 1158:6 (#0) with length 838
About to walk this statement: src/quotearg.rs:434:9: 1122:10 (#0) with length 689
About to walk this statement: src/quotearg.rs:434:9: 1122:10 (#204) with length 689
Processing a block of length 3
Its span is src/quotearg.rs:434:67: 436:10 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:436:16: 438:10 (#0)
It has 1 statements
Adding a new block of length 1
About to walk this statement: src/quotearg.rs:471:13: 961:14 (#0) with length 491
Processing a block of length 66
Its span is src/quotearg.rs:472:22: 537:18 (#0)
It has 1 statements
Adding a new block of length 64
Processing a block of length 133
Its span is src/quotearg.rs:538:23: 670:18 (#0)
It has 1 statements
Adding a new block of length 131
Processing a block of length 4
Its span is src/quotearg.rs:671:22: 674:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:675:22: 678:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:679:23: 682:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:683:23: 686:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:687:23: 690:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:691:22: 694:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:695:23: 698:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 19
Its span is src/quotearg.rs:699:23: 717:18 (#0)
It has 2 statements
Adding a new block of length 17
Processing a block of length 13
Its span is src/quotearg.rs:718:30: 730:18 (#0)
It has 1 statements
Adding a new block of length 11
Processing a block of length 3
Its span is src/quotearg.rs:731:29: 733:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:734:23: 736:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:737:23: 739:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:740:63: 742:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:743:33: 745:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:746:29: 748:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 35
Its span is src/quotearg.rs:749:23: 783:18 (#0)
It has 3 statements
Adding a new block of length 33
Processing a block of length 4
Its span is src/quotearg.rs:789:38: 792:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 168
Its span is src/quotearg.rs:793:22: 960:18 (#0)
It has 5 statements
Adding a new piece of length 70
Adding a new block of length 96
New length: 47
Processing a block of length 240
Its span is src/quotearg.rs:439:9: 1122:10 (#0)
It has 19 statements
Adding a new piece of length 144
Adding a new block of length 94
Processing a block of length 5
Its span is src/quotearg.rs:434:9: 1122:10 (#204)
It has 1 statements
Adding a new block of length 5
New length: 5
Processing a block of length 5
Its span is src/quotearg.rs:434:9: 1122:10 (#204)
It has 1 statements
Adding a new block of length 5
New length: 5
Processing a block of length 144
Its span is src/quotearg.rs:321:17: 1158:6 (#0)
It has 11 statements
Adding a new block of length 142
New length: 2
Processing a block of length 56
Its span is src/quotearg.rs:306:13: 1197:2 (#0)
It has 14 statements
Adding a new block of length 54
Here is a piece of a function:
(*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
Here is a piece of a function:
(i == argsize) as libc::c_int
Here is a piece of a function:
if backslash_escapes {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        escaping = 1 as libc::c_int != 0;
                        if quoting_style as libc::c_uint
                            == shell_always_quoting_style as libc::c_int as libc::c_uint
                            && !pending_shell_escape_end
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            pending_shell_escape_end = 1 as libc::c_int != 0;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                            && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                                < argsize
                            && '0' as i32
                                <= *arg
                                    .offset(
                                        i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                    ) as libc::c_int
                            && *arg
                                .offset(
                                    i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                ) as libc::c_int <= '9' as i32
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                        }
                        c = '0' as i32 as libc::c_uchar;
                        current_block = 253337042034819032;
                    } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
                        current_block = 13619784596304402172;
                    } else {
                        current_block = 253337042034819032;
                    }
Here is a piece of a function:
match quoting_style as libc::c_uint {
                        2 => {
                            current_block = 17954593875197965021;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        5 => {
                            current_block = 14514781131754033399;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        _ => {
                            current_block = 253337042034819032;
                        }
                    }
Here is a piece of a function:
esc = 'a' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
Here is a piece of a function:
esc = 'b' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
Here is a piece of a function:
esc = 'f' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
Here is a piece of a function:
esc = 'n' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
Here is a piece of a function:
esc = 'r' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
Here is a piece of a function:
esc = 't' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
Here is a piece of a function:
esc = 'v' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
Here is a piece of a function:
esc = c;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        current_block = 4476262310586904498;
                    } else if backslash_escapes as libc::c_int != 0
                        && elide_outer_quotes as libc::c_int != 0
                        && quote_string_len != 0
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 9215498979640025612;
                    }
Here is a piece of a function:
if if argsize == 18446744073709551615 as libc::c_ulong {
                        (*arg.offset(1 as libc::c_int as isize) as libc::c_int
                            == '\0' as i32) as libc::c_int
                    } else {
                        (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
                    } == 0
                    {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 16442922512115311366;
                    }
Here is a piece of a function:
current_block = 16442922512115311366;
Here is a piece of a function:
current_block = 4634307283396172174;
Here is a piece of a function:
current_block = 7549413860336125482;
Here is a piece of a function:
current_block = 13059411171234995867;
Here is a piece of a function:
current_block = 16620298045565028098;
Here is a piece of a function:
current_block = 15155215915847730705;
Here is a piece of a function:
encountered_single_quote = 1 as libc::c_int != 0;
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        if buffersize != 0 && orig_buffersize == 0 {
                            orig_buffersize = buffersize;
                            buffersize = 0 as libc::c_int as size_t;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                        current_block = 253337042034819032;
                    } else {
                        current_block = 253337042034819032;
                    }
Here is a piece of a function:
c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 253337042034819032;
Here is a piece of a function:
let mut m: size_t = 0;
                    let mut printable: bool = false;
                    if unibyte_locale {
                        m = 1 as libc::c_int as size_t;
                        printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
                            as libc::c_int
                            & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
                            != 0 as libc::c_int;
                    } else {
                        let mut mbstate: mbstate_t = mbstate_t {
                            __count: 0,
                            __value: C2RustUnnamed { __wch: 0 },
                        };
                        mbszero(&mut mbstate);
                        m = 0 as libc::c_int as size_t;
                        printable = 1 as libc::c_int != 0;
                        if argsize == 18446744073709551615 as libc::c_ulong {
                            argsize = strlen(arg);
                        }
                        let mut w: char32_t = 0;
                        let mut bytes: size_t = rpl_mbrtoc32(
                            &mut w,
                            &*arg.offset(i.wrapping_add(m) as isize),
                            argsize.wrapping_sub(i.wrapping_add(m)),
                            &mut mbstate,
                        );
                        if !(bytes == 0 as libc::c_int as libc::c_ulong) {
                            if bytes == -(1 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                            } else if bytes == -(2 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                                while i.wrapping_add(m) < argsize
                                    && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
                                        != 0
                                {
                                    m = m.wrapping_add(1);
                                    m;
                                }
                            } else {
                                if '[' as i32 == 0x5b as libc::c_int
                                    && elide_outer_quotes as libc::c_int != 0
                                    && quoting_style as libc::c_uint
                                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                                {
                                    let mut j: size_t = 0;
                                    j = 1 as libc::c_int as size_t;
                                    while j < bytes {
                                        match *arg
                                            .offset(i.wrapping_add(m).wrapping_add(j) as isize)
                                            as libc::c_int
                                        {
                                            91 | 92 | 94 | 96 | 124 => {
                                                current_block = 7928555609993211441;
                                                break 's_25;
                                            }
                                            _ => {}
                                        }
                                        j = j.wrapping_add(1);
                                        j;
                                    }
                                }
                                if c32isprint(w) == 0 {
                                    printable = 0 as libc::c_int != 0;
                                }
                                m = (m as libc::c_ulong).wrapping_add(bytes) as size_t
                                    as size_t;
                            }
                        }
                    }
                    c_and_shell_quote_compat = printable;
Here is a piece of a function:
if (1 as libc::c_int as libc::c_ulong) < m
                        || backslash_escapes as libc::c_int != 0 && !printable
                    {
                        let mut ilim: size_t = i.wrapping_add(m);
                        loop {
                            if backslash_escapes as libc::c_int != 0 && !printable {
                                if elide_outer_quotes {
                                    current_block = 7928555609993211441;
                                    break 's_25;
                                }
                                escaping = 1 as libc::c_int != 0;
                                if quoting_style as libc::c_uint
                                    == shell_always_quoting_style as libc::c_int as libc::c_uint
                                    && !pending_shell_escape_end
                                {
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    pending_shell_escape_end = 1 as libc::c_int != 0;
                                }
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32
                                        + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
                                    as libc::c_uchar;
                            } else if is_right_quote {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                is_right_quote = 0 as libc::c_int != 0;
                            }
                            if ilim <= i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                            {
                                break;
                            }
                            if pending_shell_escape_end as libc::c_int != 0 && !escaping
                            {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                pending_shell_escape_end = 0 as libc::c_int != 0;
                            }
                            if len < buffersize {
                                *buffer.offset(len as isize) = c as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            i = i.wrapping_add(1);
                            c = *arg.offset(i as isize) as libc::c_uchar;
                        }
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 253337042034819032;
                    }
Here is a piece of a function:
let mut c: libc::c_uchar = 0;
            let mut esc: libc::c_uchar = 0;
            let mut is_right_quote: bool = 0 as libc::c_int != 0;
            let mut escaping: bool = 0 as libc::c_int != 0;
            let mut c_and_shell_quote_compat: bool = 0 as libc::c_int != 0;
            if backslash_escapes as libc::c_int != 0
                && quoting_style as libc::c_uint
                    != shell_always_quoting_style as libc::c_int as libc::c_uint
                && quote_string_len != 0
                && i.wrapping_add(quote_string_len)
                    <= (if argsize == 18446744073709551615 as libc::c_ulong
                        && (1 as libc::c_int as libc::c_ulong) < quote_string_len
                    {
                        argsize = strlen(arg);
                        argsize
                    } else {
                        argsize
                    })
                && memcmp(
                    arg.offset(i as isize) as *const libc::c_void,
                    quote_string as *const libc::c_void,
                    quote_string_len,
                ) == 0 as libc::c_int
            {
                if elide_outer_quotes {
                    current_block = 7928555609993211441;
                    break 's_25;
                }
                is_right_quote = 1 as libc::c_int != 0;
            }
            c = *arg.offset(i as isize) as libc::c_uchar;
            match c as libc::c_int {
                0 => {
                    <chunk 2>if backslash_escapes {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        escaping = 1 as libc::c_int != 0;
                        if quoting_style as libc::c_uint
                            == shell_always_quoting_style as libc::c_int as libc::c_uint
                            && !pending_shell_escape_end
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            pending_shell_escape_end = 1 as libc::c_int != 0;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                            && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                                < argsize
                            && '0' as i32
                                <= *arg
                                    .offset(
                                        i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                    ) as libc::c_int
                            && *arg
                                .offset(
                                    i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                ) as libc::c_int <= '9' as i32
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                        }
                        c = '0' as i32 as libc::c_uchar;
                        current_block = 253337042034819032;
                    } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
                        current_block = 13619784596304402172;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                63 => {
                    <chunk 3>
                }
                7 => {
                    <chunk 4>
                }
                8 => {
                    <chunk 5>
                }
                12 => {
                    <chunk 6>
                }
                10 => {
                    <chunk 7>
                }
                13 => {
                    <chunk 8>
                }
                9 => {
                    <chunk 9>
                }
                11 => {
                    <chunk 10>
                }
                92 => {
                    <chunk 11>
                }
                123 | 125 => {
                    <chunk 12>
                }
                35 | 126 => {
                    <chunk 13>
                }
                32 => {
                    <chunk 14>
                }
                33 => {
                    <chunk 15>
                }
                34 | 36 | 38 | 40 | 41 | 42 | 59 | 60 | 61 => {
                    <chunk 16>
                }
                62 | 91 | 94 => {
                    <chunk 17>
                }
                96 | 124 => {
                    <chunk 18>
                }
                39 => {
                    <chunk 19>
                }
                37 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56
                | 57 | 58 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76
                | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90
                | 93 | 95 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107
                | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119
                | 120 | 121 | 122 => {
                    <chunk 20>
                }
                _ => {
                    <chunk 21>
                    <chunk 22>
                }
            }
            match current_block {
                16442922512115311366 => {
                    if i != 0 as libc::c_int as libc::c_ulong {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 4634307283396172174;
                    }
                }
                9215498979640025612 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 1190876092451756080;
                }
                _ => {}
            }
            match current_block {
                1190876092451756080 => {
                    if backslash_escapes {
                        c = esc;
                        current_block = 3173013908131212616;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                4634307283396172174 => {
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 7549413860336125482;
                }
                _ => {}
            }
            match current_block {
                7549413860336125482 => {
                    current_block = 13059411171234995867;
                }
                _ => {}
            }
            match current_block {
                13059411171234995867 => {
                    current_block = 16620298045565028098;
                }
                _ => {}
            }
            match current_block {
                16620298045565028098 => {
                    current_block = 15155215915847730705;
                }
                _ => {}
            }
            match current_block {
                15155215915847730705 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 253337042034819032;
                }
                _ => {}
            }
Here is a piece of a function:
match current_block {
                253337042034819032 => {
                    if !((backslash_escapes as libc::c_int != 0
                        && quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                        || elide_outer_quotes as libc::c_int != 0)
                        && !quote_these_too.is_null()
                        && *quote_these_too
                            .offset(
                                (c as libc::c_ulong)
                                    .wrapping_div(
                                        (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                    ) as isize,
                            )
                            >> (c as libc::c_ulong)
                                .wrapping_rem(
                                    (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                ) & 1 as libc::c_int as libc::c_uint != 0)
                        && !is_right_quote
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 3173013908131212616;
                    }
                }
                _ => {}
            }
            match current_block {
                3173013908131212616 => {
                    if elide_outer_quotes {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    escaping = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && !pending_shell_escape_end
                    {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 1 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    current_block = 4476262310586904498;
                }
                _ => {}
            }
            match current_block {
                4476262310586904498 => {
                    if pending_shell_escape_end as libc::c_int != 0 && !escaping {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = c as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    if !c_and_shell_quote_compat {
                        all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
                    }
                }
                _ => {}
            }
            i = i.wrapping_add(1);
            i;
Here is a piece of a function:
while if argsize == 18446744073709551615 as libc::c_ulong {
            <chunk 0>(*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
        } else {
            <chunk 1>
        } == 0
        {
            <chunk 23>
            <chunk 24>
        }
Here is a piece of a function:
while if argsize == 18446744073709551615 as libc::c_ulong {
            <chunk 0>(*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
        } else {
            <chunk 1>
        } == 0
        {
            <chunk 23>
            <chunk 24>
        }
Here is a piece of a function:
pending_shell_escape_end = 0 as libc::c_int != 0;
        let mut current_block_48: u64;
        match quoting_style as libc::c_uint {
            6 => {
                quoting_style = c_quoting_style;
                elide_outer_quotes = 1 as libc::c_int != 0;
                current_block_48 = 1283995450065962895;
            }
            5 => {
                current_block_48 = 1283995450065962895;
            }
            7 => {
                backslash_escapes = 1 as libc::c_int != 0;
                elide_outer_quotes = 0 as libc::c_int != 0;
                current_block_48 = 2989495919056355252;
            }
            8 | 9 | 10 => {
                if quoting_style as libc::c_uint
                    != custom_quoting_style as libc::c_int as libc::c_uint
                {
                    left_quote = gettext_quote(
                        b"`\0" as *const u8 as *const libc::c_char,
                        quoting_style,
                    );
                    right_quote = gettext_quote(
                        b"'\0" as *const u8 as *const libc::c_char,
                        quoting_style,
                    );
                }
                if !elide_outer_quotes {
                    quote_string = left_quote;
                    while *quote_string != 0 {
                        if len < buffersize {
                            *buffer.offset(len as isize) = *quote_string;
                        }
                        len = len.wrapping_add(1);
                        len;
                        quote_string = quote_string.offset(1);
                        quote_string;
                    }
                }
                backslash_escapes = 1 as libc::c_int != 0;
                quote_string = right_quote;
                quote_string_len = strlen(quote_string);
                current_block_48 = 2989495919056355252;
            }
            3 => {
                backslash_escapes = 1 as libc::c_int != 0;
                current_block_48 = 2694013637280298776;
            }
            1 => {
                current_block_48 = 2694013637280298776;
            }
            4 => {
                current_block_48 = 2266290538919981374;
            }
            2 => {
                current_block_48 = 14141891332124833771;
            }
            0 => {
                elide_outer_quotes = 0 as libc::c_int != 0;
                current_block_48 = 2989495919056355252;
            }
            _ => {
                abort();
            }
        }
        match current_block_48 {
            1283995450065962895 => {
                if !elide_outer_quotes {
                    if len < buffersize {
                        *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                }
                backslash_escapes = 1 as libc::c_int != 0;
                quote_string = b"\"\0" as *const u8 as *const libc::c_char;
                quote_string_len = 1 as libc::c_int as size_t;
                current_block_48 = 2989495919056355252;
            }
            2694013637280298776 => {
                elide_outer_quotes = 1 as libc::c_int != 0;
                current_block_48 = 2266290538919981374;
            }
            _ => {}
        }
        match current_block_48 {
            2266290538919981374 => {
                if !elide_outer_quotes {
                    backslash_escapes = 1 as libc::c_int != 0;
                }
                current_block_48 = 14141891332124833771;
            }
            _ => {}
        }
        match current_block_48 {
            14141891332124833771 => {
                quoting_style = shell_always_quoting_style;
                if !elide_outer_quotes {
                    if len < buffersize {
                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                }
                quote_string = b"'\0" as *const u8 as *const libc::c_char;
                quote_string_len = 1 as libc::c_int as size_t;
            }
            _ => {}
        }
        i = 0 as libc::c_int as size_t;
        <chunk 25>while if argsize == 18446744073709551615 as libc::c_ulong {
            (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
        } else {
            (i == argsize) as libc::c_int
        } == 0
        {
            let mut c: libc::c_uchar = 0;
            let mut esc: libc::c_uchar = 0;
            let mut is_right_quote: bool = 0 as libc::c_int != 0;
            let mut escaping: bool = 0 as libc::c_int != 0;
            let mut c_and_shell_quote_compat: bool = 0 as libc::c_int != 0;
            if backslash_escapes as libc::c_int != 0
                && quoting_style as libc::c_uint
                    != shell_always_quoting_style as libc::c_int as libc::c_uint
                && quote_string_len != 0
                && i.wrapping_add(quote_string_len)
                    <= (if argsize == 18446744073709551615 as libc::c_ulong
                        && (1 as libc::c_int as libc::c_ulong) < quote_string_len
                    {
                        argsize = strlen(arg);
                        argsize
                    } else {
                        argsize
                    })
                && memcmp(
                    arg.offset(i as isize) as *const libc::c_void,
                    quote_string as *const libc::c_void,
                    quote_string_len,
                ) == 0 as libc::c_int
            {
                if elide_outer_quotes {
                    current_block = 7928555609993211441;
                    break 's_25;
                }
                is_right_quote = 1 as libc::c_int != 0;
            }
            c = *arg.offset(i as isize) as libc::c_uchar;
            match c as libc::c_int {
                0 => {
                    if backslash_escapes {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        escaping = 1 as libc::c_int != 0;
                        if quoting_style as libc::c_uint
                            == shell_always_quoting_style as libc::c_int as libc::c_uint
                            && !pending_shell_escape_end
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            pending_shell_escape_end = 1 as libc::c_int != 0;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                            && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                                < argsize
                            && '0' as i32
                                <= *arg
                                    .offset(
                                        i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                    ) as libc::c_int
                            && *arg
                                .offset(
                                    i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                ) as libc::c_int <= '9' as i32
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                        }
                        c = '0' as i32 as libc::c_uchar;
                        current_block = 253337042034819032;
                    } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
                        current_block = 13619784596304402172;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                63 => {
                    match quoting_style as libc::c_uint {
                        2 => {
                            current_block = 17954593875197965021;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        5 => {
                            current_block = 14514781131754033399;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        _ => {
                            current_block = 253337042034819032;
                        }
                    }
                }
                7 => {
                    esc = 'a' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                8 => {
                    esc = 'b' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                12 => {
                    esc = 'f' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                10 => {
                    esc = 'n' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                13 => {
                    esc = 'r' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                9 => {
                    esc = 't' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                11 => {
                    esc = 'v' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                92 => {
                    esc = c;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        current_block = 4476262310586904498;
                    } else if backslash_escapes as libc::c_int != 0
                        && elide_outer_quotes as libc::c_int != 0
                        && quote_string_len != 0
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 9215498979640025612;
                    }
                }
                123 | 125 => {
                    if if argsize == 18446744073709551615 as libc::c_ulong {
                        (*arg.offset(1 as libc::c_int as isize) as libc::c_int
                            == '\0' as i32) as libc::c_int
                    } else {
                        (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
                    } == 0
                    {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 16442922512115311366;
                    }
                }
                35 | 126 => {
                    current_block = 16442922512115311366;
                }
                32 => {
                    current_block = 4634307283396172174;
                }
                33 => {
                    current_block = 7549413860336125482;
                }
                34 | 36 | 38 | 40 | 41 | 42 | 59 | 60 | 61 => {
                    current_block = 13059411171234995867;
                }
                62 | 91 | 94 => {
                    current_block = 16620298045565028098;
                }
                96 | 124 => {
                    current_block = 15155215915847730705;
                }
                39 => {
                    encountered_single_quote = 1 as libc::c_int != 0;
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        if buffersize != 0 && orig_buffersize == 0 {
                            orig_buffersize = buffersize;
                            buffersize = 0 as libc::c_int as size_t;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                        current_block = 253337042034819032;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                37 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56
                | 57 | 58 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76
                | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90
                | 93 | 95 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107
                | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119
                | 120 | 121 | 122 => {
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 253337042034819032;
                }
                _ => {
                    let mut m: size_t = 0;
                    let mut printable: bool = false;
                    if unibyte_locale {
                        m = 1 as libc::c_int as size_t;
                        printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
                            as libc::c_int
                            & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
                            != 0 as libc::c_int;
                    } else {
                        let mut mbstate: mbstate_t = mbstate_t {
                            __count: 0,
                            __value: C2RustUnnamed { __wch: 0 },
                        };
                        mbszero(&mut mbstate);
                        m = 0 as libc::c_int as size_t;
                        printable = 1 as libc::c_int != 0;
                        if argsize == 18446744073709551615 as libc::c_ulong {
                            argsize = strlen(arg);
                        }
                        let mut w: char32_t = 0;
                        let mut bytes: size_t = rpl_mbrtoc32(
                            &mut w,
                            &*arg.offset(i.wrapping_add(m) as isize),
                            argsize.wrapping_sub(i.wrapping_add(m)),
                            &mut mbstate,
                        );
                        if !(bytes == 0 as libc::c_int as libc::c_ulong) {
                            if bytes == -(1 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                            } else if bytes == -(2 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                                while i.wrapping_add(m) < argsize
                                    && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
                                        != 0
                                {
                                    m = m.wrapping_add(1);
                                    m;
                                }
                            } else {
                                if '[' as i32 == 0x5b as libc::c_int
                                    && elide_outer_quotes as libc::c_int != 0
                                    && quoting_style as libc::c_uint
                                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                                {
                                    let mut j: size_t = 0;
                                    j = 1 as libc::c_int as size_t;
                                    while j < bytes {
                                        match *arg
                                            .offset(i.wrapping_add(m).wrapping_add(j) as isize)
                                            as libc::c_int
                                        {
                                            91 | 92 | 94 | 96 | 124 => {
                                                current_block = 7928555609993211441;
                                                break 's_25;
                                            }
                                            _ => {}
                                        }
                                        j = j.wrapping_add(1);
                                        j;
                                    }
                                }
                                if c32isprint(w) == 0 {
                                    printable = 0 as libc::c_int != 0;
                                }
                                m = (m as libc::c_ulong).wrapping_add(bytes) as size_t
                                    as size_t;
                            }
                        }
                    }
                    c_and_shell_quote_compat = printable;
                    if (1 as libc::c_int as libc::c_ulong) < m
                        || backslash_escapes as libc::c_int != 0 && !printable
                    {
                        let mut ilim: size_t = i.wrapping_add(m);
                        loop {
                            if backslash_escapes as libc::c_int != 0 && !printable {
                                if elide_outer_quotes {
                                    current_block = 7928555609993211441;
                                    break 's_25;
                                }
                                escaping = 1 as libc::c_int != 0;
                                if quoting_style as libc::c_uint
                                    == shell_always_quoting_style as libc::c_int as libc::c_uint
                                    && !pending_shell_escape_end
                                {
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    pending_shell_escape_end = 1 as libc::c_int != 0;
                                }
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32
                                        + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
                                    as libc::c_uchar;
                            } else if is_right_quote {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                is_right_quote = 0 as libc::c_int != 0;
                            }
                            if ilim <= i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                            {
                                break;
                            }
                            if pending_shell_escape_end as libc::c_int != 0 && !escaping
                            {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                pending_shell_escape_end = 0 as libc::c_int != 0;
                            }
                            if len < buffersize {
                                *buffer.offset(len as isize) = c as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            i = i.wrapping_add(1);
                            c = *arg.offset(i as isize) as libc::c_uchar;
                        }
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
            }
            match current_block {
                16442922512115311366 => {
                    if i != 0 as libc::c_int as libc::c_ulong {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 4634307283396172174;
                    }
                }
                9215498979640025612 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 1190876092451756080;
                }
                _ => {}
            }
            match current_block {
                1190876092451756080 => {
                    if backslash_escapes {
                        c = esc;
                        current_block = 3173013908131212616;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                4634307283396172174 => {
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 7549413860336125482;
                }
                _ => {}
            }
            match current_block {
                7549413860336125482 => {
                    current_block = 13059411171234995867;
                }
                _ => {}
            }
            match current_block {
                13059411171234995867 => {
                    current_block = 16620298045565028098;
                }
                _ => {}
            }
            match current_block {
                16620298045565028098 => {
                    current_block = 15155215915847730705;
                }
                _ => {}
            }
            match current_block {
                15155215915847730705 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 253337042034819032;
                }
                _ => {}
            }
            match current_block {
                253337042034819032 => {
                    if !((backslash_escapes as libc::c_int != 0
                        && quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                        || elide_outer_quotes as libc::c_int != 0)
                        && !quote_these_too.is_null()
                        && *quote_these_too
                            .offset(
                                (c as libc::c_ulong)
                                    .wrapping_div(
                                        (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                    ) as isize,
                            )
                            >> (c as libc::c_ulong)
                                .wrapping_rem(
                                    (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                ) & 1 as libc::c_int as libc::c_uint != 0)
                        && !is_right_quote
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 3173013908131212616;
                    }
                }
                _ => {}
            }
            match current_block {
                3173013908131212616 => {
                    if elide_outer_quotes {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    escaping = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && !pending_shell_escape_end
                    {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 1 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    current_block = 4476262310586904498;
                }
                _ => {}
            }
            match current_block {
                4476262310586904498 => {
                    if pending_shell_escape_end as libc::c_int != 0 && !escaping {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = c as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    if !c_and_shell_quote_compat {
                        all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
                    }
                }
                _ => {}
            }
            i = i.wrapping_add(1);
            i;
        }
        if len == 0 as libc::c_int as libc::c_ulong
            && quoting_style as libc::c_uint
                == shell_always_quoting_style as libc::c_int as libc::c_uint
            && elide_outer_quotes as libc::c_int != 0
        {
            current_block = 7928555609993211441;
            break;
        }
        if !(quoting_style as libc::c_uint
            == shell_always_quoting_style as libc::c_int as libc::c_uint
            && !elide_outer_quotes && encountered_single_quote as libc::c_int != 0)
        {
            current_block = 6412618891452676311;
            break;
        }
        if all_c_and_shell_quote_compat {
            return quotearg_buffer_restyled(
                buffer,
                orig_buffersize,
                arg,
                argsize,
                c_quoting_style,
                flags,
                quote_these_too,
                left_quote,
                right_quote,
            )
        } else {
            if !(buffersize == 0 && orig_buffersize != 0) {
                current_block = 6412618891452676311;
                break;
            }
            buffersize = orig_buffersize;
            len = 0 as libc::c_int as size_t;
        }
Here is a piece of a function:
let mut pending_shell_escape_end: bool = false;
    let mut current_block: u64;
    let mut i: size_t = 0;
    let mut len: size_t = 0 as libc::c_int as size_t;
    let mut orig_buffersize: size_t = 0 as libc::c_int as size_t;
    let mut quote_string: *const libc::c_char = 0 as *const libc::c_char;
    let mut quote_string_len: size_t = 0 as libc::c_int as size_t;
    let mut backslash_escapes: bool = 0 as libc::c_int != 0;
    let mut unibyte_locale: bool = __ctype_get_mb_cur_max()
        == 1 as libc::c_int as libc::c_ulong;
    let mut elide_outer_quotes: bool = flags & QA_ELIDE_OUTER_QUOTES as libc::c_int
        != 0 as libc::c_int;
    let mut encountered_single_quote: bool = 0 as libc::c_int != 0;
    let mut all_c_and_shell_quote_compat: bool = 1 as libc::c_int != 0;
    's_25: loop {
        <chunk 27>pending_shell_escape_end = 0 as libc::c_int != 0;
        let mut current_block_48: u64;
        match quoting_style as libc::c_uint {
            6 => {
                quoting_style = c_quoting_style;
                elide_outer_quotes = 1 as libc::c_int != 0;
                current_block_48 = 1283995450065962895;
            }
            5 => {
                current_block_48 = 1283995450065962895;
            }
            7 => {
                backslash_escapes = 1 as libc::c_int != 0;
                elide_outer_quotes = 0 as libc::c_int != 0;
                current_block_48 = 2989495919056355252;
            }
            8 | 9 | 10 => {
                if quoting_style as libc::c_uint
                    != custom_quoting_style as libc::c_int as libc::c_uint
                {
                    left_quote = gettext_quote(
                        b"`\0" as *const u8 as *const libc::c_char,
                        quoting_style,
                    );
                    right_quote = gettext_quote(
                        b"'\0" as *const u8 as *const libc::c_char,
                        quoting_style,
                    );
                }
                if !elide_outer_quotes {
                    quote_string = left_quote;
                    while *quote_string != 0 {
                        if len < buffersize {
                            *buffer.offset(len as isize) = *quote_string;
                        }
                        len = len.wrapping_add(1);
                        len;
                        quote_string = quote_string.offset(1);
                        quote_string;
                    }
                }
                backslash_escapes = 1 as libc::c_int != 0;
                quote_string = right_quote;
                quote_string_len = strlen(quote_string);
                current_block_48 = 2989495919056355252;
            }
            3 => {
                backslash_escapes = 1 as libc::c_int != 0;
                current_block_48 = 2694013637280298776;
            }
            1 => {
                current_block_48 = 2694013637280298776;
            }
            4 => {
                current_block_48 = 2266290538919981374;
            }
            2 => {
                current_block_48 = 14141891332124833771;
            }
            0 => {
                elide_outer_quotes = 0 as libc::c_int != 0;
                current_block_48 = 2989495919056355252;
            }
            _ => {
                abort();
            }
        }
        match current_block_48 {
            1283995450065962895 => {
                if !elide_outer_quotes {
                    if len < buffersize {
                        *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                }
                backslash_escapes = 1 as libc::c_int != 0;
                quote_string = b"\"\0" as *const u8 as *const libc::c_char;
                quote_string_len = 1 as libc::c_int as size_t;
                current_block_48 = 2989495919056355252;
            }
            2694013637280298776 => {
                elide_outer_quotes = 1 as libc::c_int != 0;
                current_block_48 = 2266290538919981374;
            }
            _ => {}
        }
        match current_block_48 {
            2266290538919981374 => {
                if !elide_outer_quotes {
                    backslash_escapes = 1 as libc::c_int != 0;
                }
                current_block_48 = 14141891332124833771;
            }
            _ => {}
        }
        match current_block_48 {
            14141891332124833771 => {
                quoting_style = shell_always_quoting_style;
                if !elide_outer_quotes {
                    if len < buffersize {
                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                }
                quote_string = b"'\0" as *const u8 as *const libc::c_char;
                quote_string_len = 1 as libc::c_int as size_t;
            }
            _ => {}
        }
        i = 0 as libc::c_int as size_t;
        while if argsize == 18446744073709551615 as libc::c_ulong {
            (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
        } else {
            (i == argsize) as libc::c_int
        } == 0
        {
            let mut c: libc::c_uchar = 0;
            let mut esc: libc::c_uchar = 0;
            let mut is_right_quote: bool = 0 as libc::c_int != 0;
            let mut escaping: bool = 0 as libc::c_int != 0;
            let mut c_and_shell_quote_compat: bool = 0 as libc::c_int != 0;
            if backslash_escapes as libc::c_int != 0
                && quoting_style as libc::c_uint
                    != shell_always_quoting_style as libc::c_int as libc::c_uint
                && quote_string_len != 0
                && i.wrapping_add(quote_string_len)
                    <= (if argsize == 18446744073709551615 as libc::c_ulong
                        && (1 as libc::c_int as libc::c_ulong) < quote_string_len
                    {
                        argsize = strlen(arg);
                        argsize
                    } else {
                        argsize
                    })
                && memcmp(
                    arg.offset(i as isize) as *const libc::c_void,
                    quote_string as *const libc::c_void,
                    quote_string_len,
                ) == 0 as libc::c_int
            {
                if elide_outer_quotes {
                    current_block = 7928555609993211441;
                    break 's_25;
                }
                is_right_quote = 1 as libc::c_int != 0;
            }
            c = *arg.offset(i as isize) as libc::c_uchar;
            match c as libc::c_int {
                0 => {
                    if backslash_escapes {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        escaping = 1 as libc::c_int != 0;
                        if quoting_style as libc::c_uint
                            == shell_always_quoting_style as libc::c_int as libc::c_uint
                            && !pending_shell_escape_end
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            pending_shell_escape_end = 1 as libc::c_int != 0;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                            && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                                < argsize
                            && '0' as i32
                                <= *arg
                                    .offset(
                                        i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                    ) as libc::c_int
                            && *arg
                                .offset(
                                    i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                ) as libc::c_int <= '9' as i32
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                        }
                        c = '0' as i32 as libc::c_uchar;
                        current_block = 253337042034819032;
                    } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
                        current_block = 13619784596304402172;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                63 => {
                    match quoting_style as libc::c_uint {
                        2 => {
                            current_block = 17954593875197965021;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        5 => {
                            current_block = 14514781131754033399;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        _ => {
                            current_block = 253337042034819032;
                        }
                    }
                }
                7 => {
                    esc = 'a' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                8 => {
                    esc = 'b' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                12 => {
                    esc = 'f' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                10 => {
                    esc = 'n' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                13 => {
                    esc = 'r' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                9 => {
                    esc = 't' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                11 => {
                    esc = 'v' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                92 => {
                    esc = c;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        current_block = 4476262310586904498;
                    } else if backslash_escapes as libc::c_int != 0
                        && elide_outer_quotes as libc::c_int != 0
                        && quote_string_len != 0
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 9215498979640025612;
                    }
                }
                123 | 125 => {
                    if if argsize == 18446744073709551615 as libc::c_ulong {
                        (*arg.offset(1 as libc::c_int as isize) as libc::c_int
                            == '\0' as i32) as libc::c_int
                    } else {
                        (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
                    } == 0
                    {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 16442922512115311366;
                    }
                }
                35 | 126 => {
                    current_block = 16442922512115311366;
                }
                32 => {
                    current_block = 4634307283396172174;
                }
                33 => {
                    current_block = 7549413860336125482;
                }
                34 | 36 | 38 | 40 | 41 | 42 | 59 | 60 | 61 => {
                    current_block = 13059411171234995867;
                }
                62 | 91 | 94 => {
                    current_block = 16620298045565028098;
                }
                96 | 124 => {
                    current_block = 15155215915847730705;
                }
                39 => {
                    encountered_single_quote = 1 as libc::c_int != 0;
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        if buffersize != 0 && orig_buffersize == 0 {
                            orig_buffersize = buffersize;
                            buffersize = 0 as libc::c_int as size_t;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                        current_block = 253337042034819032;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                37 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56
                | 57 | 58 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76
                | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90
                | 93 | 95 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107
                | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119
                | 120 | 121 | 122 => {
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 253337042034819032;
                }
                _ => {
                    let mut m: size_t = 0;
                    let mut printable: bool = false;
                    if unibyte_locale {
                        m = 1 as libc::c_int as size_t;
                        printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
                            as libc::c_int
                            & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
                            != 0 as libc::c_int;
                    } else {
                        let mut mbstate: mbstate_t = mbstate_t {
                            __count: 0,
                            __value: C2RustUnnamed { __wch: 0 },
                        };
                        mbszero(&mut mbstate);
                        m = 0 as libc::c_int as size_t;
                        printable = 1 as libc::c_int != 0;
                        if argsize == 18446744073709551615 as libc::c_ulong {
                            argsize = strlen(arg);
                        }
                        let mut w: char32_t = 0;
                        let mut bytes: size_t = rpl_mbrtoc32(
                            &mut w,
                            &*arg.offset(i.wrapping_add(m) as isize),
                            argsize.wrapping_sub(i.wrapping_add(m)),
                            &mut mbstate,
                        );
                        if !(bytes == 0 as libc::c_int as libc::c_ulong) {
                            if bytes == -(1 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                            } else if bytes == -(2 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                                while i.wrapping_add(m) < argsize
                                    && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
                                        != 0
                                {
                                    m = m.wrapping_add(1);
                                    m;
                                }
                            } else {
                                if '[' as i32 == 0x5b as libc::c_int
                                    && elide_outer_quotes as libc::c_int != 0
                                    && quoting_style as libc::c_uint
                                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                                {
                                    let mut j: size_t = 0;
                                    j = 1 as libc::c_int as size_t;
                                    while j < bytes {
                                        match *arg
                                            .offset(i.wrapping_add(m).wrapping_add(j) as isize)
                                            as libc::c_int
                                        {
                                            91 | 92 | 94 | 96 | 124 => {
                                                current_block = 7928555609993211441;
                                                break 's_25;
                                            }
                                            _ => {}
                                        }
                                        j = j.wrapping_add(1);
                                        j;
                                    }
                                }
                                if c32isprint(w) == 0 {
                                    printable = 0 as libc::c_int != 0;
                                }
                                m = (m as libc::c_ulong).wrapping_add(bytes) as size_t
                                    as size_t;
                            }
                        }
                    }
                    c_and_shell_quote_compat = printable;
                    if (1 as libc::c_int as libc::c_ulong) < m
                        || backslash_escapes as libc::c_int != 0 && !printable
                    {
                        let mut ilim: size_t = i.wrapping_add(m);
                        loop {
                            if backslash_escapes as libc::c_int != 0 && !printable {
                                if elide_outer_quotes {
                                    current_block = 7928555609993211441;
                                    break 's_25;
                                }
                                escaping = 1 as libc::c_int != 0;
                                if quoting_style as libc::c_uint
                                    == shell_always_quoting_style as libc::c_int as libc::c_uint
                                    && !pending_shell_escape_end
                                {
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    pending_shell_escape_end = 1 as libc::c_int != 0;
                                }
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32
                                        + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
                                    as libc::c_uchar;
                            } else if is_right_quote {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                is_right_quote = 0 as libc::c_int != 0;
                            }
                            if ilim <= i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                            {
                                break;
                            }
                            if pending_shell_escape_end as libc::c_int != 0 && !escaping
                            {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                pending_shell_escape_end = 0 as libc::c_int != 0;
                            }
                            if len < buffersize {
                                *buffer.offset(len as isize) = c as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            i = i.wrapping_add(1);
                            c = *arg.offset(i as isize) as libc::c_uchar;
                        }
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
            }
            match current_block {
                16442922512115311366 => {
                    if i != 0 as libc::c_int as libc::c_ulong {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 4634307283396172174;
                    }
                }
                9215498979640025612 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 1190876092451756080;
                }
                _ => {}
            }
            match current_block {
                1190876092451756080 => {
                    if backslash_escapes {
                        c = esc;
                        current_block = 3173013908131212616;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                4634307283396172174 => {
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 7549413860336125482;
                }
                _ => {}
            }
            match current_block {
                7549413860336125482 => {
                    current_block = 13059411171234995867;
                }
                _ => {}
            }
            match current_block {
                13059411171234995867 => {
                    current_block = 16620298045565028098;
                }
                _ => {}
            }
            match current_block {
                16620298045565028098 => {
                    current_block = 15155215915847730705;
                }
                _ => {}
            }
            match current_block {
                15155215915847730705 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 253337042034819032;
                }
                _ => {}
            }
            match current_block {
                253337042034819032 => {
                    if !((backslash_escapes as libc::c_int != 0
                        && quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                        || elide_outer_quotes as libc::c_int != 0)
                        && !quote_these_too.is_null()
                        && *quote_these_too
                            .offset(
                                (c as libc::c_ulong)
                                    .wrapping_div(
                                        (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                    ) as isize,
                            )
                            >> (c as libc::c_ulong)
                                .wrapping_rem(
                                    (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                ) & 1 as libc::c_int as libc::c_uint != 0)
                        && !is_right_quote
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 3173013908131212616;
                    }
                }
                _ => {}
            }
            match current_block {
                3173013908131212616 => {
                    if elide_outer_quotes {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    escaping = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && !pending_shell_escape_end
                    {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 1 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    current_block = 4476262310586904498;
                }
                _ => {}
            }
            match current_block {
                4476262310586904498 => {
                    if pending_shell_escape_end as libc::c_int != 0 && !escaping {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = c as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    if !c_and_shell_quote_compat {
                        all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
                    }
                }
                _ => {}
            }
            i = i.wrapping_add(1);
            i;
        }
        if len == 0 as libc::c_int as libc::c_ulong
            && quoting_style as libc::c_uint
                == shell_always_quoting_style as libc::c_int as libc::c_uint
            && elide_outer_quotes as libc::c_int != 0
        {
            current_block = 7928555609993211441;
            break;
        }
        if !(quoting_style as libc::c_uint
            == shell_always_quoting_style as libc::c_int as libc::c_uint
            && !elide_outer_quotes && encountered_single_quote as libc::c_int != 0)
        {
            current_block = 6412618891452676311;
            break;
        }
        if all_c_and_shell_quote_compat {
            return quotearg_buffer_restyled(
                buffer,
                orig_buffersize,
                arg,
                argsize,
                c_quoting_style,
                flags,
                quote_these_too,
                left_quote,
                right_quote,
            )
        } else {
            if !(buffersize == 0 && orig_buffersize != 0) {
                current_block = 6412618891452676311;
                break;
            }
            buffersize = orig_buffersize;
            len = 0 as libc::c_int as size_t;
        }
    }
    match current_block {
        7928555609993211441 => {
            if quoting_style as libc::c_uint
                == shell_always_quoting_style as libc::c_int as libc::c_uint
                && backslash_escapes as libc::c_int != 0
            {
                quoting_style = shell_escape_always_quoting_style;
            }
            return quotearg_buffer_restyled(
                buffer,
                buffersize,
                arg,
                argsize,
                quoting_style,
                flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
                0 as *const libc::c_uint,
                left_quote,
                right_quote,
            );
        }
        _ => {
            if !quote_string.is_null() && !elide_outer_quotes {
                while *quote_string != 0 {
                    if len < buffersize {
                        *buffer.offset(len as isize) = *quote_string;
                    }
                    len = len.wrapping_add(1);
                    len;
                    quote_string = quote_string.offset(1);
                    quote_string;
                }
            }
            if len < buffersize {
                *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
            }
            return len;
        }
    };
-----------DefId(0:935 ~ rust[fc84]::src::version_etc::version_etc_arn)---------------
Processing a block of length 176
Its span is src/version_etc.rs:72:3: 247:2 (#0)
It has 6 statements
Adding a new piece of length 32
Adding a new block of length 142
Here is a piece of a function:
if !command_name.is_null() {
        fprintf(
            stream,
            b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
            command_name,
            package,
            version,
        );
    } else {
        fprintf(
            stream,
            b"%s %s\n\0" as *const u8 as *const libc::c_char,
            package,
            version,
        );
    }
    fprintf(
        stream,
        version_etc_copyright.as_ptr(),
        gettext(b"(C)\0" as *const u8 as *const libc::c_char),
        COPYRIGHT_YEAR as libc::c_int,
    );
    fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
    fprintf(
        stream,
        gettext(
            b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\0"
                as *const u8 as *const libc::c_char,
        ),
        b"https://gnu.org/licenses/gpl.html\0" as *const u8 as *const libc::c_char,
    );
    fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
Here is a piece of a function:
match n_authors {
        0 => {}
        1 => {
            fprintf(
                stream,
                gettext(b"Written by %s.\n\0" as *const u8 as *const libc::c_char),
                *authors.offset(0 as libc::c_int as isize),
            );
        }
        2 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s and %s.\n\0" as *const u8 as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
            );
        }
        3 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, and %s.\n\0" as *const u8 as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
            );
        }
        4 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8
                        as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
            );
        }
        5 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8
                        as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
            );
        }
        6 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8
                        as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
                *authors.offset(5 as libc::c_int as isize),
            );
        }
        7 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8
                        as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
                *authors.offset(5 as libc::c_int as isize),
                *authors.offset(6 as libc::c_int as isize),
            );
        }
        8 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8
                        as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
                *authors.offset(5 as libc::c_int as isize),
                *authors.offset(6 as libc::c_int as isize),
                *authors.offset(7 as libc::c_int as isize),
            );
        }
        9 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0"
                        as *const u8 as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
                *authors.offset(5 as libc::c_int as isize),
                *authors.offset(6 as libc::c_int as isize),
                *authors.offset(7 as libc::c_int as isize),
                *authors.offset(8 as libc::c_int as isize),
            );
        }
        _ => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0"
                        as *const u8 as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
                *authors.offset(5 as libc::c_int as isize),
                *authors.offset(6 as libc::c_int as isize),
                *authors.offset(7 as libc::c_int as isize),
                *authors.offset(8 as libc::c_int as isize),
            );
        }
    };
-----------DefId(0:1017 ~ rust[fc84]::src::xmalloc::xpalloc)---------------
About to walk this statement: src/xmalloc.rs:215:5: 550:17 (#0) with length 336
Processing a block of length 1
Its span is src/xmalloc.rs:217:39: 217:75 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 1
Its span is src/xmalloc.rs:217:81: 217:86 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 1
Its span is src/xmalloc.rs:219:39: 219:75 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 1
Its span is src/xmalloc.rs:219:81: 219:86 (#0)
It has 1 statements
Adding a new block of length 1
About to walk this statement: src/xmalloc.rs:222:13: 410:14 (#0) with length 189
Processing a block of length 82
Its span is src/xmalloc.rs:222:53: 303:14 (#0)
It has 1 statements
Adding a new block of length 80
Processing a block of length 108
Its span is src/xmalloc.rs:303:20: 410:14 (#0)
It has 1 statements
Adding a new block of length 106
New length: 3
Processing a block of length 5
Its span is src/xmalloc.rs:221:53: 411:10 (#0)
It has 1 statements
Adding a new block of length 3
Processing a block of length 116
Its span is src/xmalloc.rs:411:16: 526:10 (#0)
It has 1 statements
Adding a new block of length 114
Processing a block of length 5
Its span is src/xmalloc.rs:527:5: 531:6 (#0)
It has 3 statements
Adding a new block of length 3
Processing a block of length 5
Its span is src/xmalloc.rs:531:12: 535:6 (#0)
It has 3 statements
Adding a new block of length 3
Processing a block of length 9
Its span is src/xmalloc.rs:536:5: 544:6 (#0)
It has 1 statements
Adding a new block of length 7
Processing a block of length 7
Its span is src/xmalloc.rs:544:12: 550:6 (#0)
It has 1 statements
Adding a new block of length 5
New length: 11
About to walk this statement: src/xmalloc.rs:558:5: 898:6 (#0) with length 341
About to walk this statement: src/xmalloc.rs:562:13: 894:24 (#0) with length 333
Processing a block of length 3
Its span is src/xmalloc.rs:565:51: 567:22 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/xmalloc.rs:567:28: 569:22 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/xmalloc.rs:571:51: 573:22 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/xmalloc.rs:573:28: 575:22 (#0)
It has 1 statements
Adding a new block of length 1
About to walk this statement: src/xmalloc.rs:578:25: 769:26 (#0) with length 192
Processing a block of length 84
Its span is src/xmalloc.rs:578:65: 661:26 (#0)
It has 1 statements
Adding a new block of length 82
Processing a block of length 109
Its span is src/xmalloc.rs:661:32: 769:26 (#0)
It has 1 statements
Adding a new block of length 107
New length: 3
Processing a block of length 5
Its span is src/xmalloc.rs:577:65: 770:22 (#0)
It has 1 statements
Adding a new block of length 3
Processing a block of length 116
Its span is src/xmalloc.rs:770:28: 885:22 (#0)
It has 1 statements
Adding a new block of length 114
Processing a block of length 5
Its span is src/xmalloc.rs:886:17: 890:18 (#0)
It has 3 statements
Adding a new block of length 3
Processing a block of length 5
Its span is src/xmalloc.rs:890:24: 894:18 (#0)
It has 3 statements
Adding a new block of length 3
New length: 17
Processing a block of length 21
Its span is src/xmalloc.rs:559:12: 895:10 (#0)
It has 3 statements
Adding a new block of length 19
Processing a block of length 3
Its span is src/xmalloc.rs:896:5: 898:6 (#0)
It has 1 statements
Adding a new block of length 1
New length: 5
Processing a block of length 39
Its span is src/xmalloc.rs:203:24: 902:2 (#0)
It has 14 statements
Adding a new block of length 37
Here is a piece of a function:
0 as libc::c_int as libc::c_long
Here is a piece of a function:
n
Here is a piece of a function:
0 as libc::c_int as libc::c_long
Here is a piece of a function:
s
Here is a piece of a function:
if ((if 1 as libc::c_int != 0 {
                    0 as libc::c_int as libc::c_long
                } else {
                    (if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        -(1 as libc::c_int) as idx_t
                    }) + s
                }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
                {
                    (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
                } else {
                    ((if (if (if ((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        s
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    {
                        !(((((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 1 as libc::c_int as libc::c_long)
                            << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                            - 1 as libc::c_int as libc::c_long)
                            * 2 as libc::c_int as libc::c_long
                            + 1 as libc::c_int as libc::c_long)
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 0 as libc::c_int as libc::c_long
                    }) < 0 as libc::c_int as libc::c_long
                    {
                        (s
                            < -(if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                s
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                ((((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 1 as libc::c_int as libc::c_long)
                                    << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                    - 1 as libc::c_int as libc::c_long)
                                    * 2 as libc::c_int as libc::c_long
                                    + 1 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) - 1 as libc::c_int as libc::c_long
                            })) as libc::c_int
                    } else {
                        ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
                    }) != 0
                    {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + -(1 as libc::c_int) as idx_t
                            >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                    } else {
                        -(1 as libc::c_int) as idx_t / -s
                    }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
                }
Here is a piece of a function:
if (if (if ((if 1 as libc::c_int != 0 {
                    0 as libc::c_int as libc::c_long
                } else {
                    (if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        s
                    }) + 0 as libc::c_int as idx_t
                }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
                {
                    !(((((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 0 as libc::c_int as idx_t
                    }) + 1 as libc::c_int as libc::c_long)
                        << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                        - 1 as libc::c_int as libc::c_long)
                        * 2 as libc::c_int as libc::c_long
                        + 1 as libc::c_int as libc::c_long)
                } else {
                    (if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 0 as libc::c_int as idx_t
                    }) + 0 as libc::c_int as libc::c_long
                }) < 0 as libc::c_int as libc::c_long
                {
                    (((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        s
                    }) + 0 as libc::c_int as idx_t)
                        < -(if ((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                s
                            }) + 0 as libc::c_int as idx_t
                        }) - 1 as libc::c_int as libc::c_long)
                            < 0 as libc::c_int as libc::c_long
                        {
                            ((((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 0 as libc::c_int as idx_t
                            }) + 1 as libc::c_int as libc::c_long)
                                << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                - 1 as libc::c_int as libc::c_long)
                                * 2 as libc::c_int as libc::c_long
                                + 1 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 0 as libc::c_int as idx_t
                            }) - 1 as libc::c_int as libc::c_long
                        })) as libc::c_int
                } else {
                    ((0 as libc::c_int as libc::c_long)
                        < (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 0 as libc::c_int as idx_t) as libc::c_int
                }) != 0 && s == -(1 as libc::c_int) as libc::c_long
                {
                    if ((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        n
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    {
                        ((0 as libc::c_int as libc::c_long)
                            < n + 0 as libc::c_int as idx_t) as libc::c_int
                    } else {
                        ((0 as libc::c_int as libc::c_long) < n
                            && (-(1 as libc::c_int) as libc::c_long
                                - 0 as libc::c_int as idx_t)
                                < n - 1 as libc::c_int as libc::c_long) as libc::c_int
                    }
                } else {
                    (0 as libc::c_int as idx_t / s < n) as libc::c_int
                }
Here is a piece of a function:
if n < 0 as libc::c_int as libc::c_long {
                <chunk 4>if ((if 1 as libc::c_int != 0 {
                    0 as libc::c_int as libc::c_long
                } else {
                    (if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        -(1 as libc::c_int) as idx_t
                    }) + s
                }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
                {
                    (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
                } else {
                    ((if (if (if ((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        s
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    {
                        !(((((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 1 as libc::c_int as libc::c_long)
                            << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                            - 1 as libc::c_int as libc::c_long)
                            * 2 as libc::c_int as libc::c_long
                            + 1 as libc::c_int as libc::c_long)
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 0 as libc::c_int as libc::c_long
                    }) < 0 as libc::c_int as libc::c_long
                    {
                        (s
                            < -(if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                s
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                ((((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 1 as libc::c_int as libc::c_long)
                                    << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                    - 1 as libc::c_int as libc::c_long)
                                    * 2 as libc::c_int as libc::c_long
                                    + 1 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) - 1 as libc::c_int as libc::c_long
                            })) as libc::c_int
                    } else {
                        ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
                    }) != 0
                    {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + -(1 as libc::c_int) as idx_t
                            >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                    } else {
                        -(1 as libc::c_int) as idx_t / -s
                    }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
                }
            } else {
                <chunk 5>
            }
Here is a piece of a function:
if s == 0 as libc::c_int as libc::c_long {
                0 as libc::c_int
            } else {
                if n < 0 as libc::c_int as libc::c_long {
                    if (if (if ((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            n
                        }) + 0 as libc::c_int as idx_t
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    {
                        !(((((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                n
                            }) + 0 as libc::c_int as idx_t
                        }) + 1 as libc::c_int as libc::c_long)
                            << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                            - 1 as libc::c_int as libc::c_long)
                            * 2 as libc::c_int as libc::c_long
                            + 1 as libc::c_int as libc::c_long)
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                n
                            }) + 0 as libc::c_int as idx_t
                        }) + 0 as libc::c_int as libc::c_long
                    }) < 0 as libc::c_int as libc::c_long
                    {
                        (((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            n
                        }) + 0 as libc::c_int as idx_t)
                            < -(if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    n
                                }) + 0 as libc::c_int as idx_t
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                ((((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        n
                                    }) + 0 as libc::c_int as idx_t
                                }) + 1 as libc::c_int as libc::c_long)
                                    << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                    - 1 as libc::c_int as libc::c_long)
                                    * 2 as libc::c_int as libc::c_long
                                    + 1 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        n
                                    }) + 0 as libc::c_int as idx_t
                                }) - 1 as libc::c_int as libc::c_long
                            })) as libc::c_int
                    } else {
                        ((0 as libc::c_int as libc::c_long)
                            < (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                n
                            }) + 0 as libc::c_int as idx_t) as libc::c_int
                    }) != 0 && n == -(1 as libc::c_int) as libc::c_long
                    {
                        if ((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) - 1 as libc::c_int as libc::c_long)
                            < 0 as libc::c_int as libc::c_long
                        {
                            ((0 as libc::c_int as libc::c_long)
                                < s + 0 as libc::c_int as idx_t) as libc::c_int
                        } else {
                            ((-(1 as libc::c_int) as libc::c_long
                                - 0 as libc::c_int as idx_t)
                                < s - 1 as libc::c_int as libc::c_long) as libc::c_int
                        }
                    } else {
                        (0 as libc::c_int as idx_t / n < s) as libc::c_int
                    }
                } else {
                    (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
                }
            }
Here is a piece of a function:
let (fresh8, _fresh9) = n.overflowing_mul(s);
        *(&mut nbytes as *mut idx_t) = fresh8;
        1 as libc::c_int
Here is a piece of a function:
let (fresh10, fresh11) = n.overflowing_mul(s);
        *(&mut nbytes as *mut idx_t) = fresh10;
        fresh11 as libc::c_int
Here is a piece of a function:
if (9223372036854775807 as libc::c_long as libc::c_ulong)
            < 18446744073709551615 as libc::c_ulong
        {
            9223372036854775807 as libc::c_long as libc::c_ulong
        } else {
            18446744073709551615 as libc::c_ulong
        }
Here is a piece of a function:
(if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
            DEFAULT_MXFAST_0 as libc::c_int
        } else {
            0 as libc::c_int
        }) as libc::c_ulong
Here is a piece of a function:
0 as libc::c_int as libc::c_long
Here is a piece of a function:
n
Here is a piece of a function:
0 as libc::c_int as libc::c_long
Here is a piece of a function:
s
Here is a piece of a function:
if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    -(1 as libc::c_int) as idx_t
                                }) + s
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
                            } else {
                                ((if (if (if ((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) - 1 as libc::c_int as libc::c_long)
                                    < 0 as libc::c_int as libc::c_long
                                {
                                    !(((((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 1 as libc::c_int as libc::c_long)
                                        << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                        - 1 as libc::c_int as libc::c_long)
                                        * 2 as libc::c_int as libc::c_long
                                        + 1 as libc::c_int as libc::c_long)
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 0 as libc::c_int as libc::c_long
                                }) < 0 as libc::c_int as libc::c_long
                                {
                                    (s
                                        < -(if ((if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            s
                                        }) - 1 as libc::c_int as libc::c_long)
                                            < 0 as libc::c_int as libc::c_long
                                        {
                                            ((((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) + 1 as libc::c_int as libc::c_long)
                                                << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                - 1 as libc::c_int as libc::c_long)
                                                * 2 as libc::c_int as libc::c_long
                                                + 1 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) - 1 as libc::c_int as libc::c_long
                                        })) as libc::c_int
                                } else {
                                    ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
                                }) != 0
                                {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + -(1 as libc::c_int) as idx_t
                                        >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                                } else {
                                    -(1 as libc::c_int) as idx_t / -s
                                }) <= -(1 as libc::c_int) as libc::c_long - n)
                                    as libc::c_int
                            }
Here is a piece of a function:
if (if (if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 0 as libc::c_int as idx_t
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                !(((((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 0 as libc::c_int as idx_t
                                }) + 1 as libc::c_int as libc::c_long)
                                    << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                    - 1 as libc::c_int as libc::c_long)
                                    * 2 as libc::c_int as libc::c_long
                                    + 1 as libc::c_int as libc::c_long)
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 0 as libc::c_int as idx_t
                                }) + 0 as libc::c_int as libc::c_long
                            }) < 0 as libc::c_int as libc::c_long
                            {
                                (((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 0 as libc::c_int as idx_t)
                                    < -(if ((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            s
                                        }) + 0 as libc::c_int as idx_t
                                    }) - 1 as libc::c_int as libc::c_long)
                                        < 0 as libc::c_int as libc::c_long
                                    {
                                        ((((if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) + 0 as libc::c_int as idx_t
                                        }) + 1 as libc::c_int as libc::c_long)
                                            << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                            - 1 as libc::c_int as libc::c_long)
                                            * 2 as libc::c_int as libc::c_long
                                            + 1 as libc::c_int as libc::c_long
                                    } else {
                                        (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) + 0 as libc::c_int as idx_t
                                        }) - 1 as libc::c_int as libc::c_long
                                    })) as libc::c_int
                            } else {
                                ((0 as libc::c_int as libc::c_long)
                                    < (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 0 as libc::c_int as idx_t) as libc::c_int
                            }) != 0 && s == -(1 as libc::c_int) as libc::c_long
                            {
                                if ((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    n
                                }) - 1 as libc::c_int as libc::c_long)
                                    < 0 as libc::c_int as libc::c_long
                                {
                                    ((0 as libc::c_int as libc::c_long)
                                        < n + 0 as libc::c_int as idx_t) as libc::c_int
                                } else {
                                    ((0 as libc::c_int as libc::c_long) < n
                                        && (-(1 as libc::c_int) as libc::c_long
                                            - 0 as libc::c_int as idx_t)
                                            < n - 1 as libc::c_int as libc::c_long) as libc::c_int
                                }
                            } else {
                                (0 as libc::c_int as idx_t / s < n) as libc::c_int
                            }
Here is a piece of a function:
if n < 0 as libc::c_int as libc::c_long {
                            <chunk 16>if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    -(1 as libc::c_int) as idx_t
                                }) + s
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
                            } else {
                                ((if (if (if ((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) - 1 as libc::c_int as libc::c_long)
                                    < 0 as libc::c_int as libc::c_long
                                {
                                    !(((((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 1 as libc::c_int as libc::c_long)
                                        << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                        - 1 as libc::c_int as libc::c_long)
                                        * 2 as libc::c_int as libc::c_long
                                        + 1 as libc::c_int as libc::c_long)
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 0 as libc::c_int as libc::c_long
                                }) < 0 as libc::c_int as libc::c_long
                                {
                                    (s
                                        < -(if ((if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            s
                                        }) - 1 as libc::c_int as libc::c_long)
                                            < 0 as libc::c_int as libc::c_long
                                        {
                                            ((((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) + 1 as libc::c_int as libc::c_long)
                                                << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                - 1 as libc::c_int as libc::c_long)
                                                * 2 as libc::c_int as libc::c_long
                                                + 1 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) - 1 as libc::c_int as libc::c_long
                                        })) as libc::c_int
                                } else {
                                    ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
                                }) != 0
                                {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + -(1 as libc::c_int) as idx_t
                                        >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                                } else {
                                    -(1 as libc::c_int) as idx_t / -s
                                }) <= -(1 as libc::c_int) as libc::c_long - n)
                                    as libc::c_int
                            }
                        } else {
                            <chunk 17>
                        }
Here is a piece of a function:
if s == 0 as libc::c_int as libc::c_long {
                            0 as libc::c_int
                        } else {
                            if n < 0 as libc::c_int as libc::c_long {
                                if (if (if ((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        n
                                    }) + 0 as libc::c_int as idx_t
                                }) - 1 as libc::c_int as libc::c_long)
                                    < 0 as libc::c_int as libc::c_long
                                {
                                    !(((((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            n
                                        }) + 0 as libc::c_int as idx_t
                                    }) + 1 as libc::c_int as libc::c_long)
                                        << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                        - 1 as libc::c_int as libc::c_long)
                                        * 2 as libc::c_int as libc::c_long
                                        + 1 as libc::c_int as libc::c_long)
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            n
                                        }) + 0 as libc::c_int as idx_t
                                    }) + 0 as libc::c_int as libc::c_long
                                }) < 0 as libc::c_int as libc::c_long
                                {
                                    (((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        n
                                    }) + 0 as libc::c_int as idx_t)
                                        < -(if ((if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                n
                                            }) + 0 as libc::c_int as idx_t
                                        }) - 1 as libc::c_int as libc::c_long)
                                            < 0 as libc::c_int as libc::c_long
                                        {
                                            ((((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    n
                                                }) + 0 as libc::c_int as idx_t
                                            }) + 1 as libc::c_int as libc::c_long)
                                                << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                - 1 as libc::c_int as libc::c_long)
                                                * 2 as libc::c_int as libc::c_long
                                                + 1 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    n
                                                }) + 0 as libc::c_int as idx_t
                                            }) - 1 as libc::c_int as libc::c_long
                                        })) as libc::c_int
                                } else {
                                    ((0 as libc::c_int as libc::c_long)
                                        < (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            n
                                        }) + 0 as libc::c_int as idx_t) as libc::c_int
                                }) != 0 && n == -(1 as libc::c_int) as libc::c_long
                                {
                                    if ((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) - 1 as libc::c_int as libc::c_long)
                                        < 0 as libc::c_int as libc::c_long
                                    {
                                        ((0 as libc::c_int as libc::c_long)
                                            < s + 0 as libc::c_int as idx_t) as libc::c_int
                                    } else {
                                        ((-(1 as libc::c_int) as libc::c_long
                                            - 0 as libc::c_int as idx_t)
                                            < s - 1 as libc::c_int as libc::c_long) as libc::c_int
                                    }
                                } else {
                                    (0 as libc::c_int as idx_t / n < s) as libc::c_int
                                }
                            } else {
                                (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
                            }
                        }
Here is a piece of a function:
let (fresh18, _fresh19) = n.overflowing_mul(s);
                    *(&mut nbytes as *mut idx_t) = fresh18;
                    1 as libc::c_int
Here is a piece of a function:
let (fresh20, fresh21) = n.overflowing_mul(s);
                    *(&mut nbytes as *mut idx_t) = fresh20;
                    fresh21 as libc::c_int
Here is a piece of a function:
let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
            *(&mut n as *mut idx_t) = fresh12;
            fresh13 as libc::c_int != 0
                || 0 as libc::c_int as libc::c_long <= n_max && n_max < n
                || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
                    && ((if 1 as libc::c_int != 0 {
                        <chunk 12>0 as libc::c_int as libc::c_long
                    } else {
                        <chunk 13>
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    && ((if 1 as libc::c_int != 0 {
                        <chunk 14>
                    } else {
                        <chunk 15>
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    && (if s < 0 as libc::c_int as libc::c_long {
                        <chunk 18>
                    } else {
                        <chunk 19>
                    }) != 0
                {
                    <chunk 20>
                } else {
                    <chunk 21>
                }) != 0
Here is a piece of a function:
xalloc_die();
Here is a piece of a function:
let mut n0: idx_t = *pn;
    let mut n: idx_t = 0;
    let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    *(&mut n as *mut idx_t) = fresh2;
    if fresh3 {
        n = 9223372036854775807 as libc::c_long;
    }
    if 0 as libc::c_int as libc::c_long <= n_max && n_max < n {
        n = n_max;
    }
    let mut nbytes: idx_t = 0;
    let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
        < -(1 as libc::c_int) as idx_t
        && ((if 1 as libc::c_int != 0 { <chunk 0>0 as libc::c_int as libc::c_long } else { <chunk 1> })
            - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
        && ((if 1 as libc::c_int != 0 { <chunk 2> } else { <chunk 3> })
            - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
        && (if s < 0 as libc::c_int as libc::c_long {
            <chunk 6>
        } else {
            <chunk 7>
        }) != 0
    {
        <chunk 8>
    } else {
        <chunk 9>
    } != 0
    {
        <chunk 10>
    } else {
        <chunk 11>
    }) as idx_t;
    if adjusted_nbytes != 0 {
        n = adjusted_nbytes / s;
        nbytes = adjusted_nbytes - adjusted_nbytes % s;
    }
    if pa.is_null() {
        *pn = 0 as libc::c_int as idx_t;
    }
    if n - n0 < n_incr_min
        && {
            <chunk 22>
        }
    {
        <chunk 23>
    }
    pa = xrealloc(pa, nbytes as size_t);
    *pn = n;
    return pa;
-----------DefId(0:799 ~ rust[fc84]::src::quotearg::quotearg_buffer_restyled)---------------
About to walk this statement: src/quotearg.rs:321:5: 1158:6 (#0) with length 838
About to walk this statement: src/quotearg.rs:434:9: 1122:10 (#0) with length 689
About to walk this statement: src/quotearg.rs:434:9: 1122:10 (#204) with length 689
Processing a block of length 3
Its span is src/quotearg.rs:434:67: 436:10 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:436:16: 438:10 (#0)
It has 1 statements
Adding a new block of length 1
About to walk this statement: src/quotearg.rs:471:13: 961:14 (#0) with length 491
Processing a block of length 66
Its span is src/quotearg.rs:472:22: 537:18 (#0)
It has 1 statements
Adding a new block of length 64
Processing a block of length 133
Its span is src/quotearg.rs:538:23: 670:18 (#0)
It has 1 statements
Adding a new block of length 131
Processing a block of length 4
Its span is src/quotearg.rs:671:22: 674:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:675:22: 678:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:679:23: 682:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:683:23: 686:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:687:23: 690:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:691:22: 694:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 4
Its span is src/quotearg.rs:695:23: 698:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 19
Its span is src/quotearg.rs:699:23: 717:18 (#0)
It has 2 statements
Adding a new block of length 17
Processing a block of length 13
Its span is src/quotearg.rs:718:30: 730:18 (#0)
It has 1 statements
Adding a new block of length 11
Processing a block of length 3
Its span is src/quotearg.rs:731:29: 733:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:734:23: 736:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:737:23: 739:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:740:63: 742:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:743:33: 745:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/quotearg.rs:746:29: 748:18 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 35
Its span is src/quotearg.rs:749:23: 783:18 (#0)
It has 3 statements
Adding a new block of length 33
Processing a block of length 4
Its span is src/quotearg.rs:789:38: 792:18 (#0)
It has 2 statements
Adding a new block of length 2
Processing a block of length 168
Its span is src/quotearg.rs:793:22: 960:18 (#0)
It has 5 statements
Adding a new piece of length 70
Adding a new block of length 96
New length: 47
Processing a block of length 240
Its span is src/quotearg.rs:439:9: 1122:10 (#0)
It has 19 statements
Adding a new piece of length 144
Adding a new block of length 94
Processing a block of length 5
Its span is src/quotearg.rs:434:9: 1122:10 (#204)
It has 1 statements
Adding a new block of length 5
New length: 5
Processing a block of length 5
Its span is src/quotearg.rs:434:9: 1122:10 (#204)
It has 1 statements
Adding a new block of length 5
New length: 5
Processing a block of length 144
Its span is src/quotearg.rs:321:17: 1158:6 (#0)
It has 11 statements
Adding a new block of length 142
New length: 2
Processing a block of length 56
Its span is src/quotearg.rs:306:13: 1197:2 (#0)
It has 14 statements
Adding a new block of length 54
Here is a piece of a function:
(*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
Here is a piece of a function:
(i == argsize) as libc::c_int
Here is a piece of a function:
if backslash_escapes {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        escaping = 1 as libc::c_int != 0;
                        if quoting_style as libc::c_uint
                            == shell_always_quoting_style as libc::c_int as libc::c_uint
                            && !pending_shell_escape_end
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            pending_shell_escape_end = 1 as libc::c_int != 0;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                            && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                                < argsize
                            && '0' as i32
                                <= *arg
                                    .offset(
                                        i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                    ) as libc::c_int
                            && *arg
                                .offset(
                                    i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                ) as libc::c_int <= '9' as i32
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                        }
                        c = '0' as i32 as libc::c_uchar;
                        current_block = 253337042034819032;
                    } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
                        current_block = 13619784596304402172;
                    } else {
                        current_block = 253337042034819032;
                    }
Here is a piece of a function:
match quoting_style as libc::c_uint {
                        2 => {
                            current_block = 17954593875197965021;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        5 => {
                            current_block = 14514781131754033399;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        _ => {
                            current_block = 253337042034819032;
                        }
                    }
Here is a piece of a function:
esc = 'a' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
Here is a piece of a function:
esc = 'b' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
Here is a piece of a function:
esc = 'f' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
Here is a piece of a function:
esc = 'n' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
Here is a piece of a function:
esc = 'r' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
Here is a piece of a function:
esc = 't' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
Here is a piece of a function:
esc = 'v' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
Here is a piece of a function:
esc = c;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        current_block = 4476262310586904498;
                    } else if backslash_escapes as libc::c_int != 0
                        && elide_outer_quotes as libc::c_int != 0
                        && quote_string_len != 0
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 9215498979640025612;
                    }
Here is a piece of a function:
if if argsize == 18446744073709551615 as libc::c_ulong {
                        (*arg.offset(1 as libc::c_int as isize) as libc::c_int
                            == '\0' as i32) as libc::c_int
                    } else {
                        (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
                    } == 0
                    {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 16442922512115311366;
                    }
Here is a piece of a function:
current_block = 16442922512115311366;
Here is a piece of a function:
current_block = 4634307283396172174;
Here is a piece of a function:
current_block = 7549413860336125482;
Here is a piece of a function:
current_block = 13059411171234995867;
Here is a piece of a function:
current_block = 16620298045565028098;
Here is a piece of a function:
current_block = 15155215915847730705;
Here is a piece of a function:
encountered_single_quote = 1 as libc::c_int != 0;
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        if buffersize != 0 && orig_buffersize == 0 {
                            orig_buffersize = buffersize;
                            buffersize = 0 as libc::c_int as size_t;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                        current_block = 253337042034819032;
                    } else {
                        current_block = 253337042034819032;
                    }
Here is a piece of a function:
c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 253337042034819032;
Here is a piece of a function:
let mut m: size_t = 0;
                    let mut printable: bool = false;
                    if unibyte_locale {
                        m = 1 as libc::c_int as size_t;
                        printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
                            as libc::c_int
                            & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
                            != 0 as libc::c_int;
                    } else {
                        let mut mbstate: mbstate_t = mbstate_t {
                            __count: 0,
                            __value: C2RustUnnamed { __wch: 0 },
                        };
                        mbszero(&mut mbstate);
                        m = 0 as libc::c_int as size_t;
                        printable = 1 as libc::c_int != 0;
                        if argsize == 18446744073709551615 as libc::c_ulong {
                            argsize = strlen(arg);
                        }
                        let mut w: char32_t = 0;
                        let mut bytes: size_t = rpl_mbrtoc32(
                            &mut w,
                            &*arg.offset(i.wrapping_add(m) as isize),
                            argsize.wrapping_sub(i.wrapping_add(m)),
                            &mut mbstate,
                        );
                        if !(bytes == 0 as libc::c_int as libc::c_ulong) {
                            if bytes == -(1 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                            } else if bytes == -(2 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                                while i.wrapping_add(m) < argsize
                                    && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
                                        != 0
                                {
                                    m = m.wrapping_add(1);
                                    m;
                                }
                            } else {
                                if '[' as i32 == 0x5b as libc::c_int
                                    && elide_outer_quotes as libc::c_int != 0
                                    && quoting_style as libc::c_uint
                                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                                {
                                    let mut j: size_t = 0;
                                    j = 1 as libc::c_int as size_t;
                                    while j < bytes {
                                        match *arg
                                            .offset(i.wrapping_add(m).wrapping_add(j) as isize)
                                            as libc::c_int
                                        {
                                            91 | 92 | 94 | 96 | 124 => {
                                                current_block = 7928555609993211441;
                                                break 's_25;
                                            }
                                            _ => {}
                                        }
                                        j = j.wrapping_add(1);
                                        j;
                                    }
                                }
                                if c32isprint(w) == 0 {
                                    printable = 0 as libc::c_int != 0;
                                }
                                m = (m as libc::c_ulong).wrapping_add(bytes) as size_t
                                    as size_t;
                            }
                        }
                    }
                    c_and_shell_quote_compat = printable;
Here is a piece of a function:
if (1 as libc::c_int as libc::c_ulong) < m
                        || backslash_escapes as libc::c_int != 0 && !printable
                    {
                        let mut ilim: size_t = i.wrapping_add(m);
                        loop {
                            if backslash_escapes as libc::c_int != 0 && !printable {
                                if elide_outer_quotes {
                                    current_block = 7928555609993211441;
                                    break 's_25;
                                }
                                escaping = 1 as libc::c_int != 0;
                                if quoting_style as libc::c_uint
                                    == shell_always_quoting_style as libc::c_int as libc::c_uint
                                    && !pending_shell_escape_end
                                {
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    pending_shell_escape_end = 1 as libc::c_int != 0;
                                }
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32
                                        + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
                                    as libc::c_uchar;
                            } else if is_right_quote {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                is_right_quote = 0 as libc::c_int != 0;
                            }
                            if ilim <= i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                            {
                                break;
                            }
                            if pending_shell_escape_end as libc::c_int != 0 && !escaping
                            {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                pending_shell_escape_end = 0 as libc::c_int != 0;
                            }
                            if len < buffersize {
                                *buffer.offset(len as isize) = c as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            i = i.wrapping_add(1);
                            c = *arg.offset(i as isize) as libc::c_uchar;
                        }
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 253337042034819032;
                    }
Here is a piece of a function:
let mut c: libc::c_uchar = 0;
            let mut esc: libc::c_uchar = 0;
            let mut is_right_quote: bool = 0 as libc::c_int != 0;
            let mut escaping: bool = 0 as libc::c_int != 0;
            let mut c_and_shell_quote_compat: bool = 0 as libc::c_int != 0;
            if backslash_escapes as libc::c_int != 0
                && quoting_style as libc::c_uint
                    != shell_always_quoting_style as libc::c_int as libc::c_uint
                && quote_string_len != 0
                && i.wrapping_add(quote_string_len)
                    <= (if argsize == 18446744073709551615 as libc::c_ulong
                        && (1 as libc::c_int as libc::c_ulong) < quote_string_len
                    {
                        argsize = strlen(arg);
                        argsize
                    } else {
                        argsize
                    })
                && memcmp(
                    arg.offset(i as isize) as *const libc::c_void,
                    quote_string as *const libc::c_void,
                    quote_string_len,
                ) == 0 as libc::c_int
            {
                if elide_outer_quotes {
                    current_block = 7928555609993211441;
                    break 's_25;
                }
                is_right_quote = 1 as libc::c_int != 0;
            }
            c = *arg.offset(i as isize) as libc::c_uchar;
            match c as libc::c_int {
                0 => {
                    <chunk 2>if backslash_escapes {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        escaping = 1 as libc::c_int != 0;
                        if quoting_style as libc::c_uint
                            == shell_always_quoting_style as libc::c_int as libc::c_uint
                            && !pending_shell_escape_end
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            pending_shell_escape_end = 1 as libc::c_int != 0;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                            && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                                < argsize
                            && '0' as i32
                                <= *arg
                                    .offset(
                                        i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                    ) as libc::c_int
                            && *arg
                                .offset(
                                    i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                ) as libc::c_int <= '9' as i32
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                        }
                        c = '0' as i32 as libc::c_uchar;
                        current_block = 253337042034819032;
                    } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
                        current_block = 13619784596304402172;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                63 => {
                    <chunk 3>
                }
                7 => {
                    <chunk 4>
                }
                8 => {
                    <chunk 5>
                }
                12 => {
                    <chunk 6>
                }
                10 => {
                    <chunk 7>
                }
                13 => {
                    <chunk 8>
                }
                9 => {
                    <chunk 9>
                }
                11 => {
                    <chunk 10>
                }
                92 => {
                    <chunk 11>
                }
                123 | 125 => {
                    <chunk 12>
                }
                35 | 126 => {
                    <chunk 13>
                }
                32 => {
                    <chunk 14>
                }
                33 => {
                    <chunk 15>
                }
                34 | 36 | 38 | 40 | 41 | 42 | 59 | 60 | 61 => {
                    <chunk 16>
                }
                62 | 91 | 94 => {
                    <chunk 17>
                }
                96 | 124 => {
                    <chunk 18>
                }
                39 => {
                    <chunk 19>
                }
                37 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56
                | 57 | 58 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76
                | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90
                | 93 | 95 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107
                | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119
                | 120 | 121 | 122 => {
                    <chunk 20>
                }
                _ => {
                    <chunk 21>
                    <chunk 22>
                }
            }
            match current_block {
                16442922512115311366 => {
                    if i != 0 as libc::c_int as libc::c_ulong {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 4634307283396172174;
                    }
                }
                9215498979640025612 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 1190876092451756080;
                }
                _ => {}
            }
            match current_block {
                1190876092451756080 => {
                    if backslash_escapes {
                        c = esc;
                        current_block = 3173013908131212616;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                4634307283396172174 => {
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 7549413860336125482;
                }
                _ => {}
            }
            match current_block {
                7549413860336125482 => {
                    current_block = 13059411171234995867;
                }
                _ => {}
            }
            match current_block {
                13059411171234995867 => {
                    current_block = 16620298045565028098;
                }
                _ => {}
            }
            match current_block {
                16620298045565028098 => {
                    current_block = 15155215915847730705;
                }
                _ => {}
            }
            match current_block {
                15155215915847730705 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 253337042034819032;
                }
                _ => {}
            }
Here is a piece of a function:
match current_block {
                253337042034819032 => {
                    if !((backslash_escapes as libc::c_int != 0
                        && quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                        || elide_outer_quotes as libc::c_int != 0)
                        && !quote_these_too.is_null()
                        && *quote_these_too
                            .offset(
                                (c as libc::c_ulong)
                                    .wrapping_div(
                                        (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                    ) as isize,
                            )
                            >> (c as libc::c_ulong)
                                .wrapping_rem(
                                    (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                ) & 1 as libc::c_int as libc::c_uint != 0)
                        && !is_right_quote
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 3173013908131212616;
                    }
                }
                _ => {}
            }
            match current_block {
                3173013908131212616 => {
                    if elide_outer_quotes {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    escaping = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && !pending_shell_escape_end
                    {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 1 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    current_block = 4476262310586904498;
                }
                _ => {}
            }
            match current_block {
                4476262310586904498 => {
                    if pending_shell_escape_end as libc::c_int != 0 && !escaping {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = c as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    if !c_and_shell_quote_compat {
                        all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
                    }
                }
                _ => {}
            }
            i = i.wrapping_add(1);
            i;
Here is a piece of a function:
while if argsize == 18446744073709551615 as libc::c_ulong {
            <chunk 0>(*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
        } else {
            <chunk 1>
        } == 0
        {
            <chunk 23>
            <chunk 24>
        }
Here is a piece of a function:
while if argsize == 18446744073709551615 as libc::c_ulong {
            <chunk 0>(*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
        } else {
            <chunk 1>
        } == 0
        {
            <chunk 23>
            <chunk 24>
        }
Here is a piece of a function:
pending_shell_escape_end = 0 as libc::c_int != 0;
        let mut current_block_48: u64;
        match quoting_style as libc::c_uint {
            6 => {
                quoting_style = c_quoting_style;
                elide_outer_quotes = 1 as libc::c_int != 0;
                current_block_48 = 1283995450065962895;
            }
            5 => {
                current_block_48 = 1283995450065962895;
            }
            7 => {
                backslash_escapes = 1 as libc::c_int != 0;
                elide_outer_quotes = 0 as libc::c_int != 0;
                current_block_48 = 2989495919056355252;
            }
            8 | 9 | 10 => {
                if quoting_style as libc::c_uint
                    != custom_quoting_style as libc::c_int as libc::c_uint
                {
                    left_quote = gettext_quote(
                        b"`\0" as *const u8 as *const libc::c_char,
                        quoting_style,
                    );
                    right_quote = gettext_quote(
                        b"'\0" as *const u8 as *const libc::c_char,
                        quoting_style,
                    );
                }
                if !elide_outer_quotes {
                    quote_string = left_quote;
                    while *quote_string != 0 {
                        if len < buffersize {
                            *buffer.offset(len as isize) = *quote_string;
                        }
                        len = len.wrapping_add(1);
                        len;
                        quote_string = quote_string.offset(1);
                        quote_string;
                    }
                }
                backslash_escapes = 1 as libc::c_int != 0;
                quote_string = right_quote;
                quote_string_len = strlen(quote_string);
                current_block_48 = 2989495919056355252;
            }
            3 => {
                backslash_escapes = 1 as libc::c_int != 0;
                current_block_48 = 2694013637280298776;
            }
            1 => {
                current_block_48 = 2694013637280298776;
            }
            4 => {
                current_block_48 = 2266290538919981374;
            }
            2 => {
                current_block_48 = 14141891332124833771;
            }
            0 => {
                elide_outer_quotes = 0 as libc::c_int != 0;
                current_block_48 = 2989495919056355252;
            }
            _ => {
                abort();
            }
        }
        match current_block_48 {
            1283995450065962895 => {
                if !elide_outer_quotes {
                    if len < buffersize {
                        *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                }
                backslash_escapes = 1 as libc::c_int != 0;
                quote_string = b"\"\0" as *const u8 as *const libc::c_char;
                quote_string_len = 1 as libc::c_int as size_t;
                current_block_48 = 2989495919056355252;
            }
            2694013637280298776 => {
                elide_outer_quotes = 1 as libc::c_int != 0;
                current_block_48 = 2266290538919981374;
            }
            _ => {}
        }
        match current_block_48 {
            2266290538919981374 => {
                if !elide_outer_quotes {
                    backslash_escapes = 1 as libc::c_int != 0;
                }
                current_block_48 = 14141891332124833771;
            }
            _ => {}
        }
        match current_block_48 {
            14141891332124833771 => {
                quoting_style = shell_always_quoting_style;
                if !elide_outer_quotes {
                    if len < buffersize {
                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                }
                quote_string = b"'\0" as *const u8 as *const libc::c_char;
                quote_string_len = 1 as libc::c_int as size_t;
            }
            _ => {}
        }
        i = 0 as libc::c_int as size_t;
        <chunk 25>while if argsize == 18446744073709551615 as libc::c_ulong {
            (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
        } else {
            (i == argsize) as libc::c_int
        } == 0
        {
            let mut c: libc::c_uchar = 0;
            let mut esc: libc::c_uchar = 0;
            let mut is_right_quote: bool = 0 as libc::c_int != 0;
            let mut escaping: bool = 0 as libc::c_int != 0;
            let mut c_and_shell_quote_compat: bool = 0 as libc::c_int != 0;
            if backslash_escapes as libc::c_int != 0
                && quoting_style as libc::c_uint
                    != shell_always_quoting_style as libc::c_int as libc::c_uint
                && quote_string_len != 0
                && i.wrapping_add(quote_string_len)
                    <= (if argsize == 18446744073709551615 as libc::c_ulong
                        && (1 as libc::c_int as libc::c_ulong) < quote_string_len
                    {
                        argsize = strlen(arg);
                        argsize
                    } else {
                        argsize
                    })
                && memcmp(
                    arg.offset(i as isize) as *const libc::c_void,
                    quote_string as *const libc::c_void,
                    quote_string_len,
                ) == 0 as libc::c_int
            {
                if elide_outer_quotes {
                    current_block = 7928555609993211441;
                    break 's_25;
                }
                is_right_quote = 1 as libc::c_int != 0;
            }
            c = *arg.offset(i as isize) as libc::c_uchar;
            match c as libc::c_int {
                0 => {
                    if backslash_escapes {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        escaping = 1 as libc::c_int != 0;
                        if quoting_style as libc::c_uint
                            == shell_always_quoting_style as libc::c_int as libc::c_uint
                            && !pending_shell_escape_end
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            pending_shell_escape_end = 1 as libc::c_int != 0;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                            && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                                < argsize
                            && '0' as i32
                                <= *arg
                                    .offset(
                                        i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                    ) as libc::c_int
                            && *arg
                                .offset(
                                    i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                ) as libc::c_int <= '9' as i32
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                        }
                        c = '0' as i32 as libc::c_uchar;
                        current_block = 253337042034819032;
                    } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
                        current_block = 13619784596304402172;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                63 => {
                    match quoting_style as libc::c_uint {
                        2 => {
                            current_block = 17954593875197965021;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        5 => {
                            current_block = 14514781131754033399;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        _ => {
                            current_block = 253337042034819032;
                        }
                    }
                }
                7 => {
                    esc = 'a' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                8 => {
                    esc = 'b' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                12 => {
                    esc = 'f' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                10 => {
                    esc = 'n' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                13 => {
                    esc = 'r' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                9 => {
                    esc = 't' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                11 => {
                    esc = 'v' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                92 => {
                    esc = c;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        current_block = 4476262310586904498;
                    } else if backslash_escapes as libc::c_int != 0
                        && elide_outer_quotes as libc::c_int != 0
                        && quote_string_len != 0
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 9215498979640025612;
                    }
                }
                123 | 125 => {
                    if if argsize == 18446744073709551615 as libc::c_ulong {
                        (*arg.offset(1 as libc::c_int as isize) as libc::c_int
                            == '\0' as i32) as libc::c_int
                    } else {
                        (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
                    } == 0
                    {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 16442922512115311366;
                    }
                }
                35 | 126 => {
                    current_block = 16442922512115311366;
                }
                32 => {
                    current_block = 4634307283396172174;
                }
                33 => {
                    current_block = 7549413860336125482;
                }
                34 | 36 | 38 | 40 | 41 | 42 | 59 | 60 | 61 => {
                    current_block = 13059411171234995867;
                }
                62 | 91 | 94 => {
                    current_block = 16620298045565028098;
                }
                96 | 124 => {
                    current_block = 15155215915847730705;
                }
                39 => {
                    encountered_single_quote = 1 as libc::c_int != 0;
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        if buffersize != 0 && orig_buffersize == 0 {
                            orig_buffersize = buffersize;
                            buffersize = 0 as libc::c_int as size_t;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                        current_block = 253337042034819032;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                37 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56
                | 57 | 58 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76
                | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90
                | 93 | 95 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107
                | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119
                | 120 | 121 | 122 => {
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 253337042034819032;
                }
                _ => {
                    let mut m: size_t = 0;
                    let mut printable: bool = false;
                    if unibyte_locale {
                        m = 1 as libc::c_int as size_t;
                        printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
                            as libc::c_int
                            & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
                            != 0 as libc::c_int;
                    } else {
                        let mut mbstate: mbstate_t = mbstate_t {
                            __count: 0,
                            __value: C2RustUnnamed { __wch: 0 },
                        };
                        mbszero(&mut mbstate);
                        m = 0 as libc::c_int as size_t;
                        printable = 1 as libc::c_int != 0;
                        if argsize == 18446744073709551615 as libc::c_ulong {
                            argsize = strlen(arg);
                        }
                        let mut w: char32_t = 0;
                        let mut bytes: size_t = rpl_mbrtoc32(
                            &mut w,
                            &*arg.offset(i.wrapping_add(m) as isize),
                            argsize.wrapping_sub(i.wrapping_add(m)),
                            &mut mbstate,
                        );
                        if !(bytes == 0 as libc::c_int as libc::c_ulong) {
                            if bytes == -(1 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                            } else if bytes == -(2 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                                while i.wrapping_add(m) < argsize
                                    && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
                                        != 0
                                {
                                    m = m.wrapping_add(1);
                                    m;
                                }
                            } else {
                                if '[' as i32 == 0x5b as libc::c_int
                                    && elide_outer_quotes as libc::c_int != 0
                                    && quoting_style as libc::c_uint
                                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                                {
                                    let mut j: size_t = 0;
                                    j = 1 as libc::c_int as size_t;
                                    while j < bytes {
                                        match *arg
                                            .offset(i.wrapping_add(m).wrapping_add(j) as isize)
                                            as libc::c_int
                                        {
                                            91 | 92 | 94 | 96 | 124 => {
                                                current_block = 7928555609993211441;
                                                break 's_25;
                                            }
                                            _ => {}
                                        }
                                        j = j.wrapping_add(1);
                                        j;
                                    }
                                }
                                if c32isprint(w) == 0 {
                                    printable = 0 as libc::c_int != 0;
                                }
                                m = (m as libc::c_ulong).wrapping_add(bytes) as size_t
                                    as size_t;
                            }
                        }
                    }
                    c_and_shell_quote_compat = printable;
                    if (1 as libc::c_int as libc::c_ulong) < m
                        || backslash_escapes as libc::c_int != 0 && !printable
                    {
                        let mut ilim: size_t = i.wrapping_add(m);
                        loop {
                            if backslash_escapes as libc::c_int != 0 && !printable {
                                if elide_outer_quotes {
                                    current_block = 7928555609993211441;
                                    break 's_25;
                                }
                                escaping = 1 as libc::c_int != 0;
                                if quoting_style as libc::c_uint
                                    == shell_always_quoting_style as libc::c_int as libc::c_uint
                                    && !pending_shell_escape_end
                                {
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    pending_shell_escape_end = 1 as libc::c_int != 0;
                                }
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32
                                        + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
                                    as libc::c_uchar;
                            } else if is_right_quote {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                is_right_quote = 0 as libc::c_int != 0;
                            }
                            if ilim <= i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                            {
                                break;
                            }
                            if pending_shell_escape_end as libc::c_int != 0 && !escaping
                            {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                pending_shell_escape_end = 0 as libc::c_int != 0;
                            }
                            if len < buffersize {
                                *buffer.offset(len as isize) = c as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            i = i.wrapping_add(1);
                            c = *arg.offset(i as isize) as libc::c_uchar;
                        }
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
            }
            match current_block {
                16442922512115311366 => {
                    if i != 0 as libc::c_int as libc::c_ulong {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 4634307283396172174;
                    }
                }
                9215498979640025612 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 1190876092451756080;
                }
                _ => {}
            }
            match current_block {
                1190876092451756080 => {
                    if backslash_escapes {
                        c = esc;
                        current_block = 3173013908131212616;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                4634307283396172174 => {
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 7549413860336125482;
                }
                _ => {}
            }
            match current_block {
                7549413860336125482 => {
                    current_block = 13059411171234995867;
                }
                _ => {}
            }
            match current_block {
                13059411171234995867 => {
                    current_block = 16620298045565028098;
                }
                _ => {}
            }
            match current_block {
                16620298045565028098 => {
                    current_block = 15155215915847730705;
                }
                _ => {}
            }
            match current_block {
                15155215915847730705 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 253337042034819032;
                }
                _ => {}
            }
            match current_block {
                253337042034819032 => {
                    if !((backslash_escapes as libc::c_int != 0
                        && quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                        || elide_outer_quotes as libc::c_int != 0)
                        && !quote_these_too.is_null()
                        && *quote_these_too
                            .offset(
                                (c as libc::c_ulong)
                                    .wrapping_div(
                                        (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                    ) as isize,
                            )
                            >> (c as libc::c_ulong)
                                .wrapping_rem(
                                    (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                ) & 1 as libc::c_int as libc::c_uint != 0)
                        && !is_right_quote
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 3173013908131212616;
                    }
                }
                _ => {}
            }
            match current_block {
                3173013908131212616 => {
                    if elide_outer_quotes {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    escaping = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && !pending_shell_escape_end
                    {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 1 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    current_block = 4476262310586904498;
                }
                _ => {}
            }
            match current_block {
                4476262310586904498 => {
                    if pending_shell_escape_end as libc::c_int != 0 && !escaping {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = c as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    if !c_and_shell_quote_compat {
                        all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
                    }
                }
                _ => {}
            }
            i = i.wrapping_add(1);
            i;
        }
        if len == 0 as libc::c_int as libc::c_ulong
            && quoting_style as libc::c_uint
                == shell_always_quoting_style as libc::c_int as libc::c_uint
            && elide_outer_quotes as libc::c_int != 0
        {
            current_block = 7928555609993211441;
            break;
        }
        if !(quoting_style as libc::c_uint
            == shell_always_quoting_style as libc::c_int as libc::c_uint
            && !elide_outer_quotes && encountered_single_quote as libc::c_int != 0)
        {
            current_block = 6412618891452676311;
            break;
        }
        if all_c_and_shell_quote_compat {
            return quotearg_buffer_restyled(
                buffer,
                orig_buffersize,
                arg,
                argsize,
                c_quoting_style,
                flags,
                quote_these_too,
                left_quote,
                right_quote,
            )
        } else {
            if !(buffersize == 0 && orig_buffersize != 0) {
                current_block = 6412618891452676311;
                break;
            }
            buffersize = orig_buffersize;
            len = 0 as libc::c_int as size_t;
        }
Here is a piece of a function:
let mut pending_shell_escape_end: bool = false;
    let mut current_block: u64;
    let mut i: size_t = 0;
    let mut len: size_t = 0 as libc::c_int as size_t;
    let mut orig_buffersize: size_t = 0 as libc::c_int as size_t;
    let mut quote_string: *const libc::c_char = 0 as *const libc::c_char;
    let mut quote_string_len: size_t = 0 as libc::c_int as size_t;
    let mut backslash_escapes: bool = 0 as libc::c_int != 0;
    let mut unibyte_locale: bool = __ctype_get_mb_cur_max()
        == 1 as libc::c_int as libc::c_ulong;
    let mut elide_outer_quotes: bool = flags & QA_ELIDE_OUTER_QUOTES as libc::c_int
        != 0 as libc::c_int;
    let mut encountered_single_quote: bool = 0 as libc::c_int != 0;
    let mut all_c_and_shell_quote_compat: bool = 1 as libc::c_int != 0;
    's_25: loop {
        <chunk 27>pending_shell_escape_end = 0 as libc::c_int != 0;
        let mut current_block_48: u64;
        match quoting_style as libc::c_uint {
            6 => {
                quoting_style = c_quoting_style;
                elide_outer_quotes = 1 as libc::c_int != 0;
                current_block_48 = 1283995450065962895;
            }
            5 => {
                current_block_48 = 1283995450065962895;
            }
            7 => {
                backslash_escapes = 1 as libc::c_int != 0;
                elide_outer_quotes = 0 as libc::c_int != 0;
                current_block_48 = 2989495919056355252;
            }
            8 | 9 | 10 => {
                if quoting_style as libc::c_uint
                    != custom_quoting_style as libc::c_int as libc::c_uint
                {
                    left_quote = gettext_quote(
                        b"`\0" as *const u8 as *const libc::c_char,
                        quoting_style,
                    );
                    right_quote = gettext_quote(
                        b"'\0" as *const u8 as *const libc::c_char,
                        quoting_style,
                    );
                }
                if !elide_outer_quotes {
                    quote_string = left_quote;
                    while *quote_string != 0 {
                        if len < buffersize {
                            *buffer.offset(len as isize) = *quote_string;
                        }
                        len = len.wrapping_add(1);
                        len;
                        quote_string = quote_string.offset(1);
                        quote_string;
                    }
                }
                backslash_escapes = 1 as libc::c_int != 0;
                quote_string = right_quote;
                quote_string_len = strlen(quote_string);
                current_block_48 = 2989495919056355252;
            }
            3 => {
                backslash_escapes = 1 as libc::c_int != 0;
                current_block_48 = 2694013637280298776;
            }
            1 => {
                current_block_48 = 2694013637280298776;
            }
            4 => {
                current_block_48 = 2266290538919981374;
            }
            2 => {
                current_block_48 = 14141891332124833771;
            }
            0 => {
                elide_outer_quotes = 0 as libc::c_int != 0;
                current_block_48 = 2989495919056355252;
            }
            _ => {
                abort();
            }
        }
        match current_block_48 {
            1283995450065962895 => {
                if !elide_outer_quotes {
                    if len < buffersize {
                        *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                }
                backslash_escapes = 1 as libc::c_int != 0;
                quote_string = b"\"\0" as *const u8 as *const libc::c_char;
                quote_string_len = 1 as libc::c_int as size_t;
                current_block_48 = 2989495919056355252;
            }
            2694013637280298776 => {
                elide_outer_quotes = 1 as libc::c_int != 0;
                current_block_48 = 2266290538919981374;
            }
            _ => {}
        }
        match current_block_48 {
            2266290538919981374 => {
                if !elide_outer_quotes {
                    backslash_escapes = 1 as libc::c_int != 0;
                }
                current_block_48 = 14141891332124833771;
            }
            _ => {}
        }
        match current_block_48 {
            14141891332124833771 => {
                quoting_style = shell_always_quoting_style;
                if !elide_outer_quotes {
                    if len < buffersize {
                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                }
                quote_string = b"'\0" as *const u8 as *const libc::c_char;
                quote_string_len = 1 as libc::c_int as size_t;
            }
            _ => {}
        }
        i = 0 as libc::c_int as size_t;
        while if argsize == 18446744073709551615 as libc::c_ulong {
            (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
        } else {
            (i == argsize) as libc::c_int
        } == 0
        {
            let mut c: libc::c_uchar = 0;
            let mut esc: libc::c_uchar = 0;
            let mut is_right_quote: bool = 0 as libc::c_int != 0;
            let mut escaping: bool = 0 as libc::c_int != 0;
            let mut c_and_shell_quote_compat: bool = 0 as libc::c_int != 0;
            if backslash_escapes as libc::c_int != 0
                && quoting_style as libc::c_uint
                    != shell_always_quoting_style as libc::c_int as libc::c_uint
                && quote_string_len != 0
                && i.wrapping_add(quote_string_len)
                    <= (if argsize == 18446744073709551615 as libc::c_ulong
                        && (1 as libc::c_int as libc::c_ulong) < quote_string_len
                    {
                        argsize = strlen(arg);
                        argsize
                    } else {
                        argsize
                    })
                && memcmp(
                    arg.offset(i as isize) as *const libc::c_void,
                    quote_string as *const libc::c_void,
                    quote_string_len,
                ) == 0 as libc::c_int
            {
                if elide_outer_quotes {
                    current_block = 7928555609993211441;
                    break 's_25;
                }
                is_right_quote = 1 as libc::c_int != 0;
            }
            c = *arg.offset(i as isize) as libc::c_uchar;
            match c as libc::c_int {
                0 => {
                    if backslash_escapes {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        escaping = 1 as libc::c_int != 0;
                        if quoting_style as libc::c_uint
                            == shell_always_quoting_style as libc::c_int as libc::c_uint
                            && !pending_shell_escape_end
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            pending_shell_escape_end = 1 as libc::c_int != 0;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                            && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                                < argsize
                            && '0' as i32
                                <= *arg
                                    .offset(
                                        i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                    ) as libc::c_int
                            && *arg
                                .offset(
                                    i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                ) as libc::c_int <= '9' as i32
                        {
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            if len < buffersize {
                                *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                        }
                        c = '0' as i32 as libc::c_uchar;
                        current_block = 253337042034819032;
                    } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
                        current_block = 13619784596304402172;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                63 => {
                    match quoting_style as libc::c_uint {
                        2 => {
                            current_block = 17954593875197965021;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        5 => {
                            current_block = 14514781131754033399;
                            match current_block {
                                17954593875197965021 => {
                                    if elide_outer_quotes {
                                        current_block = 7928555609993211441;
                                        break 's_25;
                                    }
                                }
                                _ => {
                                    if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
                                        && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
                                            < argsize
                                        && *arg
                                            .offset(
                                                i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int == '?' as i32
                                    {
                                        match *arg
                                            .offset(
                                                i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                            ) as libc::c_int
                                        {
                                            33 | 39 | 40 | 41 | 45 | 47 | 60 | 61 | 62 => {
                                                if elide_outer_quotes {
                                                    current_block = 7928555609993211441;
                                                    break 's_25;
                                                }
                                                c = *arg
                                                    .offset(
                                                        i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
                                                    ) as libc::c_uchar;
                                                i = (i as libc::c_ulong)
                                                    .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
                                                    as size_t;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                                if len < buffersize {
                                                    *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
                                                }
                                                len = len.wrapping_add(1);
                                                len;
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            current_block = 253337042034819032;
                        }
                        _ => {
                            current_block = 253337042034819032;
                        }
                    }
                }
                7 => {
                    esc = 'a' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                8 => {
                    esc = 'b' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                12 => {
                    esc = 'f' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                10 => {
                    esc = 'n' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                13 => {
                    esc = 'r' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                9 => {
                    esc = 't' as i32 as libc::c_uchar;
                    current_block = 9215498979640025612;
                }
                11 => {
                    esc = 'v' as i32 as libc::c_uchar;
                    current_block = 1190876092451756080;
                }
                92 => {
                    esc = c;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        current_block = 4476262310586904498;
                    } else if backslash_escapes as libc::c_int != 0
                        && elide_outer_quotes as libc::c_int != 0
                        && quote_string_len != 0
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 9215498979640025612;
                    }
                }
                123 | 125 => {
                    if if argsize == 18446744073709551615 as libc::c_ulong {
                        (*arg.offset(1 as libc::c_int as isize) as libc::c_int
                            == '\0' as i32) as libc::c_int
                    } else {
                        (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
                    } == 0
                    {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 16442922512115311366;
                    }
                }
                35 | 126 => {
                    current_block = 16442922512115311366;
                }
                32 => {
                    current_block = 4634307283396172174;
                }
                33 => {
                    current_block = 7549413860336125482;
                }
                34 | 36 | 38 | 40 | 41 | 42 | 59 | 60 | 61 => {
                    current_block = 13059411171234995867;
                }
                62 | 91 | 94 => {
                    current_block = 16620298045565028098;
                }
                96 | 124 => {
                    current_block = 15155215915847730705;
                }
                39 => {
                    encountered_single_quote = 1 as libc::c_int != 0;
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                    {
                        if elide_outer_quotes {
                            current_block = 7928555609993211441;
                            break 's_25;
                        }
                        if buffersize != 0 && orig_buffersize == 0 {
                            orig_buffersize = buffersize;
                            buffersize = 0 as libc::c_int as size_t;
                        }
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                        current_block = 253337042034819032;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                37 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56
                | 57 | 58 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76
                | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90
                | 93 | 95 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107
                | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119
                | 120 | 121 | 122 => {
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 253337042034819032;
                }
                _ => {
                    let mut m: size_t = 0;
                    let mut printable: bool = false;
                    if unibyte_locale {
                        m = 1 as libc::c_int as size_t;
                        printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
                            as libc::c_int
                            & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
                            != 0 as libc::c_int;
                    } else {
                        let mut mbstate: mbstate_t = mbstate_t {
                            __count: 0,
                            __value: C2RustUnnamed { __wch: 0 },
                        };
                        mbszero(&mut mbstate);
                        m = 0 as libc::c_int as size_t;
                        printable = 1 as libc::c_int != 0;
                        if argsize == 18446744073709551615 as libc::c_ulong {
                            argsize = strlen(arg);
                        }
                        let mut w: char32_t = 0;
                        let mut bytes: size_t = rpl_mbrtoc32(
                            &mut w,
                            &*arg.offset(i.wrapping_add(m) as isize),
                            argsize.wrapping_sub(i.wrapping_add(m)),
                            &mut mbstate,
                        );
                        if !(bytes == 0 as libc::c_int as libc::c_ulong) {
                            if bytes == -(1 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                            } else if bytes == -(2 as libc::c_int) as size_t {
                                printable = 0 as libc::c_int != 0;
                                while i.wrapping_add(m) < argsize
                                    && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
                                        != 0
                                {
                                    m = m.wrapping_add(1);
                                    m;
                                }
                            } else {
                                if '[' as i32 == 0x5b as libc::c_int
                                    && elide_outer_quotes as libc::c_int != 0
                                    && quoting_style as libc::c_uint
                                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                                {
                                    let mut j: size_t = 0;
                                    j = 1 as libc::c_int as size_t;
                                    while j < bytes {
                                        match *arg
                                            .offset(i.wrapping_add(m).wrapping_add(j) as isize)
                                            as libc::c_int
                                        {
                                            91 | 92 | 94 | 96 | 124 => {
                                                current_block = 7928555609993211441;
                                                break 's_25;
                                            }
                                            _ => {}
                                        }
                                        j = j.wrapping_add(1);
                                        j;
                                    }
                                }
                                if c32isprint(w) == 0 {
                                    printable = 0 as libc::c_int != 0;
                                }
                                m = (m as libc::c_ulong).wrapping_add(bytes) as size_t
                                    as size_t;
                            }
                        }
                    }
                    c_and_shell_quote_compat = printable;
                    if (1 as libc::c_int as libc::c_ulong) < m
                        || backslash_escapes as libc::c_int != 0 && !printable
                    {
                        let mut ilim: size_t = i.wrapping_add(m);
                        loop {
                            if backslash_escapes as libc::c_int != 0 && !printable {
                                if elide_outer_quotes {
                                    current_block = 7928555609993211441;
                                    break 's_25;
                                }
                                escaping = 1 as libc::c_int != 0;
                                if quoting_style as libc::c_uint
                                    == shell_always_quoting_style as libc::c_int as libc::c_uint
                                    && !pending_shell_escape_end
                                {
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    if len < buffersize {
                                        *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                    }
                                    len = len.wrapping_add(1);
                                    len;
                                    pending_shell_escape_end = 1 as libc::c_int != 0;
                                }
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer
                                        .offset(
                                            len as isize,
                                        ) = ('0' as i32
                                        + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
                                        as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
                                    as libc::c_uchar;
                            } else if is_right_quote {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                is_right_quote = 0 as libc::c_int != 0;
                            }
                            if ilim <= i.wrapping_add(1 as libc::c_int as libc::c_ulong)
                            {
                                break;
                            }
                            if pending_shell_escape_end as libc::c_int != 0 && !escaping
                            {
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                if len < buffersize {
                                    *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                                }
                                len = len.wrapping_add(1);
                                len;
                                pending_shell_escape_end = 0 as libc::c_int != 0;
                            }
                            if len < buffersize {
                                *buffer.offset(len as isize) = c as libc::c_char;
                            }
                            len = len.wrapping_add(1);
                            len;
                            i = i.wrapping_add(1);
                            c = *arg.offset(i as isize) as libc::c_uchar;
                        }
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
            }
            match current_block {
                16442922512115311366 => {
                    if i != 0 as libc::c_int as libc::c_ulong {
                        current_block = 253337042034819032;
                    } else {
                        current_block = 4634307283396172174;
                    }
                }
                9215498979640025612 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 1190876092451756080;
                }
                _ => {}
            }
            match current_block {
                1190876092451756080 => {
                    if backslash_escapes {
                        c = esc;
                        current_block = 3173013908131212616;
                    } else {
                        current_block = 253337042034819032;
                    }
                }
                4634307283396172174 => {
                    c_and_shell_quote_compat = 1 as libc::c_int != 0;
                    current_block = 7549413860336125482;
                }
                _ => {}
            }
            match current_block {
                7549413860336125482 => {
                    current_block = 13059411171234995867;
                }
                _ => {}
            }
            match current_block {
                13059411171234995867 => {
                    current_block = 16620298045565028098;
                }
                _ => {}
            }
            match current_block {
                16620298045565028098 => {
                    current_block = 15155215915847730705;
                }
                _ => {}
            }
            match current_block {
                15155215915847730705 => {
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && elide_outer_quotes as libc::c_int != 0
                    {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    current_block = 253337042034819032;
                }
                _ => {}
            }
            match current_block {
                253337042034819032 => {
                    if !((backslash_escapes as libc::c_int != 0
                        && quoting_style as libc::c_uint
                            != shell_always_quoting_style as libc::c_int as libc::c_uint
                        || elide_outer_quotes as libc::c_int != 0)
                        && !quote_these_too.is_null()
                        && *quote_these_too
                            .offset(
                                (c as libc::c_ulong)
                                    .wrapping_div(
                                        (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                    ) as isize,
                            )
                            >> (c as libc::c_ulong)
                                .wrapping_rem(
                                    (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong),
                                ) & 1 as libc::c_int as libc::c_uint != 0)
                        && !is_right_quote
                    {
                        current_block = 4476262310586904498;
                    } else {
                        current_block = 3173013908131212616;
                    }
                }
                _ => {}
            }
            match current_block {
                3173013908131212616 => {
                    if elide_outer_quotes {
                        current_block = 7928555609993211441;
                        break 's_25;
                    }
                    escaping = 1 as libc::c_int != 0;
                    if quoting_style as libc::c_uint
                        == shell_always_quoting_style as libc::c_int as libc::c_uint
                        && !pending_shell_escape_end
                    {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 1 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    current_block = 4476262310586904498;
                }
                _ => {}
            }
            match current_block {
                4476262310586904498 => {
                    if pending_shell_escape_end as libc::c_int != 0 && !escaping {
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        if len < buffersize {
                            *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
                        }
                        len = len.wrapping_add(1);
                        len;
                        pending_shell_escape_end = 0 as libc::c_int != 0;
                    }
                    if len < buffersize {
                        *buffer.offset(len as isize) = c as libc::c_char;
                    }
                    len = len.wrapping_add(1);
                    len;
                    if !c_and_shell_quote_compat {
                        all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
                    }
                }
                _ => {}
            }
            i = i.wrapping_add(1);
            i;
        }
        if len == 0 as libc::c_int as libc::c_ulong
            && quoting_style as libc::c_uint
                == shell_always_quoting_style as libc::c_int as libc::c_uint
            && elide_outer_quotes as libc::c_int != 0
        {
            current_block = 7928555609993211441;
            break;
        }
        if !(quoting_style as libc::c_uint
            == shell_always_quoting_style as libc::c_int as libc::c_uint
            && !elide_outer_quotes && encountered_single_quote as libc::c_int != 0)
        {
            current_block = 6412618891452676311;
            break;
        }
        if all_c_and_shell_quote_compat {
            return quotearg_buffer_restyled(
                buffer,
                orig_buffersize,
                arg,
                argsize,
                c_quoting_style,
                flags,
                quote_these_too,
                left_quote,
                right_quote,
            )
        } else {
            if !(buffersize == 0 && orig_buffersize != 0) {
                current_block = 6412618891452676311;
                break;
            }
            buffersize = orig_buffersize;
            len = 0 as libc::c_int as size_t;
        }
    }
    match current_block {
        7928555609993211441 => {
            if quoting_style as libc::c_uint
                == shell_always_quoting_style as libc::c_int as libc::c_uint
                && backslash_escapes as libc::c_int != 0
            {
                quoting_style = shell_escape_always_quoting_style;
            }
            return quotearg_buffer_restyled(
                buffer,
                buffersize,
                arg,
                argsize,
                quoting_style,
                flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
                0 as *const libc::c_uint,
                left_quote,
                right_quote,
            );
        }
        _ => {
            if !quote_string.is_null() && !elide_outer_quotes {
                while *quote_string != 0 {
                    if len < buffersize {
                        *buffer.offset(len as isize) = *quote_string;
                    }
                    len = len.wrapping_add(1);
                    len;
                    quote_string = quote_string.offset(1);
                    quote_string;
                }
            }
            if len < buffersize {
                *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
            }
            return len;
        }
    };
-----------DefId(0:935 ~ rust[fc84]::src::version_etc::version_etc_arn)---------------
Processing a block of length 176
Its span is src/version_etc.rs:72:3: 247:2 (#0)
It has 6 statements
Adding a new piece of length 32
Adding a new block of length 142
Here is a piece of a function:
if !command_name.is_null() {
        fprintf(
            stream,
            b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
            command_name,
            package,
            version,
        );
    } else {
        fprintf(
            stream,
            b"%s %s\n\0" as *const u8 as *const libc::c_char,
            package,
            version,
        );
    }
    fprintf(
        stream,
        version_etc_copyright.as_ptr(),
        gettext(b"(C)\0" as *const u8 as *const libc::c_char),
        COPYRIGHT_YEAR as libc::c_int,
    );
    fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
    fprintf(
        stream,
        gettext(
            b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\0"
                as *const u8 as *const libc::c_char,
        ),
        b"https://gnu.org/licenses/gpl.html\0" as *const u8 as *const libc::c_char,
    );
    fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
Here is a piece of a function:
match n_authors {
        0 => {}
        1 => {
            fprintf(
                stream,
                gettext(b"Written by %s.\n\0" as *const u8 as *const libc::c_char),
                *authors.offset(0 as libc::c_int as isize),
            );
        }
        2 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s and %s.\n\0" as *const u8 as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
            );
        }
        3 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, and %s.\n\0" as *const u8 as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
            );
        }
        4 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8
                        as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
            );
        }
        5 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8
                        as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
            );
        }
        6 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8
                        as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
                *authors.offset(5 as libc::c_int as isize),
            );
        }
        7 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8
                        as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
                *authors.offset(5 as libc::c_int as isize),
                *authors.offset(6 as libc::c_int as isize),
            );
        }
        8 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8
                        as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
                *authors.offset(5 as libc::c_int as isize),
                *authors.offset(6 as libc::c_int as isize),
                *authors.offset(7 as libc::c_int as isize),
            );
        }
        9 => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0"
                        as *const u8 as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
                *authors.offset(5 as libc::c_int as isize),
                *authors.offset(6 as libc::c_int as isize),
                *authors.offset(7 as libc::c_int as isize),
                *authors.offset(8 as libc::c_int as isize),
            );
        }
        _ => {
            fprintf(
                stream,
                gettext(
                    b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0"
                        as *const u8 as *const libc::c_char,
                ),
                *authors.offset(0 as libc::c_int as isize),
                *authors.offset(1 as libc::c_int as isize),
                *authors.offset(2 as libc::c_int as isize),
                *authors.offset(3 as libc::c_int as isize),
                *authors.offset(4 as libc::c_int as isize),
                *authors.offset(5 as libc::c_int as isize),
                *authors.offset(6 as libc::c_int as isize),
                *authors.offset(7 as libc::c_int as isize),
                *authors.offset(8 as libc::c_int as isize),
            );
        }
    };
-----------DefId(0:1017 ~ rust[fc84]::src::xmalloc::xpalloc)---------------
About to walk this statement: src/xmalloc.rs:215:5: 550:17 (#0) with length 336
Processing a block of length 1
Its span is src/xmalloc.rs:217:39: 217:75 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 1
Its span is src/xmalloc.rs:217:81: 217:86 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 1
Its span is src/xmalloc.rs:219:39: 219:75 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 1
Its span is src/xmalloc.rs:219:81: 219:86 (#0)
It has 1 statements
Adding a new block of length 1
About to walk this statement: src/xmalloc.rs:222:13: 410:14 (#0) with length 189
Processing a block of length 82
Its span is src/xmalloc.rs:222:53: 303:14 (#0)
It has 1 statements
Adding a new block of length 80
Processing a block of length 108
Its span is src/xmalloc.rs:303:20: 410:14 (#0)
It has 1 statements
Adding a new block of length 106
New length: 3
Processing a block of length 5
Its span is src/xmalloc.rs:221:53: 411:10 (#0)
It has 1 statements
Adding a new block of length 3
Processing a block of length 116
Its span is src/xmalloc.rs:411:16: 526:10 (#0)
It has 1 statements
Adding a new block of length 114
Processing a block of length 5
Its span is src/xmalloc.rs:527:5: 531:6 (#0)
It has 3 statements
Adding a new block of length 3
Processing a block of length 5
Its span is src/xmalloc.rs:531:12: 535:6 (#0)
It has 3 statements
Adding a new block of length 3
Processing a block of length 9
Its span is src/xmalloc.rs:536:5: 544:6 (#0)
It has 1 statements
Adding a new block of length 7
Processing a block of length 7
Its span is src/xmalloc.rs:544:12: 550:6 (#0)
It has 1 statements
Adding a new block of length 5
New length: 11
About to walk this statement: src/xmalloc.rs:558:5: 898:6 (#0) with length 341
About to walk this statement: src/xmalloc.rs:562:13: 894:24 (#0) with length 333
Processing a block of length 3
Its span is src/xmalloc.rs:565:51: 567:22 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/xmalloc.rs:567:28: 569:22 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/xmalloc.rs:571:51: 573:22 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/xmalloc.rs:573:28: 575:22 (#0)
It has 1 statements
Adding a new block of length 1
About to walk this statement: src/xmalloc.rs:578:25: 769:26 (#0) with length 192
Processing a block of length 84
Its span is src/xmalloc.rs:578:65: 661:26 (#0)
It has 1 statements
Adding a new block of length 82
Processing a block of length 109
Its span is src/xmalloc.rs:661:32: 769:26 (#0)
It has 1 statements
Adding a new block of length 107
New length: 3
Processing a block of length 5
Its span is src/xmalloc.rs:577:65: 770:22 (#0)
It has 1 statements
Adding a new block of length 3
Processing a block of length 116
Its span is src/xmalloc.rs:770:28: 885:22 (#0)
It has 1 statements
Adding a new block of length 114
Processing a block of length 5
Its span is src/xmalloc.rs:886:17: 890:18 (#0)
It has 3 statements
Adding a new block of length 3
Processing a block of length 5
Its span is src/xmalloc.rs:890:24: 894:18 (#0)
It has 3 statements
Adding a new block of length 3
New length: 17
Processing a block of length 21
Its span is src/xmalloc.rs:559:12: 895:10 (#0)
It has 3 statements
Adding a new block of length 19
Processing a block of length 3
Its span is src/xmalloc.rs:896:5: 898:6 (#0)
It has 1 statements
Adding a new block of length 1
New length: 5
Processing a block of length 39
Its span is src/xmalloc.rs:203:24: 902:2 (#0)
It has 14 statements
Adding a new block of length 37
Here is a piece of a function:
0 as libc::c_int as libc::c_long
Here is a piece of a function:
n
Here is a piece of a function:
0 as libc::c_int as libc::c_long
Here is a piece of a function:
s
Here is a piece of a function:
if ((if 1 as libc::c_int != 0 {
                    0 as libc::c_int as libc::c_long
                } else {
                    (if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        -(1 as libc::c_int) as idx_t
                    }) + s
                }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
                {
                    (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
                } else {
                    ((if (if (if ((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        s
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    {
                        !(((((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 1 as libc::c_int as libc::c_long)
                            << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                            - 1 as libc::c_int as libc::c_long)
                            * 2 as libc::c_int as libc::c_long
                            + 1 as libc::c_int as libc::c_long)
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 0 as libc::c_int as libc::c_long
                    }) < 0 as libc::c_int as libc::c_long
                    {
                        (s
                            < -(if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                s
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                ((((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 1 as libc::c_int as libc::c_long)
                                    << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                    - 1 as libc::c_int as libc::c_long)
                                    * 2 as libc::c_int as libc::c_long
                                    + 1 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) - 1 as libc::c_int as libc::c_long
                            })) as libc::c_int
                    } else {
                        ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
                    }) != 0
                    {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + -(1 as libc::c_int) as idx_t
                            >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                    } else {
                        -(1 as libc::c_int) as idx_t / -s
                    }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
                }
Here is a piece of a function:
if (if (if ((if 1 as libc::c_int != 0 {
                    0 as libc::c_int as libc::c_long
                } else {
                    (if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        s
                    }) + 0 as libc::c_int as idx_t
                }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
                {
                    !(((((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 0 as libc::c_int as idx_t
                    }) + 1 as libc::c_int as libc::c_long)
                        << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                        - 1 as libc::c_int as libc::c_long)
                        * 2 as libc::c_int as libc::c_long
                        + 1 as libc::c_int as libc::c_long)
                } else {
                    (if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 0 as libc::c_int as idx_t
                    }) + 0 as libc::c_int as libc::c_long
                }) < 0 as libc::c_int as libc::c_long
                {
                    (((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        s
                    }) + 0 as libc::c_int as idx_t)
                        < -(if ((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                s
                            }) + 0 as libc::c_int as idx_t
                        }) - 1 as libc::c_int as libc::c_long)
                            < 0 as libc::c_int as libc::c_long
                        {
                            ((((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 0 as libc::c_int as idx_t
                            }) + 1 as libc::c_int as libc::c_long)
                                << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                - 1 as libc::c_int as libc::c_long)
                                * 2 as libc::c_int as libc::c_long
                                + 1 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 0 as libc::c_int as idx_t
                            }) - 1 as libc::c_int as libc::c_long
                        })) as libc::c_int
                } else {
                    ((0 as libc::c_int as libc::c_long)
                        < (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 0 as libc::c_int as idx_t) as libc::c_int
                }) != 0 && s == -(1 as libc::c_int) as libc::c_long
                {
                    if ((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        n
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    {
                        ((0 as libc::c_int as libc::c_long)
                            < n + 0 as libc::c_int as idx_t) as libc::c_int
                    } else {
                        ((0 as libc::c_int as libc::c_long) < n
                            && (-(1 as libc::c_int) as libc::c_long
                                - 0 as libc::c_int as idx_t)
                                < n - 1 as libc::c_int as libc::c_long) as libc::c_int
                    }
                } else {
                    (0 as libc::c_int as idx_t / s < n) as libc::c_int
                }
Here is a piece of a function:
if n < 0 as libc::c_int as libc::c_long {
                <chunk 4>if ((if 1 as libc::c_int != 0 {
                    0 as libc::c_int as libc::c_long
                } else {
                    (if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        -(1 as libc::c_int) as idx_t
                    }) + s
                }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
                {
                    (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
                } else {
                    ((if (if (if ((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        s
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    {
                        !(((((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 1 as libc::c_int as libc::c_long)
                            << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                            - 1 as libc::c_int as libc::c_long)
                            * 2 as libc::c_int as libc::c_long
                            + 1 as libc::c_int as libc::c_long)
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + 0 as libc::c_int as libc::c_long
                    }) < 0 as libc::c_int as libc::c_long
                    {
                        (s
                            < -(if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                s
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                ((((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 1 as libc::c_int as libc::c_long)
                                    << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                    - 1 as libc::c_int as libc::c_long)
                                    * 2 as libc::c_int as libc::c_long
                                    + 1 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) - 1 as libc::c_int as libc::c_long
                            })) as libc::c_int
                    } else {
                        ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
                    }) != 0
                    {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) + -(1 as libc::c_int) as idx_t
                            >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                    } else {
                        -(1 as libc::c_int) as idx_t / -s
                    }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
                }
            } else {
                <chunk 5>
            }
Here is a piece of a function:
if s == 0 as libc::c_int as libc::c_long {
                0 as libc::c_int
            } else {
                if n < 0 as libc::c_int as libc::c_long {
                    if (if (if ((if 1 as libc::c_int != 0 {
                        0 as libc::c_int as libc::c_long
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            n
                        }) + 0 as libc::c_int as idx_t
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    {
                        !(((((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                n
                            }) + 0 as libc::c_int as idx_t
                        }) + 1 as libc::c_int as libc::c_long)
                            << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                            - 1 as libc::c_int as libc::c_long)
                            * 2 as libc::c_int as libc::c_long
                            + 1 as libc::c_int as libc::c_long)
                    } else {
                        (if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                n
                            }) + 0 as libc::c_int as idx_t
                        }) + 0 as libc::c_int as libc::c_long
                    }) < 0 as libc::c_int as libc::c_long
                    {
                        (((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            n
                        }) + 0 as libc::c_int as idx_t)
                            < -(if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    n
                                }) + 0 as libc::c_int as idx_t
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                ((((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        n
                                    }) + 0 as libc::c_int as idx_t
                                }) + 1 as libc::c_int as libc::c_long)
                                    << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                    - 1 as libc::c_int as libc::c_long)
                                    * 2 as libc::c_int as libc::c_long
                                    + 1 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        n
                                    }) + 0 as libc::c_int as idx_t
                                }) - 1 as libc::c_int as libc::c_long
                            })) as libc::c_int
                    } else {
                        ((0 as libc::c_int as libc::c_long)
                            < (if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                n
                            }) + 0 as libc::c_int as idx_t) as libc::c_int
                    }) != 0 && n == -(1 as libc::c_int) as libc::c_long
                    {
                        if ((if 1 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_long
                        } else {
                            s
                        }) - 1 as libc::c_int as libc::c_long)
                            < 0 as libc::c_int as libc::c_long
                        {
                            ((0 as libc::c_int as libc::c_long)
                                < s + 0 as libc::c_int as idx_t) as libc::c_int
                        } else {
                            ((-(1 as libc::c_int) as libc::c_long
                                - 0 as libc::c_int as idx_t)
                                < s - 1 as libc::c_int as libc::c_long) as libc::c_int
                        }
                    } else {
                        (0 as libc::c_int as idx_t / n < s) as libc::c_int
                    }
                } else {
                    (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
                }
            }
Here is a piece of a function:
let (fresh8, _fresh9) = n.overflowing_mul(s);
        *(&mut nbytes as *mut idx_t) = fresh8;
        1 as libc::c_int
Here is a piece of a function:
let (fresh10, fresh11) = n.overflowing_mul(s);
        *(&mut nbytes as *mut idx_t) = fresh10;
        fresh11 as libc::c_int
Here is a piece of a function:
if (9223372036854775807 as libc::c_long as libc::c_ulong)
            < 18446744073709551615 as libc::c_ulong
        {
            9223372036854775807 as libc::c_long as libc::c_ulong
        } else {
            18446744073709551615 as libc::c_ulong
        }
Here is a piece of a function:
(if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
            DEFAULT_MXFAST_0 as libc::c_int
        } else {
            0 as libc::c_int
        }) as libc::c_ulong
Here is a piece of a function:
0 as libc::c_int as libc::c_long
Here is a piece of a function:
n
Here is a piece of a function:
0 as libc::c_int as libc::c_long
Here is a piece of a function:
s
Here is a piece of a function:
if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    -(1 as libc::c_int) as idx_t
                                }) + s
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
                            } else {
                                ((if (if (if ((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) - 1 as libc::c_int as libc::c_long)
                                    < 0 as libc::c_int as libc::c_long
                                {
                                    !(((((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 1 as libc::c_int as libc::c_long)
                                        << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                        - 1 as libc::c_int as libc::c_long)
                                        * 2 as libc::c_int as libc::c_long
                                        + 1 as libc::c_int as libc::c_long)
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 0 as libc::c_int as libc::c_long
                                }) < 0 as libc::c_int as libc::c_long
                                {
                                    (s
                                        < -(if ((if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            s
                                        }) - 1 as libc::c_int as libc::c_long)
                                            < 0 as libc::c_int as libc::c_long
                                        {
                                            ((((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) + 1 as libc::c_int as libc::c_long)
                                                << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                - 1 as libc::c_int as libc::c_long)
                                                * 2 as libc::c_int as libc::c_long
                                                + 1 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) - 1 as libc::c_int as libc::c_long
                                        })) as libc::c_int
                                } else {
                                    ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
                                }) != 0
                                {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + -(1 as libc::c_int) as idx_t
                                        >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                                } else {
                                    -(1 as libc::c_int) as idx_t / -s
                                }) <= -(1 as libc::c_int) as libc::c_long - n)
                                    as libc::c_int
                            }
Here is a piece of a function:
if (if (if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 0 as libc::c_int as idx_t
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                !(((((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 0 as libc::c_int as idx_t
                                }) + 1 as libc::c_int as libc::c_long)
                                    << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                    - 1 as libc::c_int as libc::c_long)
                                    * 2 as libc::c_int as libc::c_long
                                    + 1 as libc::c_int as libc::c_long)
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 0 as libc::c_int as idx_t
                                }) + 0 as libc::c_int as libc::c_long
                            }) < 0 as libc::c_int as libc::c_long
                            {
                                (((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) + 0 as libc::c_int as idx_t)
                                    < -(if ((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            s
                                        }) + 0 as libc::c_int as idx_t
                                    }) - 1 as libc::c_int as libc::c_long)
                                        < 0 as libc::c_int as libc::c_long
                                    {
                                        ((((if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) + 0 as libc::c_int as idx_t
                                        }) + 1 as libc::c_int as libc::c_long)
                                            << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                            - 1 as libc::c_int as libc::c_long)
                                            * 2 as libc::c_int as libc::c_long
                                            + 1 as libc::c_int as libc::c_long
                                    } else {
                                        (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) + 0 as libc::c_int as idx_t
                                        }) - 1 as libc::c_int as libc::c_long
                                    })) as libc::c_int
                            } else {
                                ((0 as libc::c_int as libc::c_long)
                                    < (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 0 as libc::c_int as idx_t) as libc::c_int
                            }) != 0 && s == -(1 as libc::c_int) as libc::c_long
                            {
                                if ((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    n
                                }) - 1 as libc::c_int as libc::c_long)
                                    < 0 as libc::c_int as libc::c_long
                                {
                                    ((0 as libc::c_int as libc::c_long)
                                        < n + 0 as libc::c_int as idx_t) as libc::c_int
                                } else {
                                    ((0 as libc::c_int as libc::c_long) < n
                                        && (-(1 as libc::c_int) as libc::c_long
                                            - 0 as libc::c_int as idx_t)
                                            < n - 1 as libc::c_int as libc::c_long) as libc::c_int
                                }
                            } else {
                                (0 as libc::c_int as idx_t / s < n) as libc::c_int
                            }
Here is a piece of a function:
if n < 0 as libc::c_int as libc::c_long {
                            <chunk 16>if ((if 1 as libc::c_int != 0 {
                                0 as libc::c_int as libc::c_long
                            } else {
                                (if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    -(1 as libc::c_int) as idx_t
                                }) + s
                            }) - 1 as libc::c_int as libc::c_long)
                                < 0 as libc::c_int as libc::c_long
                            {
                                (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
                            } else {
                                ((if (if (if ((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    s
                                }) - 1 as libc::c_int as libc::c_long)
                                    < 0 as libc::c_int as libc::c_long
                                {
                                    !(((((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 1 as libc::c_int as libc::c_long)
                                        << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                        - 1 as libc::c_int as libc::c_long)
                                        * 2 as libc::c_int as libc::c_long
                                        + 1 as libc::c_int as libc::c_long)
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + 0 as libc::c_int as libc::c_long
                                }) < 0 as libc::c_int as libc::c_long
                                {
                                    (s
                                        < -(if ((if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            s
                                        }) - 1 as libc::c_int as libc::c_long)
                                            < 0 as libc::c_int as libc::c_long
                                        {
                                            ((((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) + 1 as libc::c_int as libc::c_long)
                                                << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                - 1 as libc::c_int as libc::c_long)
                                                * 2 as libc::c_int as libc::c_long
                                                + 1 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                s
                                            }) - 1 as libc::c_int as libc::c_long
                                        })) as libc::c_int
                                } else {
                                    ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
                                }) != 0
                                {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) + -(1 as libc::c_int) as idx_t
                                        >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                                } else {
                                    -(1 as libc::c_int) as idx_t / -s
                                }) <= -(1 as libc::c_int) as libc::c_long - n)
                                    as libc::c_int
                            }
                        } else {
                            <chunk 17>
                        }
Here is a piece of a function:
if s == 0 as libc::c_int as libc::c_long {
                            0 as libc::c_int
                        } else {
                            if n < 0 as libc::c_int as libc::c_long {
                                if (if (if ((if 1 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_long
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        n
                                    }) + 0 as libc::c_int as idx_t
                                }) - 1 as libc::c_int as libc::c_long)
                                    < 0 as libc::c_int as libc::c_long
                                {
                                    !(((((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            n
                                        }) + 0 as libc::c_int as idx_t
                                    }) + 1 as libc::c_int as libc::c_long)
                                        << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                        - 1 as libc::c_int as libc::c_long)
                                        * 2 as libc::c_int as libc::c_long
                                        + 1 as libc::c_int as libc::c_long)
                                } else {
                                    (if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            n
                                        }) + 0 as libc::c_int as idx_t
                                    }) + 0 as libc::c_int as libc::c_long
                                }) < 0 as libc::c_int as libc::c_long
                                {
                                    (((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        n
                                    }) + 0 as libc::c_int as idx_t)
                                        < -(if ((if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                n
                                            }) + 0 as libc::c_int as idx_t
                                        }) - 1 as libc::c_int as libc::c_long)
                                            < 0 as libc::c_int as libc::c_long
                                        {
                                            ((((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    n
                                                }) + 0 as libc::c_int as idx_t
                                            }) + 1 as libc::c_int as libc::c_long)
                                                << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                - 1 as libc::c_int as libc::c_long)
                                                * 2 as libc::c_int as libc::c_long
                                                + 1 as libc::c_int as libc::c_long
                                        } else {
                                            (if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    n
                                                }) + 0 as libc::c_int as idx_t
                                            }) - 1 as libc::c_int as libc::c_long
                                        })) as libc::c_int
                                } else {
                                    ((0 as libc::c_int as libc::c_long)
                                        < (if 1 as libc::c_int != 0 {
                                            0 as libc::c_int as libc::c_long
                                        } else {
                                            n
                                        }) + 0 as libc::c_int as idx_t) as libc::c_int
                                }) != 0 && n == -(1 as libc::c_int) as libc::c_long
                                {
                                    if ((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        s
                                    }) - 1 as libc::c_int as libc::c_long)
                                        < 0 as libc::c_int as libc::c_long
                                    {
                                        ((0 as libc::c_int as libc::c_long)
                                            < s + 0 as libc::c_int as idx_t) as libc::c_int
                                    } else {
                                        ((-(1 as libc::c_int) as libc::c_long
                                            - 0 as libc::c_int as idx_t)
                                            < s - 1 as libc::c_int as libc::c_long) as libc::c_int
                                    }
                                } else {
                                    (0 as libc::c_int as idx_t / n < s) as libc::c_int
                                }
                            } else {
                                (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
                            }
                        }
Here is a piece of a function:
let (fresh18, _fresh19) = n.overflowing_mul(s);
                    *(&mut nbytes as *mut idx_t) = fresh18;
                    1 as libc::c_int
Here is a piece of a function:
let (fresh20, fresh21) = n.overflowing_mul(s);
                    *(&mut nbytes as *mut idx_t) = fresh20;
                    fresh21 as libc::c_int
Here is a piece of a function:
let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
            *(&mut n as *mut idx_t) = fresh12;
            fresh13 as libc::c_int != 0
                || 0 as libc::c_int as libc::c_long <= n_max && n_max < n
                || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
                    && ((if 1 as libc::c_int != 0 {
                        <chunk 12>0 as libc::c_int as libc::c_long
                    } else {
                        <chunk 13>
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    && ((if 1 as libc::c_int != 0 {
                        <chunk 14>
                    } else {
                        <chunk 15>
                    }) - 1 as libc::c_int as libc::c_long)
                        < 0 as libc::c_int as libc::c_long
                    && (if s < 0 as libc::c_int as libc::c_long {
                        <chunk 18>
                    } else {
                        <chunk 19>
                    }) != 0
                {
                    <chunk 20>
                } else {
                    <chunk 21>
                }) != 0
Here is a piece of a function:
xalloc_die();
Here is a piece of a function:
let mut n0: idx_t = *pn;
    let mut n: idx_t = 0;
    let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    *(&mut n as *mut idx_t) = fresh2;
    if fresh3 {
        n = 9223372036854775807 as libc::c_long;
    }
    if 0 as libc::c_int as libc::c_long <= n_max && n_max < n {
        n = n_max;
    }
    let mut nbytes: idx_t = 0;
    let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
        < -(1 as libc::c_int) as idx_t
        && ((if 1 as libc::c_int != 0 { <chunk 0>0 as libc::c_int as libc::c_long } else { <chunk 1> })
            - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
        && ((if 1 as libc::c_int != 0 { <chunk 2> } else { <chunk 3> })
            - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
        && (if s < 0 as libc::c_int as libc::c_long {
            <chunk 6>
        } else {
            <chunk 7>
        }) != 0
    {
        <chunk 8>
    } else {
        <chunk 9>
    } != 0
    {
        <chunk 10>
    } else {
        <chunk 11>
    }) as idx_t;
    if adjusted_nbytes != 0 {
        n = adjusted_nbytes / s;
        nbytes = adjusted_nbytes - adjusted_nbytes % s;
    }
    if pa.is_null() {
        *pn = 0 as libc::c_int as idx_t;
    }
    if n - n0 < n_incr_min
        && {
            <chunk 22>
        }
    {
        <chunk 23>
    }
    pa = xrealloc(pa, nbytes as size_t);
    *pn = n;
    return pa;
-----------DefId(0:125 ~ cat[4a5d]::cat)---------------
About to walk this statement: src/cat.rs:724:5: 1075:7 (#0) with length 352
About to walk this statement: src/cat.rs:726:9: 960:10 (#0) with length 235
About to walk this statement: src/cat.rs:752:13: 948:14 (#0) with length 197
Processing a block of length 145
Its span is src/cat.rs:752:27: 896:14 (#0)
It has 12 statements
Adding a new block of length 143
Processing a block of length 53
Its span is src/cat.rs:896:20: 948:14 (#0)
It has 3 statements
Adding a new block of length 51
New length: 3
Processing a block of length 41
Its span is src/cat.rs:726:14: 960:10 (#0)
It has 4 statements
Adding a new block of length 39
New length: 2
Processing a block of length 119
Its span is src/cat.rs:724:10: 1075:6 (#0)
It has 5 statements
Adding a new block of length 117
New length: 2
Processing a block of length 10
Its span is src/cat.rs:717:11: 1076:2 (#0)
It has 7 statements
Adding a new block of length 8
Here is a piece of a function:
let mut input_pending: bool = 0 as libc::c_int != 0;
                let mut n_to_read: libc::c_int = 0 as libc::c_int;
                if use_fionread as libc::c_int != 0
                    && ioctl(
                        input_desc,
                        0x541b as libc::c_int as libc::c_ulong,
                        &mut n_to_read as *mut libc::c_int,
                    ) < 0 as libc::c_int
                {
                    if *__errno_location() == 95 as libc::c_int
                        || *__errno_location() == 25 as libc::c_int
                        || *__errno_location() == 22 as libc::c_int
                        || *__errno_location() == 19 as libc::c_int
                        || *__errno_location() == 38 as libc::c_int
                    {
                        use_fionread = 0 as libc::c_int != 0;
                    } else {
                        if 0 != 0 {
                            error(
                                0 as libc::c_int,
                                *__errno_location(),
                                gettext(
                                    b"cannot do ioctl on %s\0" as *const u8
                                        as *const libc::c_char,
                                ),
                                quotearg_style(shell_escape_always_quoting_style, infile),
                            );
                            if 0 as libc::c_int != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                        } else {
                            ({
                                let __errstatus: libc::c_int = 0 as libc::c_int;
                                error(
                                    __errstatus,
                                    *__errno_location(),
                                    gettext(
                                        b"cannot do ioctl on %s\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_style(shell_escape_always_quoting_style, infile),
                                );
                                if __errstatus != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                                
                            });
                            ({
                                let __errstatus: libc::c_int = 0 as libc::c_int;
                                error(
                                    __errstatus,
                                    *__errno_location(),
                                    gettext(
                                        b"cannot do ioctl on %s\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_style(shell_escape_always_quoting_style, infile),
                                );
                                if __errstatus != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                                
                            });
                        };
                        newlines2 = newlines;
                        return 0 as libc::c_int != 0;
                    }
                }
                if n_to_read != 0 as libc::c_int {
                    input_pending = 1 as libc::c_int != 0;
                }
                if !input_pending {
                    write_pending(outbuf, &mut bpout);
                }
                let mut n_read: size_t = safe_read(
                    input_desc,
                    inbuf as *mut libc::c_void,
                    insize as size_t,
                );
                if n_read == -(1 as libc::c_int) as size_t {
                    if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    write_pending(outbuf, &mut bpout);
                    newlines2 = newlines;
                    return 0 as libc::c_int != 0;
                }
                if n_read == 0 as libc::c_int as libc::c_ulong {
                    write_pending(outbuf, &mut bpout);
                    newlines2 = newlines;
                    return 1 as libc::c_int != 0;
                }
                bpin = inbuf;
                eob = bpin.offset(n_read as isize);
                *eob = '\n' as i32 as libc::c_char;
                current_block_52 = 6476622998065200121;
Here is a piece of a function:
newlines += 1;
                if newlines > 0 as libc::c_int {
                    if newlines >= 2 as libc::c_int {
                        newlines = 2 as libc::c_int;
                        if squeeze_blank {
                            let fresh2 = bpin;
                            bpin = bpin.offset(1);
                            ch = *fresh2 as libc::c_uchar;
                            current_block_52 = 16658872821858055392;
                        } else {
                            current_block_52 = 15597372965620363352;
                        }
                    } else {
                        current_block_52 = 15597372965620363352;
                    }
                    match current_block_52 {
                        16658872821858055392 => {}
                        _ => {
                            if number as libc::c_int != 0 && !number_nonblank {
                                next_line_num();
                                bpout = stpcpy(bpout, line_num_print);
                            }
                            current_block_52 = 17784502470059252271;
                        }
                    }
                } else {
                    current_block_52 = 17784502470059252271;
                }
                match current_block_52 {
                    16658872821858055392 => {}
                    _ => {
                        if show_ends {
                            if pending_cr {
                                let fresh3 = bpout;
                                bpout = bpout.offset(1);
                                *fresh3 = '^' as i32 as libc::c_char;
                                let fresh4 = bpout;
                                bpout = bpout.offset(1);
                                *fresh4 = 'M' as i32 as libc::c_char;
                                pending_cr = 0 as libc::c_int != 0;
                            }
                            let fresh5 = bpout;
                            bpout = bpout.offset(1);
                            *fresh5 = '$' as i32 as libc::c_char;
                        }
                        let fresh6 = bpout;
                        bpout = bpout.offset(1);
                        *fresh6 = '\n' as i32 as libc::c_char;
                        current_block_52 = 6476622998065200121;
                    }
                }
Here is a piece of a function:
if outbuf.offset(outsize as isize) <= bpout {
                let mut wp: *mut libc::c_char = outbuf;
                let mut remaining_bytes: idx_t = 0;
                loop {
                    if full_write(
                        1 as libc::c_int,
                        wp as *const libc::c_void,
                        outsize as size_t,
                    ) != outsize as libc::c_ulong
                    {
                        write_error();
                    }
                    wp = wp.offset(outsize as isize);
                    remaining_bytes = bpout.offset_from(wp) as libc::c_long;
                    if !(outsize <= remaining_bytes) {
                        break;
                    }
                }
                memmove(
                    outbuf as *mut libc::c_void,
                    wp as *const libc::c_void,
                    remaining_bytes as libc::c_ulong,
                );
                bpout = outbuf.offset(remaining_bytes as isize);
            }
            if bpin > eob {
                <chunk 0>let mut input_pending: bool = 0 as libc::c_int != 0;
                let mut n_to_read: libc::c_int = 0 as libc::c_int;
                if use_fionread as libc::c_int != 0
                    && ioctl(
                        input_desc,
                        0x541b as libc::c_int as libc::c_ulong,
                        &mut n_to_read as *mut libc::c_int,
                    ) < 0 as libc::c_int
                {
                    if *__errno_location() == 95 as libc::c_int
                        || *__errno_location() == 25 as libc::c_int
                        || *__errno_location() == 22 as libc::c_int
                        || *__errno_location() == 19 as libc::c_int
                        || *__errno_location() == 38 as libc::c_int
                    {
                        use_fionread = 0 as libc::c_int != 0;
                    } else {
                        if 0 != 0 {
                            error(
                                0 as libc::c_int,
                                *__errno_location(),
                                gettext(
                                    b"cannot do ioctl on %s\0" as *const u8
                                        as *const libc::c_char,
                                ),
                                quotearg_style(shell_escape_always_quoting_style, infile),
                            );
                            if 0 as libc::c_int != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                        } else {
                            ({
                                let __errstatus: libc::c_int = 0 as libc::c_int;
                                error(
                                    __errstatus,
                                    *__errno_location(),
                                    gettext(
                                        b"cannot do ioctl on %s\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_style(shell_escape_always_quoting_style, infile),
                                );
                                if __errstatus != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                                
                            });
                            ({
                                let __errstatus: libc::c_int = 0 as libc::c_int;
                                error(
                                    __errstatus,
                                    *__errno_location(),
                                    gettext(
                                        b"cannot do ioctl on %s\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_style(shell_escape_always_quoting_style, infile),
                                );
                                if __errstatus != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                                
                            });
                        };
                        newlines2 = newlines;
                        return 0 as libc::c_int != 0;
                    }
                }
                if n_to_read != 0 as libc::c_int {
                    input_pending = 1 as libc::c_int != 0;
                }
                if !input_pending {
                    write_pending(outbuf, &mut bpout);
                }
                let mut n_read: size_t = safe_read(
                    input_desc,
                    inbuf as *mut libc::c_void,
                    insize as size_t,
                );
                if n_read == -(1 as libc::c_int) as size_t {
                    if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    write_pending(outbuf, &mut bpout);
                    newlines2 = newlines;
                    return 0 as libc::c_int != 0;
                }
                if n_read == 0 as libc::c_int as libc::c_ulong {
                    write_pending(outbuf, &mut bpout);
                    newlines2 = newlines;
                    return 1 as libc::c_int != 0;
                }
                bpin = inbuf;
                eob = bpin.offset(n_read as isize);
                *eob = '\n' as i32 as libc::c_char;
                current_block_52 = 6476622998065200121;
            } else {
                <chunk 1>
            }
            match current_block_52 {
                6476622998065200121 => {
                    let fresh7 = bpin;
                    bpin = bpin.offset(1);
                    ch = *fresh7 as libc::c_uchar;
                }
                _ => {}
            }
            if !(ch as libc::c_int == '\n' as i32) {
                break;
            }
Here is a piece of a function:
let mut current_block_52: u64;
        loop {
            <chunk 2>if outbuf.offset(outsize as isize) <= bpout {
                let mut wp: *mut libc::c_char = outbuf;
                let mut remaining_bytes: idx_t = 0;
                loop {
                    if full_write(
                        1 as libc::c_int,
                        wp as *const libc::c_void,
                        outsize as size_t,
                    ) != outsize as libc::c_ulong
                    {
                        write_error();
                    }
                    wp = wp.offset(outsize as isize);
                    remaining_bytes = bpout.offset_from(wp) as libc::c_long;
                    if !(outsize <= remaining_bytes) {
                        break;
                    }
                }
                memmove(
                    outbuf as *mut libc::c_void,
                    wp as *const libc::c_void,
                    remaining_bytes as libc::c_ulong,
                );
                bpout = outbuf.offset(remaining_bytes as isize);
            }
            if bpin > eob {
                let mut input_pending: bool = 0 as libc::c_int != 0;
                let mut n_to_read: libc::c_int = 0 as libc::c_int;
                if use_fionread as libc::c_int != 0
                    && ioctl(
                        input_desc,
                        0x541b as libc::c_int as libc::c_ulong,
                        &mut n_to_read as *mut libc::c_int,
                    ) < 0 as libc::c_int
                {
                    if *__errno_location() == 95 as libc::c_int
                        || *__errno_location() == 25 as libc::c_int
                        || *__errno_location() == 22 as libc::c_int
                        || *__errno_location() == 19 as libc::c_int
                        || *__errno_location() == 38 as libc::c_int
                    {
                        use_fionread = 0 as libc::c_int != 0;
                    } else {
                        if 0 != 0 {
                            error(
                                0 as libc::c_int,
                                *__errno_location(),
                                gettext(
                                    b"cannot do ioctl on %s\0" as *const u8
                                        as *const libc::c_char,
                                ),
                                quotearg_style(shell_escape_always_quoting_style, infile),
                            );
                            if 0 as libc::c_int != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                        } else {
                            ({
                                let __errstatus: libc::c_int = 0 as libc::c_int;
                                error(
                                    __errstatus,
                                    *__errno_location(),
                                    gettext(
                                        b"cannot do ioctl on %s\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_style(shell_escape_always_quoting_style, infile),
                                );
                                if __errstatus != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                                
                            });
                            ({
                                let __errstatus: libc::c_int = 0 as libc::c_int;
                                error(
                                    __errstatus,
                                    *__errno_location(),
                                    gettext(
                                        b"cannot do ioctl on %s\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_style(shell_escape_always_quoting_style, infile),
                                );
                                if __errstatus != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                                
                            });
                        };
                        newlines2 = newlines;
                        return 0 as libc::c_int != 0;
                    }
                }
                if n_to_read != 0 as libc::c_int {
                    input_pending = 1 as libc::c_int != 0;
                }
                if !input_pending {
                    write_pending(outbuf, &mut bpout);
                }
                let mut n_read: size_t = safe_read(
                    input_desc,
                    inbuf as *mut libc::c_void,
                    insize as size_t,
                );
                if n_read == -(1 as libc::c_int) as size_t {
                    if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    write_pending(outbuf, &mut bpout);
                    newlines2 = newlines;
                    return 0 as libc::c_int != 0;
                }
                if n_read == 0 as libc::c_int as libc::c_ulong {
                    write_pending(outbuf, &mut bpout);
                    newlines2 = newlines;
                    return 1 as libc::c_int != 0;
                }
                bpin = inbuf;
                eob = bpin.offset(n_read as isize);
                *eob = '\n' as i32 as libc::c_char;
                current_block_52 = 6476622998065200121;
            } else {
                newlines += 1;
                if newlines > 0 as libc::c_int {
                    if newlines >= 2 as libc::c_int {
                        newlines = 2 as libc::c_int;
                        if squeeze_blank {
                            let fresh2 = bpin;
                            bpin = bpin.offset(1);
                            ch = *fresh2 as libc::c_uchar;
                            current_block_52 = 16658872821858055392;
                        } else {
                            current_block_52 = 15597372965620363352;
                        }
                    } else {
                        current_block_52 = 15597372965620363352;
                    }
                    match current_block_52 {
                        16658872821858055392 => {}
                        _ => {
                            if number as libc::c_int != 0 && !number_nonblank {
                                next_line_num();
                                bpout = stpcpy(bpout, line_num_print);
                            }
                            current_block_52 = 17784502470059252271;
                        }
                    }
                } else {
                    current_block_52 = 17784502470059252271;
                }
                match current_block_52 {
                    16658872821858055392 => {}
                    _ => {
                        if show_ends {
                            if pending_cr {
                                let fresh3 = bpout;
                                bpout = bpout.offset(1);
                                *fresh3 = '^' as i32 as libc::c_char;
                                let fresh4 = bpout;
                                bpout = bpout.offset(1);
                                *fresh4 = 'M' as i32 as libc::c_char;
                                pending_cr = 0 as libc::c_int != 0;
                            }
                            let fresh5 = bpout;
                            bpout = bpout.offset(1);
                            *fresh5 = '$' as i32 as libc::c_char;
                        }
                        let fresh6 = bpout;
                        bpout = bpout.offset(1);
                        *fresh6 = '\n' as i32 as libc::c_char;
                        current_block_52 = 6476622998065200121;
                    }
                }
            }
            match current_block_52 {
                6476622998065200121 => {
                    let fresh7 = bpin;
                    bpin = bpin.offset(1);
                    ch = *fresh7 as libc::c_uchar;
                }
                _ => {}
            }
            if !(ch as libc::c_int == '\n' as i32) {
                break;
            }
        }
        if pending_cr {
            let fresh8 = bpout;
            bpout = bpout.offset(1);
            *fresh8 = '\r' as i32 as libc::c_char;
            pending_cr = 0 as libc::c_int != 0;
        }
        if newlines >= 0 as libc::c_int && number as libc::c_int != 0 {
            next_line_num();
            bpout = stpcpy(bpout, line_num_print);
        }
        if show_nonprinting {
            loop {
                if ch as libc::c_int >= 32 as libc::c_int {
                    if (ch as libc::c_int) < 127 as libc::c_int {
                        let fresh9 = bpout;
                        bpout = bpout.offset(1);
                        *fresh9 = ch as libc::c_char;
                    } else if ch as libc::c_int == 127 as libc::c_int {
                        let fresh10 = bpout;
                        bpout = bpout.offset(1);
                        *fresh10 = '^' as i32 as libc::c_char;
                        let fresh11 = bpout;
                        bpout = bpout.offset(1);
                        *fresh11 = '?' as i32 as libc::c_char;
                    } else {
                        let fresh12 = bpout;
                        bpout = bpout.offset(1);
                        *fresh12 = 'M' as i32 as libc::c_char;
                        let fresh13 = bpout;
                        bpout = bpout.offset(1);
                        *fresh13 = '-' as i32 as libc::c_char;
                        if ch as libc::c_int >= 128 as libc::c_int + 32 as libc::c_int {
                            if (ch as libc::c_int)
                                < 128 as libc::c_int + 127 as libc::c_int
                            {
                                let fresh14 = bpout;
                                bpout = bpout.offset(1);
                                *fresh14 = (ch as libc::c_int - 128 as libc::c_int)
                                    as libc::c_char;
                            } else {
                                let fresh15 = bpout;
                                bpout = bpout.offset(1);
                                *fresh15 = '^' as i32 as libc::c_char;
                                let fresh16 = bpout;
                                bpout = bpout.offset(1);
                                *fresh16 = '?' as i32 as libc::c_char;
                            }
                        } else {
                            let fresh17 = bpout;
                            bpout = bpout.offset(1);
                            *fresh17 = '^' as i32 as libc::c_char;
                            let fresh18 = bpout;
                            bpout = bpout.offset(1);
                            *fresh18 = (ch as libc::c_int - 128 as libc::c_int
                                + 64 as libc::c_int) as libc::c_char;
                        }
                    }
                } else if ch as libc::c_int == '\t' as i32 && !show_tabs {
                    let fresh19 = bpout;
                    bpout = bpout.offset(1);
                    *fresh19 = '\t' as i32 as libc::c_char;
                } else if ch as libc::c_int == '\n' as i32 {
                    newlines = -(1 as libc::c_int);
                    break;
                } else {
                    let fresh20 = bpout;
                    bpout = bpout.offset(1);
                    *fresh20 = '^' as i32 as libc::c_char;
                    let fresh21 = bpout;
                    bpout = bpout.offset(1);
                    *fresh21 = (ch as libc::c_int + 64 as libc::c_int) as libc::c_char;
                }
                let fresh22 = bpin;
                bpin = bpin.offset(1);
                ch = *fresh22 as libc::c_uchar;
            }
        } else {
            loop {
                if ch as libc::c_int == '\t' as i32 && show_tabs as libc::c_int != 0 {
                    let fresh23 = bpout;
                    bpout = bpout.offset(1);
                    *fresh23 = '^' as i32 as libc::c_char;
                    let fresh24 = bpout;
                    bpout = bpout.offset(1);
                    *fresh24 = (ch as libc::c_int + 64 as libc::c_int) as libc::c_char;
                } else if ch as libc::c_int != '\n' as i32 {
                    if ch as libc::c_int == '\r' as i32
                        && *bpin as libc::c_int == '\n' as i32
                        && show_ends as libc::c_int != 0
                    {
                        if bpin == eob {
                            pending_cr = 1 as libc::c_int != 0;
                        } else {
                            let fresh25 = bpout;
                            bpout = bpout.offset(1);
                            *fresh25 = '^' as i32 as libc::c_char;
                            let fresh26 = bpout;
                            bpout = bpout.offset(1);
                            *fresh26 = 'M' as i32 as libc::c_char;
                        }
                    } else {
                        let fresh27 = bpout;
                        bpout = bpout.offset(1);
                        *fresh27 = ch as libc::c_char;
                    }
                } else {
                    newlines = -(1 as libc::c_int);
                    break;
                }
                let fresh28 = bpin;
                bpin = bpin.offset(1);
                ch = *fresh28 as libc::c_uchar;
            }
        }
Here is a piece of a function:
let mut ch: libc::c_uchar = 0;
    let mut newlines: libc::c_int = newlines2;
    let mut use_fionread: bool = 1 as libc::c_int != 0;
    let mut eob: *mut libc::c_char = inbuf;
    let mut bpin: *mut libc::c_char = eob.offset(1 as libc::c_int as isize);
    let mut bpout: *mut libc::c_char = outbuf;
    loop {
        <chunk 3>let mut current_block_52: u64;
        loop {
            if outbuf.offset(outsize as isize) <= bpout {
                let mut wp: *mut libc::c_char = outbuf;
                let mut remaining_bytes: idx_t = 0;
                loop {
                    if full_write(
                        1 as libc::c_int,
                        wp as *const libc::c_void,
                        outsize as size_t,
                    ) != outsize as libc::c_ulong
                    {
                        write_error();
                    }
                    wp = wp.offset(outsize as isize);
                    remaining_bytes = bpout.offset_from(wp) as libc::c_long;
                    if !(outsize <= remaining_bytes) {
                        break;
                    }
                }
                memmove(
                    outbuf as *mut libc::c_void,
                    wp as *const libc::c_void,
                    remaining_bytes as libc::c_ulong,
                );
                bpout = outbuf.offset(remaining_bytes as isize);
            }
            if bpin > eob {
                let mut input_pending: bool = 0 as libc::c_int != 0;
                let mut n_to_read: libc::c_int = 0 as libc::c_int;
                if use_fionread as libc::c_int != 0
                    && ioctl(
                        input_desc,
                        0x541b as libc::c_int as libc::c_ulong,
                        &mut n_to_read as *mut libc::c_int,
                    ) < 0 as libc::c_int
                {
                    if *__errno_location() == 95 as libc::c_int
                        || *__errno_location() == 25 as libc::c_int
                        || *__errno_location() == 22 as libc::c_int
                        || *__errno_location() == 19 as libc::c_int
                        || *__errno_location() == 38 as libc::c_int
                    {
                        use_fionread = 0 as libc::c_int != 0;
                    } else {
                        if 0 != 0 {
                            error(
                                0 as libc::c_int,
                                *__errno_location(),
                                gettext(
                                    b"cannot do ioctl on %s\0" as *const u8
                                        as *const libc::c_char,
                                ),
                                quotearg_style(shell_escape_always_quoting_style, infile),
                            );
                            if 0 as libc::c_int != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                        } else {
                            ({
                                let __errstatus: libc::c_int = 0 as libc::c_int;
                                error(
                                    __errstatus,
                                    *__errno_location(),
                                    gettext(
                                        b"cannot do ioctl on %s\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_style(shell_escape_always_quoting_style, infile),
                                );
                                if __errstatus != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                                
                            });
                            ({
                                let __errstatus: libc::c_int = 0 as libc::c_int;
                                error(
                                    __errstatus,
                                    *__errno_location(),
                                    gettext(
                                        b"cannot do ioctl on %s\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_style(shell_escape_always_quoting_style, infile),
                                );
                                if __errstatus != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                                
                            });
                        };
                        newlines2 = newlines;
                        return 0 as libc::c_int != 0;
                    }
                }
                if n_to_read != 0 as libc::c_int {
                    input_pending = 1 as libc::c_int != 0;
                }
                if !input_pending {
                    write_pending(outbuf, &mut bpout);
                }
                let mut n_read: size_t = safe_read(
                    input_desc,
                    inbuf as *mut libc::c_void,
                    insize as size_t,
                );
                if n_read == -(1 as libc::c_int) as size_t {
                    if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    write_pending(outbuf, &mut bpout);
                    newlines2 = newlines;
                    return 0 as libc::c_int != 0;
                }
                if n_read == 0 as libc::c_int as libc::c_ulong {
                    write_pending(outbuf, &mut bpout);
                    newlines2 = newlines;
                    return 1 as libc::c_int != 0;
                }
                bpin = inbuf;
                eob = bpin.offset(n_read as isize);
                *eob = '\n' as i32 as libc::c_char;
                current_block_52 = 6476622998065200121;
            } else {
                newlines += 1;
                if newlines > 0 as libc::c_int {
                    if newlines >= 2 as libc::c_int {
                        newlines = 2 as libc::c_int;
                        if squeeze_blank {
                            let fresh2 = bpin;
                            bpin = bpin.offset(1);
                            ch = *fresh2 as libc::c_uchar;
                            current_block_52 = 16658872821858055392;
                        } else {
                            current_block_52 = 15597372965620363352;
                        }
                    } else {
                        current_block_52 = 15597372965620363352;
                    }
                    match current_block_52 {
                        16658872821858055392 => {}
                        _ => {
                            if number as libc::c_int != 0 && !number_nonblank {
                                next_line_num();
                                bpout = stpcpy(bpout, line_num_print);
                            }
                            current_block_52 = 17784502470059252271;
                        }
                    }
                } else {
                    current_block_52 = 17784502470059252271;
                }
                match current_block_52 {
                    16658872821858055392 => {}
                    _ => {
                        if show_ends {
                            if pending_cr {
                                let fresh3 = bpout;
                                bpout = bpout.offset(1);
                                *fresh3 = '^' as i32 as libc::c_char;
                                let fresh4 = bpout;
                                bpout = bpout.offset(1);
                                *fresh4 = 'M' as i32 as libc::c_char;
                                pending_cr = 0 as libc::c_int != 0;
                            }
                            let fresh5 = bpout;
                            bpout = bpout.offset(1);
                            *fresh5 = '$' as i32 as libc::c_char;
                        }
                        let fresh6 = bpout;
                        bpout = bpout.offset(1);
                        *fresh6 = '\n' as i32 as libc::c_char;
                        current_block_52 = 6476622998065200121;
                    }
                }
            }
            match current_block_52 {
                6476622998065200121 => {
                    let fresh7 = bpin;
                    bpin = bpin.offset(1);
                    ch = *fresh7 as libc::c_uchar;
                }
                _ => {}
            }
            if !(ch as libc::c_int == '\n' as i32) {
                break;
            }
        }
        if pending_cr {
            let fresh8 = bpout;
            bpout = bpout.offset(1);
            *fresh8 = '\r' as i32 as libc::c_char;
            pending_cr = 0 as libc::c_int != 0;
        }
        if newlines >= 0 as libc::c_int && number as libc::c_int != 0 {
            next_line_num();
            bpout = stpcpy(bpout, line_num_print);
        }
        if show_nonprinting {
            loop {
                if ch as libc::c_int >= 32 as libc::c_int {
                    if (ch as libc::c_int) < 127 as libc::c_int {
                        let fresh9 = bpout;
                        bpout = bpout.offset(1);
                        *fresh9 = ch as libc::c_char;
                    } else if ch as libc::c_int == 127 as libc::c_int {
                        let fresh10 = bpout;
                        bpout = bpout.offset(1);
                        *fresh10 = '^' as i32 as libc::c_char;
                        let fresh11 = bpout;
                        bpout = bpout.offset(1);
                        *fresh11 = '?' as i32 as libc::c_char;
                    } else {
                        let fresh12 = bpout;
                        bpout = bpout.offset(1);
                        *fresh12 = 'M' as i32 as libc::c_char;
                        let fresh13 = bpout;
                        bpout = bpout.offset(1);
                        *fresh13 = '-' as i32 as libc::c_char;
                        if ch as libc::c_int >= 128 as libc::c_int + 32 as libc::c_int {
                            if (ch as libc::c_int)
                                < 128 as libc::c_int + 127 as libc::c_int
                            {
                                let fresh14 = bpout;
                                bpout = bpout.offset(1);
                                *fresh14 = (ch as libc::c_int - 128 as libc::c_int)
                                    as libc::c_char;
                            } else {
                                let fresh15 = bpout;
                                bpout = bpout.offset(1);
                                *fresh15 = '^' as i32 as libc::c_char;
                                let fresh16 = bpout;
                                bpout = bpout.offset(1);
                                *fresh16 = '?' as i32 as libc::c_char;
                            }
                        } else {
                            let fresh17 = bpout;
                            bpout = bpout.offset(1);
                            *fresh17 = '^' as i32 as libc::c_char;
                            let fresh18 = bpout;
                            bpout = bpout.offset(1);
                            *fresh18 = (ch as libc::c_int - 128 as libc::c_int
                                + 64 as libc::c_int) as libc::c_char;
                        }
                    }
                } else if ch as libc::c_int == '\t' as i32 && !show_tabs {
                    let fresh19 = bpout;
                    bpout = bpout.offset(1);
                    *fresh19 = '\t' as i32 as libc::c_char;
                } else if ch as libc::c_int == '\n' as i32 {
                    newlines = -(1 as libc::c_int);
                    break;
                } else {
                    let fresh20 = bpout;
                    bpout = bpout.offset(1);
                    *fresh20 = '^' as i32 as libc::c_char;
                    let fresh21 = bpout;
                    bpout = bpout.offset(1);
                    *fresh21 = (ch as libc::c_int + 64 as libc::c_int) as libc::c_char;
                }
                let fresh22 = bpin;
                bpin = bpin.offset(1);
                ch = *fresh22 as libc::c_uchar;
            }
        } else {
            loop {
                if ch as libc::c_int == '\t' as i32 && show_tabs as libc::c_int != 0 {
                    let fresh23 = bpout;
                    bpout = bpout.offset(1);
                    *fresh23 = '^' as i32 as libc::c_char;
                    let fresh24 = bpout;
                    bpout = bpout.offset(1);
                    *fresh24 = (ch as libc::c_int + 64 as libc::c_int) as libc::c_char;
                } else if ch as libc::c_int != '\n' as i32 {
                    if ch as libc::c_int == '\r' as i32
                        && *bpin as libc::c_int == '\n' as i32
                        && show_ends as libc::c_int != 0
                    {
                        if bpin == eob {
                            pending_cr = 1 as libc::c_int != 0;
                        } else {
                            let fresh25 = bpout;
                            bpout = bpout.offset(1);
                            *fresh25 = '^' as i32 as libc::c_char;
                            let fresh26 = bpout;
                            bpout = bpout.offset(1);
                            *fresh26 = 'M' as i32 as libc::c_char;
                        }
                    } else {
                        let fresh27 = bpout;
                        bpout = bpout.offset(1);
                        *fresh27 = ch as libc::c_char;
                    }
                } else {
                    newlines = -(1 as libc::c_int);
                    break;
                }
                let fresh28 = bpin;
                bpin = bpin.offset(1);
                ch = *fresh28 as libc::c_uchar;
            }
        }
    };
-----------DefId(0:127 ~ cat[4a5d]::main_0)---------------
About to walk this statement: src/cat.rs:1422:5: 2115:6 (#0) with length 694
About to walk this statement: src/cat.rs:1496:9: 2110:10 (#0) with length 615
About to walk this statement: src/cat.rs:1498:17: 2054:18 (#0) with length 557
Processing a block of length 53
Its span is src/cat.rs:1498:72: 1550:18 (#0)
It has 2 statements
Adding a new block of length 51
About to walk this statement: src/cat.rs:1647:21: 2053:22 (#0) with length 407
Processing a block of length 1
Its span is src/cat.rs:1648:48: 1648:50 (#0)
It has 0 statements
About to walk this statement: src/cat.rs:1651:29: 2050:30 (#0) with length 400
Processing a block of length 22
Its span is src/cat.rs:1656:29: 1677:30 (#0)
It has 2 statements
Adding a new block of length 20
About to walk this statement: src/cat.rs:1683:33: 2031:34 (#0) with length 349
Processing a block of length 3
Its span is src/cat.rs:1685:67: 1687:38 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/cat.rs:1687:44: 1689:38 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/cat.rs:1691:67: 1693:38 (#0)
It has 1 statements
Adding a new block of length 1
Processing a block of length 3
Its span is src/cat.rs:1693:44: 1695:38 (#0)
It has 1 statements
Adding a new block of length 1
About to walk this statement: src/cat.rs:1697:41: 1887:42 (#0) with length 191
Processing a block of length 81
Its span is src/cat.rs:1697:86: 1777:42 (#0)
It has 1 statements
Adding a new block of length 79
Processing a block of length 111
Its span is src/cat.rs:1777:48: 1887:42 (#0)
It has 1 statements
Adding a new block of length 109
New length: 3
Processing a block of length 5
Its span is src/cat.rs:1696:82: 1888:38 (#0)
It has 1 statements
Adding a new block of length 3
Processing a block of length 119
Its span is src/cat.rs:1888:44: 2006:38 (#0)
It has 1 statements
Adding a new block of length 117
Processing a block of length 6
Its span is src/cat.rs:2007:33: 2012:34 (#0)
It has 3 statements
Adding a new block of length 4
Processing a block of length 6
Its span is src/cat.rs:2012:40: 2017:34 (#0)
It has 3 statements
Adding a new block of length 4
Processing a block of length 5
Its span is src/cat.rs:2018:40: 2022:38 (#0)
It has 3 statements
Adding a new block of length 3
Processing a block of length 6
Its span is src/cat.rs:2023:40: 2028:38 (#0)
It has 3 statements
Adding a new block of length 4
Processing a block of length 3
Its span is src/cat.rs:2029:33: 2031:34 (#0)
It has 1 statements
Adding a new block of length 1
New length: 21
Processing a block of length 46
Its span is src/cat.rs:1677:36: 2050:30 (#0)
It has 6 statements
Adding a new block of length 44
New length: 8
Processing a block of length 12
Its span is src/cat.rs:1649:30: 2052:26 (#0)
It has 3 statements
Adding a new block of length 10
New length: 5
Processing a block of length 103
Its span is src/cat.rs:1550:24: 2054:18 (#0)
It has 4 statements
Adding a new block of length 101
New length: 3
Processing a block of length 58
Its span is src/cat.rs:1497:37: 2108:14 (#0)
It has 2 statements
Adding a new block of length 56
Processing a block of length 1
Its span is src/cat.rs:2109:18: 2109:20 (#0)
It has 0 statements
New length: 5
Processing a block of length 84
Its span is src/cat.rs:1422:10: 2115:6 (#0)
It has 6 statements
Adding a new block of length 82
New length: 2
Processing a block of length 311
Its span is src/cat.rs:1167:18: 2169:2 (#0)
It has 35 statements
Adding a new piece of length 130
Adding a new piece of length 136
Adding a new block of length 43
Here is a piece of a function:
if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    ok = 0 as libc::c_int != 0;
Here is a piece of a function:
let mut copy_cat_status: libc::c_int = if out_isreg
                                    as libc::c_int != 0
                                    && stat_buf.st_mode
                                        & 0o170000 as libc::c_int as libc::c_uint
                                        == 0o100000 as libc::c_int as libc::c_uint
                                {
                                    copy_cat()
                                } else {
                                    0 as libc::c_int
                                };
                                if copy_cat_status != 0 as libc::c_int {
                                    inbuf = 0 as *mut libc::c_char;
                                    ok = (ok as libc::c_int
                                        & ((0 as libc::c_int) < copy_cat_status) as libc::c_int) != 0;
                                } else {
                                    insize = if insize > outsize { insize } else { outsize };
                                    inbuf = xalignalloc(page_size, insize) as *mut libc::c_char;
                                    ok = (ok as libc::c_int
                                        & simple_cat(inbuf, insize) as libc::c_int) != 0;
                                }
Here is a piece of a function:
0 as libc::c_int as libc::c_long
Here is a piece of a function:
insize
Here is a piece of a function:
0 as libc::c_int
Here is a piece of a function:
4 as libc::c_int
Here is a piece of a function:
if ((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    -(1 as libc::c_int) as idx_t
                                                }) + 4 as libc::c_int as libc::c_long
                                            }) - 1 as libc::c_int as libc::c_long)
                                                < 0 as libc::c_int as libc::c_long
                                            {
                                                (insize
                                                    < -(1 as libc::c_int) as idx_t
                                                        / 4 as libc::c_int as libc::c_long) as libc::c_int
                                            } else {
                                                ((if (if (if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) - 1 as libc::c_int) < 0 as libc::c_int
                                                {
                                                    !(((((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) + 1 as libc::c_int)
                                                        << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                        - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) + 0 as libc::c_int
                                                }) < 0 as libc::c_int
                                                {
                                                    ((4 as libc::c_int)
                                                        < -(if ((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int
                                                        } else {
                                                            4 as libc::c_int
                                                        }) - 1 as libc::c_int) < 0 as libc::c_int
                                                        {
                                                            ((((if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) + 1 as libc::c_int)
                                                                << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                                - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) - 1 as libc::c_int
                                                        })) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int) < 4 as libc::c_int) as libc::c_int
                                                }) != 0
                                                {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + -(1 as libc::c_int) as idx_t
                                                        >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                                                } else {
                                                    -(1 as libc::c_int) as idx_t
                                                        / -(4 as libc::c_int) as libc::c_long
                                                }) <= -(1 as libc::c_int) as libc::c_long - insize)
                                                    as libc::c_int
                                            }
Here is a piece of a function:
if (if (if ((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) as libc::c_long + 0 as libc::c_int as idx_t
                                            }) - 1 as libc::c_int as libc::c_long)
                                                < 0 as libc::c_int as libc::c_long
                                            {
                                                !(((((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t
                                                }) + 1 as libc::c_int as libc::c_long)
                                                    << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                    - 1 as libc::c_int as libc::c_long)
                                                    * 2 as libc::c_int as libc::c_long
                                                    + 1 as libc::c_int as libc::c_long)
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t
                                                }) + 0 as libc::c_int as libc::c_long
                                            }) < 0 as libc::c_int as libc::c_long
                                            {
                                                (((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) as libc::c_long + 0 as libc::c_int as idx_t)
                                                    < -(if ((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int
                                                        } else {
                                                            4 as libc::c_int
                                                        }) as libc::c_long + 0 as libc::c_int as idx_t
                                                    }) - 1 as libc::c_int as libc::c_long)
                                                        < 0 as libc::c_int as libc::c_long
                                                    {
                                                        ((((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) as libc::c_long + 0 as libc::c_int as idx_t
                                                        }) + 1 as libc::c_int as libc::c_long)
                                                            << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                            - 1 as libc::c_int as libc::c_long)
                                                            * 2 as libc::c_int as libc::c_long
                                                            + 1 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) as libc::c_long + 0 as libc::c_int as idx_t
                                                        }) - 1 as libc::c_int as libc::c_long
                                                    })) as libc::c_int
                                            } else {
                                                ((0 as libc::c_int as libc::c_long)
                                                    < (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t)
                                                    as libc::c_int
                                            }) != 0 && 4 as libc::c_int == -(1 as libc::c_int)
                                            {
                                                if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    insize
                                                }) - 1 as libc::c_int as libc::c_long)
                                                    < 0 as libc::c_int as libc::c_long
                                                {
                                                    ((0 as libc::c_int as libc::c_long)
                                                        < insize + 0 as libc::c_int as idx_t) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int as libc::c_long) < insize
                                                        && (-(1 as libc::c_int) as libc::c_long
                                                            - 0 as libc::c_int as idx_t)
                                                            < insize - 1 as libc::c_int as libc::c_long) as libc::c_int
                                                }
                                            } else {
                                                ((0 as libc::c_int as idx_t
                                                    / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
                                            }
Here is a piece of a function:
if insize < 0 as libc::c_int as libc::c_long {
                                            <chunk 6>if ((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    -(1 as libc::c_int) as idx_t
                                                }) + 4 as libc::c_int as libc::c_long
                                            }) - 1 as libc::c_int as libc::c_long)
                                                < 0 as libc::c_int as libc::c_long
                                            {
                                                (insize
                                                    < -(1 as libc::c_int) as idx_t
                                                        / 4 as libc::c_int as libc::c_long) as libc::c_int
                                            } else {
                                                ((if (if (if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) - 1 as libc::c_int) < 0 as libc::c_int
                                                {
                                                    !(((((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) + 1 as libc::c_int)
                                                        << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                        - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) + 0 as libc::c_int
                                                }) < 0 as libc::c_int
                                                {
                                                    ((4 as libc::c_int)
                                                        < -(if ((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int
                                                        } else {
                                                            4 as libc::c_int
                                                        }) - 1 as libc::c_int) < 0 as libc::c_int
                                                        {
                                                            ((((if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) + 1 as libc::c_int)
                                                                << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                                - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) - 1 as libc::c_int
                                                        })) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int) < 4 as libc::c_int) as libc::c_int
                                                }) != 0
                                                {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + -(1 as libc::c_int) as idx_t
                                                        >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                                                } else {
                                                    -(1 as libc::c_int) as idx_t
                                                        / -(4 as libc::c_int) as libc::c_long
                                                }) <= -(1 as libc::c_int) as libc::c_long - insize)
                                                    as libc::c_int
                                            }
                                        } else {
                                            <chunk 7>
                                        }
Here is a piece of a function:
if 4 as libc::c_int == 0 as libc::c_int {
                                            0 as libc::c_int
                                        } else {
                                            if insize < 0 as libc::c_int as libc::c_long {
                                                if (if (if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        insize
                                                    }) + 0 as libc::c_int as idx_t
                                                }) - 1 as libc::c_int as libc::c_long)
                                                    < 0 as libc::c_int as libc::c_long
                                                {
                                                    !(((((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t
                                                    }) + 1 as libc::c_int as libc::c_long)
                                                        << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                        - 1 as libc::c_int as libc::c_long)
                                                        * 2 as libc::c_int as libc::c_long
                                                        + 1 as libc::c_int as libc::c_long)
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t
                                                    }) + 0 as libc::c_int as libc::c_long
                                                }) < 0 as libc::c_int as libc::c_long
                                                {
                                                    (((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        insize
                                                    }) + 0 as libc::c_int as idx_t)
                                                        < -(if ((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                insize
                                                            }) + 0 as libc::c_int as idx_t
                                                        }) - 1 as libc::c_int as libc::c_long)
                                                            < 0 as libc::c_int as libc::c_long
                                                        {
                                                            ((((if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                (if 1 as libc::c_int != 0 {
                                                                    0 as libc::c_int as libc::c_long
                                                                } else {
                                                                    insize
                                                                }) + 0 as libc::c_int as idx_t
                                                            }) + 1 as libc::c_int as libc::c_long)
                                                                << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                                - 1 as libc::c_int as libc::c_long)
                                                                * 2 as libc::c_int as libc::c_long
                                                                + 1 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                (if 1 as libc::c_int != 0 {
                                                                    0 as libc::c_int as libc::c_long
                                                                } else {
                                                                    insize
                                                                }) + 0 as libc::c_int as idx_t
                                                            }) - 1 as libc::c_int as libc::c_long
                                                        })) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int as libc::c_long)
                                                        < (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t) as libc::c_int
                                                }) != 0 && insize == -(1 as libc::c_int) as libc::c_long
                                                {
                                                    if ((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) - 1 as libc::c_int) < 0 as libc::c_int
                                                    {
                                                        ((0 as libc::c_int as libc::c_long)
                                                            < 4 as libc::c_int as libc::c_long
                                                                + 0 as libc::c_int as idx_t) as libc::c_int
                                                    } else {
                                                        ((-(1 as libc::c_int) as libc::c_long
                                                            - 0 as libc::c_int as idx_t)
                                                            < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
                                                            as libc::c_int
                                                    }
                                                } else {
                                                    (0 as libc::c_int as idx_t / insize
                                                        < 4 as libc::c_int as libc::c_long) as libc::c_int
                                                }
                                            } else {
                                                ((-(1 as libc::c_int) as idx_t
                                                    / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
                                            }
                                        }
Here is a piece of a function:
let (fresh33, _fresh34) = insize
                                        .overflowing_mul((4 as libc::c_int).into());
                                    *(&mut bufsize as *mut idx_t) = fresh33;
                                    1 as libc::c_int
Here is a piece of a function:
let (fresh35, fresh36) = insize
                                        .overflowing_mul((4 as libc::c_int).into());
                                    *(&mut bufsize as *mut idx_t) = fresh35;
                                    fresh36 as libc::c_int
Here is a piece of a function:
let (fresh37, fresh38) = bufsize.overflowing_add(outsize);
                                        *(&mut bufsize as *mut idx_t) = fresh37;
                                        fresh38 as libc::c_int != 0
Here is a piece of a function:
let (fresh39, fresh40) = bufsize
                                            .overflowing_add((20 as libc::c_int - 1 as libc::c_int).into());
                                        *(&mut bufsize as *mut idx_t) = fresh39;
                                        fresh40 as libc::c_int != 0
Here is a piece of a function:
xalloc_die();
Here is a piece of a function:
inbuf = xalignalloc(
                                    page_size,
                                    insize + 1 as libc::c_int as libc::c_long,
                                ) as *mut libc::c_char;
                                let mut bufsize: idx_t = 0;
                                if (if (0 as libc::c_int as idx_t)
                                    < -(1 as libc::c_int) as idx_t
                                    && ((if 1 as libc::c_int != 0 {
                                        <chunk 2>0 as libc::c_int as libc::c_long
                                    } else {
                                        <chunk 3>
                                    }) - 1 as libc::c_int as libc::c_long)
                                        < 0 as libc::c_int as libc::c_long
                                    && ((if 1 as libc::c_int != 0 {
                                        <chunk 4>
                                    } else {
                                        <chunk 5>
                                    }) - 1 as libc::c_int) < 0 as libc::c_int
                                    && (if (4 as libc::c_int) < 0 as libc::c_int {
                                        <chunk 8>
                                    } else {
                                        <chunk 9>
                                    }) != 0
                                {
                                    <chunk 10>
                                } else {
                                    <chunk 11>
                                }) != 0
                                    || {
                                        <chunk 12>
                                    }
                                    || {
                                        <chunk 13>
                                    }
                                {
                                    <chunk 14>
                                }
                                let mut outbuf: *mut libc::c_char = xalignalloc(
                                    page_size,
                                    bufsize,
                                ) as *mut libc::c_char;
                                ok = (ok as libc::c_int
                                    & cat(
                                        inbuf,
                                        insize,
                                        outbuf,
                                        outsize,
                                        show_nonprinting,
                                        show_tabs,
                                        number,
                                        number_nonblank,
                                        show_ends,
                                        squeeze_blank,
                                    ) as libc::c_int) != 0;
                                alignfree(outbuf as *mut libc::c_void);
Here is a piece of a function:
inbuf = 0 as *mut libc::c_char;
                            if !(number as libc::c_int != 0
                                || show_ends as libc::c_int != 0
                                || show_nonprinting as libc::c_int != 0
                                || show_tabs as libc::c_int != 0
                                || squeeze_blank as libc::c_int != 0)
                            {
                                <chunk 1>let mut copy_cat_status: libc::c_int = if out_isreg
                                    as libc::c_int != 0
                                    && stat_buf.st_mode
                                        & 0o170000 as libc::c_int as libc::c_uint
                                        == 0o100000 as libc::c_int as libc::c_uint
                                {
                                    copy_cat()
                                } else {
                                    0 as libc::c_int
                                };
                                if copy_cat_status != 0 as libc::c_int {
                                    inbuf = 0 as *mut libc::c_char;
                                    ok = (ok as libc::c_int
                                        & ((0 as libc::c_int) < copy_cat_status) as libc::c_int) != 0;
                                } else {
                                    insize = if insize > outsize { insize } else { outsize };
                                    inbuf = xalignalloc(page_size, insize) as *mut libc::c_char;
                                    ok = (ok as libc::c_int
                                        & simple_cat(inbuf, insize) as libc::c_int) != 0;
                                }
                            } else {
                                <chunk 15>
                            }
                            alignfree(inbuf as *mut libc::c_void);
Here is a piece of a function:
insize = io_blksize(&mut stat_buf);
                    fdadvise(
                        input_desc,
                        0 as libc::c_int as off_t,
                        0 as libc::c_int as off_t,
                        FADVISE_SEQUENTIAL,
                    );
                    if stat_buf.st_dev == out_dev && stat_buf.st_ino == out_ino {
                        if out_flags < -(1 as libc::c_int) {
                            out_flags = rpl_fcntl(1 as libc::c_int, 3 as libc::c_int);
                        }
                        let mut exhausting: bool = 0 as libc::c_int <= out_flags
                            && out_flags & 0o2000 as libc::c_int != 0;
                        if !exhausting {
                            let mut in_pos: off_t = lseek(
                                input_desc,
                                0 as libc::c_int as __off_t,
                                1 as libc::c_int,
                            );
                            if 0 as libc::c_int as libc::c_long <= in_pos {
                                exhausting = in_pos
                                    < lseek(
                                        1 as libc::c_int,
                                        0 as libc::c_int as __off_t,
                                        1 as libc::c_int,
                                    );
                            }
                        }
                        if exhausting {
                            if 0 != 0 {
                                error(
                                    0 as libc::c_int,
                                    0 as libc::c_int,
                                    gettext(
                                        b"%s: input file is output file\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_n_style_colon(
                                        0 as libc::c_int,
                                        shell_escape_quoting_style,
                                        infile,
                                    ),
                                );
                                if 0 as libc::c_int != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                            } else {
                                ({
                                    let __errstatus: libc::c_int = 0 as libc::c_int;
                                    error(
                                        __errstatus,
                                        0 as libc::c_int,
                                        gettext(
                                            b"%s: input file is output file\0" as *const u8
                                                as *const libc::c_char,
                                        ),
                                        quotearg_n_style_colon(
                                            0 as libc::c_int,
                                            shell_escape_quoting_style,
                                            infile,
                                        ),
                                    );
                                    if __errstatus != 0 as libc::c_int {
                                        unreachable!();
                                    } else {};
                                    
                                });
                                ({
                                    let __errstatus: libc::c_int = 0 as libc::c_int;
                                    error(
                                        __errstatus,
                                        0 as libc::c_int,
                                        gettext(
                                            b"%s: input file is output file\0" as *const u8
                                                as *const libc::c_char,
                                        ),
                                        quotearg_n_style_colon(
                                            0 as libc::c_int,
                                            shell_escape_quoting_style,
                                            infile,
                                        ),
                                    );
                                    if __errstatus != 0 as libc::c_int {
                                        unreachable!();
                                    } else {};
                                    
                                });
                            };
                            ok = 0 as libc::c_int != 0;
                            current_block = 7239751344758050955;
                        } else {
                            current_block = 5372832139739605200;
                        }
                    } else {
                        current_block = 5372832139739605200;
                    }
                    match current_block {
                        7239751344758050955 => {}
                        _ => {
                            <chunk 16>inbuf = 0 as *mut libc::c_char;
                            if !(number as libc::c_int != 0
                                || show_ends as libc::c_int != 0
                                || show_nonprinting as libc::c_int != 0
                                || show_tabs as libc::c_int != 0
                                || squeeze_blank as libc::c_int != 0)
                            {
                                let mut copy_cat_status: libc::c_int = if out_isreg
                                    as libc::c_int != 0
                                    && stat_buf.st_mode
                                        & 0o170000 as libc::c_int as libc::c_uint
                                        == 0o100000 as libc::c_int as libc::c_uint
                                {
                                    copy_cat()
                                } else {
                                    0 as libc::c_int
                                };
                                if copy_cat_status != 0 as libc::c_int {
                                    inbuf = 0 as *mut libc::c_char;
                                    ok = (ok as libc::c_int
                                        & ((0 as libc::c_int) < copy_cat_status) as libc::c_int) != 0;
                                } else {
                                    insize = if insize > outsize { insize } else { outsize };
                                    inbuf = xalignalloc(page_size, insize) as *mut libc::c_char;
                                    ok = (ok as libc::c_int
                                        & simple_cat(inbuf, insize) as libc::c_int) != 0;
                                }
                            } else {
                                inbuf = xalignalloc(
                                    page_size,
                                    insize + 1 as libc::c_int as libc::c_long,
                                ) as *mut libc::c_char;
                                let mut bufsize: idx_t = 0;
                                if (if (0 as libc::c_int as idx_t)
                                    < -(1 as libc::c_int) as idx_t
                                    && ((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        insize
                                    }) - 1 as libc::c_int as libc::c_long)
                                        < 0 as libc::c_int as libc::c_long
                                    && ((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int
                                    } else {
                                        4 as libc::c_int
                                    }) - 1 as libc::c_int) < 0 as libc::c_int
                                    && (if (4 as libc::c_int) < 0 as libc::c_int {
                                        if insize < 0 as libc::c_int as libc::c_long {
                                            if ((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    -(1 as libc::c_int) as idx_t
                                                }) + 4 as libc::c_int as libc::c_long
                                            }) - 1 as libc::c_int as libc::c_long)
                                                < 0 as libc::c_int as libc::c_long
                                            {
                                                (insize
                                                    < -(1 as libc::c_int) as idx_t
                                                        / 4 as libc::c_int as libc::c_long) as libc::c_int
                                            } else {
                                                ((if (if (if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) - 1 as libc::c_int) < 0 as libc::c_int
                                                {
                                                    !(((((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) + 1 as libc::c_int)
                                                        << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                        - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) + 0 as libc::c_int
                                                }) < 0 as libc::c_int
                                                {
                                                    ((4 as libc::c_int)
                                                        < -(if ((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int
                                                        } else {
                                                            4 as libc::c_int
                                                        }) - 1 as libc::c_int) < 0 as libc::c_int
                                                        {
                                                            ((((if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) + 1 as libc::c_int)
                                                                << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                                - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) - 1 as libc::c_int
                                                        })) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int) < 4 as libc::c_int) as libc::c_int
                                                }) != 0
                                                {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + -(1 as libc::c_int) as idx_t
                                                        >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                                                } else {
                                                    -(1 as libc::c_int) as idx_t
                                                        / -(4 as libc::c_int) as libc::c_long
                                                }) <= -(1 as libc::c_int) as libc::c_long - insize)
                                                    as libc::c_int
                                            }
                                        } else {
                                            if (if (if ((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) as libc::c_long + 0 as libc::c_int as idx_t
                                            }) - 1 as libc::c_int as libc::c_long)
                                                < 0 as libc::c_int as libc::c_long
                                            {
                                                !(((((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t
                                                }) + 1 as libc::c_int as libc::c_long)
                                                    << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                    - 1 as libc::c_int as libc::c_long)
                                                    * 2 as libc::c_int as libc::c_long
                                                    + 1 as libc::c_int as libc::c_long)
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t
                                                }) + 0 as libc::c_int as libc::c_long
                                            }) < 0 as libc::c_int as libc::c_long
                                            {
                                                (((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) as libc::c_long + 0 as libc::c_int as idx_t)
                                                    < -(if ((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int
                                                        } else {
                                                            4 as libc::c_int
                                                        }) as libc::c_long + 0 as libc::c_int as idx_t
                                                    }) - 1 as libc::c_int as libc::c_long)
                                                        < 0 as libc::c_int as libc::c_long
                                                    {
                                                        ((((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) as libc::c_long + 0 as libc::c_int as idx_t
                                                        }) + 1 as libc::c_int as libc::c_long)
                                                            << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                            - 1 as libc::c_int as libc::c_long)
                                                            * 2 as libc::c_int as libc::c_long
                                                            + 1 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) as libc::c_long + 0 as libc::c_int as idx_t
                                                        }) - 1 as libc::c_int as libc::c_long
                                                    })) as libc::c_int
                                            } else {
                                                ((0 as libc::c_int as libc::c_long)
                                                    < (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t)
                                                    as libc::c_int
                                            }) != 0 && 4 as libc::c_int == -(1 as libc::c_int)
                                            {
                                                if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    insize
                                                }) - 1 as libc::c_int as libc::c_long)
                                                    < 0 as libc::c_int as libc::c_long
                                                {
                                                    ((0 as libc::c_int as libc::c_long)
                                                        < insize + 0 as libc::c_int as idx_t) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int as libc::c_long) < insize
                                                        && (-(1 as libc::c_int) as libc::c_long
                                                            - 0 as libc::c_int as idx_t)
                                                            < insize - 1 as libc::c_int as libc::c_long) as libc::c_int
                                                }
                                            } else {
                                                ((0 as libc::c_int as idx_t
                                                    / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
                                            }
                                        }
                                    } else {
                                        if 4 as libc::c_int == 0 as libc::c_int {
                                            0 as libc::c_int
                                        } else {
                                            if insize < 0 as libc::c_int as libc::c_long {
                                                if (if (if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        insize
                                                    }) + 0 as libc::c_int as idx_t
                                                }) - 1 as libc::c_int as libc::c_long)
                                                    < 0 as libc::c_int as libc::c_long
                                                {
                                                    !(((((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t
                                                    }) + 1 as libc::c_int as libc::c_long)
                                                        << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                        - 1 as libc::c_int as libc::c_long)
                                                        * 2 as libc::c_int as libc::c_long
                                                        + 1 as libc::c_int as libc::c_long)
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t
                                                    }) + 0 as libc::c_int as libc::c_long
                                                }) < 0 as libc::c_int as libc::c_long
                                                {
                                                    (((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        insize
                                                    }) + 0 as libc::c_int as idx_t)
                                                        < -(if ((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                insize
                                                            }) + 0 as libc::c_int as idx_t
                                                        }) - 1 as libc::c_int as libc::c_long)
                                                            < 0 as libc::c_int as libc::c_long
                                                        {
                                                            ((((if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                (if 1 as libc::c_int != 0 {
                                                                    0 as libc::c_int as libc::c_long
                                                                } else {
                                                                    insize
                                                                }) + 0 as libc::c_int as idx_t
                                                            }) + 1 as libc::c_int as libc::c_long)
                                                                << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                                - 1 as libc::c_int as libc::c_long)
                                                                * 2 as libc::c_int as libc::c_long
                                                                + 1 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                (if 1 as libc::c_int != 0 {
                                                                    0 as libc::c_int as libc::c_long
                                                                } else {
                                                                    insize
                                                                }) + 0 as libc::c_int as idx_t
                                                            }) - 1 as libc::c_int as libc::c_long
                                                        })) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int as libc::c_long)
                                                        < (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t) as libc::c_int
                                                }) != 0 && insize == -(1 as libc::c_int) as libc::c_long
                                                {
                                                    if ((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) - 1 as libc::c_int) < 0 as libc::c_int
                                                    {
                                                        ((0 as libc::c_int as libc::c_long)
                                                            < 4 as libc::c_int as libc::c_long
                                                                + 0 as libc::c_int as idx_t) as libc::c_int
                                                    } else {
                                                        ((-(1 as libc::c_int) as libc::c_long
                                                            - 0 as libc::c_int as idx_t)
                                                            < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
                                                            as libc::c_int
                                                    }
                                                } else {
                                                    (0 as libc::c_int as idx_t / insize
                                                        < 4 as libc::c_int as libc::c_long) as libc::c_int
                                                }
                                            } else {
                                                ((-(1 as libc::c_int) as idx_t
                                                    / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
                                            }
                                        }
                                    }) != 0
                                {
                                    let (fresh33, _fresh34) = insize
                                        .overflowing_mul((4 as libc::c_int).into());
                                    *(&mut bufsize as *mut idx_t) = fresh33;
                                    1 as libc::c_int
                                } else {
                                    let (fresh35, fresh36) = insize
                                        .overflowing_mul((4 as libc::c_int).into());
                                    *(&mut bufsize as *mut idx_t) = fresh35;
                                    fresh36 as libc::c_int
                                }) != 0
                                    || {
                                        let (fresh37, fresh38) = bufsize.overflowing_add(outsize);
                                        *(&mut bufsize as *mut idx_t) = fresh37;
                                        fresh38 as libc::c_int != 0
                                    }
                                    || {
                                        let (fresh39, fresh40) = bufsize
                                            .overflowing_add((20 as libc::c_int - 1 as libc::c_int).into());
                                        *(&mut bufsize as *mut idx_t) = fresh39;
                                        fresh40 as libc::c_int != 0
                                    }
                                {
                                    xalloc_die();
                                }
                                let mut outbuf: *mut libc::c_char = xalignalloc(
                                    page_size,
                                    bufsize,
                                ) as *mut libc::c_char;
                                ok = (ok as libc::c_int
                                    & cat(
                                        inbuf,
                                        insize,
                                        outbuf,
                                        outsize,
                                        show_nonprinting,
                                        show_tabs,
                                        number,
                                        number_nonblank,
                                        show_ends,
                                        squeeze_blank,
                                    ) as libc::c_int) != 0;
                                alignfree(outbuf as *mut libc::c_void);
                            }
                            alignfree(inbuf as *mut libc::c_void);
                        }
                    }
Here is a piece of a function:
if fstat(input_desc, &mut stat_buf) < 0 as libc::c_int {
                    <chunk 0>if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    ok = 0 as libc::c_int != 0;
                } else {
                    <chunk 17>
                }
                if !reading_stdin && close(input_desc) < 0 as libc::c_int {
                    if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    ok = 0 as libc::c_int != 0;
                }
Here is a piece of a function:
if argind < argc {
            infile = *argv.offset(argind as isize);
        }
        let mut reading_stdin: bool = strcmp(
            infile,
            b"-\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int;
        if reading_stdin {
            have_read_stdin = 1 as libc::c_int != 0;
            input_desc = 0 as libc::c_int;
            if file_open_mode & 0 as libc::c_int != 0 {
                xset_binary_mode(0 as libc::c_int, 0 as libc::c_int);
            }
            current_block = 13321564401369230990;
        } else {
            input_desc = open(infile, file_open_mode);
            if input_desc < 0 as libc::c_int {
                if 0 != 0 {
                    error(
                        0 as libc::c_int,
                        *__errno_location(),
                        b"%s\0" as *const u8 as *const libc::c_char,
                        quotearg_n_style_colon(
                            0 as libc::c_int,
                            shell_escape_quoting_style,
                            infile,
                        ),
                    );
                    if 0 as libc::c_int != 0 as libc::c_int {
                        unreachable!();
                    } else {};
                } else {
                    ({
                        let __errstatus: libc::c_int = 0 as libc::c_int;
                        error(
                            __errstatus,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if __errstatus != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                        
                    });
                    ({
                        let __errstatus: libc::c_int = 0 as libc::c_int;
                        error(
                            __errstatus,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if __errstatus != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                        
                    });
                };
                ok = 0 as libc::c_int != 0;
                current_block = 4567019141635105728;
            } else {
                current_block = 13321564401369230990;
            }
        }
        match current_block {
            13321564401369230990 => {
                <chunk 18>if fstat(input_desc, &mut stat_buf) < 0 as libc::c_int {
                    if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    ok = 0 as libc::c_int != 0;
                } else {
                    insize = io_blksize(&mut stat_buf);
                    fdadvise(
                        input_desc,
                        0 as libc::c_int as off_t,
                        0 as libc::c_int as off_t,
                        FADVISE_SEQUENTIAL,
                    );
                    if stat_buf.st_dev == out_dev && stat_buf.st_ino == out_ino {
                        if out_flags < -(1 as libc::c_int) {
                            out_flags = rpl_fcntl(1 as libc::c_int, 3 as libc::c_int);
                        }
                        let mut exhausting: bool = 0 as libc::c_int <= out_flags
                            && out_flags & 0o2000 as libc::c_int != 0;
                        if !exhausting {
                            let mut in_pos: off_t = lseek(
                                input_desc,
                                0 as libc::c_int as __off_t,
                                1 as libc::c_int,
                            );
                            if 0 as libc::c_int as libc::c_long <= in_pos {
                                exhausting = in_pos
                                    < lseek(
                                        1 as libc::c_int,
                                        0 as libc::c_int as __off_t,
                                        1 as libc::c_int,
                                    );
                            }
                        }
                        if exhausting {
                            if 0 != 0 {
                                error(
                                    0 as libc::c_int,
                                    0 as libc::c_int,
                                    gettext(
                                        b"%s: input file is output file\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_n_style_colon(
                                        0 as libc::c_int,
                                        shell_escape_quoting_style,
                                        infile,
                                    ),
                                );
                                if 0 as libc::c_int != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                            } else {
                                ({
                                    let __errstatus: libc::c_int = 0 as libc::c_int;
                                    error(
                                        __errstatus,
                                        0 as libc::c_int,
                                        gettext(
                                            b"%s: input file is output file\0" as *const u8
                                                as *const libc::c_char,
                                        ),
                                        quotearg_n_style_colon(
                                            0 as libc::c_int,
                                            shell_escape_quoting_style,
                                            infile,
                                        ),
                                    );
                                    if __errstatus != 0 as libc::c_int {
                                        unreachable!();
                                    } else {};
                                    
                                });
                                ({
                                    let __errstatus: libc::c_int = 0 as libc::c_int;
                                    error(
                                        __errstatus,
                                        0 as libc::c_int,
                                        gettext(
                                            b"%s: input file is output file\0" as *const u8
                                                as *const libc::c_char,
                                        ),
                                        quotearg_n_style_colon(
                                            0 as libc::c_int,
                                            shell_escape_quoting_style,
                                            infile,
                                        ),
                                    );
                                    if __errstatus != 0 as libc::c_int {
                                        unreachable!();
                                    } else {};
                                    
                                });
                            };
                            ok = 0 as libc::c_int != 0;
                            current_block = 7239751344758050955;
                        } else {
                            current_block = 5372832139739605200;
                        }
                    } else {
                        current_block = 5372832139739605200;
                    }
                    match current_block {
                        7239751344758050955 => {}
                        _ => {
                            inbuf = 0 as *mut libc::c_char;
                            if !(number as libc::c_int != 0
                                || show_ends as libc::c_int != 0
                                || show_nonprinting as libc::c_int != 0
                                || show_tabs as libc::c_int != 0
                                || squeeze_blank as libc::c_int != 0)
                            {
                                let mut copy_cat_status: libc::c_int = if out_isreg
                                    as libc::c_int != 0
                                    && stat_buf.st_mode
                                        & 0o170000 as libc::c_int as libc::c_uint
                                        == 0o100000 as libc::c_int as libc::c_uint
                                {
                                    copy_cat()
                                } else {
                                    0 as libc::c_int
                                };
                                if copy_cat_status != 0 as libc::c_int {
                                    inbuf = 0 as *mut libc::c_char;
                                    ok = (ok as libc::c_int
                                        & ((0 as libc::c_int) < copy_cat_status) as libc::c_int) != 0;
                                } else {
                                    insize = if insize > outsize { insize } else { outsize };
                                    inbuf = xalignalloc(page_size, insize) as *mut libc::c_char;
                                    ok = (ok as libc::c_int
                                        & simple_cat(inbuf, insize) as libc::c_int) != 0;
                                }
                            } else {
                                inbuf = xalignalloc(
                                    page_size,
                                    insize + 1 as libc::c_int as libc::c_long,
                                ) as *mut libc::c_char;
                                let mut bufsize: idx_t = 0;
                                if (if (0 as libc::c_int as idx_t)
                                    < -(1 as libc::c_int) as idx_t
                                    && ((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        insize
                                    }) - 1 as libc::c_int as libc::c_long)
                                        < 0 as libc::c_int as libc::c_long
                                    && ((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int
                                    } else {
                                        4 as libc::c_int
                                    }) - 1 as libc::c_int) < 0 as libc::c_int
                                    && (if (4 as libc::c_int) < 0 as libc::c_int {
                                        if insize < 0 as libc::c_int as libc::c_long {
                                            if ((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    -(1 as libc::c_int) as idx_t
                                                }) + 4 as libc::c_int as libc::c_long
                                            }) - 1 as libc::c_int as libc::c_long)
                                                < 0 as libc::c_int as libc::c_long
                                            {
                                                (insize
                                                    < -(1 as libc::c_int) as idx_t
                                                        / 4 as libc::c_int as libc::c_long) as libc::c_int
                                            } else {
                                                ((if (if (if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) - 1 as libc::c_int) < 0 as libc::c_int
                                                {
                                                    !(((((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) + 1 as libc::c_int)
                                                        << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                        - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) + 0 as libc::c_int
                                                }) < 0 as libc::c_int
                                                {
                                                    ((4 as libc::c_int)
                                                        < -(if ((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int
                                                        } else {
                                                            4 as libc::c_int
                                                        }) - 1 as libc::c_int) < 0 as libc::c_int
                                                        {
                                                            ((((if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) + 1 as libc::c_int)
                                                                << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                                - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) - 1 as libc::c_int
                                                        })) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int) < 4 as libc::c_int) as libc::c_int
                                                }) != 0
                                                {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + -(1 as libc::c_int) as idx_t
                                                        >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                                                } else {
                                                    -(1 as libc::c_int) as idx_t
                                                        / -(4 as libc::c_int) as libc::c_long
                                                }) <= -(1 as libc::c_int) as libc::c_long - insize)
                                                    as libc::c_int
                                            }
                                        } else {
                                            if (if (if ((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) as libc::c_long + 0 as libc::c_int as idx_t
                                            }) - 1 as libc::c_int as libc::c_long)
                                                < 0 as libc::c_int as libc::c_long
                                            {
                                                !(((((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t
                                                }) + 1 as libc::c_int as libc::c_long)
                                                    << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                    - 1 as libc::c_int as libc::c_long)
                                                    * 2 as libc::c_int as libc::c_long
                                                    + 1 as libc::c_int as libc::c_long)
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t
                                                }) + 0 as libc::c_int as libc::c_long
                                            }) < 0 as libc::c_int as libc::c_long
                                            {
                                                (((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) as libc::c_long + 0 as libc::c_int as idx_t)
                                                    < -(if ((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int
                                                        } else {
                                                            4 as libc::c_int
                                                        }) as libc::c_long + 0 as libc::c_int as idx_t
                                                    }) - 1 as libc::c_int as libc::c_long)
                                                        < 0 as libc::c_int as libc::c_long
                                                    {
                                                        ((((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) as libc::c_long + 0 as libc::c_int as idx_t
                                                        }) + 1 as libc::c_int as libc::c_long)
                                                            << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                            - 1 as libc::c_int as libc::c_long)
                                                            * 2 as libc::c_int as libc::c_long
                                                            + 1 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) as libc::c_long + 0 as libc::c_int as idx_t
                                                        }) - 1 as libc::c_int as libc::c_long
                                                    })) as libc::c_int
                                            } else {
                                                ((0 as libc::c_int as libc::c_long)
                                                    < (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t)
                                                    as libc::c_int
                                            }) != 0 && 4 as libc::c_int == -(1 as libc::c_int)
                                            {
                                                if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    insize
                                                }) - 1 as libc::c_int as libc::c_long)
                                                    < 0 as libc::c_int as libc::c_long
                                                {
                                                    ((0 as libc::c_int as libc::c_long)
                                                        < insize + 0 as libc::c_int as idx_t) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int as libc::c_long) < insize
                                                        && (-(1 as libc::c_int) as libc::c_long
                                                            - 0 as libc::c_int as idx_t)
                                                            < insize - 1 as libc::c_int as libc::c_long) as libc::c_int
                                                }
                                            } else {
                                                ((0 as libc::c_int as idx_t
                                                    / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
                                            }
                                        }
                                    } else {
                                        if 4 as libc::c_int == 0 as libc::c_int {
                                            0 as libc::c_int
                                        } else {
                                            if insize < 0 as libc::c_int as libc::c_long {
                                                if (if (if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        insize
                                                    }) + 0 as libc::c_int as idx_t
                                                }) - 1 as libc::c_int as libc::c_long)
                                                    < 0 as libc::c_int as libc::c_long
                                                {
                                                    !(((((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t
                                                    }) + 1 as libc::c_int as libc::c_long)
                                                        << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                        - 1 as libc::c_int as libc::c_long)
                                                        * 2 as libc::c_int as libc::c_long
                                                        + 1 as libc::c_int as libc::c_long)
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t
                                                    }) + 0 as libc::c_int as libc::c_long
                                                }) < 0 as libc::c_int as libc::c_long
                                                {
                                                    (((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        insize
                                                    }) + 0 as libc::c_int as idx_t)
                                                        < -(if ((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                insize
                                                            }) + 0 as libc::c_int as idx_t
                                                        }) - 1 as libc::c_int as libc::c_long)
                                                            < 0 as libc::c_int as libc::c_long
                                                        {
                                                            ((((if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                (if 1 as libc::c_int != 0 {
                                                                    0 as libc::c_int as libc::c_long
                                                                } else {
                                                                    insize
                                                                }) + 0 as libc::c_int as idx_t
                                                            }) + 1 as libc::c_int as libc::c_long)
                                                                << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                                - 1 as libc::c_int as libc::c_long)
                                                                * 2 as libc::c_int as libc::c_long
                                                                + 1 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                (if 1 as libc::c_int != 0 {
                                                                    0 as libc::c_int as libc::c_long
                                                                } else {
                                                                    insize
                                                                }) + 0 as libc::c_int as idx_t
                                                            }) - 1 as libc::c_int as libc::c_long
                                                        })) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int as libc::c_long)
                                                        < (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t) as libc::c_int
                                                }) != 0 && insize == -(1 as libc::c_int) as libc::c_long
                                                {
                                                    if ((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) - 1 as libc::c_int) < 0 as libc::c_int
                                                    {
                                                        ((0 as libc::c_int as libc::c_long)
                                                            < 4 as libc::c_int as libc::c_long
                                                                + 0 as libc::c_int as idx_t) as libc::c_int
                                                    } else {
                                                        ((-(1 as libc::c_int) as libc::c_long
                                                            - 0 as libc::c_int as idx_t)
                                                            < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
                                                            as libc::c_int
                                                    }
                                                } else {
                                                    (0 as libc::c_int as idx_t / insize
                                                        < 4 as libc::c_int as libc::c_long) as libc::c_int
                                                }
                                            } else {
                                                ((-(1 as libc::c_int) as idx_t
                                                    / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
                                            }
                                        }
                                    }) != 0
                                {
                                    let (fresh33, _fresh34) = insize
                                        .overflowing_mul((4 as libc::c_int).into());
                                    *(&mut bufsize as *mut idx_t) = fresh33;
                                    1 as libc::c_int
                                } else {
                                    let (fresh35, fresh36) = insize
                                        .overflowing_mul((4 as libc::c_int).into());
                                    *(&mut bufsize as *mut idx_t) = fresh35;
                                    fresh36 as libc::c_int
                                }) != 0
                                    || {
                                        let (fresh37, fresh38) = bufsize.overflowing_add(outsize);
                                        *(&mut bufsize as *mut idx_t) = fresh37;
                                        fresh38 as libc::c_int != 0
                                    }
                                    || {
                                        let (fresh39, fresh40) = bufsize
                                            .overflowing_add((20 as libc::c_int - 1 as libc::c_int).into());
                                        *(&mut bufsize as *mut idx_t) = fresh39;
                                        fresh40 as libc::c_int != 0
                                    }
                                {
                                    xalloc_die();
                                }
                                let mut outbuf: *mut libc::c_char = xalignalloc(
                                    page_size,
                                    bufsize,
                                ) as *mut libc::c_char;
                                ok = (ok as libc::c_int
                                    & cat(
                                        inbuf,
                                        insize,
                                        outbuf,
                                        outsize,
                                        show_nonprinting,
                                        show_tabs,
                                        number,
                                        number_nonblank,
                                        show_ends,
                                        squeeze_blank,
                                    ) as libc::c_int) != 0;
                                alignfree(outbuf as *mut libc::c_void);
                            }
                            alignfree(inbuf as *mut libc::c_void);
                        }
                    }
                }
                if !reading_stdin && close(input_desc) < 0 as libc::c_int {
                    if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    ok = 0 as libc::c_int != 0;
                }
            }
            _ => {}
        }
        argind += 1;
        if !(argind < argc) {
            break;
        }
Here is a piece of a function:
let mut insize: idx_t = 0;
    let mut inbuf: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut current_block: u64;
    let mut have_read_stdin: bool = 0 as libc::c_int != 0;
    let mut stat_buf: stat = stat {
        st_dev: 0,
        st_ino: 0,
        st_mode: 0,
        st_nlink: 0,
        st_uid: 0,
        st_gid: 0,
        st_rdev: 0,
        __pad1: 0,
        st_size: 0,
        st_blksize: 0,
        __pad2: 0,
        st_blocks: 0,
        st_atim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_mtim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_ctim: timespec { tv_sec: 0, tv_nsec: 0 },
        __glibc_reserved: [0; 2],
    };
    let mut number: bool = 0 as libc::c_int != 0;
    let mut number_nonblank: bool = 0 as libc::c_int != 0;
    let mut squeeze_blank: bool = 0 as libc::c_int != 0;
    let mut show_ends: bool = 0 as libc::c_int != 0;
    let mut show_nonprinting: bool = 0 as libc::c_int != 0;
    let mut show_tabs: bool = 0 as libc::c_int != 0;
    let mut file_open_mode: libc::c_int = 0 as libc::c_int;
    static mut long_options: [option; 10] = [
        {
            let mut init = option {
                name: b"number-nonblank\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *const libc::c_int as *mut libc::c_int,
                val: 'b' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"number\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *const libc::c_int as *mut libc::c_int,
                val: 'n' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"squeeze-blank\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *const libc::c_int as *mut libc::c_int,
                val: 's' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"show-nonprinting\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *const libc::c_int as *mut libc::c_int,
                val: 'v' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"show-ends\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *const libc::c_int as *mut libc::c_int,
                val: 'E' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"show-tabs\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *const libc::c_int as *mut libc::c_int,
                val: 'T' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"show-all\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *const libc::c_int as *mut libc::c_int,
                val: 'A' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"help\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *const libc::c_int as *mut libc::c_int,
                val: GETOPT_HELP_CHAR as libc::c_int,
            };
            init
        },
        {
            let mut init = option {
                name: b"version\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *const libc::c_int as *mut libc::c_int,
                val: GETOPT_VERSION_CHAR as libc::c_int,
            };
            init
        },
        {
            let mut init = option {
                name: 0 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *const libc::c_int as *mut libc::c_int,
                val: 0 as libc::c_int,
            };
            init
        },
    ];
    set_program_name(*argv.offset(0 as libc::c_int as isize));
    setlocale(6 as libc::c_int, b"\0" as *const u8 as *const libc::c_char);
    bindtextdomain(
        b"coreutils\0" as *const u8 as *const libc::c_char,
        b"/usr/local/share/locale\0" as *const u8 as *const libc::c_char,
    );
    textdomain(b"coreutils\0" as *const u8 as *const libc::c_char);
    atexit(Some(close_stdout as unsafe extern "C" fn() -> ()));
    let mut c: libc::c_int = 0;
Here is a piece of a function:
loop {
        c = getopt_long(
            argc,
            argv,
            b"benstuvAET\0" as *const u8 as *const libc::c_char,
            long_options.as_ptr(),
            0 as *mut libc::c_int,
        );
        if !(c != -(1 as libc::c_int)) {
            break;
        }
        match c {
            98 => {
                number = 1 as libc::c_int != 0;
                number_nonblank = 1 as libc::c_int != 0;
            }
            101 => {
                show_ends = 1 as libc::c_int != 0;
                show_nonprinting = 1 as libc::c_int != 0;
            }
            110 => {
                number = 1 as libc::c_int != 0;
            }
            115 => {
                squeeze_blank = 1 as libc::c_int != 0;
            }
            116 => {
                show_tabs = 1 as libc::c_int != 0;
                show_nonprinting = 1 as libc::c_int != 0;
            }
            117 => {}
            118 => {
                show_nonprinting = 1 as libc::c_int != 0;
            }
            65 => {
                show_nonprinting = 1 as libc::c_int != 0;
                show_ends = 1 as libc::c_int != 0;
                show_tabs = 1 as libc::c_int != 0;
            }
            69 => {
                show_ends = 1 as libc::c_int != 0;
            }
            84 => {
                show_tabs = 1 as libc::c_int != 0;
            }
            -2 => {
                usage(0 as libc::c_int);
            }
            -3 => {
                version_etc(
                    stdout,
                    b"cat\0" as *const u8 as *const libc::c_char,
                    b"GNU coreutils\0" as *const u8 as *const libc::c_char,
                    Version,
                    proper_name_lite(
                        b"Torbjorn Granlund\0" as *const u8 as *const libc::c_char,
                        b"Torbj\xC3\xB6rn Granlund\0" as *const u8 as *const libc::c_char,
                    ),
                    proper_name_lite(
                        b"Richard M. Stallman\0" as *const u8 as *const libc::c_char,
                        b"Richard M. Stallman\0" as *const u8 as *const libc::c_char,
                    ),
                    0 as *mut libc::c_void as *mut libc::c_char,
                );
                exit(0 as libc::c_int);
            }
            _ => {
                usage(1 as libc::c_int);
            }
        }
    }
    if fstat(1 as libc::c_int, &mut stat_buf) < 0 as libc::c_int {
        if 0 != 0 {
            error(
                1 as libc::c_int,
                *__errno_location(),
                gettext(b"standard output\0" as *const u8 as *const libc::c_char),
            );
            if 1 as libc::c_int != 0 as libc::c_int {
                unreachable!();
            } else {};
        } else {
            ({
                let __errstatus: libc::c_int = 1 as libc::c_int;
                error(
                    __errstatus,
                    *__errno_location(),
                    gettext(b"standard output\0" as *const u8 as *const libc::c_char),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
            ({
                let __errstatus: libc::c_int = 1 as libc::c_int;
                error(
                    __errstatus,
                    *__errno_location(),
                    gettext(b"standard output\0" as *const u8 as *const libc::c_char),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
        };
    }
    let mut outsize: idx_t = io_blksize(&mut stat_buf);
    let mut out_dev: dev_t = stat_buf.st_dev;
    let mut out_ino: ino_t = stat_buf.st_ino;
    let mut out_flags: libc::c_int = -(2 as libc::c_int);
    let mut out_isreg: bool = (stat_buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
        == 0o100000 as libc::c_int as libc::c_uint) as libc::c_int != 0 as libc::c_int;
    if !(number as libc::c_int != 0 || show_ends as libc::c_int != 0
        || squeeze_blank as libc::c_int != 0)
    {
        file_open_mode |= 0 as libc::c_int;
        xset_binary_mode(1 as libc::c_int, 0 as libc::c_int);
    }
    infile = b"-\0" as *const u8 as *const libc::c_char;
    let mut argind: libc::c_int = optind;
    let mut ok: bool = 1 as libc::c_int != 0;
    let mut page_size: idx_t = getpagesize() as idx_t;
    loop {
        <chunk 19>if argind < argc {
            infile = *argv.offset(argind as isize);
        }
        let mut reading_stdin: bool = strcmp(
            infile,
            b"-\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int;
        if reading_stdin {
            have_read_stdin = 1 as libc::c_int != 0;
            input_desc = 0 as libc::c_int;
            if file_open_mode & 0 as libc::c_int != 0 {
                xset_binary_mode(0 as libc::c_int, 0 as libc::c_int);
            }
            current_block = 13321564401369230990;
        } else {
            input_desc = open(infile, file_open_mode);
            if input_desc < 0 as libc::c_int {
                if 0 != 0 {
                    error(
                        0 as libc::c_int,
                        *__errno_location(),
                        b"%s\0" as *const u8 as *const libc::c_char,
                        quotearg_n_style_colon(
                            0 as libc::c_int,
                            shell_escape_quoting_style,
                            infile,
                        ),
                    );
                    if 0 as libc::c_int != 0 as libc::c_int {
                        unreachable!();
                    } else {};
                } else {
                    ({
                        let __errstatus: libc::c_int = 0 as libc::c_int;
                        error(
                            __errstatus,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if __errstatus != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                        
                    });
                    ({
                        let __errstatus: libc::c_int = 0 as libc::c_int;
                        error(
                            __errstatus,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if __errstatus != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                        
                    });
                };
                ok = 0 as libc::c_int != 0;
                current_block = 4567019141635105728;
            } else {
                current_block = 13321564401369230990;
            }
        }
        match current_block {
            13321564401369230990 => {
                if fstat(input_desc, &mut stat_buf) < 0 as libc::c_int {
                    if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    ok = 0 as libc::c_int != 0;
                } else {
                    insize = io_blksize(&mut stat_buf);
                    fdadvise(
                        input_desc,
                        0 as libc::c_int as off_t,
                        0 as libc::c_int as off_t,
                        FADVISE_SEQUENTIAL,
                    );
                    if stat_buf.st_dev == out_dev && stat_buf.st_ino == out_ino {
                        if out_flags < -(1 as libc::c_int) {
                            out_flags = rpl_fcntl(1 as libc::c_int, 3 as libc::c_int);
                        }
                        let mut exhausting: bool = 0 as libc::c_int <= out_flags
                            && out_flags & 0o2000 as libc::c_int != 0;
                        if !exhausting {
                            let mut in_pos: off_t = lseek(
                                input_desc,
                                0 as libc::c_int as __off_t,
                                1 as libc::c_int,
                            );
                            if 0 as libc::c_int as libc::c_long <= in_pos {
                                exhausting = in_pos
                                    < lseek(
                                        1 as libc::c_int,
                                        0 as libc::c_int as __off_t,
                                        1 as libc::c_int,
                                    );
                            }
                        }
                        if exhausting {
                            if 0 != 0 {
                                error(
                                    0 as libc::c_int,
                                    0 as libc::c_int,
                                    gettext(
                                        b"%s: input file is output file\0" as *const u8
                                            as *const libc::c_char,
                                    ),
                                    quotearg_n_style_colon(
                                        0 as libc::c_int,
                                        shell_escape_quoting_style,
                                        infile,
                                    ),
                                );
                                if 0 as libc::c_int != 0 as libc::c_int {
                                    unreachable!();
                                } else {};
                            } else {
                                ({
                                    let __errstatus: libc::c_int = 0 as libc::c_int;
                                    error(
                                        __errstatus,
                                        0 as libc::c_int,
                                        gettext(
                                            b"%s: input file is output file\0" as *const u8
                                                as *const libc::c_char,
                                        ),
                                        quotearg_n_style_colon(
                                            0 as libc::c_int,
                                            shell_escape_quoting_style,
                                            infile,
                                        ),
                                    );
                                    if __errstatus != 0 as libc::c_int {
                                        unreachable!();
                                    } else {};
                                    
                                });
                                ({
                                    let __errstatus: libc::c_int = 0 as libc::c_int;
                                    error(
                                        __errstatus,
                                        0 as libc::c_int,
                                        gettext(
                                            b"%s: input file is output file\0" as *const u8
                                                as *const libc::c_char,
                                        ),
                                        quotearg_n_style_colon(
                                            0 as libc::c_int,
                                            shell_escape_quoting_style,
                                            infile,
                                        ),
                                    );
                                    if __errstatus != 0 as libc::c_int {
                                        unreachable!();
                                    } else {};
                                    
                                });
                            };
                            ok = 0 as libc::c_int != 0;
                            current_block = 7239751344758050955;
                        } else {
                            current_block = 5372832139739605200;
                        }
                    } else {
                        current_block = 5372832139739605200;
                    }
                    match current_block {
                        7239751344758050955 => {}
                        _ => {
                            inbuf = 0 as *mut libc::c_char;
                            if !(number as libc::c_int != 0
                                || show_ends as libc::c_int != 0
                                || show_nonprinting as libc::c_int != 0
                                || show_tabs as libc::c_int != 0
                                || squeeze_blank as libc::c_int != 0)
                            {
                                let mut copy_cat_status: libc::c_int = if out_isreg
                                    as libc::c_int != 0
                                    && stat_buf.st_mode
                                        & 0o170000 as libc::c_int as libc::c_uint
                                        == 0o100000 as libc::c_int as libc::c_uint
                                {
                                    copy_cat()
                                } else {
                                    0 as libc::c_int
                                };
                                if copy_cat_status != 0 as libc::c_int {
                                    inbuf = 0 as *mut libc::c_char;
                                    ok = (ok as libc::c_int
                                        & ((0 as libc::c_int) < copy_cat_status) as libc::c_int) != 0;
                                } else {
                                    insize = if insize > outsize { insize } else { outsize };
                                    inbuf = xalignalloc(page_size, insize) as *mut libc::c_char;
                                    ok = (ok as libc::c_int
                                        & simple_cat(inbuf, insize) as libc::c_int) != 0;
                                }
                            } else {
                                inbuf = xalignalloc(
                                    page_size,
                                    insize + 1 as libc::c_int as libc::c_long,
                                ) as *mut libc::c_char;
                                let mut bufsize: idx_t = 0;
                                if (if (0 as libc::c_int as idx_t)
                                    < -(1 as libc::c_int) as idx_t
                                    && ((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int as libc::c_long
                                    } else {
                                        insize
                                    }) - 1 as libc::c_int as libc::c_long)
                                        < 0 as libc::c_int as libc::c_long
                                    && ((if 1 as libc::c_int != 0 {
                                        0 as libc::c_int
                                    } else {
                                        4 as libc::c_int
                                    }) - 1 as libc::c_int) < 0 as libc::c_int
                                    && (if (4 as libc::c_int) < 0 as libc::c_int {
                                        if insize < 0 as libc::c_int as libc::c_long {
                                            if ((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    -(1 as libc::c_int) as idx_t
                                                }) + 4 as libc::c_int as libc::c_long
                                            }) - 1 as libc::c_int as libc::c_long)
                                                < 0 as libc::c_int as libc::c_long
                                            {
                                                (insize
                                                    < -(1 as libc::c_int) as idx_t
                                                        / 4 as libc::c_int as libc::c_long) as libc::c_int
                                            } else {
                                                ((if (if (if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) - 1 as libc::c_int) < 0 as libc::c_int
                                                {
                                                    !(((((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) + 1 as libc::c_int)
                                                        << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                        - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) + 0 as libc::c_int
                                                }) < 0 as libc::c_int
                                                {
                                                    ((4 as libc::c_int)
                                                        < -(if ((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int
                                                        } else {
                                                            4 as libc::c_int
                                                        }) - 1 as libc::c_int) < 0 as libc::c_int
                                                        {
                                                            ((((if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) + 1 as libc::c_int)
                                                                << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                                - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) - 1 as libc::c_int
                                                        })) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int) < 4 as libc::c_int) as libc::c_int
                                                }) != 0
                                                {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + -(1 as libc::c_int) as idx_t
                                                        >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                                                } else {
                                                    -(1 as libc::c_int) as idx_t
                                                        / -(4 as libc::c_int) as libc::c_long
                                                }) <= -(1 as libc::c_int) as libc::c_long - insize)
                                                    as libc::c_int
                                            }
                                        } else {
                                            if (if (if ((if 1 as libc::c_int != 0 {
                                                0 as libc::c_int as libc::c_long
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) as libc::c_long + 0 as libc::c_int as idx_t
                                            }) - 1 as libc::c_int as libc::c_long)
                                                < 0 as libc::c_int as libc::c_long
                                            {
                                                !(((((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t
                                                }) + 1 as libc::c_int as libc::c_long)
                                                    << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                        .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                        .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                    - 1 as libc::c_int as libc::c_long)
                                                    * 2 as libc::c_int as libc::c_long
                                                    + 1 as libc::c_int as libc::c_long)
                                            } else {
                                                (if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t
                                                }) + 0 as libc::c_int as libc::c_long
                                            }) < 0 as libc::c_int as libc::c_long
                                            {
                                                (((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int
                                                } else {
                                                    4 as libc::c_int
                                                }) as libc::c_long + 0 as libc::c_int as idx_t)
                                                    < -(if ((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int
                                                        } else {
                                                            4 as libc::c_int
                                                        }) as libc::c_long + 0 as libc::c_int as idx_t
                                                    }) - 1 as libc::c_int as libc::c_long)
                                                        < 0 as libc::c_int as libc::c_long
                                                    {
                                                        ((((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) as libc::c_long + 0 as libc::c_int as idx_t
                                                        }) + 1 as libc::c_int as libc::c_long)
                                                            << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                                .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                            - 1 as libc::c_int as libc::c_long)
                                                            * 2 as libc::c_int as libc::c_long
                                                            + 1 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int
                                                            } else {
                                                                4 as libc::c_int
                                                            }) as libc::c_long + 0 as libc::c_int as idx_t
                                                        }) - 1 as libc::c_int as libc::c_long
                                                    })) as libc::c_int
                                            } else {
                                                ((0 as libc::c_int as libc::c_long)
                                                    < (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) as libc::c_long + 0 as libc::c_int as idx_t)
                                                    as libc::c_int
                                            }) != 0 && 4 as libc::c_int == -(1 as libc::c_int)
                                            {
                                                if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    insize
                                                }) - 1 as libc::c_int as libc::c_long)
                                                    < 0 as libc::c_int as libc::c_long
                                                {
                                                    ((0 as libc::c_int as libc::c_long)
                                                        < insize + 0 as libc::c_int as idx_t) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int as libc::c_long) < insize
                                                        && (-(1 as libc::c_int) as libc::c_long
                                                            - 0 as libc::c_int as idx_t)
                                                            < insize - 1 as libc::c_int as libc::c_long) as libc::c_int
                                                }
                                            } else {
                                                ((0 as libc::c_int as idx_t
                                                    / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
                                            }
                                        }
                                    } else {
                                        if 4 as libc::c_int == 0 as libc::c_int {
                                            0 as libc::c_int
                                        } else {
                                            if insize < 0 as libc::c_int as libc::c_long {
                                                if (if (if ((if 1 as libc::c_int != 0 {
                                                    0 as libc::c_int as libc::c_long
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        insize
                                                    }) + 0 as libc::c_int as idx_t
                                                }) - 1 as libc::c_int as libc::c_long)
                                                    < 0 as libc::c_int as libc::c_long
                                                {
                                                    !(((((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t
                                                    }) + 1 as libc::c_int as libc::c_long)
                                                        << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                            .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                            .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                        - 1 as libc::c_int as libc::c_long)
                                                        * 2 as libc::c_int as libc::c_long
                                                        + 1 as libc::c_int as libc::c_long)
                                                } else {
                                                    (if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t
                                                    }) + 0 as libc::c_int as libc::c_long
                                                }) < 0 as libc::c_int as libc::c_long
                                                {
                                                    (((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int as libc::c_long
                                                    } else {
                                                        insize
                                                    }) + 0 as libc::c_int as idx_t)
                                                        < -(if ((if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                insize
                                                            }) + 0 as libc::c_int as idx_t
                                                        }) - 1 as libc::c_int as libc::c_long)
                                                            < 0 as libc::c_int as libc::c_long
                                                        {
                                                            ((((if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                (if 1 as libc::c_int != 0 {
                                                                    0 as libc::c_int as libc::c_long
                                                                } else {
                                                                    insize
                                                                }) + 0 as libc::c_int as idx_t
                                                            }) + 1 as libc::c_int as libc::c_long)
                                                                << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
                                                                    .wrapping_mul(8 as libc::c_int as libc::c_ulong)
                                                                    .wrapping_sub(2 as libc::c_int as libc::c_ulong))
                                                                - 1 as libc::c_int as libc::c_long)
                                                                * 2 as libc::c_int as libc::c_long
                                                                + 1 as libc::c_int as libc::c_long
                                                        } else {
                                                            (if 1 as libc::c_int != 0 {
                                                                0 as libc::c_int as libc::c_long
                                                            } else {
                                                                (if 1 as libc::c_int != 0 {
                                                                    0 as libc::c_int as libc::c_long
                                                                } else {
                                                                    insize
                                                                }) + 0 as libc::c_int as idx_t
                                                            }) - 1 as libc::c_int as libc::c_long
                                                        })) as libc::c_int
                                                } else {
                                                    ((0 as libc::c_int as libc::c_long)
                                                        < (if 1 as libc::c_int != 0 {
                                                            0 as libc::c_int as libc::c_long
                                                        } else {
                                                            insize
                                                        }) + 0 as libc::c_int as idx_t) as libc::c_int
                                                }) != 0 && insize == -(1 as libc::c_int) as libc::c_long
                                                {
                                                    if ((if 1 as libc::c_int != 0 {
                                                        0 as libc::c_int
                                                    } else {
                                                        4 as libc::c_int
                                                    }) - 1 as libc::c_int) < 0 as libc::c_int
                                                    {
                                                        ((0 as libc::c_int as libc::c_long)
                                                            < 4 as libc::c_int as libc::c_long
                                                                + 0 as libc::c_int as idx_t) as libc::c_int
                                                    } else {
                                                        ((-(1 as libc::c_int) as libc::c_long
                                                            - 0 as libc::c_int as idx_t)
                                                            < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
                                                            as libc::c_int
                                                    }
                                                } else {
                                                    (0 as libc::c_int as idx_t / insize
                                                        < 4 as libc::c_int as libc::c_long) as libc::c_int
                                                }
                                            } else {
                                                ((-(1 as libc::c_int) as idx_t
                                                    / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
                                            }
                                        }
                                    }) != 0
                                {
                                    let (fresh33, _fresh34) = insize
                                        .overflowing_mul((4 as libc::c_int).into());
                                    *(&mut bufsize as *mut idx_t) = fresh33;
                                    1 as libc::c_int
                                } else {
                                    let (fresh35, fresh36) = insize
                                        .overflowing_mul((4 as libc::c_int).into());
                                    *(&mut bufsize as *mut idx_t) = fresh35;
                                    fresh36 as libc::c_int
                                }) != 0
                                    || {
                                        let (fresh37, fresh38) = bufsize.overflowing_add(outsize);
                                        *(&mut bufsize as *mut idx_t) = fresh37;
                                        fresh38 as libc::c_int != 0
                                    }
                                    || {
                                        let (fresh39, fresh40) = bufsize
                                            .overflowing_add((20 as libc::c_int - 1 as libc::c_int).into());
                                        *(&mut bufsize as *mut idx_t) = fresh39;
                                        fresh40 as libc::c_int != 0
                                    }
                                {
                                    xalloc_die();
                                }
                                let mut outbuf: *mut libc::c_char = xalignalloc(
                                    page_size,
                                    bufsize,
                                ) as *mut libc::c_char;
                                ok = (ok as libc::c_int
                                    & cat(
                                        inbuf,
                                        insize,
                                        outbuf,
                                        outsize,
                                        show_nonprinting,
                                        show_tabs,
                                        number,
                                        number_nonblank,
                                        show_ends,
                                        squeeze_blank,
                                    ) as libc::c_int) != 0;
                                alignfree(outbuf as *mut libc::c_void);
                            }
                            alignfree(inbuf as *mut libc::c_void);
                        }
                    }
                }
                if !reading_stdin && close(input_desc) < 0 as libc::c_int {
                    if 0 != 0 {
                        error(
                            0 as libc::c_int,
                            *__errno_location(),
                            b"%s\0" as *const u8 as *const libc::c_char,
                            quotearg_n_style_colon(
                                0 as libc::c_int,
                                shell_escape_quoting_style,
                                infile,
                            ),
                        );
                        if 0 as libc::c_int != 0 as libc::c_int {
                            unreachable!();
                        } else {};
                    } else {
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                        ({
                            let __errstatus: libc::c_int = 0 as libc::c_int;
                            error(
                                __errstatus,
                                *__errno_location(),
                                b"%s\0" as *const u8 as *const libc::c_char,
                                quotearg_n_style_colon(
                                    0 as libc::c_int,
                                    shell_escape_quoting_style,
                                    infile,
                                ),
                            );
                            if __errstatus != 0 as libc::c_int {
                                unreachable!();
                            } else {};
                            
                        });
                    };
                    ok = 0 as libc::c_int != 0;
                }
            }
            _ => {}
        }
        argind += 1;
        if !(argind < argc) {
            break;
        }
    }
    if pending_cr {
        if full_write(
            1 as libc::c_int,
            b"\r\0" as *const u8 as *const libc::c_char as *const libc::c_void,
            1 as libc::c_int as size_t,
        ) != 1 as libc::c_int as libc::c_ulong
        {
            write_error();
        }
    }
Here is a piece of a function:
if have_read_stdin as libc::c_int != 0 && close(0 as libc::c_int) < 0 as libc::c_int
    {
        if 0 != 0 {
            error(
                1 as libc::c_int,
                *__errno_location(),
                gettext(b"closing standard input\0" as *const u8 as *const libc::c_char),
            );
            if 1 as libc::c_int != 0 as libc::c_int {
                unreachable!();
            } else {};
        } else {
            ({
                let __errstatus: libc::c_int = 1 as libc::c_int;
                error(
                    __errstatus,
                    *__errno_location(),
                    gettext(
                        b"closing standard input\0" as *const u8 as *const libc::c_char,
                    ),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
            ({
                let __errstatus: libc::c_int = 1 as libc::c_int;
                error(
                    __errstatus,
                    *__errno_location(),
                    gettext(
                        b"closing standard input\0" as *const u8 as *const libc::c_char,
                    ),
                );
                if __errstatus != 0 as libc::c_int {
                    unreachable!();
                } else {};
                
            });
        };
    }
    return if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int };
Target custom-build:build-script-build is not supported
